// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ssm"
	environment "github.com/telia-oss/aws-env"
)

type FakeSSMClient struct {
	AddTagsToResourceStub        func(*ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error)
	addTagsToResourceMutex       sync.RWMutex
	addTagsToResourceArgsForCall []struct {
		arg1 *ssm.AddTagsToResourceInput
	}
	addTagsToResourceReturns struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}
	addTagsToResourceReturnsOnCall map[int]struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}
	AddTagsToResourceRequestStub        func(*ssm.AddTagsToResourceInput) (*request.Request, *ssm.AddTagsToResourceOutput)
	addTagsToResourceRequestMutex       sync.RWMutex
	addTagsToResourceRequestArgsForCall []struct {
		arg1 *ssm.AddTagsToResourceInput
	}
	addTagsToResourceRequestReturns struct {
		result1 *request.Request
		result2 *ssm.AddTagsToResourceOutput
	}
	addTagsToResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.AddTagsToResourceOutput
	}
	AddTagsToResourceWithContextStub        func(context.Context, *ssm.AddTagsToResourceInput, ...request.Option) (*ssm.AddTagsToResourceOutput, error)
	addTagsToResourceWithContextMutex       sync.RWMutex
	addTagsToResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.AddTagsToResourceInput
		arg3 []request.Option
	}
	addTagsToResourceWithContextReturns struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}
	addTagsToResourceWithContextReturnsOnCall map[int]struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}
	AssociateOpsItemRelatedItemStub        func(*ssm.AssociateOpsItemRelatedItemInput) (*ssm.AssociateOpsItemRelatedItemOutput, error)
	associateOpsItemRelatedItemMutex       sync.RWMutex
	associateOpsItemRelatedItemArgsForCall []struct {
		arg1 *ssm.AssociateOpsItemRelatedItemInput
	}
	associateOpsItemRelatedItemReturns struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}
	associateOpsItemRelatedItemReturnsOnCall map[int]struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}
	AssociateOpsItemRelatedItemRequestStub        func(*ssm.AssociateOpsItemRelatedItemInput) (*request.Request, *ssm.AssociateOpsItemRelatedItemOutput)
	associateOpsItemRelatedItemRequestMutex       sync.RWMutex
	associateOpsItemRelatedItemRequestArgsForCall []struct {
		arg1 *ssm.AssociateOpsItemRelatedItemInput
	}
	associateOpsItemRelatedItemRequestReturns struct {
		result1 *request.Request
		result2 *ssm.AssociateOpsItemRelatedItemOutput
	}
	associateOpsItemRelatedItemRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.AssociateOpsItemRelatedItemOutput
	}
	AssociateOpsItemRelatedItemWithContextStub        func(context.Context, *ssm.AssociateOpsItemRelatedItemInput, ...request.Option) (*ssm.AssociateOpsItemRelatedItemOutput, error)
	associateOpsItemRelatedItemWithContextMutex       sync.RWMutex
	associateOpsItemRelatedItemWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.AssociateOpsItemRelatedItemInput
		arg3 []request.Option
	}
	associateOpsItemRelatedItemWithContextReturns struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}
	associateOpsItemRelatedItemWithContextReturnsOnCall map[int]struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}
	CancelCommandStub        func(*ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error)
	cancelCommandMutex       sync.RWMutex
	cancelCommandArgsForCall []struct {
		arg1 *ssm.CancelCommandInput
	}
	cancelCommandReturns struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}
	cancelCommandReturnsOnCall map[int]struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}
	CancelCommandRequestStub        func(*ssm.CancelCommandInput) (*request.Request, *ssm.CancelCommandOutput)
	cancelCommandRequestMutex       sync.RWMutex
	cancelCommandRequestArgsForCall []struct {
		arg1 *ssm.CancelCommandInput
	}
	cancelCommandRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CancelCommandOutput
	}
	cancelCommandRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CancelCommandOutput
	}
	CancelCommandWithContextStub        func(context.Context, *ssm.CancelCommandInput, ...request.Option) (*ssm.CancelCommandOutput, error)
	cancelCommandWithContextMutex       sync.RWMutex
	cancelCommandWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CancelCommandInput
		arg3 []request.Option
	}
	cancelCommandWithContextReturns struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}
	cancelCommandWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}
	CancelMaintenanceWindowExecutionStub        func(*ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error)
	cancelMaintenanceWindowExecutionMutex       sync.RWMutex
	cancelMaintenanceWindowExecutionArgsForCall []struct {
		arg1 *ssm.CancelMaintenanceWindowExecutionInput
	}
	cancelMaintenanceWindowExecutionReturns struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}
	cancelMaintenanceWindowExecutionReturnsOnCall map[int]struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}
	CancelMaintenanceWindowExecutionRequestStub        func(*ssm.CancelMaintenanceWindowExecutionInput) (*request.Request, *ssm.CancelMaintenanceWindowExecutionOutput)
	cancelMaintenanceWindowExecutionRequestMutex       sync.RWMutex
	cancelMaintenanceWindowExecutionRequestArgsForCall []struct {
		arg1 *ssm.CancelMaintenanceWindowExecutionInput
	}
	cancelMaintenanceWindowExecutionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CancelMaintenanceWindowExecutionOutput
	}
	cancelMaintenanceWindowExecutionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CancelMaintenanceWindowExecutionOutput
	}
	CancelMaintenanceWindowExecutionWithContextStub        func(context.Context, *ssm.CancelMaintenanceWindowExecutionInput, ...request.Option) (*ssm.CancelMaintenanceWindowExecutionOutput, error)
	cancelMaintenanceWindowExecutionWithContextMutex       sync.RWMutex
	cancelMaintenanceWindowExecutionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CancelMaintenanceWindowExecutionInput
		arg3 []request.Option
	}
	cancelMaintenanceWindowExecutionWithContextReturns struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}
	cancelMaintenanceWindowExecutionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}
	CreateActivationStub        func(*ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error)
	createActivationMutex       sync.RWMutex
	createActivationArgsForCall []struct {
		arg1 *ssm.CreateActivationInput
	}
	createActivationReturns struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}
	createActivationReturnsOnCall map[int]struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}
	CreateActivationRequestStub        func(*ssm.CreateActivationInput) (*request.Request, *ssm.CreateActivationOutput)
	createActivationRequestMutex       sync.RWMutex
	createActivationRequestArgsForCall []struct {
		arg1 *ssm.CreateActivationInput
	}
	createActivationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateActivationOutput
	}
	createActivationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateActivationOutput
	}
	CreateActivationWithContextStub        func(context.Context, *ssm.CreateActivationInput, ...request.Option) (*ssm.CreateActivationOutput, error)
	createActivationWithContextMutex       sync.RWMutex
	createActivationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateActivationInput
		arg3 []request.Option
	}
	createActivationWithContextReturns struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}
	createActivationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}
	CreateAssociationStub        func(*ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error)
	createAssociationMutex       sync.RWMutex
	createAssociationArgsForCall []struct {
		arg1 *ssm.CreateAssociationInput
	}
	createAssociationReturns struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}
	createAssociationReturnsOnCall map[int]struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}
	CreateAssociationBatchStub        func(*ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error)
	createAssociationBatchMutex       sync.RWMutex
	createAssociationBatchArgsForCall []struct {
		arg1 *ssm.CreateAssociationBatchInput
	}
	createAssociationBatchReturns struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}
	createAssociationBatchReturnsOnCall map[int]struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}
	CreateAssociationBatchRequestStub        func(*ssm.CreateAssociationBatchInput) (*request.Request, *ssm.CreateAssociationBatchOutput)
	createAssociationBatchRequestMutex       sync.RWMutex
	createAssociationBatchRequestArgsForCall []struct {
		arg1 *ssm.CreateAssociationBatchInput
	}
	createAssociationBatchRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationBatchOutput
	}
	createAssociationBatchRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationBatchOutput
	}
	CreateAssociationBatchWithContextStub        func(context.Context, *ssm.CreateAssociationBatchInput, ...request.Option) (*ssm.CreateAssociationBatchOutput, error)
	createAssociationBatchWithContextMutex       sync.RWMutex
	createAssociationBatchWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateAssociationBatchInput
		arg3 []request.Option
	}
	createAssociationBatchWithContextReturns struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}
	createAssociationBatchWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}
	CreateAssociationRequestStub        func(*ssm.CreateAssociationInput) (*request.Request, *ssm.CreateAssociationOutput)
	createAssociationRequestMutex       sync.RWMutex
	createAssociationRequestArgsForCall []struct {
		arg1 *ssm.CreateAssociationInput
	}
	createAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationOutput
	}
	createAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationOutput
	}
	CreateAssociationWithContextStub        func(context.Context, *ssm.CreateAssociationInput, ...request.Option) (*ssm.CreateAssociationOutput, error)
	createAssociationWithContextMutex       sync.RWMutex
	createAssociationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateAssociationInput
		arg3 []request.Option
	}
	createAssociationWithContextReturns struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}
	createAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}
	CreateDocumentStub        func(*ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error)
	createDocumentMutex       sync.RWMutex
	createDocumentArgsForCall []struct {
		arg1 *ssm.CreateDocumentInput
	}
	createDocumentReturns struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}
	createDocumentReturnsOnCall map[int]struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}
	CreateDocumentRequestStub        func(*ssm.CreateDocumentInput) (*request.Request, *ssm.CreateDocumentOutput)
	createDocumentRequestMutex       sync.RWMutex
	createDocumentRequestArgsForCall []struct {
		arg1 *ssm.CreateDocumentInput
	}
	createDocumentRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateDocumentOutput
	}
	createDocumentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateDocumentOutput
	}
	CreateDocumentWithContextStub        func(context.Context, *ssm.CreateDocumentInput, ...request.Option) (*ssm.CreateDocumentOutput, error)
	createDocumentWithContextMutex       sync.RWMutex
	createDocumentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateDocumentInput
		arg3 []request.Option
	}
	createDocumentWithContextReturns struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}
	createDocumentWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}
	CreateMaintenanceWindowStub        func(*ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error)
	createMaintenanceWindowMutex       sync.RWMutex
	createMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.CreateMaintenanceWindowInput
	}
	createMaintenanceWindowReturns struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}
	createMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}
	CreateMaintenanceWindowRequestStub        func(*ssm.CreateMaintenanceWindowInput) (*request.Request, *ssm.CreateMaintenanceWindowOutput)
	createMaintenanceWindowRequestMutex       sync.RWMutex
	createMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.CreateMaintenanceWindowInput
	}
	createMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateMaintenanceWindowOutput
	}
	createMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateMaintenanceWindowOutput
	}
	CreateMaintenanceWindowWithContextStub        func(context.Context, *ssm.CreateMaintenanceWindowInput, ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error)
	createMaintenanceWindowWithContextMutex       sync.RWMutex
	createMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateMaintenanceWindowInput
		arg3 []request.Option
	}
	createMaintenanceWindowWithContextReturns struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}
	createMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}
	CreateOpsItemStub        func(*ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error)
	createOpsItemMutex       sync.RWMutex
	createOpsItemArgsForCall []struct {
		arg1 *ssm.CreateOpsItemInput
	}
	createOpsItemReturns struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}
	createOpsItemReturnsOnCall map[int]struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}
	CreateOpsItemRequestStub        func(*ssm.CreateOpsItemInput) (*request.Request, *ssm.CreateOpsItemOutput)
	createOpsItemRequestMutex       sync.RWMutex
	createOpsItemRequestArgsForCall []struct {
		arg1 *ssm.CreateOpsItemInput
	}
	createOpsItemRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateOpsItemOutput
	}
	createOpsItemRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateOpsItemOutput
	}
	CreateOpsItemWithContextStub        func(context.Context, *ssm.CreateOpsItemInput, ...request.Option) (*ssm.CreateOpsItemOutput, error)
	createOpsItemWithContextMutex       sync.RWMutex
	createOpsItemWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateOpsItemInput
		arg3 []request.Option
	}
	createOpsItemWithContextReturns struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}
	createOpsItemWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}
	CreateOpsMetadataStub        func(*ssm.CreateOpsMetadataInput) (*ssm.CreateOpsMetadataOutput, error)
	createOpsMetadataMutex       sync.RWMutex
	createOpsMetadataArgsForCall []struct {
		arg1 *ssm.CreateOpsMetadataInput
	}
	createOpsMetadataReturns struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}
	createOpsMetadataReturnsOnCall map[int]struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}
	CreateOpsMetadataRequestStub        func(*ssm.CreateOpsMetadataInput) (*request.Request, *ssm.CreateOpsMetadataOutput)
	createOpsMetadataRequestMutex       sync.RWMutex
	createOpsMetadataRequestArgsForCall []struct {
		arg1 *ssm.CreateOpsMetadataInput
	}
	createOpsMetadataRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateOpsMetadataOutput
	}
	createOpsMetadataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateOpsMetadataOutput
	}
	CreateOpsMetadataWithContextStub        func(context.Context, *ssm.CreateOpsMetadataInput, ...request.Option) (*ssm.CreateOpsMetadataOutput, error)
	createOpsMetadataWithContextMutex       sync.RWMutex
	createOpsMetadataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateOpsMetadataInput
		arg3 []request.Option
	}
	createOpsMetadataWithContextReturns struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}
	createOpsMetadataWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}
	CreatePatchBaselineStub        func(*ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error)
	createPatchBaselineMutex       sync.RWMutex
	createPatchBaselineArgsForCall []struct {
		arg1 *ssm.CreatePatchBaselineInput
	}
	createPatchBaselineReturns struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}
	createPatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}
	CreatePatchBaselineRequestStub        func(*ssm.CreatePatchBaselineInput) (*request.Request, *ssm.CreatePatchBaselineOutput)
	createPatchBaselineRequestMutex       sync.RWMutex
	createPatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.CreatePatchBaselineInput
	}
	createPatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreatePatchBaselineOutput
	}
	createPatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreatePatchBaselineOutput
	}
	CreatePatchBaselineWithContextStub        func(context.Context, *ssm.CreatePatchBaselineInput, ...request.Option) (*ssm.CreatePatchBaselineOutput, error)
	createPatchBaselineWithContextMutex       sync.RWMutex
	createPatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreatePatchBaselineInput
		arg3 []request.Option
	}
	createPatchBaselineWithContextReturns struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}
	createPatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}
	CreateResourceDataSyncStub        func(*ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error)
	createResourceDataSyncMutex       sync.RWMutex
	createResourceDataSyncArgsForCall []struct {
		arg1 *ssm.CreateResourceDataSyncInput
	}
	createResourceDataSyncReturns struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}
	createResourceDataSyncReturnsOnCall map[int]struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}
	CreateResourceDataSyncRequestStub        func(*ssm.CreateResourceDataSyncInput) (*request.Request, *ssm.CreateResourceDataSyncOutput)
	createResourceDataSyncRequestMutex       sync.RWMutex
	createResourceDataSyncRequestArgsForCall []struct {
		arg1 *ssm.CreateResourceDataSyncInput
	}
	createResourceDataSyncRequestReturns struct {
		result1 *request.Request
		result2 *ssm.CreateResourceDataSyncOutput
	}
	createResourceDataSyncRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.CreateResourceDataSyncOutput
	}
	CreateResourceDataSyncWithContextStub        func(context.Context, *ssm.CreateResourceDataSyncInput, ...request.Option) (*ssm.CreateResourceDataSyncOutput, error)
	createResourceDataSyncWithContextMutex       sync.RWMutex
	createResourceDataSyncWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.CreateResourceDataSyncInput
		arg3 []request.Option
	}
	createResourceDataSyncWithContextReturns struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}
	createResourceDataSyncWithContextReturnsOnCall map[int]struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}
	DeleteActivationStub        func(*ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error)
	deleteActivationMutex       sync.RWMutex
	deleteActivationArgsForCall []struct {
		arg1 *ssm.DeleteActivationInput
	}
	deleteActivationReturns struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}
	deleteActivationReturnsOnCall map[int]struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}
	DeleteActivationRequestStub        func(*ssm.DeleteActivationInput) (*request.Request, *ssm.DeleteActivationOutput)
	deleteActivationRequestMutex       sync.RWMutex
	deleteActivationRequestArgsForCall []struct {
		arg1 *ssm.DeleteActivationInput
	}
	deleteActivationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteActivationOutput
	}
	deleteActivationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteActivationOutput
	}
	DeleteActivationWithContextStub        func(context.Context, *ssm.DeleteActivationInput, ...request.Option) (*ssm.DeleteActivationOutput, error)
	deleteActivationWithContextMutex       sync.RWMutex
	deleteActivationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteActivationInput
		arg3 []request.Option
	}
	deleteActivationWithContextReturns struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}
	deleteActivationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}
	DeleteAssociationStub        func(*ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error)
	deleteAssociationMutex       sync.RWMutex
	deleteAssociationArgsForCall []struct {
		arg1 *ssm.DeleteAssociationInput
	}
	deleteAssociationReturns struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}
	deleteAssociationReturnsOnCall map[int]struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}
	DeleteAssociationRequestStub        func(*ssm.DeleteAssociationInput) (*request.Request, *ssm.DeleteAssociationOutput)
	deleteAssociationRequestMutex       sync.RWMutex
	deleteAssociationRequestArgsForCall []struct {
		arg1 *ssm.DeleteAssociationInput
	}
	deleteAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteAssociationOutput
	}
	deleteAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteAssociationOutput
	}
	DeleteAssociationWithContextStub        func(context.Context, *ssm.DeleteAssociationInput, ...request.Option) (*ssm.DeleteAssociationOutput, error)
	deleteAssociationWithContextMutex       sync.RWMutex
	deleteAssociationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteAssociationInput
		arg3 []request.Option
	}
	deleteAssociationWithContextReturns struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}
	deleteAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}
	DeleteDocumentStub        func(*ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error)
	deleteDocumentMutex       sync.RWMutex
	deleteDocumentArgsForCall []struct {
		arg1 *ssm.DeleteDocumentInput
	}
	deleteDocumentReturns struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}
	deleteDocumentReturnsOnCall map[int]struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}
	DeleteDocumentRequestStub        func(*ssm.DeleteDocumentInput) (*request.Request, *ssm.DeleteDocumentOutput)
	deleteDocumentRequestMutex       sync.RWMutex
	deleteDocumentRequestArgsForCall []struct {
		arg1 *ssm.DeleteDocumentInput
	}
	deleteDocumentRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteDocumentOutput
	}
	deleteDocumentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteDocumentOutput
	}
	DeleteDocumentWithContextStub        func(context.Context, *ssm.DeleteDocumentInput, ...request.Option) (*ssm.DeleteDocumentOutput, error)
	deleteDocumentWithContextMutex       sync.RWMutex
	deleteDocumentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteDocumentInput
		arg3 []request.Option
	}
	deleteDocumentWithContextReturns struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}
	deleteDocumentWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}
	DeleteInventoryStub        func(*ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error)
	deleteInventoryMutex       sync.RWMutex
	deleteInventoryArgsForCall []struct {
		arg1 *ssm.DeleteInventoryInput
	}
	deleteInventoryReturns struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}
	deleteInventoryReturnsOnCall map[int]struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}
	DeleteInventoryRequestStub        func(*ssm.DeleteInventoryInput) (*request.Request, *ssm.DeleteInventoryOutput)
	deleteInventoryRequestMutex       sync.RWMutex
	deleteInventoryRequestArgsForCall []struct {
		arg1 *ssm.DeleteInventoryInput
	}
	deleteInventoryRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteInventoryOutput
	}
	deleteInventoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteInventoryOutput
	}
	DeleteInventoryWithContextStub        func(context.Context, *ssm.DeleteInventoryInput, ...request.Option) (*ssm.DeleteInventoryOutput, error)
	deleteInventoryWithContextMutex       sync.RWMutex
	deleteInventoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteInventoryInput
		arg3 []request.Option
	}
	deleteInventoryWithContextReturns struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}
	deleteInventoryWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}
	DeleteMaintenanceWindowStub        func(*ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error)
	deleteMaintenanceWindowMutex       sync.RWMutex
	deleteMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.DeleteMaintenanceWindowInput
	}
	deleteMaintenanceWindowReturns struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}
	deleteMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}
	DeleteMaintenanceWindowRequestStub        func(*ssm.DeleteMaintenanceWindowInput) (*request.Request, *ssm.DeleteMaintenanceWindowOutput)
	deleteMaintenanceWindowRequestMutex       sync.RWMutex
	deleteMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.DeleteMaintenanceWindowInput
	}
	deleteMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteMaintenanceWindowOutput
	}
	deleteMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteMaintenanceWindowOutput
	}
	DeleteMaintenanceWindowWithContextStub        func(context.Context, *ssm.DeleteMaintenanceWindowInput, ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error)
	deleteMaintenanceWindowWithContextMutex       sync.RWMutex
	deleteMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteMaintenanceWindowInput
		arg3 []request.Option
	}
	deleteMaintenanceWindowWithContextReturns struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}
	deleteMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}
	DeleteOpsMetadataStub        func(*ssm.DeleteOpsMetadataInput) (*ssm.DeleteOpsMetadataOutput, error)
	deleteOpsMetadataMutex       sync.RWMutex
	deleteOpsMetadataArgsForCall []struct {
		arg1 *ssm.DeleteOpsMetadataInput
	}
	deleteOpsMetadataReturns struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}
	deleteOpsMetadataReturnsOnCall map[int]struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}
	DeleteOpsMetadataRequestStub        func(*ssm.DeleteOpsMetadataInput) (*request.Request, *ssm.DeleteOpsMetadataOutput)
	deleteOpsMetadataRequestMutex       sync.RWMutex
	deleteOpsMetadataRequestArgsForCall []struct {
		arg1 *ssm.DeleteOpsMetadataInput
	}
	deleteOpsMetadataRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteOpsMetadataOutput
	}
	deleteOpsMetadataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteOpsMetadataOutput
	}
	DeleteOpsMetadataWithContextStub        func(context.Context, *ssm.DeleteOpsMetadataInput, ...request.Option) (*ssm.DeleteOpsMetadataOutput, error)
	deleteOpsMetadataWithContextMutex       sync.RWMutex
	deleteOpsMetadataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteOpsMetadataInput
		arg3 []request.Option
	}
	deleteOpsMetadataWithContextReturns struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}
	deleteOpsMetadataWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}
	DeleteParameterStub        func(*ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error)
	deleteParameterMutex       sync.RWMutex
	deleteParameterArgsForCall []struct {
		arg1 *ssm.DeleteParameterInput
	}
	deleteParameterReturns struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}
	deleteParameterReturnsOnCall map[int]struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}
	DeleteParameterRequestStub        func(*ssm.DeleteParameterInput) (*request.Request, *ssm.DeleteParameterOutput)
	deleteParameterRequestMutex       sync.RWMutex
	deleteParameterRequestArgsForCall []struct {
		arg1 *ssm.DeleteParameterInput
	}
	deleteParameterRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteParameterOutput
	}
	deleteParameterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteParameterOutput
	}
	DeleteParameterWithContextStub        func(context.Context, *ssm.DeleteParameterInput, ...request.Option) (*ssm.DeleteParameterOutput, error)
	deleteParameterWithContextMutex       sync.RWMutex
	deleteParameterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteParameterInput
		arg3 []request.Option
	}
	deleteParameterWithContextReturns struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}
	deleteParameterWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}
	DeleteParametersStub        func(*ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error)
	deleteParametersMutex       sync.RWMutex
	deleteParametersArgsForCall []struct {
		arg1 *ssm.DeleteParametersInput
	}
	deleteParametersReturns struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}
	deleteParametersReturnsOnCall map[int]struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}
	DeleteParametersRequestStub        func(*ssm.DeleteParametersInput) (*request.Request, *ssm.DeleteParametersOutput)
	deleteParametersRequestMutex       sync.RWMutex
	deleteParametersRequestArgsForCall []struct {
		arg1 *ssm.DeleteParametersInput
	}
	deleteParametersRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteParametersOutput
	}
	deleteParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteParametersOutput
	}
	DeleteParametersWithContextStub        func(context.Context, *ssm.DeleteParametersInput, ...request.Option) (*ssm.DeleteParametersOutput, error)
	deleteParametersWithContextMutex       sync.RWMutex
	deleteParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteParametersInput
		arg3 []request.Option
	}
	deleteParametersWithContextReturns struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}
	deleteParametersWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}
	DeletePatchBaselineStub        func(*ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error)
	deletePatchBaselineMutex       sync.RWMutex
	deletePatchBaselineArgsForCall []struct {
		arg1 *ssm.DeletePatchBaselineInput
	}
	deletePatchBaselineReturns struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}
	deletePatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}
	DeletePatchBaselineRequestStub        func(*ssm.DeletePatchBaselineInput) (*request.Request, *ssm.DeletePatchBaselineOutput)
	deletePatchBaselineRequestMutex       sync.RWMutex
	deletePatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.DeletePatchBaselineInput
	}
	deletePatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeletePatchBaselineOutput
	}
	deletePatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeletePatchBaselineOutput
	}
	DeletePatchBaselineWithContextStub        func(context.Context, *ssm.DeletePatchBaselineInput, ...request.Option) (*ssm.DeletePatchBaselineOutput, error)
	deletePatchBaselineWithContextMutex       sync.RWMutex
	deletePatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeletePatchBaselineInput
		arg3 []request.Option
	}
	deletePatchBaselineWithContextReturns struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}
	deletePatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}
	DeleteResourceDataSyncStub        func(*ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error)
	deleteResourceDataSyncMutex       sync.RWMutex
	deleteResourceDataSyncArgsForCall []struct {
		arg1 *ssm.DeleteResourceDataSyncInput
	}
	deleteResourceDataSyncReturns struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}
	deleteResourceDataSyncReturnsOnCall map[int]struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}
	DeleteResourceDataSyncRequestStub        func(*ssm.DeleteResourceDataSyncInput) (*request.Request, *ssm.DeleteResourceDataSyncOutput)
	deleteResourceDataSyncRequestMutex       sync.RWMutex
	deleteResourceDataSyncRequestArgsForCall []struct {
		arg1 *ssm.DeleteResourceDataSyncInput
	}
	deleteResourceDataSyncRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeleteResourceDataSyncOutput
	}
	deleteResourceDataSyncRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeleteResourceDataSyncOutput
	}
	DeleteResourceDataSyncWithContextStub        func(context.Context, *ssm.DeleteResourceDataSyncInput, ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error)
	deleteResourceDataSyncWithContextMutex       sync.RWMutex
	deleteResourceDataSyncWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeleteResourceDataSyncInput
		arg3 []request.Option
	}
	deleteResourceDataSyncWithContextReturns struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}
	deleteResourceDataSyncWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}
	DeregisterManagedInstanceStub        func(*ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error)
	deregisterManagedInstanceMutex       sync.RWMutex
	deregisterManagedInstanceArgsForCall []struct {
		arg1 *ssm.DeregisterManagedInstanceInput
	}
	deregisterManagedInstanceReturns struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}
	deregisterManagedInstanceReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}
	DeregisterManagedInstanceRequestStub        func(*ssm.DeregisterManagedInstanceInput) (*request.Request, *ssm.DeregisterManagedInstanceOutput)
	deregisterManagedInstanceRequestMutex       sync.RWMutex
	deregisterManagedInstanceRequestArgsForCall []struct {
		arg1 *ssm.DeregisterManagedInstanceInput
	}
	deregisterManagedInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeregisterManagedInstanceOutput
	}
	deregisterManagedInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeregisterManagedInstanceOutput
	}
	DeregisterManagedInstanceWithContextStub        func(context.Context, *ssm.DeregisterManagedInstanceInput, ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error)
	deregisterManagedInstanceWithContextMutex       sync.RWMutex
	deregisterManagedInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeregisterManagedInstanceInput
		arg3 []request.Option
	}
	deregisterManagedInstanceWithContextReturns struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}
	deregisterManagedInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}
	DeregisterPatchBaselineForPatchGroupStub        func(*ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)
	deregisterPatchBaselineForPatchGroupMutex       sync.RWMutex
	deregisterPatchBaselineForPatchGroupArgsForCall []struct {
		arg1 *ssm.DeregisterPatchBaselineForPatchGroupInput
	}
	deregisterPatchBaselineForPatchGroupReturns struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	deregisterPatchBaselineForPatchGroupReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	DeregisterPatchBaselineForPatchGroupRequestStub        func(*ssm.DeregisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.DeregisterPatchBaselineForPatchGroupOutput)
	deregisterPatchBaselineForPatchGroupRequestMutex       sync.RWMutex
	deregisterPatchBaselineForPatchGroupRequestArgsForCall []struct {
		arg1 *ssm.DeregisterPatchBaselineForPatchGroupInput
	}
	deregisterPatchBaselineForPatchGroupRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput
	}
	deregisterPatchBaselineForPatchGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput
	}
	DeregisterPatchBaselineForPatchGroupWithContextStub        func(context.Context, *ssm.DeregisterPatchBaselineForPatchGroupInput, ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)
	deregisterPatchBaselineForPatchGroupWithContextMutex       sync.RWMutex
	deregisterPatchBaselineForPatchGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeregisterPatchBaselineForPatchGroupInput
		arg3 []request.Option
	}
	deregisterPatchBaselineForPatchGroupWithContextReturns struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	deregisterPatchBaselineForPatchGroupWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	DeregisterTargetFromMaintenanceWindowStub        func(*ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)
	deregisterTargetFromMaintenanceWindowMutex       sync.RWMutex
	deregisterTargetFromMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.DeregisterTargetFromMaintenanceWindowInput
	}
	deregisterTargetFromMaintenanceWindowReturns struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}
	deregisterTargetFromMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}
	DeregisterTargetFromMaintenanceWindowRequestStub        func(*ssm.DeregisterTargetFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTargetFromMaintenanceWindowOutput)
	deregisterTargetFromMaintenanceWindowRequestMutex       sync.RWMutex
	deregisterTargetFromMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.DeregisterTargetFromMaintenanceWindowInput
	}
	deregisterTargetFromMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput
	}
	deregisterTargetFromMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput
	}
	DeregisterTargetFromMaintenanceWindowWithContextStub        func(context.Context, *ssm.DeregisterTargetFromMaintenanceWindowInput, ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)
	deregisterTargetFromMaintenanceWindowWithContextMutex       sync.RWMutex
	deregisterTargetFromMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeregisterTargetFromMaintenanceWindowInput
		arg3 []request.Option
	}
	deregisterTargetFromMaintenanceWindowWithContextReturns struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}
	deregisterTargetFromMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}
	DeregisterTaskFromMaintenanceWindowStub        func(*ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)
	deregisterTaskFromMaintenanceWindowMutex       sync.RWMutex
	deregisterTaskFromMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.DeregisterTaskFromMaintenanceWindowInput
	}
	deregisterTaskFromMaintenanceWindowReturns struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}
	deregisterTaskFromMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}
	DeregisterTaskFromMaintenanceWindowRequestStub        func(*ssm.DeregisterTaskFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTaskFromMaintenanceWindowOutput)
	deregisterTaskFromMaintenanceWindowRequestMutex       sync.RWMutex
	deregisterTaskFromMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.DeregisterTaskFromMaintenanceWindowInput
	}
	deregisterTaskFromMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput
	}
	deregisterTaskFromMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput
	}
	DeregisterTaskFromMaintenanceWindowWithContextStub        func(context.Context, *ssm.DeregisterTaskFromMaintenanceWindowInput, ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)
	deregisterTaskFromMaintenanceWindowWithContextMutex       sync.RWMutex
	deregisterTaskFromMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DeregisterTaskFromMaintenanceWindowInput
		arg3 []request.Option
	}
	deregisterTaskFromMaintenanceWindowWithContextReturns struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}
	deregisterTaskFromMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}
	DescribeActivationsStub        func(*ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error)
	describeActivationsMutex       sync.RWMutex
	describeActivationsArgsForCall []struct {
		arg1 *ssm.DescribeActivationsInput
	}
	describeActivationsReturns struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}
	describeActivationsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}
	DescribeActivationsPagesStub        func(*ssm.DescribeActivationsInput, func(*ssm.DescribeActivationsOutput, bool) bool) error
	describeActivationsPagesMutex       sync.RWMutex
	describeActivationsPagesArgsForCall []struct {
		arg1 *ssm.DescribeActivationsInput
		arg2 func(*ssm.DescribeActivationsOutput, bool) bool
	}
	describeActivationsPagesReturns struct {
		result1 error
	}
	describeActivationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeActivationsPagesWithContextStub        func(context.Context, *ssm.DescribeActivationsInput, func(*ssm.DescribeActivationsOutput, bool) bool, ...request.Option) error
	describeActivationsPagesWithContextMutex       sync.RWMutex
	describeActivationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeActivationsInput
		arg3 func(*ssm.DescribeActivationsOutput, bool) bool
		arg4 []request.Option
	}
	describeActivationsPagesWithContextReturns struct {
		result1 error
	}
	describeActivationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeActivationsRequestStub        func(*ssm.DescribeActivationsInput) (*request.Request, *ssm.DescribeActivationsOutput)
	describeActivationsRequestMutex       sync.RWMutex
	describeActivationsRequestArgsForCall []struct {
		arg1 *ssm.DescribeActivationsInput
	}
	describeActivationsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeActivationsOutput
	}
	describeActivationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeActivationsOutput
	}
	DescribeActivationsWithContextStub        func(context.Context, *ssm.DescribeActivationsInput, ...request.Option) (*ssm.DescribeActivationsOutput, error)
	describeActivationsWithContextMutex       sync.RWMutex
	describeActivationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeActivationsInput
		arg3 []request.Option
	}
	describeActivationsWithContextReturns struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}
	describeActivationsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}
	DescribeAssociationStub        func(*ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error)
	describeAssociationMutex       sync.RWMutex
	describeAssociationArgsForCall []struct {
		arg1 *ssm.DescribeAssociationInput
	}
	describeAssociationReturns struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}
	describeAssociationReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}
	DescribeAssociationExecutionTargetsStub        func(*ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error)
	describeAssociationExecutionTargetsMutex       sync.RWMutex
	describeAssociationExecutionTargetsArgsForCall []struct {
		arg1 *ssm.DescribeAssociationExecutionTargetsInput
	}
	describeAssociationExecutionTargetsReturns struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}
	describeAssociationExecutionTargetsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}
	DescribeAssociationExecutionTargetsPagesStub        func(*ssm.DescribeAssociationExecutionTargetsInput, func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool) error
	describeAssociationExecutionTargetsPagesMutex       sync.RWMutex
	describeAssociationExecutionTargetsPagesArgsForCall []struct {
		arg1 *ssm.DescribeAssociationExecutionTargetsInput
		arg2 func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool
	}
	describeAssociationExecutionTargetsPagesReturns struct {
		result1 error
	}
	describeAssociationExecutionTargetsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAssociationExecutionTargetsPagesWithContextStub        func(context.Context, *ssm.DescribeAssociationExecutionTargetsInput, func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool, ...request.Option) error
	describeAssociationExecutionTargetsPagesWithContextMutex       sync.RWMutex
	describeAssociationExecutionTargetsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionTargetsInput
		arg3 func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool
		arg4 []request.Option
	}
	describeAssociationExecutionTargetsPagesWithContextReturns struct {
		result1 error
	}
	describeAssociationExecutionTargetsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAssociationExecutionTargetsRequestStub        func(*ssm.DescribeAssociationExecutionTargetsInput) (*request.Request, *ssm.DescribeAssociationExecutionTargetsOutput)
	describeAssociationExecutionTargetsRequestMutex       sync.RWMutex
	describeAssociationExecutionTargetsRequestArgsForCall []struct {
		arg1 *ssm.DescribeAssociationExecutionTargetsInput
	}
	describeAssociationExecutionTargetsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionTargetsOutput
	}
	describeAssociationExecutionTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionTargetsOutput
	}
	DescribeAssociationExecutionTargetsWithContextStub        func(context.Context, *ssm.DescribeAssociationExecutionTargetsInput, ...request.Option) (*ssm.DescribeAssociationExecutionTargetsOutput, error)
	describeAssociationExecutionTargetsWithContextMutex       sync.RWMutex
	describeAssociationExecutionTargetsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionTargetsInput
		arg3 []request.Option
	}
	describeAssociationExecutionTargetsWithContextReturns struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}
	describeAssociationExecutionTargetsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}
	DescribeAssociationExecutionsStub        func(*ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error)
	describeAssociationExecutionsMutex       sync.RWMutex
	describeAssociationExecutionsArgsForCall []struct {
		arg1 *ssm.DescribeAssociationExecutionsInput
	}
	describeAssociationExecutionsReturns struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}
	describeAssociationExecutionsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}
	DescribeAssociationExecutionsPagesStub        func(*ssm.DescribeAssociationExecutionsInput, func(*ssm.DescribeAssociationExecutionsOutput, bool) bool) error
	describeAssociationExecutionsPagesMutex       sync.RWMutex
	describeAssociationExecutionsPagesArgsForCall []struct {
		arg1 *ssm.DescribeAssociationExecutionsInput
		arg2 func(*ssm.DescribeAssociationExecutionsOutput, bool) bool
	}
	describeAssociationExecutionsPagesReturns struct {
		result1 error
	}
	describeAssociationExecutionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAssociationExecutionsPagesWithContextStub        func(context.Context, *ssm.DescribeAssociationExecutionsInput, func(*ssm.DescribeAssociationExecutionsOutput, bool) bool, ...request.Option) error
	describeAssociationExecutionsPagesWithContextMutex       sync.RWMutex
	describeAssociationExecutionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionsInput
		arg3 func(*ssm.DescribeAssociationExecutionsOutput, bool) bool
		arg4 []request.Option
	}
	describeAssociationExecutionsPagesWithContextReturns struct {
		result1 error
	}
	describeAssociationExecutionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAssociationExecutionsRequestStub        func(*ssm.DescribeAssociationExecutionsInput) (*request.Request, *ssm.DescribeAssociationExecutionsOutput)
	describeAssociationExecutionsRequestMutex       sync.RWMutex
	describeAssociationExecutionsRequestArgsForCall []struct {
		arg1 *ssm.DescribeAssociationExecutionsInput
	}
	describeAssociationExecutionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionsOutput
	}
	describeAssociationExecutionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionsOutput
	}
	DescribeAssociationExecutionsWithContextStub        func(context.Context, *ssm.DescribeAssociationExecutionsInput, ...request.Option) (*ssm.DescribeAssociationExecutionsOutput, error)
	describeAssociationExecutionsWithContextMutex       sync.RWMutex
	describeAssociationExecutionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionsInput
		arg3 []request.Option
	}
	describeAssociationExecutionsWithContextReturns struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}
	describeAssociationExecutionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}
	DescribeAssociationRequestStub        func(*ssm.DescribeAssociationInput) (*request.Request, *ssm.DescribeAssociationOutput)
	describeAssociationRequestMutex       sync.RWMutex
	describeAssociationRequestArgsForCall []struct {
		arg1 *ssm.DescribeAssociationInput
	}
	describeAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationOutput
	}
	describeAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationOutput
	}
	DescribeAssociationWithContextStub        func(context.Context, *ssm.DescribeAssociationInput, ...request.Option) (*ssm.DescribeAssociationOutput, error)
	describeAssociationWithContextMutex       sync.RWMutex
	describeAssociationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationInput
		arg3 []request.Option
	}
	describeAssociationWithContextReturns struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}
	describeAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}
	DescribeAutomationExecutionsStub        func(*ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error)
	describeAutomationExecutionsMutex       sync.RWMutex
	describeAutomationExecutionsArgsForCall []struct {
		arg1 *ssm.DescribeAutomationExecutionsInput
	}
	describeAutomationExecutionsReturns struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}
	describeAutomationExecutionsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}
	DescribeAutomationExecutionsPagesStub        func(*ssm.DescribeAutomationExecutionsInput, func(*ssm.DescribeAutomationExecutionsOutput, bool) bool) error
	describeAutomationExecutionsPagesMutex       sync.RWMutex
	describeAutomationExecutionsPagesArgsForCall []struct {
		arg1 *ssm.DescribeAutomationExecutionsInput
		arg2 func(*ssm.DescribeAutomationExecutionsOutput, bool) bool
	}
	describeAutomationExecutionsPagesReturns struct {
		result1 error
	}
	describeAutomationExecutionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAutomationExecutionsPagesWithContextStub        func(context.Context, *ssm.DescribeAutomationExecutionsInput, func(*ssm.DescribeAutomationExecutionsOutput, bool) bool, ...request.Option) error
	describeAutomationExecutionsPagesWithContextMutex       sync.RWMutex
	describeAutomationExecutionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationExecutionsInput
		arg3 func(*ssm.DescribeAutomationExecutionsOutput, bool) bool
		arg4 []request.Option
	}
	describeAutomationExecutionsPagesWithContextReturns struct {
		result1 error
	}
	describeAutomationExecutionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAutomationExecutionsRequestStub        func(*ssm.DescribeAutomationExecutionsInput) (*request.Request, *ssm.DescribeAutomationExecutionsOutput)
	describeAutomationExecutionsRequestMutex       sync.RWMutex
	describeAutomationExecutionsRequestArgsForCall []struct {
		arg1 *ssm.DescribeAutomationExecutionsInput
	}
	describeAutomationExecutionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationExecutionsOutput
	}
	describeAutomationExecutionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationExecutionsOutput
	}
	DescribeAutomationExecutionsWithContextStub        func(context.Context, *ssm.DescribeAutomationExecutionsInput, ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error)
	describeAutomationExecutionsWithContextMutex       sync.RWMutex
	describeAutomationExecutionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationExecutionsInput
		arg3 []request.Option
	}
	describeAutomationExecutionsWithContextReturns struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}
	describeAutomationExecutionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}
	DescribeAutomationStepExecutionsStub        func(*ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error)
	describeAutomationStepExecutionsMutex       sync.RWMutex
	describeAutomationStepExecutionsArgsForCall []struct {
		arg1 *ssm.DescribeAutomationStepExecutionsInput
	}
	describeAutomationStepExecutionsReturns struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}
	describeAutomationStepExecutionsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}
	DescribeAutomationStepExecutionsPagesStub        func(*ssm.DescribeAutomationStepExecutionsInput, func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool) error
	describeAutomationStepExecutionsPagesMutex       sync.RWMutex
	describeAutomationStepExecutionsPagesArgsForCall []struct {
		arg1 *ssm.DescribeAutomationStepExecutionsInput
		arg2 func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool
	}
	describeAutomationStepExecutionsPagesReturns struct {
		result1 error
	}
	describeAutomationStepExecutionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAutomationStepExecutionsPagesWithContextStub        func(context.Context, *ssm.DescribeAutomationStepExecutionsInput, func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool, ...request.Option) error
	describeAutomationStepExecutionsPagesWithContextMutex       sync.RWMutex
	describeAutomationStepExecutionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationStepExecutionsInput
		arg3 func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool
		arg4 []request.Option
	}
	describeAutomationStepExecutionsPagesWithContextReturns struct {
		result1 error
	}
	describeAutomationStepExecutionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAutomationStepExecutionsRequestStub        func(*ssm.DescribeAutomationStepExecutionsInput) (*request.Request, *ssm.DescribeAutomationStepExecutionsOutput)
	describeAutomationStepExecutionsRequestMutex       sync.RWMutex
	describeAutomationStepExecutionsRequestArgsForCall []struct {
		arg1 *ssm.DescribeAutomationStepExecutionsInput
	}
	describeAutomationStepExecutionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationStepExecutionsOutput
	}
	describeAutomationStepExecutionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationStepExecutionsOutput
	}
	DescribeAutomationStepExecutionsWithContextStub        func(context.Context, *ssm.DescribeAutomationStepExecutionsInput, ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error)
	describeAutomationStepExecutionsWithContextMutex       sync.RWMutex
	describeAutomationStepExecutionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationStepExecutionsInput
		arg3 []request.Option
	}
	describeAutomationStepExecutionsWithContextReturns struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}
	describeAutomationStepExecutionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}
	DescribeAvailablePatchesStub        func(*ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error)
	describeAvailablePatchesMutex       sync.RWMutex
	describeAvailablePatchesArgsForCall []struct {
		arg1 *ssm.DescribeAvailablePatchesInput
	}
	describeAvailablePatchesReturns struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}
	describeAvailablePatchesReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}
	DescribeAvailablePatchesPagesStub        func(*ssm.DescribeAvailablePatchesInput, func(*ssm.DescribeAvailablePatchesOutput, bool) bool) error
	describeAvailablePatchesPagesMutex       sync.RWMutex
	describeAvailablePatchesPagesArgsForCall []struct {
		arg1 *ssm.DescribeAvailablePatchesInput
		arg2 func(*ssm.DescribeAvailablePatchesOutput, bool) bool
	}
	describeAvailablePatchesPagesReturns struct {
		result1 error
	}
	describeAvailablePatchesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAvailablePatchesPagesWithContextStub        func(context.Context, *ssm.DescribeAvailablePatchesInput, func(*ssm.DescribeAvailablePatchesOutput, bool) bool, ...request.Option) error
	describeAvailablePatchesPagesWithContextMutex       sync.RWMutex
	describeAvailablePatchesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAvailablePatchesInput
		arg3 func(*ssm.DescribeAvailablePatchesOutput, bool) bool
		arg4 []request.Option
	}
	describeAvailablePatchesPagesWithContextReturns struct {
		result1 error
	}
	describeAvailablePatchesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAvailablePatchesRequestStub        func(*ssm.DescribeAvailablePatchesInput) (*request.Request, *ssm.DescribeAvailablePatchesOutput)
	describeAvailablePatchesRequestMutex       sync.RWMutex
	describeAvailablePatchesRequestArgsForCall []struct {
		arg1 *ssm.DescribeAvailablePatchesInput
	}
	describeAvailablePatchesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeAvailablePatchesOutput
	}
	describeAvailablePatchesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeAvailablePatchesOutput
	}
	DescribeAvailablePatchesWithContextStub        func(context.Context, *ssm.DescribeAvailablePatchesInput, ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error)
	describeAvailablePatchesWithContextMutex       sync.RWMutex
	describeAvailablePatchesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeAvailablePatchesInput
		arg3 []request.Option
	}
	describeAvailablePatchesWithContextReturns struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}
	describeAvailablePatchesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}
	DescribeDocumentStub        func(*ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error)
	describeDocumentMutex       sync.RWMutex
	describeDocumentArgsForCall []struct {
		arg1 *ssm.DescribeDocumentInput
	}
	describeDocumentReturns struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}
	describeDocumentReturnsOnCall map[int]struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}
	DescribeDocumentPermissionStub        func(*ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error)
	describeDocumentPermissionMutex       sync.RWMutex
	describeDocumentPermissionArgsForCall []struct {
		arg1 *ssm.DescribeDocumentPermissionInput
	}
	describeDocumentPermissionReturns struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}
	describeDocumentPermissionReturnsOnCall map[int]struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}
	DescribeDocumentPermissionRequestStub        func(*ssm.DescribeDocumentPermissionInput) (*request.Request, *ssm.DescribeDocumentPermissionOutput)
	describeDocumentPermissionRequestMutex       sync.RWMutex
	describeDocumentPermissionRequestArgsForCall []struct {
		arg1 *ssm.DescribeDocumentPermissionInput
	}
	describeDocumentPermissionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentPermissionOutput
	}
	describeDocumentPermissionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentPermissionOutput
	}
	DescribeDocumentPermissionWithContextStub        func(context.Context, *ssm.DescribeDocumentPermissionInput, ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error)
	describeDocumentPermissionWithContextMutex       sync.RWMutex
	describeDocumentPermissionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeDocumentPermissionInput
		arg3 []request.Option
	}
	describeDocumentPermissionWithContextReturns struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}
	describeDocumentPermissionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}
	DescribeDocumentRequestStub        func(*ssm.DescribeDocumentInput) (*request.Request, *ssm.DescribeDocumentOutput)
	describeDocumentRequestMutex       sync.RWMutex
	describeDocumentRequestArgsForCall []struct {
		arg1 *ssm.DescribeDocumentInput
	}
	describeDocumentRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentOutput
	}
	describeDocumentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentOutput
	}
	DescribeDocumentWithContextStub        func(context.Context, *ssm.DescribeDocumentInput, ...request.Option) (*ssm.DescribeDocumentOutput, error)
	describeDocumentWithContextMutex       sync.RWMutex
	describeDocumentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeDocumentInput
		arg3 []request.Option
	}
	describeDocumentWithContextReturns struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}
	describeDocumentWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}
	DescribeEffectiveInstanceAssociationsStub        func(*ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)
	describeEffectiveInstanceAssociationsMutex       sync.RWMutex
	describeEffectiveInstanceAssociationsArgsForCall []struct {
		arg1 *ssm.DescribeEffectiveInstanceAssociationsInput
	}
	describeEffectiveInstanceAssociationsReturns struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}
	describeEffectiveInstanceAssociationsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}
	DescribeEffectiveInstanceAssociationsPagesStub        func(*ssm.DescribeEffectiveInstanceAssociationsInput, func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool) error
	describeEffectiveInstanceAssociationsPagesMutex       sync.RWMutex
	describeEffectiveInstanceAssociationsPagesArgsForCall []struct {
		arg1 *ssm.DescribeEffectiveInstanceAssociationsInput
		arg2 func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool
	}
	describeEffectiveInstanceAssociationsPagesReturns struct {
		result1 error
	}
	describeEffectiveInstanceAssociationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEffectiveInstanceAssociationsPagesWithContextStub        func(context.Context, *ssm.DescribeEffectiveInstanceAssociationsInput, func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool, ...request.Option) error
	describeEffectiveInstanceAssociationsPagesWithContextMutex       sync.RWMutex
	describeEffectiveInstanceAssociationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectiveInstanceAssociationsInput
		arg3 func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool
		arg4 []request.Option
	}
	describeEffectiveInstanceAssociationsPagesWithContextReturns struct {
		result1 error
	}
	describeEffectiveInstanceAssociationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEffectiveInstanceAssociationsRequestStub        func(*ssm.DescribeEffectiveInstanceAssociationsInput) (*request.Request, *ssm.DescribeEffectiveInstanceAssociationsOutput)
	describeEffectiveInstanceAssociationsRequestMutex       sync.RWMutex
	describeEffectiveInstanceAssociationsRequestArgsForCall []struct {
		arg1 *ssm.DescribeEffectiveInstanceAssociationsInput
	}
	describeEffectiveInstanceAssociationsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectiveInstanceAssociationsOutput
	}
	describeEffectiveInstanceAssociationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectiveInstanceAssociationsOutput
	}
	DescribeEffectiveInstanceAssociationsWithContextStub        func(context.Context, *ssm.DescribeEffectiveInstanceAssociationsInput, ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)
	describeEffectiveInstanceAssociationsWithContextMutex       sync.RWMutex
	describeEffectiveInstanceAssociationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectiveInstanceAssociationsInput
		arg3 []request.Option
	}
	describeEffectiveInstanceAssociationsWithContextReturns struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}
	describeEffectiveInstanceAssociationsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}
	DescribeEffectivePatchesForPatchBaselineStub        func(*ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)
	describeEffectivePatchesForPatchBaselineMutex       sync.RWMutex
	describeEffectivePatchesForPatchBaselineArgsForCall []struct {
		arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput
	}
	describeEffectivePatchesForPatchBaselineReturns struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}
	describeEffectivePatchesForPatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}
	DescribeEffectivePatchesForPatchBaselinePagesStub        func(*ssm.DescribeEffectivePatchesForPatchBaselineInput, func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool) error
	describeEffectivePatchesForPatchBaselinePagesMutex       sync.RWMutex
	describeEffectivePatchesForPatchBaselinePagesArgsForCall []struct {
		arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput
		arg2 func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool
	}
	describeEffectivePatchesForPatchBaselinePagesReturns struct {
		result1 error
	}
	describeEffectivePatchesForPatchBaselinePagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEffectivePatchesForPatchBaselinePagesWithContextStub        func(context.Context, *ssm.DescribeEffectivePatchesForPatchBaselineInput, func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool, ...request.Option) error
	describeEffectivePatchesForPatchBaselinePagesWithContextMutex       sync.RWMutex
	describeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectivePatchesForPatchBaselineInput
		arg3 func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool
		arg4 []request.Option
	}
	describeEffectivePatchesForPatchBaselinePagesWithContextReturns struct {
		result1 error
	}
	describeEffectivePatchesForPatchBaselinePagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEffectivePatchesForPatchBaselineRequestStub        func(*ssm.DescribeEffectivePatchesForPatchBaselineInput) (*request.Request, *ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	describeEffectivePatchesForPatchBaselineRequestMutex       sync.RWMutex
	describeEffectivePatchesForPatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput
	}
	describeEffectivePatchesForPatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
	}
	describeEffectivePatchesForPatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
	}
	DescribeEffectivePatchesForPatchBaselineWithContextStub        func(context.Context, *ssm.DescribeEffectivePatchesForPatchBaselineInput, ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)
	describeEffectivePatchesForPatchBaselineWithContextMutex       sync.RWMutex
	describeEffectivePatchesForPatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectivePatchesForPatchBaselineInput
		arg3 []request.Option
	}
	describeEffectivePatchesForPatchBaselineWithContextReturns struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}
	describeEffectivePatchesForPatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}
	DescribeInstanceAssociationsStatusStub        func(*ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error)
	describeInstanceAssociationsStatusMutex       sync.RWMutex
	describeInstanceAssociationsStatusArgsForCall []struct {
		arg1 *ssm.DescribeInstanceAssociationsStatusInput
	}
	describeInstanceAssociationsStatusReturns struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}
	describeInstanceAssociationsStatusReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}
	DescribeInstanceAssociationsStatusPagesStub        func(*ssm.DescribeInstanceAssociationsStatusInput, func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool) error
	describeInstanceAssociationsStatusPagesMutex       sync.RWMutex
	describeInstanceAssociationsStatusPagesArgsForCall []struct {
		arg1 *ssm.DescribeInstanceAssociationsStatusInput
		arg2 func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool
	}
	describeInstanceAssociationsStatusPagesReturns struct {
		result1 error
	}
	describeInstanceAssociationsStatusPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstanceAssociationsStatusPagesWithContextStub        func(context.Context, *ssm.DescribeInstanceAssociationsStatusInput, func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool, ...request.Option) error
	describeInstanceAssociationsStatusPagesWithContextMutex       sync.RWMutex
	describeInstanceAssociationsStatusPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceAssociationsStatusInput
		arg3 func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool
		arg4 []request.Option
	}
	describeInstanceAssociationsStatusPagesWithContextReturns struct {
		result1 error
	}
	describeInstanceAssociationsStatusPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstanceAssociationsStatusRequestStub        func(*ssm.DescribeInstanceAssociationsStatusInput) (*request.Request, *ssm.DescribeInstanceAssociationsStatusOutput)
	describeInstanceAssociationsStatusRequestMutex       sync.RWMutex
	describeInstanceAssociationsStatusRequestArgsForCall []struct {
		arg1 *ssm.DescribeInstanceAssociationsStatusInput
	}
	describeInstanceAssociationsStatusRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceAssociationsStatusOutput
	}
	describeInstanceAssociationsStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceAssociationsStatusOutput
	}
	DescribeInstanceAssociationsStatusWithContextStub        func(context.Context, *ssm.DescribeInstanceAssociationsStatusInput, ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error)
	describeInstanceAssociationsStatusWithContextMutex       sync.RWMutex
	describeInstanceAssociationsStatusWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceAssociationsStatusInput
		arg3 []request.Option
	}
	describeInstanceAssociationsStatusWithContextReturns struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}
	describeInstanceAssociationsStatusWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}
	DescribeInstanceInformationStub        func(*ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error)
	describeInstanceInformationMutex       sync.RWMutex
	describeInstanceInformationArgsForCall []struct {
		arg1 *ssm.DescribeInstanceInformationInput
	}
	describeInstanceInformationReturns struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}
	describeInstanceInformationReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}
	DescribeInstanceInformationPagesStub        func(*ssm.DescribeInstanceInformationInput, func(*ssm.DescribeInstanceInformationOutput, bool) bool) error
	describeInstanceInformationPagesMutex       sync.RWMutex
	describeInstanceInformationPagesArgsForCall []struct {
		arg1 *ssm.DescribeInstanceInformationInput
		arg2 func(*ssm.DescribeInstanceInformationOutput, bool) bool
	}
	describeInstanceInformationPagesReturns struct {
		result1 error
	}
	describeInstanceInformationPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstanceInformationPagesWithContextStub        func(context.Context, *ssm.DescribeInstanceInformationInput, func(*ssm.DescribeInstanceInformationOutput, bool) bool, ...request.Option) error
	describeInstanceInformationPagesWithContextMutex       sync.RWMutex
	describeInstanceInformationPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceInformationInput
		arg3 func(*ssm.DescribeInstanceInformationOutput, bool) bool
		arg4 []request.Option
	}
	describeInstanceInformationPagesWithContextReturns struct {
		result1 error
	}
	describeInstanceInformationPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstanceInformationRequestStub        func(*ssm.DescribeInstanceInformationInput) (*request.Request, *ssm.DescribeInstanceInformationOutput)
	describeInstanceInformationRequestMutex       sync.RWMutex
	describeInstanceInformationRequestArgsForCall []struct {
		arg1 *ssm.DescribeInstanceInformationInput
	}
	describeInstanceInformationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceInformationOutput
	}
	describeInstanceInformationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceInformationOutput
	}
	DescribeInstanceInformationWithContextStub        func(context.Context, *ssm.DescribeInstanceInformationInput, ...request.Option) (*ssm.DescribeInstanceInformationOutput, error)
	describeInstanceInformationWithContextMutex       sync.RWMutex
	describeInstanceInformationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceInformationInput
		arg3 []request.Option
	}
	describeInstanceInformationWithContextReturns struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}
	describeInstanceInformationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}
	DescribeInstancePatchStatesStub        func(*ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error)
	describeInstancePatchStatesMutex       sync.RWMutex
	describeInstancePatchStatesArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchStatesInput
	}
	describeInstancePatchStatesReturns struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}
	describeInstancePatchStatesReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}
	DescribeInstancePatchStatesForPatchGroupStub        func(*ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)
	describeInstancePatchStatesForPatchGroupMutex       sync.RWMutex
	describeInstancePatchStatesForPatchGroupArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput
	}
	describeInstancePatchStatesForPatchGroupReturns struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}
	describeInstancePatchStatesForPatchGroupReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}
	DescribeInstancePatchStatesForPatchGroupPagesStub        func(*ssm.DescribeInstancePatchStatesForPatchGroupInput, func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool) error
	describeInstancePatchStatesForPatchGroupPagesMutex       sync.RWMutex
	describeInstancePatchStatesForPatchGroupPagesArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput
		arg2 func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool
	}
	describeInstancePatchStatesForPatchGroupPagesReturns struct {
		result1 error
	}
	describeInstancePatchStatesForPatchGroupPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancePatchStatesForPatchGroupPagesWithContextStub        func(context.Context, *ssm.DescribeInstancePatchStatesForPatchGroupInput, func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool, ...request.Option) error
	describeInstancePatchStatesForPatchGroupPagesWithContextMutex       sync.RWMutex
	describeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesForPatchGroupInput
		arg3 func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool
		arg4 []request.Option
	}
	describeInstancePatchStatesForPatchGroupPagesWithContextReturns struct {
		result1 error
	}
	describeInstancePatchStatesForPatchGroupPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancePatchStatesForPatchGroupRequestStub        func(*ssm.DescribeInstancePatchStatesForPatchGroupInput) (*request.Request, *ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	describeInstancePatchStatesForPatchGroupRequestMutex       sync.RWMutex
	describeInstancePatchStatesForPatchGroupRequestArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput
	}
	describeInstancePatchStatesForPatchGroupRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
	}
	describeInstancePatchStatesForPatchGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
	}
	DescribeInstancePatchStatesForPatchGroupWithContextStub        func(context.Context, *ssm.DescribeInstancePatchStatesForPatchGroupInput, ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)
	describeInstancePatchStatesForPatchGroupWithContextMutex       sync.RWMutex
	describeInstancePatchStatesForPatchGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesForPatchGroupInput
		arg3 []request.Option
	}
	describeInstancePatchStatesForPatchGroupWithContextReturns struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}
	describeInstancePatchStatesForPatchGroupWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}
	DescribeInstancePatchStatesPagesStub        func(*ssm.DescribeInstancePatchStatesInput, func(*ssm.DescribeInstancePatchStatesOutput, bool) bool) error
	describeInstancePatchStatesPagesMutex       sync.RWMutex
	describeInstancePatchStatesPagesArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchStatesInput
		arg2 func(*ssm.DescribeInstancePatchStatesOutput, bool) bool
	}
	describeInstancePatchStatesPagesReturns struct {
		result1 error
	}
	describeInstancePatchStatesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancePatchStatesPagesWithContextStub        func(context.Context, *ssm.DescribeInstancePatchStatesInput, func(*ssm.DescribeInstancePatchStatesOutput, bool) bool, ...request.Option) error
	describeInstancePatchStatesPagesWithContextMutex       sync.RWMutex
	describeInstancePatchStatesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesInput
		arg3 func(*ssm.DescribeInstancePatchStatesOutput, bool) bool
		arg4 []request.Option
	}
	describeInstancePatchStatesPagesWithContextReturns struct {
		result1 error
	}
	describeInstancePatchStatesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancePatchStatesRequestStub        func(*ssm.DescribeInstancePatchStatesInput) (*request.Request, *ssm.DescribeInstancePatchStatesOutput)
	describeInstancePatchStatesRequestMutex       sync.RWMutex
	describeInstancePatchStatesRequestArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchStatesInput
	}
	describeInstancePatchStatesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesOutput
	}
	describeInstancePatchStatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesOutput
	}
	DescribeInstancePatchStatesWithContextStub        func(context.Context, *ssm.DescribeInstancePatchStatesInput, ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error)
	describeInstancePatchStatesWithContextMutex       sync.RWMutex
	describeInstancePatchStatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesInput
		arg3 []request.Option
	}
	describeInstancePatchStatesWithContextReturns struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}
	describeInstancePatchStatesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}
	DescribeInstancePatchesStub        func(*ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error)
	describeInstancePatchesMutex       sync.RWMutex
	describeInstancePatchesArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchesInput
	}
	describeInstancePatchesReturns struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}
	describeInstancePatchesReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}
	DescribeInstancePatchesPagesStub        func(*ssm.DescribeInstancePatchesInput, func(*ssm.DescribeInstancePatchesOutput, bool) bool) error
	describeInstancePatchesPagesMutex       sync.RWMutex
	describeInstancePatchesPagesArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchesInput
		arg2 func(*ssm.DescribeInstancePatchesOutput, bool) bool
	}
	describeInstancePatchesPagesReturns struct {
		result1 error
	}
	describeInstancePatchesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancePatchesPagesWithContextStub        func(context.Context, *ssm.DescribeInstancePatchesInput, func(*ssm.DescribeInstancePatchesOutput, bool) bool, ...request.Option) error
	describeInstancePatchesPagesWithContextMutex       sync.RWMutex
	describeInstancePatchesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchesInput
		arg3 func(*ssm.DescribeInstancePatchesOutput, bool) bool
		arg4 []request.Option
	}
	describeInstancePatchesPagesWithContextReturns struct {
		result1 error
	}
	describeInstancePatchesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancePatchesRequestStub        func(*ssm.DescribeInstancePatchesInput) (*request.Request, *ssm.DescribeInstancePatchesOutput)
	describeInstancePatchesRequestMutex       sync.RWMutex
	describeInstancePatchesRequestArgsForCall []struct {
		arg1 *ssm.DescribeInstancePatchesInput
	}
	describeInstancePatchesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchesOutput
	}
	describeInstancePatchesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchesOutput
	}
	DescribeInstancePatchesWithContextStub        func(context.Context, *ssm.DescribeInstancePatchesInput, ...request.Option) (*ssm.DescribeInstancePatchesOutput, error)
	describeInstancePatchesWithContextMutex       sync.RWMutex
	describeInstancePatchesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchesInput
		arg3 []request.Option
	}
	describeInstancePatchesWithContextReturns struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}
	describeInstancePatchesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}
	DescribeInventoryDeletionsStub        func(*ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error)
	describeInventoryDeletionsMutex       sync.RWMutex
	describeInventoryDeletionsArgsForCall []struct {
		arg1 *ssm.DescribeInventoryDeletionsInput
	}
	describeInventoryDeletionsReturns struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}
	describeInventoryDeletionsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}
	DescribeInventoryDeletionsPagesStub        func(*ssm.DescribeInventoryDeletionsInput, func(*ssm.DescribeInventoryDeletionsOutput, bool) bool) error
	describeInventoryDeletionsPagesMutex       sync.RWMutex
	describeInventoryDeletionsPagesArgsForCall []struct {
		arg1 *ssm.DescribeInventoryDeletionsInput
		arg2 func(*ssm.DescribeInventoryDeletionsOutput, bool) bool
	}
	describeInventoryDeletionsPagesReturns struct {
		result1 error
	}
	describeInventoryDeletionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInventoryDeletionsPagesWithContextStub        func(context.Context, *ssm.DescribeInventoryDeletionsInput, func(*ssm.DescribeInventoryDeletionsOutput, bool) bool, ...request.Option) error
	describeInventoryDeletionsPagesWithContextMutex       sync.RWMutex
	describeInventoryDeletionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInventoryDeletionsInput
		arg3 func(*ssm.DescribeInventoryDeletionsOutput, bool) bool
		arg4 []request.Option
	}
	describeInventoryDeletionsPagesWithContextReturns struct {
		result1 error
	}
	describeInventoryDeletionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInventoryDeletionsRequestStub        func(*ssm.DescribeInventoryDeletionsInput) (*request.Request, *ssm.DescribeInventoryDeletionsOutput)
	describeInventoryDeletionsRequestMutex       sync.RWMutex
	describeInventoryDeletionsRequestArgsForCall []struct {
		arg1 *ssm.DescribeInventoryDeletionsInput
	}
	describeInventoryDeletionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeInventoryDeletionsOutput
	}
	describeInventoryDeletionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeInventoryDeletionsOutput
	}
	DescribeInventoryDeletionsWithContextStub        func(context.Context, *ssm.DescribeInventoryDeletionsInput, ...request.Option) (*ssm.DescribeInventoryDeletionsOutput, error)
	describeInventoryDeletionsWithContextMutex       sync.RWMutex
	describeInventoryDeletionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeInventoryDeletionsInput
		arg3 []request.Option
	}
	describeInventoryDeletionsWithContextReturns struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}
	describeInventoryDeletionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}
	DescribeMaintenanceWindowExecutionTaskInvocationsStub        func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)
	describeMaintenanceWindowExecutionTaskInvocationsMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTaskInvocationsArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
	}
	describeMaintenanceWindowExecutionTaskInvocationsReturns struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}
	describeMaintenanceWindowExecutionTaskInvocationsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}
	DescribeMaintenanceWindowExecutionTaskInvocationsPagesStub        func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool) error
	describeMaintenanceWindowExecutionTaskInvocationsPagesMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
		arg2 func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool
	}
	describeMaintenanceWindowExecutionTaskInvocationsPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowExecutionTaskInvocationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
		arg3 func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowExecutionTaskInvocationsRequestStub        func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	describeMaintenanceWindowExecutionTaskInvocationsRequestMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
	}
	describeMaintenanceWindowExecutionTaskInvocationsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	}
	describeMaintenanceWindowExecutionTaskInvocationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	}
	DescribeMaintenanceWindowExecutionTaskInvocationsWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)
	describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
		arg3 []request.Option
	}
	describeMaintenanceWindowExecutionTaskInvocationsWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}
	describeMaintenanceWindowExecutionTaskInvocationsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}
	DescribeMaintenanceWindowExecutionTasksStub        func(*ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)
	describeMaintenanceWindowExecutionTasksMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTasksArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput
	}
	describeMaintenanceWindowExecutionTasksReturns struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}
	describeMaintenanceWindowExecutionTasksReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}
	DescribeMaintenanceWindowExecutionTasksPagesStub        func(*ssm.DescribeMaintenanceWindowExecutionTasksInput, func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool) error
	describeMaintenanceWindowExecutionTasksPagesMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTasksPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput
		arg2 func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool
	}
	describeMaintenanceWindowExecutionTasksPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowExecutionTasksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowExecutionTasksPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTasksInput, func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowExecutionTasksPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTasksInput
		arg3 func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowExecutionTasksPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowExecutionTasksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowExecutionTasksRequestStub        func(*ssm.DescribeMaintenanceWindowExecutionTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	describeMaintenanceWindowExecutionTasksRequestMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTasksRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput
	}
	describeMaintenanceWindowExecutionTasksRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
	}
	describeMaintenanceWindowExecutionTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
	}
	DescribeMaintenanceWindowExecutionTasksWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTasksInput, ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)
	describeMaintenanceWindowExecutionTasksWithContextMutex       sync.RWMutex
	describeMaintenanceWindowExecutionTasksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTasksInput
		arg3 []request.Option
	}
	describeMaintenanceWindowExecutionTasksWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}
	describeMaintenanceWindowExecutionTasksWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}
	DescribeMaintenanceWindowExecutionsStub        func(*ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)
	describeMaintenanceWindowExecutionsMutex       sync.RWMutex
	describeMaintenanceWindowExecutionsArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionsInput
	}
	describeMaintenanceWindowExecutionsReturns struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}
	describeMaintenanceWindowExecutionsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}
	DescribeMaintenanceWindowExecutionsPagesStub        func(*ssm.DescribeMaintenanceWindowExecutionsInput, func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool) error
	describeMaintenanceWindowExecutionsPagesMutex       sync.RWMutex
	describeMaintenanceWindowExecutionsPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionsInput
		arg2 func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool
	}
	describeMaintenanceWindowExecutionsPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowExecutionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowExecutionsPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowExecutionsInput, func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowExecutionsPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowExecutionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionsInput
		arg3 func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowExecutionsPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowExecutionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowExecutionsRequestStub        func(*ssm.DescribeMaintenanceWindowExecutionsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionsOutput)
	describeMaintenanceWindowExecutionsRequestMutex       sync.RWMutex
	describeMaintenanceWindowExecutionsRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionsInput
	}
	describeMaintenanceWindowExecutionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionsOutput
	}
	describeMaintenanceWindowExecutionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionsOutput
	}
	DescribeMaintenanceWindowExecutionsWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowExecutionsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)
	describeMaintenanceWindowExecutionsWithContextMutex       sync.RWMutex
	describeMaintenanceWindowExecutionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionsInput
		arg3 []request.Option
	}
	describeMaintenanceWindowExecutionsWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}
	describeMaintenanceWindowExecutionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}
	DescribeMaintenanceWindowScheduleStub        func(*ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)
	describeMaintenanceWindowScheduleMutex       sync.RWMutex
	describeMaintenanceWindowScheduleArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowScheduleInput
	}
	describeMaintenanceWindowScheduleReturns struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}
	describeMaintenanceWindowScheduleReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}
	DescribeMaintenanceWindowSchedulePagesStub        func(*ssm.DescribeMaintenanceWindowScheduleInput, func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool) error
	describeMaintenanceWindowSchedulePagesMutex       sync.RWMutex
	describeMaintenanceWindowSchedulePagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowScheduleInput
		arg2 func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool
	}
	describeMaintenanceWindowSchedulePagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowSchedulePagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowSchedulePagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowScheduleInput, func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowSchedulePagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowSchedulePagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowScheduleInput
		arg3 func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowSchedulePagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowSchedulePagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowScheduleRequestStub        func(*ssm.DescribeMaintenanceWindowScheduleInput) (*request.Request, *ssm.DescribeMaintenanceWindowScheduleOutput)
	describeMaintenanceWindowScheduleRequestMutex       sync.RWMutex
	describeMaintenanceWindowScheduleRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowScheduleInput
	}
	describeMaintenanceWindowScheduleRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowScheduleOutput
	}
	describeMaintenanceWindowScheduleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowScheduleOutput
	}
	DescribeMaintenanceWindowScheduleWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowScheduleInput, ...request.Option) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)
	describeMaintenanceWindowScheduleWithContextMutex       sync.RWMutex
	describeMaintenanceWindowScheduleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowScheduleInput
		arg3 []request.Option
	}
	describeMaintenanceWindowScheduleWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}
	describeMaintenanceWindowScheduleWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}
	DescribeMaintenanceWindowTargetsStub        func(*ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)
	describeMaintenanceWindowTargetsMutex       sync.RWMutex
	describeMaintenanceWindowTargetsArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowTargetsInput
	}
	describeMaintenanceWindowTargetsReturns struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}
	describeMaintenanceWindowTargetsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}
	DescribeMaintenanceWindowTargetsPagesStub        func(*ssm.DescribeMaintenanceWindowTargetsInput, func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool) error
	describeMaintenanceWindowTargetsPagesMutex       sync.RWMutex
	describeMaintenanceWindowTargetsPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowTargetsInput
		arg2 func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool
	}
	describeMaintenanceWindowTargetsPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowTargetsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowTargetsPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowTargetsInput, func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowTargetsPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowTargetsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTargetsInput
		arg3 func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowTargetsPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowTargetsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowTargetsRequestStub        func(*ssm.DescribeMaintenanceWindowTargetsInput) (*request.Request, *ssm.DescribeMaintenanceWindowTargetsOutput)
	describeMaintenanceWindowTargetsRequestMutex       sync.RWMutex
	describeMaintenanceWindowTargetsRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowTargetsInput
	}
	describeMaintenanceWindowTargetsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTargetsOutput
	}
	describeMaintenanceWindowTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTargetsOutput
	}
	DescribeMaintenanceWindowTargetsWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowTargetsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)
	describeMaintenanceWindowTargetsWithContextMutex       sync.RWMutex
	describeMaintenanceWindowTargetsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTargetsInput
		arg3 []request.Option
	}
	describeMaintenanceWindowTargetsWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}
	describeMaintenanceWindowTargetsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}
	DescribeMaintenanceWindowTasksStub        func(*ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error)
	describeMaintenanceWindowTasksMutex       sync.RWMutex
	describeMaintenanceWindowTasksArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowTasksInput
	}
	describeMaintenanceWindowTasksReturns struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}
	describeMaintenanceWindowTasksReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}
	DescribeMaintenanceWindowTasksPagesStub        func(*ssm.DescribeMaintenanceWindowTasksInput, func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool) error
	describeMaintenanceWindowTasksPagesMutex       sync.RWMutex
	describeMaintenanceWindowTasksPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowTasksInput
		arg2 func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool
	}
	describeMaintenanceWindowTasksPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowTasksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowTasksPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowTasksInput, func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowTasksPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowTasksPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTasksInput
		arg3 func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowTasksPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowTasksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowTasksRequestStub        func(*ssm.DescribeMaintenanceWindowTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowTasksOutput)
	describeMaintenanceWindowTasksRequestMutex       sync.RWMutex
	describeMaintenanceWindowTasksRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowTasksInput
	}
	describeMaintenanceWindowTasksRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTasksOutput
	}
	describeMaintenanceWindowTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTasksOutput
	}
	DescribeMaintenanceWindowTasksWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowTasksInput, ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error)
	describeMaintenanceWindowTasksWithContextMutex       sync.RWMutex
	describeMaintenanceWindowTasksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTasksInput
		arg3 []request.Option
	}
	describeMaintenanceWindowTasksWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}
	describeMaintenanceWindowTasksWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}
	DescribeMaintenanceWindowsStub        func(*ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error)
	describeMaintenanceWindowsMutex       sync.RWMutex
	describeMaintenanceWindowsArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowsInput
	}
	describeMaintenanceWindowsReturns struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}
	describeMaintenanceWindowsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}
	DescribeMaintenanceWindowsForTargetStub        func(*ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)
	describeMaintenanceWindowsForTargetMutex       sync.RWMutex
	describeMaintenanceWindowsForTargetArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowsForTargetInput
	}
	describeMaintenanceWindowsForTargetReturns struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}
	describeMaintenanceWindowsForTargetReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}
	DescribeMaintenanceWindowsForTargetPagesStub        func(*ssm.DescribeMaintenanceWindowsForTargetInput, func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool) error
	describeMaintenanceWindowsForTargetPagesMutex       sync.RWMutex
	describeMaintenanceWindowsForTargetPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowsForTargetInput
		arg2 func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool
	}
	describeMaintenanceWindowsForTargetPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowsForTargetPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowsForTargetPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowsForTargetInput, func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowsForTargetPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowsForTargetPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsForTargetInput
		arg3 func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowsForTargetPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowsForTargetPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowsForTargetRequestStub        func(*ssm.DescribeMaintenanceWindowsForTargetInput) (*request.Request, *ssm.DescribeMaintenanceWindowsForTargetOutput)
	describeMaintenanceWindowsForTargetRequestMutex       sync.RWMutex
	describeMaintenanceWindowsForTargetRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowsForTargetInput
	}
	describeMaintenanceWindowsForTargetRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsForTargetOutput
	}
	describeMaintenanceWindowsForTargetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsForTargetOutput
	}
	DescribeMaintenanceWindowsForTargetWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowsForTargetInput, ...request.Option) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)
	describeMaintenanceWindowsForTargetWithContextMutex       sync.RWMutex
	describeMaintenanceWindowsForTargetWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsForTargetInput
		arg3 []request.Option
	}
	describeMaintenanceWindowsForTargetWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}
	describeMaintenanceWindowsForTargetWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}
	DescribeMaintenanceWindowsPagesStub        func(*ssm.DescribeMaintenanceWindowsInput, func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool) error
	describeMaintenanceWindowsPagesMutex       sync.RWMutex
	describeMaintenanceWindowsPagesArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowsInput
		arg2 func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool
	}
	describeMaintenanceWindowsPagesReturns struct {
		result1 error
	}
	describeMaintenanceWindowsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowsPagesWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowsInput, func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool, ...request.Option) error
	describeMaintenanceWindowsPagesWithContextMutex       sync.RWMutex
	describeMaintenanceWindowsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsInput
		arg3 func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool
		arg4 []request.Option
	}
	describeMaintenanceWindowsPagesWithContextReturns struct {
		result1 error
	}
	describeMaintenanceWindowsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeMaintenanceWindowsRequestStub        func(*ssm.DescribeMaintenanceWindowsInput) (*request.Request, *ssm.DescribeMaintenanceWindowsOutput)
	describeMaintenanceWindowsRequestMutex       sync.RWMutex
	describeMaintenanceWindowsRequestArgsForCall []struct {
		arg1 *ssm.DescribeMaintenanceWindowsInput
	}
	describeMaintenanceWindowsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsOutput
	}
	describeMaintenanceWindowsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsOutput
	}
	DescribeMaintenanceWindowsWithContextStub        func(context.Context, *ssm.DescribeMaintenanceWindowsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error)
	describeMaintenanceWindowsWithContextMutex       sync.RWMutex
	describeMaintenanceWindowsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsInput
		arg3 []request.Option
	}
	describeMaintenanceWindowsWithContextReturns struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}
	describeMaintenanceWindowsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}
	DescribeOpsItemsStub        func(*ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error)
	describeOpsItemsMutex       sync.RWMutex
	describeOpsItemsArgsForCall []struct {
		arg1 *ssm.DescribeOpsItemsInput
	}
	describeOpsItemsReturns struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}
	describeOpsItemsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}
	DescribeOpsItemsPagesStub        func(*ssm.DescribeOpsItemsInput, func(*ssm.DescribeOpsItemsOutput, bool) bool) error
	describeOpsItemsPagesMutex       sync.RWMutex
	describeOpsItemsPagesArgsForCall []struct {
		arg1 *ssm.DescribeOpsItemsInput
		arg2 func(*ssm.DescribeOpsItemsOutput, bool) bool
	}
	describeOpsItemsPagesReturns struct {
		result1 error
	}
	describeOpsItemsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOpsItemsPagesWithContextStub        func(context.Context, *ssm.DescribeOpsItemsInput, func(*ssm.DescribeOpsItemsOutput, bool) bool, ...request.Option) error
	describeOpsItemsPagesWithContextMutex       sync.RWMutex
	describeOpsItemsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeOpsItemsInput
		arg3 func(*ssm.DescribeOpsItemsOutput, bool) bool
		arg4 []request.Option
	}
	describeOpsItemsPagesWithContextReturns struct {
		result1 error
	}
	describeOpsItemsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeOpsItemsRequestStub        func(*ssm.DescribeOpsItemsInput) (*request.Request, *ssm.DescribeOpsItemsOutput)
	describeOpsItemsRequestMutex       sync.RWMutex
	describeOpsItemsRequestArgsForCall []struct {
		arg1 *ssm.DescribeOpsItemsInput
	}
	describeOpsItemsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeOpsItemsOutput
	}
	describeOpsItemsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeOpsItemsOutput
	}
	DescribeOpsItemsWithContextStub        func(context.Context, *ssm.DescribeOpsItemsInput, ...request.Option) (*ssm.DescribeOpsItemsOutput, error)
	describeOpsItemsWithContextMutex       sync.RWMutex
	describeOpsItemsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeOpsItemsInput
		arg3 []request.Option
	}
	describeOpsItemsWithContextReturns struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}
	describeOpsItemsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}
	DescribeParametersStub        func(*ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error)
	describeParametersMutex       sync.RWMutex
	describeParametersArgsForCall []struct {
		arg1 *ssm.DescribeParametersInput
	}
	describeParametersReturns struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}
	describeParametersReturnsOnCall map[int]struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}
	DescribeParametersPagesStub        func(*ssm.DescribeParametersInput, func(*ssm.DescribeParametersOutput, bool) bool) error
	describeParametersPagesMutex       sync.RWMutex
	describeParametersPagesArgsForCall []struct {
		arg1 *ssm.DescribeParametersInput
		arg2 func(*ssm.DescribeParametersOutput, bool) bool
	}
	describeParametersPagesReturns struct {
		result1 error
	}
	describeParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeParametersPagesWithContextStub        func(context.Context, *ssm.DescribeParametersInput, func(*ssm.DescribeParametersOutput, bool) bool, ...request.Option) error
	describeParametersPagesWithContextMutex       sync.RWMutex
	describeParametersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeParametersInput
		arg3 func(*ssm.DescribeParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeParametersPagesWithContextReturns struct {
		result1 error
	}
	describeParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeParametersRequestStub        func(*ssm.DescribeParametersInput) (*request.Request, *ssm.DescribeParametersOutput)
	describeParametersRequestMutex       sync.RWMutex
	describeParametersRequestArgsForCall []struct {
		arg1 *ssm.DescribeParametersInput
	}
	describeParametersRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeParametersOutput
	}
	describeParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeParametersOutput
	}
	DescribeParametersWithContextStub        func(context.Context, *ssm.DescribeParametersInput, ...request.Option) (*ssm.DescribeParametersOutput, error)
	describeParametersWithContextMutex       sync.RWMutex
	describeParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeParametersInput
		arg3 []request.Option
	}
	describeParametersWithContextReturns struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}
	describeParametersWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}
	DescribePatchBaselinesStub        func(*ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error)
	describePatchBaselinesMutex       sync.RWMutex
	describePatchBaselinesArgsForCall []struct {
		arg1 *ssm.DescribePatchBaselinesInput
	}
	describePatchBaselinesReturns struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}
	describePatchBaselinesReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}
	DescribePatchBaselinesPagesStub        func(*ssm.DescribePatchBaselinesInput, func(*ssm.DescribePatchBaselinesOutput, bool) bool) error
	describePatchBaselinesPagesMutex       sync.RWMutex
	describePatchBaselinesPagesArgsForCall []struct {
		arg1 *ssm.DescribePatchBaselinesInput
		arg2 func(*ssm.DescribePatchBaselinesOutput, bool) bool
	}
	describePatchBaselinesPagesReturns struct {
		result1 error
	}
	describePatchBaselinesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePatchBaselinesPagesWithContextStub        func(context.Context, *ssm.DescribePatchBaselinesInput, func(*ssm.DescribePatchBaselinesOutput, bool) bool, ...request.Option) error
	describePatchBaselinesPagesWithContextMutex       sync.RWMutex
	describePatchBaselinesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchBaselinesInput
		arg3 func(*ssm.DescribePatchBaselinesOutput, bool) bool
		arg4 []request.Option
	}
	describePatchBaselinesPagesWithContextReturns struct {
		result1 error
	}
	describePatchBaselinesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePatchBaselinesRequestStub        func(*ssm.DescribePatchBaselinesInput) (*request.Request, *ssm.DescribePatchBaselinesOutput)
	describePatchBaselinesRequestMutex       sync.RWMutex
	describePatchBaselinesRequestArgsForCall []struct {
		arg1 *ssm.DescribePatchBaselinesInput
	}
	describePatchBaselinesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribePatchBaselinesOutput
	}
	describePatchBaselinesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribePatchBaselinesOutput
	}
	DescribePatchBaselinesWithContextStub        func(context.Context, *ssm.DescribePatchBaselinesInput, ...request.Option) (*ssm.DescribePatchBaselinesOutput, error)
	describePatchBaselinesWithContextMutex       sync.RWMutex
	describePatchBaselinesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchBaselinesInput
		arg3 []request.Option
	}
	describePatchBaselinesWithContextReturns struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}
	describePatchBaselinesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}
	DescribePatchGroupStateStub        func(*ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error)
	describePatchGroupStateMutex       sync.RWMutex
	describePatchGroupStateArgsForCall []struct {
		arg1 *ssm.DescribePatchGroupStateInput
	}
	describePatchGroupStateReturns struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}
	describePatchGroupStateReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}
	DescribePatchGroupStateRequestStub        func(*ssm.DescribePatchGroupStateInput) (*request.Request, *ssm.DescribePatchGroupStateOutput)
	describePatchGroupStateRequestMutex       sync.RWMutex
	describePatchGroupStateRequestArgsForCall []struct {
		arg1 *ssm.DescribePatchGroupStateInput
	}
	describePatchGroupStateRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupStateOutput
	}
	describePatchGroupStateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupStateOutput
	}
	DescribePatchGroupStateWithContextStub        func(context.Context, *ssm.DescribePatchGroupStateInput, ...request.Option) (*ssm.DescribePatchGroupStateOutput, error)
	describePatchGroupStateWithContextMutex       sync.RWMutex
	describePatchGroupStateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchGroupStateInput
		arg3 []request.Option
	}
	describePatchGroupStateWithContextReturns struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}
	describePatchGroupStateWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}
	DescribePatchGroupsStub        func(*ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error)
	describePatchGroupsMutex       sync.RWMutex
	describePatchGroupsArgsForCall []struct {
		arg1 *ssm.DescribePatchGroupsInput
	}
	describePatchGroupsReturns struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}
	describePatchGroupsReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}
	DescribePatchGroupsPagesStub        func(*ssm.DescribePatchGroupsInput, func(*ssm.DescribePatchGroupsOutput, bool) bool) error
	describePatchGroupsPagesMutex       sync.RWMutex
	describePatchGroupsPagesArgsForCall []struct {
		arg1 *ssm.DescribePatchGroupsInput
		arg2 func(*ssm.DescribePatchGroupsOutput, bool) bool
	}
	describePatchGroupsPagesReturns struct {
		result1 error
	}
	describePatchGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePatchGroupsPagesWithContextStub        func(context.Context, *ssm.DescribePatchGroupsInput, func(*ssm.DescribePatchGroupsOutput, bool) bool, ...request.Option) error
	describePatchGroupsPagesWithContextMutex       sync.RWMutex
	describePatchGroupsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchGroupsInput
		arg3 func(*ssm.DescribePatchGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describePatchGroupsPagesWithContextReturns struct {
		result1 error
	}
	describePatchGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePatchGroupsRequestStub        func(*ssm.DescribePatchGroupsInput) (*request.Request, *ssm.DescribePatchGroupsOutput)
	describePatchGroupsRequestMutex       sync.RWMutex
	describePatchGroupsRequestArgsForCall []struct {
		arg1 *ssm.DescribePatchGroupsInput
	}
	describePatchGroupsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupsOutput
	}
	describePatchGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupsOutput
	}
	DescribePatchGroupsWithContextStub        func(context.Context, *ssm.DescribePatchGroupsInput, ...request.Option) (*ssm.DescribePatchGroupsOutput, error)
	describePatchGroupsWithContextMutex       sync.RWMutex
	describePatchGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchGroupsInput
		arg3 []request.Option
	}
	describePatchGroupsWithContextReturns struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}
	describePatchGroupsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}
	DescribePatchPropertiesStub        func(*ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error)
	describePatchPropertiesMutex       sync.RWMutex
	describePatchPropertiesArgsForCall []struct {
		arg1 *ssm.DescribePatchPropertiesInput
	}
	describePatchPropertiesReturns struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}
	describePatchPropertiesReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}
	DescribePatchPropertiesPagesStub        func(*ssm.DescribePatchPropertiesInput, func(*ssm.DescribePatchPropertiesOutput, bool) bool) error
	describePatchPropertiesPagesMutex       sync.RWMutex
	describePatchPropertiesPagesArgsForCall []struct {
		arg1 *ssm.DescribePatchPropertiesInput
		arg2 func(*ssm.DescribePatchPropertiesOutput, bool) bool
	}
	describePatchPropertiesPagesReturns struct {
		result1 error
	}
	describePatchPropertiesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePatchPropertiesPagesWithContextStub        func(context.Context, *ssm.DescribePatchPropertiesInput, func(*ssm.DescribePatchPropertiesOutput, bool) bool, ...request.Option) error
	describePatchPropertiesPagesWithContextMutex       sync.RWMutex
	describePatchPropertiesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchPropertiesInput
		arg3 func(*ssm.DescribePatchPropertiesOutput, bool) bool
		arg4 []request.Option
	}
	describePatchPropertiesPagesWithContextReturns struct {
		result1 error
	}
	describePatchPropertiesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribePatchPropertiesRequestStub        func(*ssm.DescribePatchPropertiesInput) (*request.Request, *ssm.DescribePatchPropertiesOutput)
	describePatchPropertiesRequestMutex       sync.RWMutex
	describePatchPropertiesRequestArgsForCall []struct {
		arg1 *ssm.DescribePatchPropertiesInput
	}
	describePatchPropertiesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribePatchPropertiesOutput
	}
	describePatchPropertiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribePatchPropertiesOutput
	}
	DescribePatchPropertiesWithContextStub        func(context.Context, *ssm.DescribePatchPropertiesInput, ...request.Option) (*ssm.DescribePatchPropertiesOutput, error)
	describePatchPropertiesWithContextMutex       sync.RWMutex
	describePatchPropertiesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchPropertiesInput
		arg3 []request.Option
	}
	describePatchPropertiesWithContextReturns struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}
	describePatchPropertiesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}
	DescribeSessionsStub        func(*ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error)
	describeSessionsMutex       sync.RWMutex
	describeSessionsArgsForCall []struct {
		arg1 *ssm.DescribeSessionsInput
	}
	describeSessionsReturns struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}
	describeSessionsReturnsOnCall map[int]struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}
	DescribeSessionsPagesStub        func(*ssm.DescribeSessionsInput, func(*ssm.DescribeSessionsOutput, bool) bool) error
	describeSessionsPagesMutex       sync.RWMutex
	describeSessionsPagesArgsForCall []struct {
		arg1 *ssm.DescribeSessionsInput
		arg2 func(*ssm.DescribeSessionsOutput, bool) bool
	}
	describeSessionsPagesReturns struct {
		result1 error
	}
	describeSessionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSessionsPagesWithContextStub        func(context.Context, *ssm.DescribeSessionsInput, func(*ssm.DescribeSessionsOutput, bool) bool, ...request.Option) error
	describeSessionsPagesWithContextMutex       sync.RWMutex
	describeSessionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeSessionsInput
		arg3 func(*ssm.DescribeSessionsOutput, bool) bool
		arg4 []request.Option
	}
	describeSessionsPagesWithContextReturns struct {
		result1 error
	}
	describeSessionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSessionsRequestStub        func(*ssm.DescribeSessionsInput) (*request.Request, *ssm.DescribeSessionsOutput)
	describeSessionsRequestMutex       sync.RWMutex
	describeSessionsRequestArgsForCall []struct {
		arg1 *ssm.DescribeSessionsInput
	}
	describeSessionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DescribeSessionsOutput
	}
	describeSessionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DescribeSessionsOutput
	}
	DescribeSessionsWithContextStub        func(context.Context, *ssm.DescribeSessionsInput, ...request.Option) (*ssm.DescribeSessionsOutput, error)
	describeSessionsWithContextMutex       sync.RWMutex
	describeSessionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DescribeSessionsInput
		arg3 []request.Option
	}
	describeSessionsWithContextReturns struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}
	describeSessionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}
	DisassociateOpsItemRelatedItemStub        func(*ssm.DisassociateOpsItemRelatedItemInput) (*ssm.DisassociateOpsItemRelatedItemOutput, error)
	disassociateOpsItemRelatedItemMutex       sync.RWMutex
	disassociateOpsItemRelatedItemArgsForCall []struct {
		arg1 *ssm.DisassociateOpsItemRelatedItemInput
	}
	disassociateOpsItemRelatedItemReturns struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}
	disassociateOpsItemRelatedItemReturnsOnCall map[int]struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}
	DisassociateOpsItemRelatedItemRequestStub        func(*ssm.DisassociateOpsItemRelatedItemInput) (*request.Request, *ssm.DisassociateOpsItemRelatedItemOutput)
	disassociateOpsItemRelatedItemRequestMutex       sync.RWMutex
	disassociateOpsItemRelatedItemRequestArgsForCall []struct {
		arg1 *ssm.DisassociateOpsItemRelatedItemInput
	}
	disassociateOpsItemRelatedItemRequestReturns struct {
		result1 *request.Request
		result2 *ssm.DisassociateOpsItemRelatedItemOutput
	}
	disassociateOpsItemRelatedItemRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.DisassociateOpsItemRelatedItemOutput
	}
	DisassociateOpsItemRelatedItemWithContextStub        func(context.Context, *ssm.DisassociateOpsItemRelatedItemInput, ...request.Option) (*ssm.DisassociateOpsItemRelatedItemOutput, error)
	disassociateOpsItemRelatedItemWithContextMutex       sync.RWMutex
	disassociateOpsItemRelatedItemWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.DisassociateOpsItemRelatedItemInput
		arg3 []request.Option
	}
	disassociateOpsItemRelatedItemWithContextReturns struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}
	disassociateOpsItemRelatedItemWithContextReturnsOnCall map[int]struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}
	GetAutomationExecutionStub        func(*ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error)
	getAutomationExecutionMutex       sync.RWMutex
	getAutomationExecutionArgsForCall []struct {
		arg1 *ssm.GetAutomationExecutionInput
	}
	getAutomationExecutionReturns struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}
	getAutomationExecutionReturnsOnCall map[int]struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}
	GetAutomationExecutionRequestStub        func(*ssm.GetAutomationExecutionInput) (*request.Request, *ssm.GetAutomationExecutionOutput)
	getAutomationExecutionRequestMutex       sync.RWMutex
	getAutomationExecutionRequestArgsForCall []struct {
		arg1 *ssm.GetAutomationExecutionInput
	}
	getAutomationExecutionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetAutomationExecutionOutput
	}
	getAutomationExecutionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetAutomationExecutionOutput
	}
	GetAutomationExecutionWithContextStub        func(context.Context, *ssm.GetAutomationExecutionInput, ...request.Option) (*ssm.GetAutomationExecutionOutput, error)
	getAutomationExecutionWithContextMutex       sync.RWMutex
	getAutomationExecutionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetAutomationExecutionInput
		arg3 []request.Option
	}
	getAutomationExecutionWithContextReturns struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}
	getAutomationExecutionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}
	GetCalendarStateStub        func(*ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error)
	getCalendarStateMutex       sync.RWMutex
	getCalendarStateArgsForCall []struct {
		arg1 *ssm.GetCalendarStateInput
	}
	getCalendarStateReturns struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}
	getCalendarStateReturnsOnCall map[int]struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}
	GetCalendarStateRequestStub        func(*ssm.GetCalendarStateInput) (*request.Request, *ssm.GetCalendarStateOutput)
	getCalendarStateRequestMutex       sync.RWMutex
	getCalendarStateRequestArgsForCall []struct {
		arg1 *ssm.GetCalendarStateInput
	}
	getCalendarStateRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetCalendarStateOutput
	}
	getCalendarStateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetCalendarStateOutput
	}
	GetCalendarStateWithContextStub        func(context.Context, *ssm.GetCalendarStateInput, ...request.Option) (*ssm.GetCalendarStateOutput, error)
	getCalendarStateWithContextMutex       sync.RWMutex
	getCalendarStateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetCalendarStateInput
		arg3 []request.Option
	}
	getCalendarStateWithContextReturns struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}
	getCalendarStateWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}
	GetCommandInvocationStub        func(*ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error)
	getCommandInvocationMutex       sync.RWMutex
	getCommandInvocationArgsForCall []struct {
		arg1 *ssm.GetCommandInvocationInput
	}
	getCommandInvocationReturns struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}
	getCommandInvocationReturnsOnCall map[int]struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}
	GetCommandInvocationRequestStub        func(*ssm.GetCommandInvocationInput) (*request.Request, *ssm.GetCommandInvocationOutput)
	getCommandInvocationRequestMutex       sync.RWMutex
	getCommandInvocationRequestArgsForCall []struct {
		arg1 *ssm.GetCommandInvocationInput
	}
	getCommandInvocationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetCommandInvocationOutput
	}
	getCommandInvocationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetCommandInvocationOutput
	}
	GetCommandInvocationWithContextStub        func(context.Context, *ssm.GetCommandInvocationInput, ...request.Option) (*ssm.GetCommandInvocationOutput, error)
	getCommandInvocationWithContextMutex       sync.RWMutex
	getCommandInvocationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetCommandInvocationInput
		arg3 []request.Option
	}
	getCommandInvocationWithContextReturns struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}
	getCommandInvocationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}
	GetConnectionStatusStub        func(*ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error)
	getConnectionStatusMutex       sync.RWMutex
	getConnectionStatusArgsForCall []struct {
		arg1 *ssm.GetConnectionStatusInput
	}
	getConnectionStatusReturns struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}
	getConnectionStatusReturnsOnCall map[int]struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}
	GetConnectionStatusRequestStub        func(*ssm.GetConnectionStatusInput) (*request.Request, *ssm.GetConnectionStatusOutput)
	getConnectionStatusRequestMutex       sync.RWMutex
	getConnectionStatusRequestArgsForCall []struct {
		arg1 *ssm.GetConnectionStatusInput
	}
	getConnectionStatusRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetConnectionStatusOutput
	}
	getConnectionStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetConnectionStatusOutput
	}
	GetConnectionStatusWithContextStub        func(context.Context, *ssm.GetConnectionStatusInput, ...request.Option) (*ssm.GetConnectionStatusOutput, error)
	getConnectionStatusWithContextMutex       sync.RWMutex
	getConnectionStatusWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetConnectionStatusInput
		arg3 []request.Option
	}
	getConnectionStatusWithContextReturns struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}
	getConnectionStatusWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}
	GetDefaultPatchBaselineStub        func(*ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error)
	getDefaultPatchBaselineMutex       sync.RWMutex
	getDefaultPatchBaselineArgsForCall []struct {
		arg1 *ssm.GetDefaultPatchBaselineInput
	}
	getDefaultPatchBaselineReturns struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}
	getDefaultPatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}
	GetDefaultPatchBaselineRequestStub        func(*ssm.GetDefaultPatchBaselineInput) (*request.Request, *ssm.GetDefaultPatchBaselineOutput)
	getDefaultPatchBaselineRequestMutex       sync.RWMutex
	getDefaultPatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.GetDefaultPatchBaselineInput
	}
	getDefaultPatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetDefaultPatchBaselineOutput
	}
	getDefaultPatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetDefaultPatchBaselineOutput
	}
	GetDefaultPatchBaselineWithContextStub        func(context.Context, *ssm.GetDefaultPatchBaselineInput, ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error)
	getDefaultPatchBaselineWithContextMutex       sync.RWMutex
	getDefaultPatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetDefaultPatchBaselineInput
		arg3 []request.Option
	}
	getDefaultPatchBaselineWithContextReturns struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}
	getDefaultPatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}
	GetDeployablePatchSnapshotForInstanceStub        func(*ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)
	getDeployablePatchSnapshotForInstanceMutex       sync.RWMutex
	getDeployablePatchSnapshotForInstanceArgsForCall []struct {
		arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput
	}
	getDeployablePatchSnapshotForInstanceReturns struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}
	getDeployablePatchSnapshotForInstanceReturnsOnCall map[int]struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}
	GetDeployablePatchSnapshotForInstanceRequestStub        func(*ssm.GetDeployablePatchSnapshotForInstanceInput) (*request.Request, *ssm.GetDeployablePatchSnapshotForInstanceOutput)
	getDeployablePatchSnapshotForInstanceRequestMutex       sync.RWMutex
	getDeployablePatchSnapshotForInstanceRequestArgsForCall []struct {
		arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput
	}
	getDeployablePatchSnapshotForInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput
	}
	getDeployablePatchSnapshotForInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput
	}
	GetDeployablePatchSnapshotForInstanceWithContextStub        func(context.Context, *ssm.GetDeployablePatchSnapshotForInstanceInput, ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)
	getDeployablePatchSnapshotForInstanceWithContextMutex       sync.RWMutex
	getDeployablePatchSnapshotForInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetDeployablePatchSnapshotForInstanceInput
		arg3 []request.Option
	}
	getDeployablePatchSnapshotForInstanceWithContextReturns struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}
	getDeployablePatchSnapshotForInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}
	GetDocumentStub        func(*ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error)
	getDocumentMutex       sync.RWMutex
	getDocumentArgsForCall []struct {
		arg1 *ssm.GetDocumentInput
	}
	getDocumentReturns struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}
	getDocumentReturnsOnCall map[int]struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}
	GetDocumentRequestStub        func(*ssm.GetDocumentInput) (*request.Request, *ssm.GetDocumentOutput)
	getDocumentRequestMutex       sync.RWMutex
	getDocumentRequestArgsForCall []struct {
		arg1 *ssm.GetDocumentInput
	}
	getDocumentRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetDocumentOutput
	}
	getDocumentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetDocumentOutput
	}
	GetDocumentWithContextStub        func(context.Context, *ssm.GetDocumentInput, ...request.Option) (*ssm.GetDocumentOutput, error)
	getDocumentWithContextMutex       sync.RWMutex
	getDocumentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetDocumentInput
		arg3 []request.Option
	}
	getDocumentWithContextReturns struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}
	getDocumentWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}
	GetInventoryStub        func(*ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error)
	getInventoryMutex       sync.RWMutex
	getInventoryArgsForCall []struct {
		arg1 *ssm.GetInventoryInput
	}
	getInventoryReturns struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}
	getInventoryReturnsOnCall map[int]struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}
	GetInventoryPagesStub        func(*ssm.GetInventoryInput, func(*ssm.GetInventoryOutput, bool) bool) error
	getInventoryPagesMutex       sync.RWMutex
	getInventoryPagesArgsForCall []struct {
		arg1 *ssm.GetInventoryInput
		arg2 func(*ssm.GetInventoryOutput, bool) bool
	}
	getInventoryPagesReturns struct {
		result1 error
	}
	getInventoryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetInventoryPagesWithContextStub        func(context.Context, *ssm.GetInventoryInput, func(*ssm.GetInventoryOutput, bool) bool, ...request.Option) error
	getInventoryPagesWithContextMutex       sync.RWMutex
	getInventoryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetInventoryInput
		arg3 func(*ssm.GetInventoryOutput, bool) bool
		arg4 []request.Option
	}
	getInventoryPagesWithContextReturns struct {
		result1 error
	}
	getInventoryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetInventoryRequestStub        func(*ssm.GetInventoryInput) (*request.Request, *ssm.GetInventoryOutput)
	getInventoryRequestMutex       sync.RWMutex
	getInventoryRequestArgsForCall []struct {
		arg1 *ssm.GetInventoryInput
	}
	getInventoryRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetInventoryOutput
	}
	getInventoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetInventoryOutput
	}
	GetInventorySchemaStub        func(*ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error)
	getInventorySchemaMutex       sync.RWMutex
	getInventorySchemaArgsForCall []struct {
		arg1 *ssm.GetInventorySchemaInput
	}
	getInventorySchemaReturns struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}
	getInventorySchemaReturnsOnCall map[int]struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}
	GetInventorySchemaPagesStub        func(*ssm.GetInventorySchemaInput, func(*ssm.GetInventorySchemaOutput, bool) bool) error
	getInventorySchemaPagesMutex       sync.RWMutex
	getInventorySchemaPagesArgsForCall []struct {
		arg1 *ssm.GetInventorySchemaInput
		arg2 func(*ssm.GetInventorySchemaOutput, bool) bool
	}
	getInventorySchemaPagesReturns struct {
		result1 error
	}
	getInventorySchemaPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetInventorySchemaPagesWithContextStub        func(context.Context, *ssm.GetInventorySchemaInput, func(*ssm.GetInventorySchemaOutput, bool) bool, ...request.Option) error
	getInventorySchemaPagesWithContextMutex       sync.RWMutex
	getInventorySchemaPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetInventorySchemaInput
		arg3 func(*ssm.GetInventorySchemaOutput, bool) bool
		arg4 []request.Option
	}
	getInventorySchemaPagesWithContextReturns struct {
		result1 error
	}
	getInventorySchemaPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetInventorySchemaRequestStub        func(*ssm.GetInventorySchemaInput) (*request.Request, *ssm.GetInventorySchemaOutput)
	getInventorySchemaRequestMutex       sync.RWMutex
	getInventorySchemaRequestArgsForCall []struct {
		arg1 *ssm.GetInventorySchemaInput
	}
	getInventorySchemaRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetInventorySchemaOutput
	}
	getInventorySchemaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetInventorySchemaOutput
	}
	GetInventorySchemaWithContextStub        func(context.Context, *ssm.GetInventorySchemaInput, ...request.Option) (*ssm.GetInventorySchemaOutput, error)
	getInventorySchemaWithContextMutex       sync.RWMutex
	getInventorySchemaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetInventorySchemaInput
		arg3 []request.Option
	}
	getInventorySchemaWithContextReturns struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}
	getInventorySchemaWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}
	GetInventoryWithContextStub        func(context.Context, *ssm.GetInventoryInput, ...request.Option) (*ssm.GetInventoryOutput, error)
	getInventoryWithContextMutex       sync.RWMutex
	getInventoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetInventoryInput
		arg3 []request.Option
	}
	getInventoryWithContextReturns struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}
	getInventoryWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}
	GetMaintenanceWindowStub        func(*ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error)
	getMaintenanceWindowMutex       sync.RWMutex
	getMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowInput
	}
	getMaintenanceWindowReturns struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}
	getMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}
	GetMaintenanceWindowExecutionStub        func(*ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error)
	getMaintenanceWindowExecutionMutex       sync.RWMutex
	getMaintenanceWindowExecutionArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowExecutionInput
	}
	getMaintenanceWindowExecutionReturns struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}
	getMaintenanceWindowExecutionReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}
	GetMaintenanceWindowExecutionRequestStub        func(*ssm.GetMaintenanceWindowExecutionInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionOutput)
	getMaintenanceWindowExecutionRequestMutex       sync.RWMutex
	getMaintenanceWindowExecutionRequestArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowExecutionInput
	}
	getMaintenanceWindowExecutionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionOutput
	}
	getMaintenanceWindowExecutionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionOutput
	}
	GetMaintenanceWindowExecutionTaskStub        func(*ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)
	getMaintenanceWindowExecutionTaskMutex       sync.RWMutex
	getMaintenanceWindowExecutionTaskArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInput
	}
	getMaintenanceWindowExecutionTaskReturns struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}
	getMaintenanceWindowExecutionTaskReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}
	GetMaintenanceWindowExecutionTaskInvocationStub        func(*ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)
	getMaintenanceWindowExecutionTaskInvocationMutex       sync.RWMutex
	getMaintenanceWindowExecutionTaskInvocationArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput
	}
	getMaintenanceWindowExecutionTaskInvocationReturns struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}
	getMaintenanceWindowExecutionTaskInvocationReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}
	GetMaintenanceWindowExecutionTaskInvocationRequestStub        func(*ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	getMaintenanceWindowExecutionTaskInvocationRequestMutex       sync.RWMutex
	getMaintenanceWindowExecutionTaskInvocationRequestArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput
	}
	getMaintenanceWindowExecutionTaskInvocationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	}
	getMaintenanceWindowExecutionTaskInvocationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	}
	GetMaintenanceWindowExecutionTaskInvocationWithContextStub        func(context.Context, *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)
	getMaintenanceWindowExecutionTaskInvocationWithContextMutex       sync.RWMutex
	getMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput
		arg3 []request.Option
	}
	getMaintenanceWindowExecutionTaskInvocationWithContextReturns struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}
	getMaintenanceWindowExecutionTaskInvocationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}
	GetMaintenanceWindowExecutionTaskRequestStub        func(*ssm.GetMaintenanceWindowExecutionTaskInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskOutput)
	getMaintenanceWindowExecutionTaskRequestMutex       sync.RWMutex
	getMaintenanceWindowExecutionTaskRequestArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInput
	}
	getMaintenanceWindowExecutionTaskRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskOutput
	}
	getMaintenanceWindowExecutionTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskOutput
	}
	GetMaintenanceWindowExecutionTaskWithContextStub        func(context.Context, *ssm.GetMaintenanceWindowExecutionTaskInput, ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)
	getMaintenanceWindowExecutionTaskWithContextMutex       sync.RWMutex
	getMaintenanceWindowExecutionTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowExecutionTaskInput
		arg3 []request.Option
	}
	getMaintenanceWindowExecutionTaskWithContextReturns struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}
	getMaintenanceWindowExecutionTaskWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}
	GetMaintenanceWindowExecutionWithContextStub        func(context.Context, *ssm.GetMaintenanceWindowExecutionInput, ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error)
	getMaintenanceWindowExecutionWithContextMutex       sync.RWMutex
	getMaintenanceWindowExecutionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowExecutionInput
		arg3 []request.Option
	}
	getMaintenanceWindowExecutionWithContextReturns struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}
	getMaintenanceWindowExecutionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}
	GetMaintenanceWindowRequestStub        func(*ssm.GetMaintenanceWindowInput) (*request.Request, *ssm.GetMaintenanceWindowOutput)
	getMaintenanceWindowRequestMutex       sync.RWMutex
	getMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowInput
	}
	getMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowOutput
	}
	getMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowOutput
	}
	GetMaintenanceWindowTaskStub        func(*ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error)
	getMaintenanceWindowTaskMutex       sync.RWMutex
	getMaintenanceWindowTaskArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowTaskInput
	}
	getMaintenanceWindowTaskReturns struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}
	getMaintenanceWindowTaskReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}
	GetMaintenanceWindowTaskRequestStub        func(*ssm.GetMaintenanceWindowTaskInput) (*request.Request, *ssm.GetMaintenanceWindowTaskOutput)
	getMaintenanceWindowTaskRequestMutex       sync.RWMutex
	getMaintenanceWindowTaskRequestArgsForCall []struct {
		arg1 *ssm.GetMaintenanceWindowTaskInput
	}
	getMaintenanceWindowTaskRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowTaskOutput
	}
	getMaintenanceWindowTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowTaskOutput
	}
	GetMaintenanceWindowTaskWithContextStub        func(context.Context, *ssm.GetMaintenanceWindowTaskInput, ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error)
	getMaintenanceWindowTaskWithContextMutex       sync.RWMutex
	getMaintenanceWindowTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowTaskInput
		arg3 []request.Option
	}
	getMaintenanceWindowTaskWithContextReturns struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}
	getMaintenanceWindowTaskWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}
	GetMaintenanceWindowWithContextStub        func(context.Context, *ssm.GetMaintenanceWindowInput, ...request.Option) (*ssm.GetMaintenanceWindowOutput, error)
	getMaintenanceWindowWithContextMutex       sync.RWMutex
	getMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowInput
		arg3 []request.Option
	}
	getMaintenanceWindowWithContextReturns struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}
	getMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}
	GetOpsItemStub        func(*ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error)
	getOpsItemMutex       sync.RWMutex
	getOpsItemArgsForCall []struct {
		arg1 *ssm.GetOpsItemInput
	}
	getOpsItemReturns struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}
	getOpsItemReturnsOnCall map[int]struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}
	GetOpsItemRequestStub        func(*ssm.GetOpsItemInput) (*request.Request, *ssm.GetOpsItemOutput)
	getOpsItemRequestMutex       sync.RWMutex
	getOpsItemRequestArgsForCall []struct {
		arg1 *ssm.GetOpsItemInput
	}
	getOpsItemRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetOpsItemOutput
	}
	getOpsItemRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetOpsItemOutput
	}
	GetOpsItemWithContextStub        func(context.Context, *ssm.GetOpsItemInput, ...request.Option) (*ssm.GetOpsItemOutput, error)
	getOpsItemWithContextMutex       sync.RWMutex
	getOpsItemWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetOpsItemInput
		arg3 []request.Option
	}
	getOpsItemWithContextReturns struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}
	getOpsItemWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}
	GetOpsMetadataStub        func(*ssm.GetOpsMetadataInput) (*ssm.GetOpsMetadataOutput, error)
	getOpsMetadataMutex       sync.RWMutex
	getOpsMetadataArgsForCall []struct {
		arg1 *ssm.GetOpsMetadataInput
	}
	getOpsMetadataReturns struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}
	getOpsMetadataReturnsOnCall map[int]struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}
	GetOpsMetadataRequestStub        func(*ssm.GetOpsMetadataInput) (*request.Request, *ssm.GetOpsMetadataOutput)
	getOpsMetadataRequestMutex       sync.RWMutex
	getOpsMetadataRequestArgsForCall []struct {
		arg1 *ssm.GetOpsMetadataInput
	}
	getOpsMetadataRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetOpsMetadataOutput
	}
	getOpsMetadataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetOpsMetadataOutput
	}
	GetOpsMetadataWithContextStub        func(context.Context, *ssm.GetOpsMetadataInput, ...request.Option) (*ssm.GetOpsMetadataOutput, error)
	getOpsMetadataWithContextMutex       sync.RWMutex
	getOpsMetadataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetOpsMetadataInput
		arg3 []request.Option
	}
	getOpsMetadataWithContextReturns struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}
	getOpsMetadataWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}
	GetOpsSummaryStub        func(*ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error)
	getOpsSummaryMutex       sync.RWMutex
	getOpsSummaryArgsForCall []struct {
		arg1 *ssm.GetOpsSummaryInput
	}
	getOpsSummaryReturns struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}
	getOpsSummaryReturnsOnCall map[int]struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}
	GetOpsSummaryPagesStub        func(*ssm.GetOpsSummaryInput, func(*ssm.GetOpsSummaryOutput, bool) bool) error
	getOpsSummaryPagesMutex       sync.RWMutex
	getOpsSummaryPagesArgsForCall []struct {
		arg1 *ssm.GetOpsSummaryInput
		arg2 func(*ssm.GetOpsSummaryOutput, bool) bool
	}
	getOpsSummaryPagesReturns struct {
		result1 error
	}
	getOpsSummaryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetOpsSummaryPagesWithContextStub        func(context.Context, *ssm.GetOpsSummaryInput, func(*ssm.GetOpsSummaryOutput, bool) bool, ...request.Option) error
	getOpsSummaryPagesWithContextMutex       sync.RWMutex
	getOpsSummaryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetOpsSummaryInput
		arg3 func(*ssm.GetOpsSummaryOutput, bool) bool
		arg4 []request.Option
	}
	getOpsSummaryPagesWithContextReturns struct {
		result1 error
	}
	getOpsSummaryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetOpsSummaryRequestStub        func(*ssm.GetOpsSummaryInput) (*request.Request, *ssm.GetOpsSummaryOutput)
	getOpsSummaryRequestMutex       sync.RWMutex
	getOpsSummaryRequestArgsForCall []struct {
		arg1 *ssm.GetOpsSummaryInput
	}
	getOpsSummaryRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetOpsSummaryOutput
	}
	getOpsSummaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetOpsSummaryOutput
	}
	GetOpsSummaryWithContextStub        func(context.Context, *ssm.GetOpsSummaryInput, ...request.Option) (*ssm.GetOpsSummaryOutput, error)
	getOpsSummaryWithContextMutex       sync.RWMutex
	getOpsSummaryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetOpsSummaryInput
		arg3 []request.Option
	}
	getOpsSummaryWithContextReturns struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}
	getOpsSummaryWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}
	GetParameterStub        func(*ssm.GetParameterInput) (*ssm.GetParameterOutput, error)
	getParameterMutex       sync.RWMutex
	getParameterArgsForCall []struct {
		arg1 *ssm.GetParameterInput
	}
	getParameterReturns struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}
	getParameterReturnsOnCall map[int]struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}
	GetParameterHistoryStub        func(*ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error)
	getParameterHistoryMutex       sync.RWMutex
	getParameterHistoryArgsForCall []struct {
		arg1 *ssm.GetParameterHistoryInput
	}
	getParameterHistoryReturns struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}
	getParameterHistoryReturnsOnCall map[int]struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}
	GetParameterHistoryPagesStub        func(*ssm.GetParameterHistoryInput, func(*ssm.GetParameterHistoryOutput, bool) bool) error
	getParameterHistoryPagesMutex       sync.RWMutex
	getParameterHistoryPagesArgsForCall []struct {
		arg1 *ssm.GetParameterHistoryInput
		arg2 func(*ssm.GetParameterHistoryOutput, bool) bool
	}
	getParameterHistoryPagesReturns struct {
		result1 error
	}
	getParameterHistoryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetParameterHistoryPagesWithContextStub        func(context.Context, *ssm.GetParameterHistoryInput, func(*ssm.GetParameterHistoryOutput, bool) bool, ...request.Option) error
	getParameterHistoryPagesWithContextMutex       sync.RWMutex
	getParameterHistoryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParameterHistoryInput
		arg3 func(*ssm.GetParameterHistoryOutput, bool) bool
		arg4 []request.Option
	}
	getParameterHistoryPagesWithContextReturns struct {
		result1 error
	}
	getParameterHistoryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetParameterHistoryRequestStub        func(*ssm.GetParameterHistoryInput) (*request.Request, *ssm.GetParameterHistoryOutput)
	getParameterHistoryRequestMutex       sync.RWMutex
	getParameterHistoryRequestArgsForCall []struct {
		arg1 *ssm.GetParameterHistoryInput
	}
	getParameterHistoryRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetParameterHistoryOutput
	}
	getParameterHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetParameterHistoryOutput
	}
	GetParameterHistoryWithContextStub        func(context.Context, *ssm.GetParameterHistoryInput, ...request.Option) (*ssm.GetParameterHistoryOutput, error)
	getParameterHistoryWithContextMutex       sync.RWMutex
	getParameterHistoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParameterHistoryInput
		arg3 []request.Option
	}
	getParameterHistoryWithContextReturns struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}
	getParameterHistoryWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}
	GetParameterRequestStub        func(*ssm.GetParameterInput) (*request.Request, *ssm.GetParameterOutput)
	getParameterRequestMutex       sync.RWMutex
	getParameterRequestArgsForCall []struct {
		arg1 *ssm.GetParameterInput
	}
	getParameterRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetParameterOutput
	}
	getParameterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetParameterOutput
	}
	GetParameterWithContextStub        func(context.Context, *ssm.GetParameterInput, ...request.Option) (*ssm.GetParameterOutput, error)
	getParameterWithContextMutex       sync.RWMutex
	getParameterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParameterInput
		arg3 []request.Option
	}
	getParameterWithContextReturns struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}
	getParameterWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}
	GetParametersStub        func(*ssm.GetParametersInput) (*ssm.GetParametersOutput, error)
	getParametersMutex       sync.RWMutex
	getParametersArgsForCall []struct {
		arg1 *ssm.GetParametersInput
	}
	getParametersReturns struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}
	getParametersReturnsOnCall map[int]struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}
	GetParametersByPathStub        func(*ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error)
	getParametersByPathMutex       sync.RWMutex
	getParametersByPathArgsForCall []struct {
		arg1 *ssm.GetParametersByPathInput
	}
	getParametersByPathReturns struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}
	getParametersByPathReturnsOnCall map[int]struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}
	GetParametersByPathPagesStub        func(*ssm.GetParametersByPathInput, func(*ssm.GetParametersByPathOutput, bool) bool) error
	getParametersByPathPagesMutex       sync.RWMutex
	getParametersByPathPagesArgsForCall []struct {
		arg1 *ssm.GetParametersByPathInput
		arg2 func(*ssm.GetParametersByPathOutput, bool) bool
	}
	getParametersByPathPagesReturns struct {
		result1 error
	}
	getParametersByPathPagesReturnsOnCall map[int]struct {
		result1 error
	}
	GetParametersByPathPagesWithContextStub        func(context.Context, *ssm.GetParametersByPathInput, func(*ssm.GetParametersByPathOutput, bool) bool, ...request.Option) error
	getParametersByPathPagesWithContextMutex       sync.RWMutex
	getParametersByPathPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParametersByPathInput
		arg3 func(*ssm.GetParametersByPathOutput, bool) bool
		arg4 []request.Option
	}
	getParametersByPathPagesWithContextReturns struct {
		result1 error
	}
	getParametersByPathPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	GetParametersByPathRequestStub        func(*ssm.GetParametersByPathInput) (*request.Request, *ssm.GetParametersByPathOutput)
	getParametersByPathRequestMutex       sync.RWMutex
	getParametersByPathRequestArgsForCall []struct {
		arg1 *ssm.GetParametersByPathInput
	}
	getParametersByPathRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetParametersByPathOutput
	}
	getParametersByPathRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetParametersByPathOutput
	}
	GetParametersByPathWithContextStub        func(context.Context, *ssm.GetParametersByPathInput, ...request.Option) (*ssm.GetParametersByPathOutput, error)
	getParametersByPathWithContextMutex       sync.RWMutex
	getParametersByPathWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParametersByPathInput
		arg3 []request.Option
	}
	getParametersByPathWithContextReturns struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}
	getParametersByPathWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}
	GetParametersRequestStub        func(*ssm.GetParametersInput) (*request.Request, *ssm.GetParametersOutput)
	getParametersRequestMutex       sync.RWMutex
	getParametersRequestArgsForCall []struct {
		arg1 *ssm.GetParametersInput
	}
	getParametersRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetParametersOutput
	}
	getParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetParametersOutput
	}
	GetParametersWithContextStub        func(context.Context, *ssm.GetParametersInput, ...request.Option) (*ssm.GetParametersOutput, error)
	getParametersWithContextMutex       sync.RWMutex
	getParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParametersInput
		arg3 []request.Option
	}
	getParametersWithContextReturns struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}
	getParametersWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}
	GetPatchBaselineStub        func(*ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error)
	getPatchBaselineMutex       sync.RWMutex
	getPatchBaselineArgsForCall []struct {
		arg1 *ssm.GetPatchBaselineInput
	}
	getPatchBaselineReturns struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}
	getPatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}
	GetPatchBaselineForPatchGroupStub        func(*ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error)
	getPatchBaselineForPatchGroupMutex       sync.RWMutex
	getPatchBaselineForPatchGroupArgsForCall []struct {
		arg1 *ssm.GetPatchBaselineForPatchGroupInput
	}
	getPatchBaselineForPatchGroupReturns struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}
	getPatchBaselineForPatchGroupReturnsOnCall map[int]struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}
	GetPatchBaselineForPatchGroupRequestStub        func(*ssm.GetPatchBaselineForPatchGroupInput) (*request.Request, *ssm.GetPatchBaselineForPatchGroupOutput)
	getPatchBaselineForPatchGroupRequestMutex       sync.RWMutex
	getPatchBaselineForPatchGroupRequestArgsForCall []struct {
		arg1 *ssm.GetPatchBaselineForPatchGroupInput
	}
	getPatchBaselineForPatchGroupRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineForPatchGroupOutput
	}
	getPatchBaselineForPatchGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineForPatchGroupOutput
	}
	GetPatchBaselineForPatchGroupWithContextStub        func(context.Context, *ssm.GetPatchBaselineForPatchGroupInput, ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error)
	getPatchBaselineForPatchGroupWithContextMutex       sync.RWMutex
	getPatchBaselineForPatchGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetPatchBaselineForPatchGroupInput
		arg3 []request.Option
	}
	getPatchBaselineForPatchGroupWithContextReturns struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}
	getPatchBaselineForPatchGroupWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}
	GetPatchBaselineRequestStub        func(*ssm.GetPatchBaselineInput) (*request.Request, *ssm.GetPatchBaselineOutput)
	getPatchBaselineRequestMutex       sync.RWMutex
	getPatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.GetPatchBaselineInput
	}
	getPatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineOutput
	}
	getPatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineOutput
	}
	GetPatchBaselineWithContextStub        func(context.Context, *ssm.GetPatchBaselineInput, ...request.Option) (*ssm.GetPatchBaselineOutput, error)
	getPatchBaselineWithContextMutex       sync.RWMutex
	getPatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetPatchBaselineInput
		arg3 []request.Option
	}
	getPatchBaselineWithContextReturns struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}
	getPatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}
	GetServiceSettingStub        func(*ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error)
	getServiceSettingMutex       sync.RWMutex
	getServiceSettingArgsForCall []struct {
		arg1 *ssm.GetServiceSettingInput
	}
	getServiceSettingReturns struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}
	getServiceSettingReturnsOnCall map[int]struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}
	GetServiceSettingRequestStub        func(*ssm.GetServiceSettingInput) (*request.Request, *ssm.GetServiceSettingOutput)
	getServiceSettingRequestMutex       sync.RWMutex
	getServiceSettingRequestArgsForCall []struct {
		arg1 *ssm.GetServiceSettingInput
	}
	getServiceSettingRequestReturns struct {
		result1 *request.Request
		result2 *ssm.GetServiceSettingOutput
	}
	getServiceSettingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.GetServiceSettingOutput
	}
	GetServiceSettingWithContextStub        func(context.Context, *ssm.GetServiceSettingInput, ...request.Option) (*ssm.GetServiceSettingOutput, error)
	getServiceSettingWithContextMutex       sync.RWMutex
	getServiceSettingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetServiceSettingInput
		arg3 []request.Option
	}
	getServiceSettingWithContextReturns struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}
	getServiceSettingWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}
	LabelParameterVersionStub        func(*ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error)
	labelParameterVersionMutex       sync.RWMutex
	labelParameterVersionArgsForCall []struct {
		arg1 *ssm.LabelParameterVersionInput
	}
	labelParameterVersionReturns struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}
	labelParameterVersionReturnsOnCall map[int]struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}
	LabelParameterVersionRequestStub        func(*ssm.LabelParameterVersionInput) (*request.Request, *ssm.LabelParameterVersionOutput)
	labelParameterVersionRequestMutex       sync.RWMutex
	labelParameterVersionRequestArgsForCall []struct {
		arg1 *ssm.LabelParameterVersionInput
	}
	labelParameterVersionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.LabelParameterVersionOutput
	}
	labelParameterVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.LabelParameterVersionOutput
	}
	LabelParameterVersionWithContextStub        func(context.Context, *ssm.LabelParameterVersionInput, ...request.Option) (*ssm.LabelParameterVersionOutput, error)
	labelParameterVersionWithContextMutex       sync.RWMutex
	labelParameterVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.LabelParameterVersionInput
		arg3 []request.Option
	}
	labelParameterVersionWithContextReturns struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}
	labelParameterVersionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}
	ListAssociationVersionsStub        func(*ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error)
	listAssociationVersionsMutex       sync.RWMutex
	listAssociationVersionsArgsForCall []struct {
		arg1 *ssm.ListAssociationVersionsInput
	}
	listAssociationVersionsReturns struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}
	listAssociationVersionsReturnsOnCall map[int]struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}
	ListAssociationVersionsPagesStub        func(*ssm.ListAssociationVersionsInput, func(*ssm.ListAssociationVersionsOutput, bool) bool) error
	listAssociationVersionsPagesMutex       sync.RWMutex
	listAssociationVersionsPagesArgsForCall []struct {
		arg1 *ssm.ListAssociationVersionsInput
		arg2 func(*ssm.ListAssociationVersionsOutput, bool) bool
	}
	listAssociationVersionsPagesReturns struct {
		result1 error
	}
	listAssociationVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAssociationVersionsPagesWithContextStub        func(context.Context, *ssm.ListAssociationVersionsInput, func(*ssm.ListAssociationVersionsOutput, bool) bool, ...request.Option) error
	listAssociationVersionsPagesWithContextMutex       sync.RWMutex
	listAssociationVersionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationVersionsInput
		arg3 func(*ssm.ListAssociationVersionsOutput, bool) bool
		arg4 []request.Option
	}
	listAssociationVersionsPagesWithContextReturns struct {
		result1 error
	}
	listAssociationVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAssociationVersionsRequestStub        func(*ssm.ListAssociationVersionsInput) (*request.Request, *ssm.ListAssociationVersionsOutput)
	listAssociationVersionsRequestMutex       sync.RWMutex
	listAssociationVersionsRequestArgsForCall []struct {
		arg1 *ssm.ListAssociationVersionsInput
	}
	listAssociationVersionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListAssociationVersionsOutput
	}
	listAssociationVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListAssociationVersionsOutput
	}
	ListAssociationVersionsWithContextStub        func(context.Context, *ssm.ListAssociationVersionsInput, ...request.Option) (*ssm.ListAssociationVersionsOutput, error)
	listAssociationVersionsWithContextMutex       sync.RWMutex
	listAssociationVersionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationVersionsInput
		arg3 []request.Option
	}
	listAssociationVersionsWithContextReturns struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}
	listAssociationVersionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}
	ListAssociationsStub        func(*ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error)
	listAssociationsMutex       sync.RWMutex
	listAssociationsArgsForCall []struct {
		arg1 *ssm.ListAssociationsInput
	}
	listAssociationsReturns struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}
	listAssociationsReturnsOnCall map[int]struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}
	ListAssociationsPagesStub        func(*ssm.ListAssociationsInput, func(*ssm.ListAssociationsOutput, bool) bool) error
	listAssociationsPagesMutex       sync.RWMutex
	listAssociationsPagesArgsForCall []struct {
		arg1 *ssm.ListAssociationsInput
		arg2 func(*ssm.ListAssociationsOutput, bool) bool
	}
	listAssociationsPagesReturns struct {
		result1 error
	}
	listAssociationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAssociationsPagesWithContextStub        func(context.Context, *ssm.ListAssociationsInput, func(*ssm.ListAssociationsOutput, bool) bool, ...request.Option) error
	listAssociationsPagesWithContextMutex       sync.RWMutex
	listAssociationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationsInput
		arg3 func(*ssm.ListAssociationsOutput, bool) bool
		arg4 []request.Option
	}
	listAssociationsPagesWithContextReturns struct {
		result1 error
	}
	listAssociationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAssociationsRequestStub        func(*ssm.ListAssociationsInput) (*request.Request, *ssm.ListAssociationsOutput)
	listAssociationsRequestMutex       sync.RWMutex
	listAssociationsRequestArgsForCall []struct {
		arg1 *ssm.ListAssociationsInput
	}
	listAssociationsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListAssociationsOutput
	}
	listAssociationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListAssociationsOutput
	}
	ListAssociationsWithContextStub        func(context.Context, *ssm.ListAssociationsInput, ...request.Option) (*ssm.ListAssociationsOutput, error)
	listAssociationsWithContextMutex       sync.RWMutex
	listAssociationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationsInput
		arg3 []request.Option
	}
	listAssociationsWithContextReturns struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}
	listAssociationsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}
	ListCommandInvocationsStub        func(*ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error)
	listCommandInvocationsMutex       sync.RWMutex
	listCommandInvocationsArgsForCall []struct {
		arg1 *ssm.ListCommandInvocationsInput
	}
	listCommandInvocationsReturns struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}
	listCommandInvocationsReturnsOnCall map[int]struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}
	ListCommandInvocationsPagesStub        func(*ssm.ListCommandInvocationsInput, func(*ssm.ListCommandInvocationsOutput, bool) bool) error
	listCommandInvocationsPagesMutex       sync.RWMutex
	listCommandInvocationsPagesArgsForCall []struct {
		arg1 *ssm.ListCommandInvocationsInput
		arg2 func(*ssm.ListCommandInvocationsOutput, bool) bool
	}
	listCommandInvocationsPagesReturns struct {
		result1 error
	}
	listCommandInvocationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListCommandInvocationsPagesWithContextStub        func(context.Context, *ssm.ListCommandInvocationsInput, func(*ssm.ListCommandInvocationsOutput, bool) bool, ...request.Option) error
	listCommandInvocationsPagesWithContextMutex       sync.RWMutex
	listCommandInvocationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListCommandInvocationsInput
		arg3 func(*ssm.ListCommandInvocationsOutput, bool) bool
		arg4 []request.Option
	}
	listCommandInvocationsPagesWithContextReturns struct {
		result1 error
	}
	listCommandInvocationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListCommandInvocationsRequestStub        func(*ssm.ListCommandInvocationsInput) (*request.Request, *ssm.ListCommandInvocationsOutput)
	listCommandInvocationsRequestMutex       sync.RWMutex
	listCommandInvocationsRequestArgsForCall []struct {
		arg1 *ssm.ListCommandInvocationsInput
	}
	listCommandInvocationsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListCommandInvocationsOutput
	}
	listCommandInvocationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListCommandInvocationsOutput
	}
	ListCommandInvocationsWithContextStub        func(context.Context, *ssm.ListCommandInvocationsInput, ...request.Option) (*ssm.ListCommandInvocationsOutput, error)
	listCommandInvocationsWithContextMutex       sync.RWMutex
	listCommandInvocationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListCommandInvocationsInput
		arg3 []request.Option
	}
	listCommandInvocationsWithContextReturns struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}
	listCommandInvocationsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}
	ListCommandsStub        func(*ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error)
	listCommandsMutex       sync.RWMutex
	listCommandsArgsForCall []struct {
		arg1 *ssm.ListCommandsInput
	}
	listCommandsReturns struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}
	listCommandsReturnsOnCall map[int]struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}
	ListCommandsPagesStub        func(*ssm.ListCommandsInput, func(*ssm.ListCommandsOutput, bool) bool) error
	listCommandsPagesMutex       sync.RWMutex
	listCommandsPagesArgsForCall []struct {
		arg1 *ssm.ListCommandsInput
		arg2 func(*ssm.ListCommandsOutput, bool) bool
	}
	listCommandsPagesReturns struct {
		result1 error
	}
	listCommandsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListCommandsPagesWithContextStub        func(context.Context, *ssm.ListCommandsInput, func(*ssm.ListCommandsOutput, bool) bool, ...request.Option) error
	listCommandsPagesWithContextMutex       sync.RWMutex
	listCommandsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListCommandsInput
		arg3 func(*ssm.ListCommandsOutput, bool) bool
		arg4 []request.Option
	}
	listCommandsPagesWithContextReturns struct {
		result1 error
	}
	listCommandsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListCommandsRequestStub        func(*ssm.ListCommandsInput) (*request.Request, *ssm.ListCommandsOutput)
	listCommandsRequestMutex       sync.RWMutex
	listCommandsRequestArgsForCall []struct {
		arg1 *ssm.ListCommandsInput
	}
	listCommandsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListCommandsOutput
	}
	listCommandsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListCommandsOutput
	}
	ListCommandsWithContextStub        func(context.Context, *ssm.ListCommandsInput, ...request.Option) (*ssm.ListCommandsOutput, error)
	listCommandsWithContextMutex       sync.RWMutex
	listCommandsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListCommandsInput
		arg3 []request.Option
	}
	listCommandsWithContextReturns struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}
	listCommandsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}
	ListComplianceItemsStub        func(*ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error)
	listComplianceItemsMutex       sync.RWMutex
	listComplianceItemsArgsForCall []struct {
		arg1 *ssm.ListComplianceItemsInput
	}
	listComplianceItemsReturns struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}
	listComplianceItemsReturnsOnCall map[int]struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}
	ListComplianceItemsPagesStub        func(*ssm.ListComplianceItemsInput, func(*ssm.ListComplianceItemsOutput, bool) bool) error
	listComplianceItemsPagesMutex       sync.RWMutex
	listComplianceItemsPagesArgsForCall []struct {
		arg1 *ssm.ListComplianceItemsInput
		arg2 func(*ssm.ListComplianceItemsOutput, bool) bool
	}
	listComplianceItemsPagesReturns struct {
		result1 error
	}
	listComplianceItemsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListComplianceItemsPagesWithContextStub        func(context.Context, *ssm.ListComplianceItemsInput, func(*ssm.ListComplianceItemsOutput, bool) bool, ...request.Option) error
	listComplianceItemsPagesWithContextMutex       sync.RWMutex
	listComplianceItemsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceItemsInput
		arg3 func(*ssm.ListComplianceItemsOutput, bool) bool
		arg4 []request.Option
	}
	listComplianceItemsPagesWithContextReturns struct {
		result1 error
	}
	listComplianceItemsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListComplianceItemsRequestStub        func(*ssm.ListComplianceItemsInput) (*request.Request, *ssm.ListComplianceItemsOutput)
	listComplianceItemsRequestMutex       sync.RWMutex
	listComplianceItemsRequestArgsForCall []struct {
		arg1 *ssm.ListComplianceItemsInput
	}
	listComplianceItemsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListComplianceItemsOutput
	}
	listComplianceItemsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListComplianceItemsOutput
	}
	ListComplianceItemsWithContextStub        func(context.Context, *ssm.ListComplianceItemsInput, ...request.Option) (*ssm.ListComplianceItemsOutput, error)
	listComplianceItemsWithContextMutex       sync.RWMutex
	listComplianceItemsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceItemsInput
		arg3 []request.Option
	}
	listComplianceItemsWithContextReturns struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}
	listComplianceItemsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}
	ListComplianceSummariesStub        func(*ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error)
	listComplianceSummariesMutex       sync.RWMutex
	listComplianceSummariesArgsForCall []struct {
		arg1 *ssm.ListComplianceSummariesInput
	}
	listComplianceSummariesReturns struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}
	listComplianceSummariesReturnsOnCall map[int]struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}
	ListComplianceSummariesPagesStub        func(*ssm.ListComplianceSummariesInput, func(*ssm.ListComplianceSummariesOutput, bool) bool) error
	listComplianceSummariesPagesMutex       sync.RWMutex
	listComplianceSummariesPagesArgsForCall []struct {
		arg1 *ssm.ListComplianceSummariesInput
		arg2 func(*ssm.ListComplianceSummariesOutput, bool) bool
	}
	listComplianceSummariesPagesReturns struct {
		result1 error
	}
	listComplianceSummariesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListComplianceSummariesPagesWithContextStub        func(context.Context, *ssm.ListComplianceSummariesInput, func(*ssm.ListComplianceSummariesOutput, bool) bool, ...request.Option) error
	listComplianceSummariesPagesWithContextMutex       sync.RWMutex
	listComplianceSummariesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceSummariesInput
		arg3 func(*ssm.ListComplianceSummariesOutput, bool) bool
		arg4 []request.Option
	}
	listComplianceSummariesPagesWithContextReturns struct {
		result1 error
	}
	listComplianceSummariesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListComplianceSummariesRequestStub        func(*ssm.ListComplianceSummariesInput) (*request.Request, *ssm.ListComplianceSummariesOutput)
	listComplianceSummariesRequestMutex       sync.RWMutex
	listComplianceSummariesRequestArgsForCall []struct {
		arg1 *ssm.ListComplianceSummariesInput
	}
	listComplianceSummariesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListComplianceSummariesOutput
	}
	listComplianceSummariesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListComplianceSummariesOutput
	}
	ListComplianceSummariesWithContextStub        func(context.Context, *ssm.ListComplianceSummariesInput, ...request.Option) (*ssm.ListComplianceSummariesOutput, error)
	listComplianceSummariesWithContextMutex       sync.RWMutex
	listComplianceSummariesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceSummariesInput
		arg3 []request.Option
	}
	listComplianceSummariesWithContextReturns struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}
	listComplianceSummariesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}
	ListDocumentMetadataHistoryStub        func(*ssm.ListDocumentMetadataHistoryInput) (*ssm.ListDocumentMetadataHistoryOutput, error)
	listDocumentMetadataHistoryMutex       sync.RWMutex
	listDocumentMetadataHistoryArgsForCall []struct {
		arg1 *ssm.ListDocumentMetadataHistoryInput
	}
	listDocumentMetadataHistoryReturns struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}
	listDocumentMetadataHistoryReturnsOnCall map[int]struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}
	ListDocumentMetadataHistoryRequestStub        func(*ssm.ListDocumentMetadataHistoryInput) (*request.Request, *ssm.ListDocumentMetadataHistoryOutput)
	listDocumentMetadataHistoryRequestMutex       sync.RWMutex
	listDocumentMetadataHistoryRequestArgsForCall []struct {
		arg1 *ssm.ListDocumentMetadataHistoryInput
	}
	listDocumentMetadataHistoryRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListDocumentMetadataHistoryOutput
	}
	listDocumentMetadataHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListDocumentMetadataHistoryOutput
	}
	ListDocumentMetadataHistoryWithContextStub        func(context.Context, *ssm.ListDocumentMetadataHistoryInput, ...request.Option) (*ssm.ListDocumentMetadataHistoryOutput, error)
	listDocumentMetadataHistoryWithContextMutex       sync.RWMutex
	listDocumentMetadataHistoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentMetadataHistoryInput
		arg3 []request.Option
	}
	listDocumentMetadataHistoryWithContextReturns struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}
	listDocumentMetadataHistoryWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}
	ListDocumentVersionsStub        func(*ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error)
	listDocumentVersionsMutex       sync.RWMutex
	listDocumentVersionsArgsForCall []struct {
		arg1 *ssm.ListDocumentVersionsInput
	}
	listDocumentVersionsReturns struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}
	listDocumentVersionsReturnsOnCall map[int]struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}
	ListDocumentVersionsPagesStub        func(*ssm.ListDocumentVersionsInput, func(*ssm.ListDocumentVersionsOutput, bool) bool) error
	listDocumentVersionsPagesMutex       sync.RWMutex
	listDocumentVersionsPagesArgsForCall []struct {
		arg1 *ssm.ListDocumentVersionsInput
		arg2 func(*ssm.ListDocumentVersionsOutput, bool) bool
	}
	listDocumentVersionsPagesReturns struct {
		result1 error
	}
	listDocumentVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListDocumentVersionsPagesWithContextStub        func(context.Context, *ssm.ListDocumentVersionsInput, func(*ssm.ListDocumentVersionsOutput, bool) bool, ...request.Option) error
	listDocumentVersionsPagesWithContextMutex       sync.RWMutex
	listDocumentVersionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentVersionsInput
		arg3 func(*ssm.ListDocumentVersionsOutput, bool) bool
		arg4 []request.Option
	}
	listDocumentVersionsPagesWithContextReturns struct {
		result1 error
	}
	listDocumentVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListDocumentVersionsRequestStub        func(*ssm.ListDocumentVersionsInput) (*request.Request, *ssm.ListDocumentVersionsOutput)
	listDocumentVersionsRequestMutex       sync.RWMutex
	listDocumentVersionsRequestArgsForCall []struct {
		arg1 *ssm.ListDocumentVersionsInput
	}
	listDocumentVersionsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListDocumentVersionsOutput
	}
	listDocumentVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListDocumentVersionsOutput
	}
	ListDocumentVersionsWithContextStub        func(context.Context, *ssm.ListDocumentVersionsInput, ...request.Option) (*ssm.ListDocumentVersionsOutput, error)
	listDocumentVersionsWithContextMutex       sync.RWMutex
	listDocumentVersionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentVersionsInput
		arg3 []request.Option
	}
	listDocumentVersionsWithContextReturns struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}
	listDocumentVersionsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}
	ListDocumentsStub        func(*ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error)
	listDocumentsMutex       sync.RWMutex
	listDocumentsArgsForCall []struct {
		arg1 *ssm.ListDocumentsInput
	}
	listDocumentsReturns struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}
	listDocumentsReturnsOnCall map[int]struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}
	ListDocumentsPagesStub        func(*ssm.ListDocumentsInput, func(*ssm.ListDocumentsOutput, bool) bool) error
	listDocumentsPagesMutex       sync.RWMutex
	listDocumentsPagesArgsForCall []struct {
		arg1 *ssm.ListDocumentsInput
		arg2 func(*ssm.ListDocumentsOutput, bool) bool
	}
	listDocumentsPagesReturns struct {
		result1 error
	}
	listDocumentsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListDocumentsPagesWithContextStub        func(context.Context, *ssm.ListDocumentsInput, func(*ssm.ListDocumentsOutput, bool) bool, ...request.Option) error
	listDocumentsPagesWithContextMutex       sync.RWMutex
	listDocumentsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentsInput
		arg3 func(*ssm.ListDocumentsOutput, bool) bool
		arg4 []request.Option
	}
	listDocumentsPagesWithContextReturns struct {
		result1 error
	}
	listDocumentsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListDocumentsRequestStub        func(*ssm.ListDocumentsInput) (*request.Request, *ssm.ListDocumentsOutput)
	listDocumentsRequestMutex       sync.RWMutex
	listDocumentsRequestArgsForCall []struct {
		arg1 *ssm.ListDocumentsInput
	}
	listDocumentsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListDocumentsOutput
	}
	listDocumentsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListDocumentsOutput
	}
	ListDocumentsWithContextStub        func(context.Context, *ssm.ListDocumentsInput, ...request.Option) (*ssm.ListDocumentsOutput, error)
	listDocumentsWithContextMutex       sync.RWMutex
	listDocumentsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentsInput
		arg3 []request.Option
	}
	listDocumentsWithContextReturns struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}
	listDocumentsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}
	ListInventoryEntriesStub        func(*ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error)
	listInventoryEntriesMutex       sync.RWMutex
	listInventoryEntriesArgsForCall []struct {
		arg1 *ssm.ListInventoryEntriesInput
	}
	listInventoryEntriesReturns struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}
	listInventoryEntriesReturnsOnCall map[int]struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}
	ListInventoryEntriesRequestStub        func(*ssm.ListInventoryEntriesInput) (*request.Request, *ssm.ListInventoryEntriesOutput)
	listInventoryEntriesRequestMutex       sync.RWMutex
	listInventoryEntriesRequestArgsForCall []struct {
		arg1 *ssm.ListInventoryEntriesInput
	}
	listInventoryEntriesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListInventoryEntriesOutput
	}
	listInventoryEntriesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListInventoryEntriesOutput
	}
	ListInventoryEntriesWithContextStub        func(context.Context, *ssm.ListInventoryEntriesInput, ...request.Option) (*ssm.ListInventoryEntriesOutput, error)
	listInventoryEntriesWithContextMutex       sync.RWMutex
	listInventoryEntriesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListInventoryEntriesInput
		arg3 []request.Option
	}
	listInventoryEntriesWithContextReturns struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}
	listInventoryEntriesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}
	ListOpsItemEventsStub        func(*ssm.ListOpsItemEventsInput) (*ssm.ListOpsItemEventsOutput, error)
	listOpsItemEventsMutex       sync.RWMutex
	listOpsItemEventsArgsForCall []struct {
		arg1 *ssm.ListOpsItemEventsInput
	}
	listOpsItemEventsReturns struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}
	listOpsItemEventsReturnsOnCall map[int]struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}
	ListOpsItemEventsPagesStub        func(*ssm.ListOpsItemEventsInput, func(*ssm.ListOpsItemEventsOutput, bool) bool) error
	listOpsItemEventsPagesMutex       sync.RWMutex
	listOpsItemEventsPagesArgsForCall []struct {
		arg1 *ssm.ListOpsItemEventsInput
		arg2 func(*ssm.ListOpsItemEventsOutput, bool) bool
	}
	listOpsItemEventsPagesReturns struct {
		result1 error
	}
	listOpsItemEventsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsItemEventsPagesWithContextStub        func(context.Context, *ssm.ListOpsItemEventsInput, func(*ssm.ListOpsItemEventsOutput, bool) bool, ...request.Option) error
	listOpsItemEventsPagesWithContextMutex       sync.RWMutex
	listOpsItemEventsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemEventsInput
		arg3 func(*ssm.ListOpsItemEventsOutput, bool) bool
		arg4 []request.Option
	}
	listOpsItemEventsPagesWithContextReturns struct {
		result1 error
	}
	listOpsItemEventsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsItemEventsRequestStub        func(*ssm.ListOpsItemEventsInput) (*request.Request, *ssm.ListOpsItemEventsOutput)
	listOpsItemEventsRequestMutex       sync.RWMutex
	listOpsItemEventsRequestArgsForCall []struct {
		arg1 *ssm.ListOpsItemEventsInput
	}
	listOpsItemEventsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemEventsOutput
	}
	listOpsItemEventsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemEventsOutput
	}
	ListOpsItemEventsWithContextStub        func(context.Context, *ssm.ListOpsItemEventsInput, ...request.Option) (*ssm.ListOpsItemEventsOutput, error)
	listOpsItemEventsWithContextMutex       sync.RWMutex
	listOpsItemEventsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemEventsInput
		arg3 []request.Option
	}
	listOpsItemEventsWithContextReturns struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}
	listOpsItemEventsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}
	ListOpsItemRelatedItemsStub        func(*ssm.ListOpsItemRelatedItemsInput) (*ssm.ListOpsItemRelatedItemsOutput, error)
	listOpsItemRelatedItemsMutex       sync.RWMutex
	listOpsItemRelatedItemsArgsForCall []struct {
		arg1 *ssm.ListOpsItemRelatedItemsInput
	}
	listOpsItemRelatedItemsReturns struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}
	listOpsItemRelatedItemsReturnsOnCall map[int]struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}
	ListOpsItemRelatedItemsPagesStub        func(*ssm.ListOpsItemRelatedItemsInput, func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool) error
	listOpsItemRelatedItemsPagesMutex       sync.RWMutex
	listOpsItemRelatedItemsPagesArgsForCall []struct {
		arg1 *ssm.ListOpsItemRelatedItemsInput
		arg2 func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool
	}
	listOpsItemRelatedItemsPagesReturns struct {
		result1 error
	}
	listOpsItemRelatedItemsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsItemRelatedItemsPagesWithContextStub        func(context.Context, *ssm.ListOpsItemRelatedItemsInput, func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool, ...request.Option) error
	listOpsItemRelatedItemsPagesWithContextMutex       sync.RWMutex
	listOpsItemRelatedItemsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemRelatedItemsInput
		arg3 func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool
		arg4 []request.Option
	}
	listOpsItemRelatedItemsPagesWithContextReturns struct {
		result1 error
	}
	listOpsItemRelatedItemsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsItemRelatedItemsRequestStub        func(*ssm.ListOpsItemRelatedItemsInput) (*request.Request, *ssm.ListOpsItemRelatedItemsOutput)
	listOpsItemRelatedItemsRequestMutex       sync.RWMutex
	listOpsItemRelatedItemsRequestArgsForCall []struct {
		arg1 *ssm.ListOpsItemRelatedItemsInput
	}
	listOpsItemRelatedItemsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemRelatedItemsOutput
	}
	listOpsItemRelatedItemsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemRelatedItemsOutput
	}
	ListOpsItemRelatedItemsWithContextStub        func(context.Context, *ssm.ListOpsItemRelatedItemsInput, ...request.Option) (*ssm.ListOpsItemRelatedItemsOutput, error)
	listOpsItemRelatedItemsWithContextMutex       sync.RWMutex
	listOpsItemRelatedItemsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemRelatedItemsInput
		arg3 []request.Option
	}
	listOpsItemRelatedItemsWithContextReturns struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}
	listOpsItemRelatedItemsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}
	ListOpsMetadataStub        func(*ssm.ListOpsMetadataInput) (*ssm.ListOpsMetadataOutput, error)
	listOpsMetadataMutex       sync.RWMutex
	listOpsMetadataArgsForCall []struct {
		arg1 *ssm.ListOpsMetadataInput
	}
	listOpsMetadataReturns struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}
	listOpsMetadataReturnsOnCall map[int]struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}
	ListOpsMetadataPagesStub        func(*ssm.ListOpsMetadataInput, func(*ssm.ListOpsMetadataOutput, bool) bool) error
	listOpsMetadataPagesMutex       sync.RWMutex
	listOpsMetadataPagesArgsForCall []struct {
		arg1 *ssm.ListOpsMetadataInput
		arg2 func(*ssm.ListOpsMetadataOutput, bool) bool
	}
	listOpsMetadataPagesReturns struct {
		result1 error
	}
	listOpsMetadataPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsMetadataPagesWithContextStub        func(context.Context, *ssm.ListOpsMetadataInput, func(*ssm.ListOpsMetadataOutput, bool) bool, ...request.Option) error
	listOpsMetadataPagesWithContextMutex       sync.RWMutex
	listOpsMetadataPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListOpsMetadataInput
		arg3 func(*ssm.ListOpsMetadataOutput, bool) bool
		arg4 []request.Option
	}
	listOpsMetadataPagesWithContextReturns struct {
		result1 error
	}
	listOpsMetadataPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListOpsMetadataRequestStub        func(*ssm.ListOpsMetadataInput) (*request.Request, *ssm.ListOpsMetadataOutput)
	listOpsMetadataRequestMutex       sync.RWMutex
	listOpsMetadataRequestArgsForCall []struct {
		arg1 *ssm.ListOpsMetadataInput
	}
	listOpsMetadataRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListOpsMetadataOutput
	}
	listOpsMetadataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListOpsMetadataOutput
	}
	ListOpsMetadataWithContextStub        func(context.Context, *ssm.ListOpsMetadataInput, ...request.Option) (*ssm.ListOpsMetadataOutput, error)
	listOpsMetadataWithContextMutex       sync.RWMutex
	listOpsMetadataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListOpsMetadataInput
		arg3 []request.Option
	}
	listOpsMetadataWithContextReturns struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}
	listOpsMetadataWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}
	ListResourceComplianceSummariesStub        func(*ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error)
	listResourceComplianceSummariesMutex       sync.RWMutex
	listResourceComplianceSummariesArgsForCall []struct {
		arg1 *ssm.ListResourceComplianceSummariesInput
	}
	listResourceComplianceSummariesReturns struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}
	listResourceComplianceSummariesReturnsOnCall map[int]struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}
	ListResourceComplianceSummariesPagesStub        func(*ssm.ListResourceComplianceSummariesInput, func(*ssm.ListResourceComplianceSummariesOutput, bool) bool) error
	listResourceComplianceSummariesPagesMutex       sync.RWMutex
	listResourceComplianceSummariesPagesArgsForCall []struct {
		arg1 *ssm.ListResourceComplianceSummariesInput
		arg2 func(*ssm.ListResourceComplianceSummariesOutput, bool) bool
	}
	listResourceComplianceSummariesPagesReturns struct {
		result1 error
	}
	listResourceComplianceSummariesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListResourceComplianceSummariesPagesWithContextStub        func(context.Context, *ssm.ListResourceComplianceSummariesInput, func(*ssm.ListResourceComplianceSummariesOutput, bool) bool, ...request.Option) error
	listResourceComplianceSummariesPagesWithContextMutex       sync.RWMutex
	listResourceComplianceSummariesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListResourceComplianceSummariesInput
		arg3 func(*ssm.ListResourceComplianceSummariesOutput, bool) bool
		arg4 []request.Option
	}
	listResourceComplianceSummariesPagesWithContextReturns struct {
		result1 error
	}
	listResourceComplianceSummariesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListResourceComplianceSummariesRequestStub        func(*ssm.ListResourceComplianceSummariesInput) (*request.Request, *ssm.ListResourceComplianceSummariesOutput)
	listResourceComplianceSummariesRequestMutex       sync.RWMutex
	listResourceComplianceSummariesRequestArgsForCall []struct {
		arg1 *ssm.ListResourceComplianceSummariesInput
	}
	listResourceComplianceSummariesRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListResourceComplianceSummariesOutput
	}
	listResourceComplianceSummariesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListResourceComplianceSummariesOutput
	}
	ListResourceComplianceSummariesWithContextStub        func(context.Context, *ssm.ListResourceComplianceSummariesInput, ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error)
	listResourceComplianceSummariesWithContextMutex       sync.RWMutex
	listResourceComplianceSummariesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListResourceComplianceSummariesInput
		arg3 []request.Option
	}
	listResourceComplianceSummariesWithContextReturns struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}
	listResourceComplianceSummariesWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}
	ListResourceDataSyncStub        func(*ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error)
	listResourceDataSyncMutex       sync.RWMutex
	listResourceDataSyncArgsForCall []struct {
		arg1 *ssm.ListResourceDataSyncInput
	}
	listResourceDataSyncReturns struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}
	listResourceDataSyncReturnsOnCall map[int]struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}
	ListResourceDataSyncPagesStub        func(*ssm.ListResourceDataSyncInput, func(*ssm.ListResourceDataSyncOutput, bool) bool) error
	listResourceDataSyncPagesMutex       sync.RWMutex
	listResourceDataSyncPagesArgsForCall []struct {
		arg1 *ssm.ListResourceDataSyncInput
		arg2 func(*ssm.ListResourceDataSyncOutput, bool) bool
	}
	listResourceDataSyncPagesReturns struct {
		result1 error
	}
	listResourceDataSyncPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListResourceDataSyncPagesWithContextStub        func(context.Context, *ssm.ListResourceDataSyncInput, func(*ssm.ListResourceDataSyncOutput, bool) bool, ...request.Option) error
	listResourceDataSyncPagesWithContextMutex       sync.RWMutex
	listResourceDataSyncPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListResourceDataSyncInput
		arg3 func(*ssm.ListResourceDataSyncOutput, bool) bool
		arg4 []request.Option
	}
	listResourceDataSyncPagesWithContextReturns struct {
		result1 error
	}
	listResourceDataSyncPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListResourceDataSyncRequestStub        func(*ssm.ListResourceDataSyncInput) (*request.Request, *ssm.ListResourceDataSyncOutput)
	listResourceDataSyncRequestMutex       sync.RWMutex
	listResourceDataSyncRequestArgsForCall []struct {
		arg1 *ssm.ListResourceDataSyncInput
	}
	listResourceDataSyncRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListResourceDataSyncOutput
	}
	listResourceDataSyncRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListResourceDataSyncOutput
	}
	ListResourceDataSyncWithContextStub        func(context.Context, *ssm.ListResourceDataSyncInput, ...request.Option) (*ssm.ListResourceDataSyncOutput, error)
	listResourceDataSyncWithContextMutex       sync.RWMutex
	listResourceDataSyncWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListResourceDataSyncInput
		arg3 []request.Option
	}
	listResourceDataSyncWithContextReturns struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}
	listResourceDataSyncWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}
	ListTagsForResourceStub        func(*ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *ssm.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*ssm.ListTagsForResourceInput) (*request.Request, *ssm.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *ssm.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ListTagsForResourceOutput
	}
	ListTagsForResourceWithContextStub        func(context.Context, *ssm.ListTagsForResourceInput, ...request.Option) (*ssm.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}
	ModifyDocumentPermissionStub        func(*ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error)
	modifyDocumentPermissionMutex       sync.RWMutex
	modifyDocumentPermissionArgsForCall []struct {
		arg1 *ssm.ModifyDocumentPermissionInput
	}
	modifyDocumentPermissionReturns struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}
	modifyDocumentPermissionReturnsOnCall map[int]struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}
	ModifyDocumentPermissionRequestStub        func(*ssm.ModifyDocumentPermissionInput) (*request.Request, *ssm.ModifyDocumentPermissionOutput)
	modifyDocumentPermissionRequestMutex       sync.RWMutex
	modifyDocumentPermissionRequestArgsForCall []struct {
		arg1 *ssm.ModifyDocumentPermissionInput
	}
	modifyDocumentPermissionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ModifyDocumentPermissionOutput
	}
	modifyDocumentPermissionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ModifyDocumentPermissionOutput
	}
	ModifyDocumentPermissionWithContextStub        func(context.Context, *ssm.ModifyDocumentPermissionInput, ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error)
	modifyDocumentPermissionWithContextMutex       sync.RWMutex
	modifyDocumentPermissionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ModifyDocumentPermissionInput
		arg3 []request.Option
	}
	modifyDocumentPermissionWithContextReturns struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}
	modifyDocumentPermissionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}
	PutComplianceItemsStub        func(*ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error)
	putComplianceItemsMutex       sync.RWMutex
	putComplianceItemsArgsForCall []struct {
		arg1 *ssm.PutComplianceItemsInput
	}
	putComplianceItemsReturns struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}
	putComplianceItemsReturnsOnCall map[int]struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}
	PutComplianceItemsRequestStub        func(*ssm.PutComplianceItemsInput) (*request.Request, *ssm.PutComplianceItemsOutput)
	putComplianceItemsRequestMutex       sync.RWMutex
	putComplianceItemsRequestArgsForCall []struct {
		arg1 *ssm.PutComplianceItemsInput
	}
	putComplianceItemsRequestReturns struct {
		result1 *request.Request
		result2 *ssm.PutComplianceItemsOutput
	}
	putComplianceItemsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.PutComplianceItemsOutput
	}
	PutComplianceItemsWithContextStub        func(context.Context, *ssm.PutComplianceItemsInput, ...request.Option) (*ssm.PutComplianceItemsOutput, error)
	putComplianceItemsWithContextMutex       sync.RWMutex
	putComplianceItemsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.PutComplianceItemsInput
		arg3 []request.Option
	}
	putComplianceItemsWithContextReturns struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}
	putComplianceItemsWithContextReturnsOnCall map[int]struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}
	PutInventoryStub        func(*ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error)
	putInventoryMutex       sync.RWMutex
	putInventoryArgsForCall []struct {
		arg1 *ssm.PutInventoryInput
	}
	putInventoryReturns struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}
	putInventoryReturnsOnCall map[int]struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}
	PutInventoryRequestStub        func(*ssm.PutInventoryInput) (*request.Request, *ssm.PutInventoryOutput)
	putInventoryRequestMutex       sync.RWMutex
	putInventoryRequestArgsForCall []struct {
		arg1 *ssm.PutInventoryInput
	}
	putInventoryRequestReturns struct {
		result1 *request.Request
		result2 *ssm.PutInventoryOutput
	}
	putInventoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.PutInventoryOutput
	}
	PutInventoryWithContextStub        func(context.Context, *ssm.PutInventoryInput, ...request.Option) (*ssm.PutInventoryOutput, error)
	putInventoryWithContextMutex       sync.RWMutex
	putInventoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.PutInventoryInput
		arg3 []request.Option
	}
	putInventoryWithContextReturns struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}
	putInventoryWithContextReturnsOnCall map[int]struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}
	PutParameterStub        func(*ssm.PutParameterInput) (*ssm.PutParameterOutput, error)
	putParameterMutex       sync.RWMutex
	putParameterArgsForCall []struct {
		arg1 *ssm.PutParameterInput
	}
	putParameterReturns struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}
	putParameterReturnsOnCall map[int]struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}
	PutParameterRequestStub        func(*ssm.PutParameterInput) (*request.Request, *ssm.PutParameterOutput)
	putParameterRequestMutex       sync.RWMutex
	putParameterRequestArgsForCall []struct {
		arg1 *ssm.PutParameterInput
	}
	putParameterRequestReturns struct {
		result1 *request.Request
		result2 *ssm.PutParameterOutput
	}
	putParameterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.PutParameterOutput
	}
	PutParameterWithContextStub        func(context.Context, *ssm.PutParameterInput, ...request.Option) (*ssm.PutParameterOutput, error)
	putParameterWithContextMutex       sync.RWMutex
	putParameterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.PutParameterInput
		arg3 []request.Option
	}
	putParameterWithContextReturns struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}
	putParameterWithContextReturnsOnCall map[int]struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}
	RegisterDefaultPatchBaselineStub        func(*ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error)
	registerDefaultPatchBaselineMutex       sync.RWMutex
	registerDefaultPatchBaselineArgsForCall []struct {
		arg1 *ssm.RegisterDefaultPatchBaselineInput
	}
	registerDefaultPatchBaselineReturns struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}
	registerDefaultPatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}
	RegisterDefaultPatchBaselineRequestStub        func(*ssm.RegisterDefaultPatchBaselineInput) (*request.Request, *ssm.RegisterDefaultPatchBaselineOutput)
	registerDefaultPatchBaselineRequestMutex       sync.RWMutex
	registerDefaultPatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.RegisterDefaultPatchBaselineInput
	}
	registerDefaultPatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.RegisterDefaultPatchBaselineOutput
	}
	registerDefaultPatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.RegisterDefaultPatchBaselineOutput
	}
	RegisterDefaultPatchBaselineWithContextStub        func(context.Context, *ssm.RegisterDefaultPatchBaselineInput, ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error)
	registerDefaultPatchBaselineWithContextMutex       sync.RWMutex
	registerDefaultPatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.RegisterDefaultPatchBaselineInput
		arg3 []request.Option
	}
	registerDefaultPatchBaselineWithContextReturns struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}
	registerDefaultPatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}
	RegisterPatchBaselineForPatchGroupStub        func(*ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)
	registerPatchBaselineForPatchGroupMutex       sync.RWMutex
	registerPatchBaselineForPatchGroupArgsForCall []struct {
		arg1 *ssm.RegisterPatchBaselineForPatchGroupInput
	}
	registerPatchBaselineForPatchGroupReturns struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	registerPatchBaselineForPatchGroupReturnsOnCall map[int]struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	RegisterPatchBaselineForPatchGroupRequestStub        func(*ssm.RegisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.RegisterPatchBaselineForPatchGroupOutput)
	registerPatchBaselineForPatchGroupRequestMutex       sync.RWMutex
	registerPatchBaselineForPatchGroupRequestArgsForCall []struct {
		arg1 *ssm.RegisterPatchBaselineForPatchGroupInput
	}
	registerPatchBaselineForPatchGroupRequestReturns struct {
		result1 *request.Request
		result2 *ssm.RegisterPatchBaselineForPatchGroupOutput
	}
	registerPatchBaselineForPatchGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.RegisterPatchBaselineForPatchGroupOutput
	}
	RegisterPatchBaselineForPatchGroupWithContextStub        func(context.Context, *ssm.RegisterPatchBaselineForPatchGroupInput, ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)
	registerPatchBaselineForPatchGroupWithContextMutex       sync.RWMutex
	registerPatchBaselineForPatchGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.RegisterPatchBaselineForPatchGroupInput
		arg3 []request.Option
	}
	registerPatchBaselineForPatchGroupWithContextReturns struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	registerPatchBaselineForPatchGroupWithContextReturnsOnCall map[int]struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}
	RegisterTargetWithMaintenanceWindowStub        func(*ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)
	registerTargetWithMaintenanceWindowMutex       sync.RWMutex
	registerTargetWithMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.RegisterTargetWithMaintenanceWindowInput
	}
	registerTargetWithMaintenanceWindowReturns struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}
	registerTargetWithMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}
	RegisterTargetWithMaintenanceWindowRequestStub        func(*ssm.RegisterTargetWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTargetWithMaintenanceWindowOutput)
	registerTargetWithMaintenanceWindowRequestMutex       sync.RWMutex
	registerTargetWithMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.RegisterTargetWithMaintenanceWindowInput
	}
	registerTargetWithMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.RegisterTargetWithMaintenanceWindowOutput
	}
	registerTargetWithMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.RegisterTargetWithMaintenanceWindowOutput
	}
	RegisterTargetWithMaintenanceWindowWithContextStub        func(context.Context, *ssm.RegisterTargetWithMaintenanceWindowInput, ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)
	registerTargetWithMaintenanceWindowWithContextMutex       sync.RWMutex
	registerTargetWithMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.RegisterTargetWithMaintenanceWindowInput
		arg3 []request.Option
	}
	registerTargetWithMaintenanceWindowWithContextReturns struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}
	registerTargetWithMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}
	RegisterTaskWithMaintenanceWindowStub        func(*ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)
	registerTaskWithMaintenanceWindowMutex       sync.RWMutex
	registerTaskWithMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.RegisterTaskWithMaintenanceWindowInput
	}
	registerTaskWithMaintenanceWindowReturns struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}
	registerTaskWithMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}
	RegisterTaskWithMaintenanceWindowRequestStub        func(*ssm.RegisterTaskWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTaskWithMaintenanceWindowOutput)
	registerTaskWithMaintenanceWindowRequestMutex       sync.RWMutex
	registerTaskWithMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.RegisterTaskWithMaintenanceWindowInput
	}
	registerTaskWithMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.RegisterTaskWithMaintenanceWindowOutput
	}
	registerTaskWithMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.RegisterTaskWithMaintenanceWindowOutput
	}
	RegisterTaskWithMaintenanceWindowWithContextStub        func(context.Context, *ssm.RegisterTaskWithMaintenanceWindowInput, ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)
	registerTaskWithMaintenanceWindowWithContextMutex       sync.RWMutex
	registerTaskWithMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.RegisterTaskWithMaintenanceWindowInput
		arg3 []request.Option
	}
	registerTaskWithMaintenanceWindowWithContextReturns struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}
	registerTaskWithMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}
	RemoveTagsFromResourceStub        func(*ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error)
	removeTagsFromResourceMutex       sync.RWMutex
	removeTagsFromResourceArgsForCall []struct {
		arg1 *ssm.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceReturns struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}
	removeTagsFromResourceReturnsOnCall map[int]struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}
	RemoveTagsFromResourceRequestStub        func(*ssm.RemoveTagsFromResourceInput) (*request.Request, *ssm.RemoveTagsFromResourceOutput)
	removeTagsFromResourceRequestMutex       sync.RWMutex
	removeTagsFromResourceRequestArgsForCall []struct {
		arg1 *ssm.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceRequestReturns struct {
		result1 *request.Request
		result2 *ssm.RemoveTagsFromResourceOutput
	}
	removeTagsFromResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.RemoveTagsFromResourceOutput
	}
	RemoveTagsFromResourceWithContextStub        func(context.Context, *ssm.RemoveTagsFromResourceInput, ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error)
	removeTagsFromResourceWithContextMutex       sync.RWMutex
	removeTagsFromResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.RemoveTagsFromResourceInput
		arg3 []request.Option
	}
	removeTagsFromResourceWithContextReturns struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}
	removeTagsFromResourceWithContextReturnsOnCall map[int]struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}
	ResetServiceSettingStub        func(*ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error)
	resetServiceSettingMutex       sync.RWMutex
	resetServiceSettingArgsForCall []struct {
		arg1 *ssm.ResetServiceSettingInput
	}
	resetServiceSettingReturns struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}
	resetServiceSettingReturnsOnCall map[int]struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}
	ResetServiceSettingRequestStub        func(*ssm.ResetServiceSettingInput) (*request.Request, *ssm.ResetServiceSettingOutput)
	resetServiceSettingRequestMutex       sync.RWMutex
	resetServiceSettingRequestArgsForCall []struct {
		arg1 *ssm.ResetServiceSettingInput
	}
	resetServiceSettingRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ResetServiceSettingOutput
	}
	resetServiceSettingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ResetServiceSettingOutput
	}
	ResetServiceSettingWithContextStub        func(context.Context, *ssm.ResetServiceSettingInput, ...request.Option) (*ssm.ResetServiceSettingOutput, error)
	resetServiceSettingWithContextMutex       sync.RWMutex
	resetServiceSettingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ResetServiceSettingInput
		arg3 []request.Option
	}
	resetServiceSettingWithContextReturns struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}
	resetServiceSettingWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}
	ResumeSessionStub        func(*ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error)
	resumeSessionMutex       sync.RWMutex
	resumeSessionArgsForCall []struct {
		arg1 *ssm.ResumeSessionInput
	}
	resumeSessionReturns struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}
	resumeSessionReturnsOnCall map[int]struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}
	ResumeSessionRequestStub        func(*ssm.ResumeSessionInput) (*request.Request, *ssm.ResumeSessionOutput)
	resumeSessionRequestMutex       sync.RWMutex
	resumeSessionRequestArgsForCall []struct {
		arg1 *ssm.ResumeSessionInput
	}
	resumeSessionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.ResumeSessionOutput
	}
	resumeSessionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.ResumeSessionOutput
	}
	ResumeSessionWithContextStub        func(context.Context, *ssm.ResumeSessionInput, ...request.Option) (*ssm.ResumeSessionOutput, error)
	resumeSessionWithContextMutex       sync.RWMutex
	resumeSessionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.ResumeSessionInput
		arg3 []request.Option
	}
	resumeSessionWithContextReturns struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}
	resumeSessionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}
	SendAutomationSignalStub        func(*ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error)
	sendAutomationSignalMutex       sync.RWMutex
	sendAutomationSignalArgsForCall []struct {
		arg1 *ssm.SendAutomationSignalInput
	}
	sendAutomationSignalReturns struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}
	sendAutomationSignalReturnsOnCall map[int]struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}
	SendAutomationSignalRequestStub        func(*ssm.SendAutomationSignalInput) (*request.Request, *ssm.SendAutomationSignalOutput)
	sendAutomationSignalRequestMutex       sync.RWMutex
	sendAutomationSignalRequestArgsForCall []struct {
		arg1 *ssm.SendAutomationSignalInput
	}
	sendAutomationSignalRequestReturns struct {
		result1 *request.Request
		result2 *ssm.SendAutomationSignalOutput
	}
	sendAutomationSignalRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.SendAutomationSignalOutput
	}
	SendAutomationSignalWithContextStub        func(context.Context, *ssm.SendAutomationSignalInput, ...request.Option) (*ssm.SendAutomationSignalOutput, error)
	sendAutomationSignalWithContextMutex       sync.RWMutex
	sendAutomationSignalWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.SendAutomationSignalInput
		arg3 []request.Option
	}
	sendAutomationSignalWithContextReturns struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}
	sendAutomationSignalWithContextReturnsOnCall map[int]struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}
	SendCommandStub        func(*ssm.SendCommandInput) (*ssm.SendCommandOutput, error)
	sendCommandMutex       sync.RWMutex
	sendCommandArgsForCall []struct {
		arg1 *ssm.SendCommandInput
	}
	sendCommandReturns struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}
	sendCommandReturnsOnCall map[int]struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}
	SendCommandRequestStub        func(*ssm.SendCommandInput) (*request.Request, *ssm.SendCommandOutput)
	sendCommandRequestMutex       sync.RWMutex
	sendCommandRequestArgsForCall []struct {
		arg1 *ssm.SendCommandInput
	}
	sendCommandRequestReturns struct {
		result1 *request.Request
		result2 *ssm.SendCommandOutput
	}
	sendCommandRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.SendCommandOutput
	}
	SendCommandWithContextStub        func(context.Context, *ssm.SendCommandInput, ...request.Option) (*ssm.SendCommandOutput, error)
	sendCommandWithContextMutex       sync.RWMutex
	sendCommandWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.SendCommandInput
		arg3 []request.Option
	}
	sendCommandWithContextReturns struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}
	sendCommandWithContextReturnsOnCall map[int]struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}
	StartAssociationsOnceStub        func(*ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error)
	startAssociationsOnceMutex       sync.RWMutex
	startAssociationsOnceArgsForCall []struct {
		arg1 *ssm.StartAssociationsOnceInput
	}
	startAssociationsOnceReturns struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}
	startAssociationsOnceReturnsOnCall map[int]struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}
	StartAssociationsOnceRequestStub        func(*ssm.StartAssociationsOnceInput) (*request.Request, *ssm.StartAssociationsOnceOutput)
	startAssociationsOnceRequestMutex       sync.RWMutex
	startAssociationsOnceRequestArgsForCall []struct {
		arg1 *ssm.StartAssociationsOnceInput
	}
	startAssociationsOnceRequestReturns struct {
		result1 *request.Request
		result2 *ssm.StartAssociationsOnceOutput
	}
	startAssociationsOnceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.StartAssociationsOnceOutput
	}
	StartAssociationsOnceWithContextStub        func(context.Context, *ssm.StartAssociationsOnceInput, ...request.Option) (*ssm.StartAssociationsOnceOutput, error)
	startAssociationsOnceWithContextMutex       sync.RWMutex
	startAssociationsOnceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.StartAssociationsOnceInput
		arg3 []request.Option
	}
	startAssociationsOnceWithContextReturns struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}
	startAssociationsOnceWithContextReturnsOnCall map[int]struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}
	StartAutomationExecutionStub        func(*ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error)
	startAutomationExecutionMutex       sync.RWMutex
	startAutomationExecutionArgsForCall []struct {
		arg1 *ssm.StartAutomationExecutionInput
	}
	startAutomationExecutionReturns struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}
	startAutomationExecutionReturnsOnCall map[int]struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}
	StartAutomationExecutionRequestStub        func(*ssm.StartAutomationExecutionInput) (*request.Request, *ssm.StartAutomationExecutionOutput)
	startAutomationExecutionRequestMutex       sync.RWMutex
	startAutomationExecutionRequestArgsForCall []struct {
		arg1 *ssm.StartAutomationExecutionInput
	}
	startAutomationExecutionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.StartAutomationExecutionOutput
	}
	startAutomationExecutionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.StartAutomationExecutionOutput
	}
	StartAutomationExecutionWithContextStub        func(context.Context, *ssm.StartAutomationExecutionInput, ...request.Option) (*ssm.StartAutomationExecutionOutput, error)
	startAutomationExecutionWithContextMutex       sync.RWMutex
	startAutomationExecutionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.StartAutomationExecutionInput
		arg3 []request.Option
	}
	startAutomationExecutionWithContextReturns struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}
	startAutomationExecutionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}
	StartChangeRequestExecutionStub        func(*ssm.StartChangeRequestExecutionInput) (*ssm.StartChangeRequestExecutionOutput, error)
	startChangeRequestExecutionMutex       sync.RWMutex
	startChangeRequestExecutionArgsForCall []struct {
		arg1 *ssm.StartChangeRequestExecutionInput
	}
	startChangeRequestExecutionReturns struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}
	startChangeRequestExecutionReturnsOnCall map[int]struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}
	StartChangeRequestExecutionRequestStub        func(*ssm.StartChangeRequestExecutionInput) (*request.Request, *ssm.StartChangeRequestExecutionOutput)
	startChangeRequestExecutionRequestMutex       sync.RWMutex
	startChangeRequestExecutionRequestArgsForCall []struct {
		arg1 *ssm.StartChangeRequestExecutionInput
	}
	startChangeRequestExecutionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.StartChangeRequestExecutionOutput
	}
	startChangeRequestExecutionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.StartChangeRequestExecutionOutput
	}
	StartChangeRequestExecutionWithContextStub        func(context.Context, *ssm.StartChangeRequestExecutionInput, ...request.Option) (*ssm.StartChangeRequestExecutionOutput, error)
	startChangeRequestExecutionWithContextMutex       sync.RWMutex
	startChangeRequestExecutionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.StartChangeRequestExecutionInput
		arg3 []request.Option
	}
	startChangeRequestExecutionWithContextReturns struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}
	startChangeRequestExecutionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}
	StartSessionStub        func(*ssm.StartSessionInput) (*ssm.StartSessionOutput, error)
	startSessionMutex       sync.RWMutex
	startSessionArgsForCall []struct {
		arg1 *ssm.StartSessionInput
	}
	startSessionReturns struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}
	startSessionReturnsOnCall map[int]struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}
	StartSessionRequestStub        func(*ssm.StartSessionInput) (*request.Request, *ssm.StartSessionOutput)
	startSessionRequestMutex       sync.RWMutex
	startSessionRequestArgsForCall []struct {
		arg1 *ssm.StartSessionInput
	}
	startSessionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.StartSessionOutput
	}
	startSessionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.StartSessionOutput
	}
	StartSessionWithContextStub        func(context.Context, *ssm.StartSessionInput, ...request.Option) (*ssm.StartSessionOutput, error)
	startSessionWithContextMutex       sync.RWMutex
	startSessionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.StartSessionInput
		arg3 []request.Option
	}
	startSessionWithContextReturns struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}
	startSessionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}
	StopAutomationExecutionStub        func(*ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error)
	stopAutomationExecutionMutex       sync.RWMutex
	stopAutomationExecutionArgsForCall []struct {
		arg1 *ssm.StopAutomationExecutionInput
	}
	stopAutomationExecutionReturns struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}
	stopAutomationExecutionReturnsOnCall map[int]struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}
	StopAutomationExecutionRequestStub        func(*ssm.StopAutomationExecutionInput) (*request.Request, *ssm.StopAutomationExecutionOutput)
	stopAutomationExecutionRequestMutex       sync.RWMutex
	stopAutomationExecutionRequestArgsForCall []struct {
		arg1 *ssm.StopAutomationExecutionInput
	}
	stopAutomationExecutionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.StopAutomationExecutionOutput
	}
	stopAutomationExecutionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.StopAutomationExecutionOutput
	}
	StopAutomationExecutionWithContextStub        func(context.Context, *ssm.StopAutomationExecutionInput, ...request.Option) (*ssm.StopAutomationExecutionOutput, error)
	stopAutomationExecutionWithContextMutex       sync.RWMutex
	stopAutomationExecutionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.StopAutomationExecutionInput
		arg3 []request.Option
	}
	stopAutomationExecutionWithContextReturns struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}
	stopAutomationExecutionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}
	TerminateSessionStub        func(*ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error)
	terminateSessionMutex       sync.RWMutex
	terminateSessionArgsForCall []struct {
		arg1 *ssm.TerminateSessionInput
	}
	terminateSessionReturns struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}
	terminateSessionReturnsOnCall map[int]struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}
	TerminateSessionRequestStub        func(*ssm.TerminateSessionInput) (*request.Request, *ssm.TerminateSessionOutput)
	terminateSessionRequestMutex       sync.RWMutex
	terminateSessionRequestArgsForCall []struct {
		arg1 *ssm.TerminateSessionInput
	}
	terminateSessionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.TerminateSessionOutput
	}
	terminateSessionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.TerminateSessionOutput
	}
	TerminateSessionWithContextStub        func(context.Context, *ssm.TerminateSessionInput, ...request.Option) (*ssm.TerminateSessionOutput, error)
	terminateSessionWithContextMutex       sync.RWMutex
	terminateSessionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.TerminateSessionInput
		arg3 []request.Option
	}
	terminateSessionWithContextReturns struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}
	terminateSessionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}
	UnlabelParameterVersionStub        func(*ssm.UnlabelParameterVersionInput) (*ssm.UnlabelParameterVersionOutput, error)
	unlabelParameterVersionMutex       sync.RWMutex
	unlabelParameterVersionArgsForCall []struct {
		arg1 *ssm.UnlabelParameterVersionInput
	}
	unlabelParameterVersionReturns struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}
	unlabelParameterVersionReturnsOnCall map[int]struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}
	UnlabelParameterVersionRequestStub        func(*ssm.UnlabelParameterVersionInput) (*request.Request, *ssm.UnlabelParameterVersionOutput)
	unlabelParameterVersionRequestMutex       sync.RWMutex
	unlabelParameterVersionRequestArgsForCall []struct {
		arg1 *ssm.UnlabelParameterVersionInput
	}
	unlabelParameterVersionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UnlabelParameterVersionOutput
	}
	unlabelParameterVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UnlabelParameterVersionOutput
	}
	UnlabelParameterVersionWithContextStub        func(context.Context, *ssm.UnlabelParameterVersionInput, ...request.Option) (*ssm.UnlabelParameterVersionOutput, error)
	unlabelParameterVersionWithContextMutex       sync.RWMutex
	unlabelParameterVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UnlabelParameterVersionInput
		arg3 []request.Option
	}
	unlabelParameterVersionWithContextReturns struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}
	unlabelParameterVersionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}
	UpdateAssociationStub        func(*ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error)
	updateAssociationMutex       sync.RWMutex
	updateAssociationArgsForCall []struct {
		arg1 *ssm.UpdateAssociationInput
	}
	updateAssociationReturns struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}
	updateAssociationReturnsOnCall map[int]struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}
	UpdateAssociationRequestStub        func(*ssm.UpdateAssociationInput) (*request.Request, *ssm.UpdateAssociationOutput)
	updateAssociationRequestMutex       sync.RWMutex
	updateAssociationRequestArgsForCall []struct {
		arg1 *ssm.UpdateAssociationInput
	}
	updateAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationOutput
	}
	updateAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationOutput
	}
	UpdateAssociationStatusStub        func(*ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error)
	updateAssociationStatusMutex       sync.RWMutex
	updateAssociationStatusArgsForCall []struct {
		arg1 *ssm.UpdateAssociationStatusInput
	}
	updateAssociationStatusReturns struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}
	updateAssociationStatusReturnsOnCall map[int]struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}
	UpdateAssociationStatusRequestStub        func(*ssm.UpdateAssociationStatusInput) (*request.Request, *ssm.UpdateAssociationStatusOutput)
	updateAssociationStatusRequestMutex       sync.RWMutex
	updateAssociationStatusRequestArgsForCall []struct {
		arg1 *ssm.UpdateAssociationStatusInput
	}
	updateAssociationStatusRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationStatusOutput
	}
	updateAssociationStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationStatusOutput
	}
	UpdateAssociationStatusWithContextStub        func(context.Context, *ssm.UpdateAssociationStatusInput, ...request.Option) (*ssm.UpdateAssociationStatusOutput, error)
	updateAssociationStatusWithContextMutex       sync.RWMutex
	updateAssociationStatusWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateAssociationStatusInput
		arg3 []request.Option
	}
	updateAssociationStatusWithContextReturns struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}
	updateAssociationStatusWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}
	UpdateAssociationWithContextStub        func(context.Context, *ssm.UpdateAssociationInput, ...request.Option) (*ssm.UpdateAssociationOutput, error)
	updateAssociationWithContextMutex       sync.RWMutex
	updateAssociationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateAssociationInput
		arg3 []request.Option
	}
	updateAssociationWithContextReturns struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}
	updateAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}
	UpdateDocumentStub        func(*ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error)
	updateDocumentMutex       sync.RWMutex
	updateDocumentArgsForCall []struct {
		arg1 *ssm.UpdateDocumentInput
	}
	updateDocumentReturns struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}
	updateDocumentReturnsOnCall map[int]struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}
	UpdateDocumentDefaultVersionStub        func(*ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error)
	updateDocumentDefaultVersionMutex       sync.RWMutex
	updateDocumentDefaultVersionArgsForCall []struct {
		arg1 *ssm.UpdateDocumentDefaultVersionInput
	}
	updateDocumentDefaultVersionReturns struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}
	updateDocumentDefaultVersionReturnsOnCall map[int]struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}
	UpdateDocumentDefaultVersionRequestStub        func(*ssm.UpdateDocumentDefaultVersionInput) (*request.Request, *ssm.UpdateDocumentDefaultVersionOutput)
	updateDocumentDefaultVersionRequestMutex       sync.RWMutex
	updateDocumentDefaultVersionRequestArgsForCall []struct {
		arg1 *ssm.UpdateDocumentDefaultVersionInput
	}
	updateDocumentDefaultVersionRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentDefaultVersionOutput
	}
	updateDocumentDefaultVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentDefaultVersionOutput
	}
	UpdateDocumentDefaultVersionWithContextStub        func(context.Context, *ssm.UpdateDocumentDefaultVersionInput, ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error)
	updateDocumentDefaultVersionWithContextMutex       sync.RWMutex
	updateDocumentDefaultVersionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateDocumentDefaultVersionInput
		arg3 []request.Option
	}
	updateDocumentDefaultVersionWithContextReturns struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}
	updateDocumentDefaultVersionWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}
	UpdateDocumentMetadataStub        func(*ssm.UpdateDocumentMetadataInput) (*ssm.UpdateDocumentMetadataOutput, error)
	updateDocumentMetadataMutex       sync.RWMutex
	updateDocumentMetadataArgsForCall []struct {
		arg1 *ssm.UpdateDocumentMetadataInput
	}
	updateDocumentMetadataReturns struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}
	updateDocumentMetadataReturnsOnCall map[int]struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}
	UpdateDocumentMetadataRequestStub        func(*ssm.UpdateDocumentMetadataInput) (*request.Request, *ssm.UpdateDocumentMetadataOutput)
	updateDocumentMetadataRequestMutex       sync.RWMutex
	updateDocumentMetadataRequestArgsForCall []struct {
		arg1 *ssm.UpdateDocumentMetadataInput
	}
	updateDocumentMetadataRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentMetadataOutput
	}
	updateDocumentMetadataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentMetadataOutput
	}
	UpdateDocumentMetadataWithContextStub        func(context.Context, *ssm.UpdateDocumentMetadataInput, ...request.Option) (*ssm.UpdateDocumentMetadataOutput, error)
	updateDocumentMetadataWithContextMutex       sync.RWMutex
	updateDocumentMetadataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateDocumentMetadataInput
		arg3 []request.Option
	}
	updateDocumentMetadataWithContextReturns struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}
	updateDocumentMetadataWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}
	UpdateDocumentRequestStub        func(*ssm.UpdateDocumentInput) (*request.Request, *ssm.UpdateDocumentOutput)
	updateDocumentRequestMutex       sync.RWMutex
	updateDocumentRequestArgsForCall []struct {
		arg1 *ssm.UpdateDocumentInput
	}
	updateDocumentRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentOutput
	}
	updateDocumentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentOutput
	}
	UpdateDocumentWithContextStub        func(context.Context, *ssm.UpdateDocumentInput, ...request.Option) (*ssm.UpdateDocumentOutput, error)
	updateDocumentWithContextMutex       sync.RWMutex
	updateDocumentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateDocumentInput
		arg3 []request.Option
	}
	updateDocumentWithContextReturns struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}
	updateDocumentWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}
	UpdateMaintenanceWindowStub        func(*ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error)
	updateMaintenanceWindowMutex       sync.RWMutex
	updateMaintenanceWindowArgsForCall []struct {
		arg1 *ssm.UpdateMaintenanceWindowInput
	}
	updateMaintenanceWindowReturns struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}
	updateMaintenanceWindowReturnsOnCall map[int]struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}
	UpdateMaintenanceWindowRequestStub        func(*ssm.UpdateMaintenanceWindowInput) (*request.Request, *ssm.UpdateMaintenanceWindowOutput)
	updateMaintenanceWindowRequestMutex       sync.RWMutex
	updateMaintenanceWindowRequestArgsForCall []struct {
		arg1 *ssm.UpdateMaintenanceWindowInput
	}
	updateMaintenanceWindowRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowOutput
	}
	updateMaintenanceWindowRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowOutput
	}
	UpdateMaintenanceWindowTargetStub        func(*ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error)
	updateMaintenanceWindowTargetMutex       sync.RWMutex
	updateMaintenanceWindowTargetArgsForCall []struct {
		arg1 *ssm.UpdateMaintenanceWindowTargetInput
	}
	updateMaintenanceWindowTargetReturns struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}
	updateMaintenanceWindowTargetReturnsOnCall map[int]struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}
	UpdateMaintenanceWindowTargetRequestStub        func(*ssm.UpdateMaintenanceWindowTargetInput) (*request.Request, *ssm.UpdateMaintenanceWindowTargetOutput)
	updateMaintenanceWindowTargetRequestMutex       sync.RWMutex
	updateMaintenanceWindowTargetRequestArgsForCall []struct {
		arg1 *ssm.UpdateMaintenanceWindowTargetInput
	}
	updateMaintenanceWindowTargetRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTargetOutput
	}
	updateMaintenanceWindowTargetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTargetOutput
	}
	UpdateMaintenanceWindowTargetWithContextStub        func(context.Context, *ssm.UpdateMaintenanceWindowTargetInput, ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error)
	updateMaintenanceWindowTargetWithContextMutex       sync.RWMutex
	updateMaintenanceWindowTargetWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateMaintenanceWindowTargetInput
		arg3 []request.Option
	}
	updateMaintenanceWindowTargetWithContextReturns struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}
	updateMaintenanceWindowTargetWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}
	UpdateMaintenanceWindowTaskStub        func(*ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error)
	updateMaintenanceWindowTaskMutex       sync.RWMutex
	updateMaintenanceWindowTaskArgsForCall []struct {
		arg1 *ssm.UpdateMaintenanceWindowTaskInput
	}
	updateMaintenanceWindowTaskReturns struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}
	updateMaintenanceWindowTaskReturnsOnCall map[int]struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}
	UpdateMaintenanceWindowTaskRequestStub        func(*ssm.UpdateMaintenanceWindowTaskInput) (*request.Request, *ssm.UpdateMaintenanceWindowTaskOutput)
	updateMaintenanceWindowTaskRequestMutex       sync.RWMutex
	updateMaintenanceWindowTaskRequestArgsForCall []struct {
		arg1 *ssm.UpdateMaintenanceWindowTaskInput
	}
	updateMaintenanceWindowTaskRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTaskOutput
	}
	updateMaintenanceWindowTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTaskOutput
	}
	UpdateMaintenanceWindowTaskWithContextStub        func(context.Context, *ssm.UpdateMaintenanceWindowTaskInput, ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error)
	updateMaintenanceWindowTaskWithContextMutex       sync.RWMutex
	updateMaintenanceWindowTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateMaintenanceWindowTaskInput
		arg3 []request.Option
	}
	updateMaintenanceWindowTaskWithContextReturns struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}
	updateMaintenanceWindowTaskWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}
	UpdateMaintenanceWindowWithContextStub        func(context.Context, *ssm.UpdateMaintenanceWindowInput, ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error)
	updateMaintenanceWindowWithContextMutex       sync.RWMutex
	updateMaintenanceWindowWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateMaintenanceWindowInput
		arg3 []request.Option
	}
	updateMaintenanceWindowWithContextReturns struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}
	updateMaintenanceWindowWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}
	UpdateManagedInstanceRoleStub        func(*ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error)
	updateManagedInstanceRoleMutex       sync.RWMutex
	updateManagedInstanceRoleArgsForCall []struct {
		arg1 *ssm.UpdateManagedInstanceRoleInput
	}
	updateManagedInstanceRoleReturns struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}
	updateManagedInstanceRoleReturnsOnCall map[int]struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}
	UpdateManagedInstanceRoleRequestStub        func(*ssm.UpdateManagedInstanceRoleInput) (*request.Request, *ssm.UpdateManagedInstanceRoleOutput)
	updateManagedInstanceRoleRequestMutex       sync.RWMutex
	updateManagedInstanceRoleRequestArgsForCall []struct {
		arg1 *ssm.UpdateManagedInstanceRoleInput
	}
	updateManagedInstanceRoleRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateManagedInstanceRoleOutput
	}
	updateManagedInstanceRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateManagedInstanceRoleOutput
	}
	UpdateManagedInstanceRoleWithContextStub        func(context.Context, *ssm.UpdateManagedInstanceRoleInput, ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error)
	updateManagedInstanceRoleWithContextMutex       sync.RWMutex
	updateManagedInstanceRoleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateManagedInstanceRoleInput
		arg3 []request.Option
	}
	updateManagedInstanceRoleWithContextReturns struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}
	updateManagedInstanceRoleWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}
	UpdateOpsItemStub        func(*ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error)
	updateOpsItemMutex       sync.RWMutex
	updateOpsItemArgsForCall []struct {
		arg1 *ssm.UpdateOpsItemInput
	}
	updateOpsItemReturns struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}
	updateOpsItemReturnsOnCall map[int]struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}
	UpdateOpsItemRequestStub        func(*ssm.UpdateOpsItemInput) (*request.Request, *ssm.UpdateOpsItemOutput)
	updateOpsItemRequestMutex       sync.RWMutex
	updateOpsItemRequestArgsForCall []struct {
		arg1 *ssm.UpdateOpsItemInput
	}
	updateOpsItemRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsItemOutput
	}
	updateOpsItemRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsItemOutput
	}
	UpdateOpsItemWithContextStub        func(context.Context, *ssm.UpdateOpsItemInput, ...request.Option) (*ssm.UpdateOpsItemOutput, error)
	updateOpsItemWithContextMutex       sync.RWMutex
	updateOpsItemWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateOpsItemInput
		arg3 []request.Option
	}
	updateOpsItemWithContextReturns struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}
	updateOpsItemWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}
	UpdateOpsMetadataStub        func(*ssm.UpdateOpsMetadataInput) (*ssm.UpdateOpsMetadataOutput, error)
	updateOpsMetadataMutex       sync.RWMutex
	updateOpsMetadataArgsForCall []struct {
		arg1 *ssm.UpdateOpsMetadataInput
	}
	updateOpsMetadataReturns struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}
	updateOpsMetadataReturnsOnCall map[int]struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}
	UpdateOpsMetadataRequestStub        func(*ssm.UpdateOpsMetadataInput) (*request.Request, *ssm.UpdateOpsMetadataOutput)
	updateOpsMetadataRequestMutex       sync.RWMutex
	updateOpsMetadataRequestArgsForCall []struct {
		arg1 *ssm.UpdateOpsMetadataInput
	}
	updateOpsMetadataRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsMetadataOutput
	}
	updateOpsMetadataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsMetadataOutput
	}
	UpdateOpsMetadataWithContextStub        func(context.Context, *ssm.UpdateOpsMetadataInput, ...request.Option) (*ssm.UpdateOpsMetadataOutput, error)
	updateOpsMetadataWithContextMutex       sync.RWMutex
	updateOpsMetadataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateOpsMetadataInput
		arg3 []request.Option
	}
	updateOpsMetadataWithContextReturns struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}
	updateOpsMetadataWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}
	UpdatePatchBaselineStub        func(*ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error)
	updatePatchBaselineMutex       sync.RWMutex
	updatePatchBaselineArgsForCall []struct {
		arg1 *ssm.UpdatePatchBaselineInput
	}
	updatePatchBaselineReturns struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}
	updatePatchBaselineReturnsOnCall map[int]struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}
	UpdatePatchBaselineRequestStub        func(*ssm.UpdatePatchBaselineInput) (*request.Request, *ssm.UpdatePatchBaselineOutput)
	updatePatchBaselineRequestMutex       sync.RWMutex
	updatePatchBaselineRequestArgsForCall []struct {
		arg1 *ssm.UpdatePatchBaselineInput
	}
	updatePatchBaselineRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdatePatchBaselineOutput
	}
	updatePatchBaselineRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdatePatchBaselineOutput
	}
	UpdatePatchBaselineWithContextStub        func(context.Context, *ssm.UpdatePatchBaselineInput, ...request.Option) (*ssm.UpdatePatchBaselineOutput, error)
	updatePatchBaselineWithContextMutex       sync.RWMutex
	updatePatchBaselineWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdatePatchBaselineInput
		arg3 []request.Option
	}
	updatePatchBaselineWithContextReturns struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}
	updatePatchBaselineWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}
	UpdateResourceDataSyncStub        func(*ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error)
	updateResourceDataSyncMutex       sync.RWMutex
	updateResourceDataSyncArgsForCall []struct {
		arg1 *ssm.UpdateResourceDataSyncInput
	}
	updateResourceDataSyncReturns struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}
	updateResourceDataSyncReturnsOnCall map[int]struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}
	UpdateResourceDataSyncRequestStub        func(*ssm.UpdateResourceDataSyncInput) (*request.Request, *ssm.UpdateResourceDataSyncOutput)
	updateResourceDataSyncRequestMutex       sync.RWMutex
	updateResourceDataSyncRequestArgsForCall []struct {
		arg1 *ssm.UpdateResourceDataSyncInput
	}
	updateResourceDataSyncRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateResourceDataSyncOutput
	}
	updateResourceDataSyncRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateResourceDataSyncOutput
	}
	UpdateResourceDataSyncWithContextStub        func(context.Context, *ssm.UpdateResourceDataSyncInput, ...request.Option) (*ssm.UpdateResourceDataSyncOutput, error)
	updateResourceDataSyncWithContextMutex       sync.RWMutex
	updateResourceDataSyncWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateResourceDataSyncInput
		arg3 []request.Option
	}
	updateResourceDataSyncWithContextReturns struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}
	updateResourceDataSyncWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}
	UpdateServiceSettingStub        func(*ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error)
	updateServiceSettingMutex       sync.RWMutex
	updateServiceSettingArgsForCall []struct {
		arg1 *ssm.UpdateServiceSettingInput
	}
	updateServiceSettingReturns struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}
	updateServiceSettingReturnsOnCall map[int]struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}
	UpdateServiceSettingRequestStub        func(*ssm.UpdateServiceSettingInput) (*request.Request, *ssm.UpdateServiceSettingOutput)
	updateServiceSettingRequestMutex       sync.RWMutex
	updateServiceSettingRequestArgsForCall []struct {
		arg1 *ssm.UpdateServiceSettingInput
	}
	updateServiceSettingRequestReturns struct {
		result1 *request.Request
		result2 *ssm.UpdateServiceSettingOutput
	}
	updateServiceSettingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ssm.UpdateServiceSettingOutput
	}
	UpdateServiceSettingWithContextStub        func(context.Context, *ssm.UpdateServiceSettingInput, ...request.Option) (*ssm.UpdateServiceSettingOutput, error)
	updateServiceSettingWithContextMutex       sync.RWMutex
	updateServiceSettingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.UpdateServiceSettingInput
		arg3 []request.Option
	}
	updateServiceSettingWithContextReturns struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}
	updateServiceSettingWithContextReturnsOnCall map[int]struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}
	WaitUntilCommandExecutedStub        func(*ssm.GetCommandInvocationInput) error
	waitUntilCommandExecutedMutex       sync.RWMutex
	waitUntilCommandExecutedArgsForCall []struct {
		arg1 *ssm.GetCommandInvocationInput
	}
	waitUntilCommandExecutedReturns struct {
		result1 error
	}
	waitUntilCommandExecutedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCommandExecutedWithContextStub        func(context.Context, *ssm.GetCommandInvocationInput, ...request.WaiterOption) error
	waitUntilCommandExecutedWithContextMutex       sync.RWMutex
	waitUntilCommandExecutedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetCommandInvocationInput
		arg3 []request.WaiterOption
	}
	waitUntilCommandExecutedWithContextReturns struct {
		result1 error
	}
	waitUntilCommandExecutedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSMClient) AddTagsToResource(arg1 *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error) {
	fake.addTagsToResourceMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceReturnsOnCall[len(fake.addTagsToResourceArgsForCall)]
	fake.addTagsToResourceArgsForCall = append(fake.addTagsToResourceArgsForCall, struct {
		arg1 *ssm.AddTagsToResourceInput
	}{arg1})
	stub := fake.AddTagsToResourceStub
	fakeReturns := fake.addTagsToResourceReturns
	fake.recordInvocation("AddTagsToResource", []interface{}{arg1})
	fake.addTagsToResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) AddTagsToResourceCallCount() int {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	return len(fake.addTagsToResourceArgsForCall)
}

func (fake *FakeSSMClient) AddTagsToResourceCalls(stub func(*ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error)) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = stub
}

func (fake *FakeSSMClient) AddTagsToResourceArgsForCall(i int) *ssm.AddTagsToResourceInput {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	argsForCall := fake.addTagsToResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) AddTagsToResourceReturns(result1 *ssm.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = nil
	fake.addTagsToResourceReturns = struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AddTagsToResourceReturnsOnCall(i int, result1 *ssm.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceMutex.Lock()
	defer fake.addTagsToResourceMutex.Unlock()
	fake.AddTagsToResourceStub = nil
	if fake.addTagsToResourceReturnsOnCall == nil {
		fake.addTagsToResourceReturnsOnCall = make(map[int]struct {
			result1 *ssm.AddTagsToResourceOutput
			result2 error
		})
	}
	fake.addTagsToResourceReturnsOnCall[i] = struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AddTagsToResourceRequest(arg1 *ssm.AddTagsToResourceInput) (*request.Request, *ssm.AddTagsToResourceOutput) {
	fake.addTagsToResourceRequestMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceRequestReturnsOnCall[len(fake.addTagsToResourceRequestArgsForCall)]
	fake.addTagsToResourceRequestArgsForCall = append(fake.addTagsToResourceRequestArgsForCall, struct {
		arg1 *ssm.AddTagsToResourceInput
	}{arg1})
	stub := fake.AddTagsToResourceRequestStub
	fakeReturns := fake.addTagsToResourceRequestReturns
	fake.recordInvocation("AddTagsToResourceRequest", []interface{}{arg1})
	fake.addTagsToResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) AddTagsToResourceRequestCallCount() int {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	return len(fake.addTagsToResourceRequestArgsForCall)
}

func (fake *FakeSSMClient) AddTagsToResourceRequestCalls(stub func(*ssm.AddTagsToResourceInput) (*request.Request, *ssm.AddTagsToResourceOutput)) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = stub
}

func (fake *FakeSSMClient) AddTagsToResourceRequestArgsForCall(i int) *ssm.AddTagsToResourceInput {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	argsForCall := fake.addTagsToResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) AddTagsToResourceRequestReturns(result1 *request.Request, result2 *ssm.AddTagsToResourceOutput) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = nil
	fake.addTagsToResourceRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.AddTagsToResourceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) AddTagsToResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.AddTagsToResourceOutput) {
	fake.addTagsToResourceRequestMutex.Lock()
	defer fake.addTagsToResourceRequestMutex.Unlock()
	fake.AddTagsToResourceRequestStub = nil
	if fake.addTagsToResourceRequestReturnsOnCall == nil {
		fake.addTagsToResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.AddTagsToResourceOutput
		})
	}
	fake.addTagsToResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.AddTagsToResourceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) AddTagsToResourceWithContext(arg1 context.Context, arg2 *ssm.AddTagsToResourceInput, arg3 ...request.Option) (*ssm.AddTagsToResourceOutput, error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceWithContextReturnsOnCall[len(fake.addTagsToResourceWithContextArgsForCall)]
	fake.addTagsToResourceWithContextArgsForCall = append(fake.addTagsToResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.AddTagsToResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddTagsToResourceWithContextStub
	fakeReturns := fake.addTagsToResourceWithContextReturns
	fake.recordInvocation("AddTagsToResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.addTagsToResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) AddTagsToResourceWithContextCallCount() int {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	return len(fake.addTagsToResourceWithContextArgsForCall)
}

func (fake *FakeSSMClient) AddTagsToResourceWithContextCalls(stub func(context.Context, *ssm.AddTagsToResourceInput, ...request.Option) (*ssm.AddTagsToResourceOutput, error)) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = stub
}

func (fake *FakeSSMClient) AddTagsToResourceWithContextArgsForCall(i int) (context.Context, *ssm.AddTagsToResourceInput, []request.Option) {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	argsForCall := fake.addTagsToResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) AddTagsToResourceWithContextReturns(result1 *ssm.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	fake.addTagsToResourceWithContextReturns = struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AddTagsToResourceWithContextReturnsOnCall(i int, result1 *ssm.AddTagsToResourceOutput, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	if fake.addTagsToResourceWithContextReturnsOnCall == nil {
		fake.addTagsToResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.AddTagsToResourceOutput
			result2 error
		})
	}
	fake.addTagsToResourceWithContextReturnsOnCall[i] = struct {
		result1 *ssm.AddTagsToResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItem(arg1 *ssm.AssociateOpsItemRelatedItemInput) (*ssm.AssociateOpsItemRelatedItemOutput, error) {
	fake.associateOpsItemRelatedItemMutex.Lock()
	ret, specificReturn := fake.associateOpsItemRelatedItemReturnsOnCall[len(fake.associateOpsItemRelatedItemArgsForCall)]
	fake.associateOpsItemRelatedItemArgsForCall = append(fake.associateOpsItemRelatedItemArgsForCall, struct {
		arg1 *ssm.AssociateOpsItemRelatedItemInput
	}{arg1})
	stub := fake.AssociateOpsItemRelatedItemStub
	fakeReturns := fake.associateOpsItemRelatedItemReturns
	fake.recordInvocation("AssociateOpsItemRelatedItem", []interface{}{arg1})
	fake.associateOpsItemRelatedItemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemCallCount() int {
	fake.associateOpsItemRelatedItemMutex.RLock()
	defer fake.associateOpsItemRelatedItemMutex.RUnlock()
	return len(fake.associateOpsItemRelatedItemArgsForCall)
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemCalls(stub func(*ssm.AssociateOpsItemRelatedItemInput) (*ssm.AssociateOpsItemRelatedItemOutput, error)) {
	fake.associateOpsItemRelatedItemMutex.Lock()
	defer fake.associateOpsItemRelatedItemMutex.Unlock()
	fake.AssociateOpsItemRelatedItemStub = stub
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemArgsForCall(i int) *ssm.AssociateOpsItemRelatedItemInput {
	fake.associateOpsItemRelatedItemMutex.RLock()
	defer fake.associateOpsItemRelatedItemMutex.RUnlock()
	argsForCall := fake.associateOpsItemRelatedItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemReturns(result1 *ssm.AssociateOpsItemRelatedItemOutput, result2 error) {
	fake.associateOpsItemRelatedItemMutex.Lock()
	defer fake.associateOpsItemRelatedItemMutex.Unlock()
	fake.AssociateOpsItemRelatedItemStub = nil
	fake.associateOpsItemRelatedItemReturns = struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemReturnsOnCall(i int, result1 *ssm.AssociateOpsItemRelatedItemOutput, result2 error) {
	fake.associateOpsItemRelatedItemMutex.Lock()
	defer fake.associateOpsItemRelatedItemMutex.Unlock()
	fake.AssociateOpsItemRelatedItemStub = nil
	if fake.associateOpsItemRelatedItemReturnsOnCall == nil {
		fake.associateOpsItemRelatedItemReturnsOnCall = make(map[int]struct {
			result1 *ssm.AssociateOpsItemRelatedItemOutput
			result2 error
		})
	}
	fake.associateOpsItemRelatedItemReturnsOnCall[i] = struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemRequest(arg1 *ssm.AssociateOpsItemRelatedItemInput) (*request.Request, *ssm.AssociateOpsItemRelatedItemOutput) {
	fake.associateOpsItemRelatedItemRequestMutex.Lock()
	ret, specificReturn := fake.associateOpsItemRelatedItemRequestReturnsOnCall[len(fake.associateOpsItemRelatedItemRequestArgsForCall)]
	fake.associateOpsItemRelatedItemRequestArgsForCall = append(fake.associateOpsItemRelatedItemRequestArgsForCall, struct {
		arg1 *ssm.AssociateOpsItemRelatedItemInput
	}{arg1})
	stub := fake.AssociateOpsItemRelatedItemRequestStub
	fakeReturns := fake.associateOpsItemRelatedItemRequestReturns
	fake.recordInvocation("AssociateOpsItemRelatedItemRequest", []interface{}{arg1})
	fake.associateOpsItemRelatedItemRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemRequestCallCount() int {
	fake.associateOpsItemRelatedItemRequestMutex.RLock()
	defer fake.associateOpsItemRelatedItemRequestMutex.RUnlock()
	return len(fake.associateOpsItemRelatedItemRequestArgsForCall)
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemRequestCalls(stub func(*ssm.AssociateOpsItemRelatedItemInput) (*request.Request, *ssm.AssociateOpsItemRelatedItemOutput)) {
	fake.associateOpsItemRelatedItemRequestMutex.Lock()
	defer fake.associateOpsItemRelatedItemRequestMutex.Unlock()
	fake.AssociateOpsItemRelatedItemRequestStub = stub
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemRequestArgsForCall(i int) *ssm.AssociateOpsItemRelatedItemInput {
	fake.associateOpsItemRelatedItemRequestMutex.RLock()
	defer fake.associateOpsItemRelatedItemRequestMutex.RUnlock()
	argsForCall := fake.associateOpsItemRelatedItemRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemRequestReturns(result1 *request.Request, result2 *ssm.AssociateOpsItemRelatedItemOutput) {
	fake.associateOpsItemRelatedItemRequestMutex.Lock()
	defer fake.associateOpsItemRelatedItemRequestMutex.Unlock()
	fake.AssociateOpsItemRelatedItemRequestStub = nil
	fake.associateOpsItemRelatedItemRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.AssociateOpsItemRelatedItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.AssociateOpsItemRelatedItemOutput) {
	fake.associateOpsItemRelatedItemRequestMutex.Lock()
	defer fake.associateOpsItemRelatedItemRequestMutex.Unlock()
	fake.AssociateOpsItemRelatedItemRequestStub = nil
	if fake.associateOpsItemRelatedItemRequestReturnsOnCall == nil {
		fake.associateOpsItemRelatedItemRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.AssociateOpsItemRelatedItemOutput
		})
	}
	fake.associateOpsItemRelatedItemRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.AssociateOpsItemRelatedItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemWithContext(arg1 context.Context, arg2 *ssm.AssociateOpsItemRelatedItemInput, arg3 ...request.Option) (*ssm.AssociateOpsItemRelatedItemOutput, error) {
	fake.associateOpsItemRelatedItemWithContextMutex.Lock()
	ret, specificReturn := fake.associateOpsItemRelatedItemWithContextReturnsOnCall[len(fake.associateOpsItemRelatedItemWithContextArgsForCall)]
	fake.associateOpsItemRelatedItemWithContextArgsForCall = append(fake.associateOpsItemRelatedItemWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.AssociateOpsItemRelatedItemInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AssociateOpsItemRelatedItemWithContextStub
	fakeReturns := fake.associateOpsItemRelatedItemWithContextReturns
	fake.recordInvocation("AssociateOpsItemRelatedItemWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateOpsItemRelatedItemWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemWithContextCallCount() int {
	fake.associateOpsItemRelatedItemWithContextMutex.RLock()
	defer fake.associateOpsItemRelatedItemWithContextMutex.RUnlock()
	return len(fake.associateOpsItemRelatedItemWithContextArgsForCall)
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemWithContextCalls(stub func(context.Context, *ssm.AssociateOpsItemRelatedItemInput, ...request.Option) (*ssm.AssociateOpsItemRelatedItemOutput, error)) {
	fake.associateOpsItemRelatedItemWithContextMutex.Lock()
	defer fake.associateOpsItemRelatedItemWithContextMutex.Unlock()
	fake.AssociateOpsItemRelatedItemWithContextStub = stub
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemWithContextArgsForCall(i int) (context.Context, *ssm.AssociateOpsItemRelatedItemInput, []request.Option) {
	fake.associateOpsItemRelatedItemWithContextMutex.RLock()
	defer fake.associateOpsItemRelatedItemWithContextMutex.RUnlock()
	argsForCall := fake.associateOpsItemRelatedItemWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemWithContextReturns(result1 *ssm.AssociateOpsItemRelatedItemOutput, result2 error) {
	fake.associateOpsItemRelatedItemWithContextMutex.Lock()
	defer fake.associateOpsItemRelatedItemWithContextMutex.Unlock()
	fake.AssociateOpsItemRelatedItemWithContextStub = nil
	fake.associateOpsItemRelatedItemWithContextReturns = struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) AssociateOpsItemRelatedItemWithContextReturnsOnCall(i int, result1 *ssm.AssociateOpsItemRelatedItemOutput, result2 error) {
	fake.associateOpsItemRelatedItemWithContextMutex.Lock()
	defer fake.associateOpsItemRelatedItemWithContextMutex.Unlock()
	fake.AssociateOpsItemRelatedItemWithContextStub = nil
	if fake.associateOpsItemRelatedItemWithContextReturnsOnCall == nil {
		fake.associateOpsItemRelatedItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.AssociateOpsItemRelatedItemOutput
			result2 error
		})
	}
	fake.associateOpsItemRelatedItemWithContextReturnsOnCall[i] = struct {
		result1 *ssm.AssociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelCommand(arg1 *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error) {
	fake.cancelCommandMutex.Lock()
	ret, specificReturn := fake.cancelCommandReturnsOnCall[len(fake.cancelCommandArgsForCall)]
	fake.cancelCommandArgsForCall = append(fake.cancelCommandArgsForCall, struct {
		arg1 *ssm.CancelCommandInput
	}{arg1})
	stub := fake.CancelCommandStub
	fakeReturns := fake.cancelCommandReturns
	fake.recordInvocation("CancelCommand", []interface{}{arg1})
	fake.cancelCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CancelCommandCallCount() int {
	fake.cancelCommandMutex.RLock()
	defer fake.cancelCommandMutex.RUnlock()
	return len(fake.cancelCommandArgsForCall)
}

func (fake *FakeSSMClient) CancelCommandCalls(stub func(*ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error)) {
	fake.cancelCommandMutex.Lock()
	defer fake.cancelCommandMutex.Unlock()
	fake.CancelCommandStub = stub
}

func (fake *FakeSSMClient) CancelCommandArgsForCall(i int) *ssm.CancelCommandInput {
	fake.cancelCommandMutex.RLock()
	defer fake.cancelCommandMutex.RUnlock()
	argsForCall := fake.cancelCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CancelCommandReturns(result1 *ssm.CancelCommandOutput, result2 error) {
	fake.cancelCommandMutex.Lock()
	defer fake.cancelCommandMutex.Unlock()
	fake.CancelCommandStub = nil
	fake.cancelCommandReturns = struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelCommandReturnsOnCall(i int, result1 *ssm.CancelCommandOutput, result2 error) {
	fake.cancelCommandMutex.Lock()
	defer fake.cancelCommandMutex.Unlock()
	fake.CancelCommandStub = nil
	if fake.cancelCommandReturnsOnCall == nil {
		fake.cancelCommandReturnsOnCall = make(map[int]struct {
			result1 *ssm.CancelCommandOutput
			result2 error
		})
	}
	fake.cancelCommandReturnsOnCall[i] = struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelCommandRequest(arg1 *ssm.CancelCommandInput) (*request.Request, *ssm.CancelCommandOutput) {
	fake.cancelCommandRequestMutex.Lock()
	ret, specificReturn := fake.cancelCommandRequestReturnsOnCall[len(fake.cancelCommandRequestArgsForCall)]
	fake.cancelCommandRequestArgsForCall = append(fake.cancelCommandRequestArgsForCall, struct {
		arg1 *ssm.CancelCommandInput
	}{arg1})
	stub := fake.CancelCommandRequestStub
	fakeReturns := fake.cancelCommandRequestReturns
	fake.recordInvocation("CancelCommandRequest", []interface{}{arg1})
	fake.cancelCommandRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CancelCommandRequestCallCount() int {
	fake.cancelCommandRequestMutex.RLock()
	defer fake.cancelCommandRequestMutex.RUnlock()
	return len(fake.cancelCommandRequestArgsForCall)
}

func (fake *FakeSSMClient) CancelCommandRequestCalls(stub func(*ssm.CancelCommandInput) (*request.Request, *ssm.CancelCommandOutput)) {
	fake.cancelCommandRequestMutex.Lock()
	defer fake.cancelCommandRequestMutex.Unlock()
	fake.CancelCommandRequestStub = stub
}

func (fake *FakeSSMClient) CancelCommandRequestArgsForCall(i int) *ssm.CancelCommandInput {
	fake.cancelCommandRequestMutex.RLock()
	defer fake.cancelCommandRequestMutex.RUnlock()
	argsForCall := fake.cancelCommandRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CancelCommandRequestReturns(result1 *request.Request, result2 *ssm.CancelCommandOutput) {
	fake.cancelCommandRequestMutex.Lock()
	defer fake.cancelCommandRequestMutex.Unlock()
	fake.CancelCommandRequestStub = nil
	fake.cancelCommandRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CancelCommandOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelCommandRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CancelCommandOutput) {
	fake.cancelCommandRequestMutex.Lock()
	defer fake.cancelCommandRequestMutex.Unlock()
	fake.CancelCommandRequestStub = nil
	if fake.cancelCommandRequestReturnsOnCall == nil {
		fake.cancelCommandRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CancelCommandOutput
		})
	}
	fake.cancelCommandRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CancelCommandOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelCommandWithContext(arg1 context.Context, arg2 *ssm.CancelCommandInput, arg3 ...request.Option) (*ssm.CancelCommandOutput, error) {
	fake.cancelCommandWithContextMutex.Lock()
	ret, specificReturn := fake.cancelCommandWithContextReturnsOnCall[len(fake.cancelCommandWithContextArgsForCall)]
	fake.cancelCommandWithContextArgsForCall = append(fake.cancelCommandWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CancelCommandInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CancelCommandWithContextStub
	fakeReturns := fake.cancelCommandWithContextReturns
	fake.recordInvocation("CancelCommandWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelCommandWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CancelCommandWithContextCallCount() int {
	fake.cancelCommandWithContextMutex.RLock()
	defer fake.cancelCommandWithContextMutex.RUnlock()
	return len(fake.cancelCommandWithContextArgsForCall)
}

func (fake *FakeSSMClient) CancelCommandWithContextCalls(stub func(context.Context, *ssm.CancelCommandInput, ...request.Option) (*ssm.CancelCommandOutput, error)) {
	fake.cancelCommandWithContextMutex.Lock()
	defer fake.cancelCommandWithContextMutex.Unlock()
	fake.CancelCommandWithContextStub = stub
}

func (fake *FakeSSMClient) CancelCommandWithContextArgsForCall(i int) (context.Context, *ssm.CancelCommandInput, []request.Option) {
	fake.cancelCommandWithContextMutex.RLock()
	defer fake.cancelCommandWithContextMutex.RUnlock()
	argsForCall := fake.cancelCommandWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CancelCommandWithContextReturns(result1 *ssm.CancelCommandOutput, result2 error) {
	fake.cancelCommandWithContextMutex.Lock()
	defer fake.cancelCommandWithContextMutex.Unlock()
	fake.CancelCommandWithContextStub = nil
	fake.cancelCommandWithContextReturns = struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelCommandWithContextReturnsOnCall(i int, result1 *ssm.CancelCommandOutput, result2 error) {
	fake.cancelCommandWithContextMutex.Lock()
	defer fake.cancelCommandWithContextMutex.Unlock()
	fake.CancelCommandWithContextStub = nil
	if fake.cancelCommandWithContextReturnsOnCall == nil {
		fake.cancelCommandWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CancelCommandOutput
			result2 error
		})
	}
	fake.cancelCommandWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CancelCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecution(arg1 *ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	fake.cancelMaintenanceWindowExecutionMutex.Lock()
	ret, specificReturn := fake.cancelMaintenanceWindowExecutionReturnsOnCall[len(fake.cancelMaintenanceWindowExecutionArgsForCall)]
	fake.cancelMaintenanceWindowExecutionArgsForCall = append(fake.cancelMaintenanceWindowExecutionArgsForCall, struct {
		arg1 *ssm.CancelMaintenanceWindowExecutionInput
	}{arg1})
	stub := fake.CancelMaintenanceWindowExecutionStub
	fakeReturns := fake.cancelMaintenanceWindowExecutionReturns
	fake.recordInvocation("CancelMaintenanceWindowExecution", []interface{}{arg1})
	fake.cancelMaintenanceWindowExecutionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionCallCount() int {
	fake.cancelMaintenanceWindowExecutionMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionMutex.RUnlock()
	return len(fake.cancelMaintenanceWindowExecutionArgsForCall)
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionCalls(stub func(*ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error)) {
	fake.cancelMaintenanceWindowExecutionMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionStub = stub
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionArgsForCall(i int) *ssm.CancelMaintenanceWindowExecutionInput {
	fake.cancelMaintenanceWindowExecutionMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionMutex.RUnlock()
	argsForCall := fake.cancelMaintenanceWindowExecutionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionReturns(result1 *ssm.CancelMaintenanceWindowExecutionOutput, result2 error) {
	fake.cancelMaintenanceWindowExecutionMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionStub = nil
	fake.cancelMaintenanceWindowExecutionReturns = struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionReturnsOnCall(i int, result1 *ssm.CancelMaintenanceWindowExecutionOutput, result2 error) {
	fake.cancelMaintenanceWindowExecutionMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionStub = nil
	if fake.cancelMaintenanceWindowExecutionReturnsOnCall == nil {
		fake.cancelMaintenanceWindowExecutionReturnsOnCall = make(map[int]struct {
			result1 *ssm.CancelMaintenanceWindowExecutionOutput
			result2 error
		})
	}
	fake.cancelMaintenanceWindowExecutionReturnsOnCall[i] = struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionRequest(arg1 *ssm.CancelMaintenanceWindowExecutionInput) (*request.Request, *ssm.CancelMaintenanceWindowExecutionOutput) {
	fake.cancelMaintenanceWindowExecutionRequestMutex.Lock()
	ret, specificReturn := fake.cancelMaintenanceWindowExecutionRequestReturnsOnCall[len(fake.cancelMaintenanceWindowExecutionRequestArgsForCall)]
	fake.cancelMaintenanceWindowExecutionRequestArgsForCall = append(fake.cancelMaintenanceWindowExecutionRequestArgsForCall, struct {
		arg1 *ssm.CancelMaintenanceWindowExecutionInput
	}{arg1})
	stub := fake.CancelMaintenanceWindowExecutionRequestStub
	fakeReturns := fake.cancelMaintenanceWindowExecutionRequestReturns
	fake.recordInvocation("CancelMaintenanceWindowExecutionRequest", []interface{}{arg1})
	fake.cancelMaintenanceWindowExecutionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionRequestCallCount() int {
	fake.cancelMaintenanceWindowExecutionRequestMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionRequestMutex.RUnlock()
	return len(fake.cancelMaintenanceWindowExecutionRequestArgsForCall)
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionRequestCalls(stub func(*ssm.CancelMaintenanceWindowExecutionInput) (*request.Request, *ssm.CancelMaintenanceWindowExecutionOutput)) {
	fake.cancelMaintenanceWindowExecutionRequestMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionRequestMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionRequestStub = stub
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionRequestArgsForCall(i int) *ssm.CancelMaintenanceWindowExecutionInput {
	fake.cancelMaintenanceWindowExecutionRequestMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionRequestMutex.RUnlock()
	argsForCall := fake.cancelMaintenanceWindowExecutionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionRequestReturns(result1 *request.Request, result2 *ssm.CancelMaintenanceWindowExecutionOutput) {
	fake.cancelMaintenanceWindowExecutionRequestMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionRequestMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionRequestStub = nil
	fake.cancelMaintenanceWindowExecutionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CancelMaintenanceWindowExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CancelMaintenanceWindowExecutionOutput) {
	fake.cancelMaintenanceWindowExecutionRequestMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionRequestMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionRequestStub = nil
	if fake.cancelMaintenanceWindowExecutionRequestReturnsOnCall == nil {
		fake.cancelMaintenanceWindowExecutionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CancelMaintenanceWindowExecutionOutput
		})
	}
	fake.cancelMaintenanceWindowExecutionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CancelMaintenanceWindowExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionWithContext(arg1 context.Context, arg2 *ssm.CancelMaintenanceWindowExecutionInput, arg3 ...request.Option) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	fake.cancelMaintenanceWindowExecutionWithContextMutex.Lock()
	ret, specificReturn := fake.cancelMaintenanceWindowExecutionWithContextReturnsOnCall[len(fake.cancelMaintenanceWindowExecutionWithContextArgsForCall)]
	fake.cancelMaintenanceWindowExecutionWithContextArgsForCall = append(fake.cancelMaintenanceWindowExecutionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CancelMaintenanceWindowExecutionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CancelMaintenanceWindowExecutionWithContextStub
	fakeReturns := fake.cancelMaintenanceWindowExecutionWithContextReturns
	fake.recordInvocation("CancelMaintenanceWindowExecutionWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelMaintenanceWindowExecutionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionWithContextCallCount() int {
	fake.cancelMaintenanceWindowExecutionWithContextMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionWithContextMutex.RUnlock()
	return len(fake.cancelMaintenanceWindowExecutionWithContextArgsForCall)
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionWithContextCalls(stub func(context.Context, *ssm.CancelMaintenanceWindowExecutionInput, ...request.Option) (*ssm.CancelMaintenanceWindowExecutionOutput, error)) {
	fake.cancelMaintenanceWindowExecutionWithContextMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionWithContextMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionWithContextStub = stub
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionWithContextArgsForCall(i int) (context.Context, *ssm.CancelMaintenanceWindowExecutionInput, []request.Option) {
	fake.cancelMaintenanceWindowExecutionWithContextMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionWithContextMutex.RUnlock()
	argsForCall := fake.cancelMaintenanceWindowExecutionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionWithContextReturns(result1 *ssm.CancelMaintenanceWindowExecutionOutput, result2 error) {
	fake.cancelMaintenanceWindowExecutionWithContextMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionWithContextMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionWithContextStub = nil
	fake.cancelMaintenanceWindowExecutionWithContextReturns = struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CancelMaintenanceWindowExecutionWithContextReturnsOnCall(i int, result1 *ssm.CancelMaintenanceWindowExecutionOutput, result2 error) {
	fake.cancelMaintenanceWindowExecutionWithContextMutex.Lock()
	defer fake.cancelMaintenanceWindowExecutionWithContextMutex.Unlock()
	fake.CancelMaintenanceWindowExecutionWithContextStub = nil
	if fake.cancelMaintenanceWindowExecutionWithContextReturnsOnCall == nil {
		fake.cancelMaintenanceWindowExecutionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CancelMaintenanceWindowExecutionOutput
			result2 error
		})
	}
	fake.cancelMaintenanceWindowExecutionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CancelMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateActivation(arg1 *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error) {
	fake.createActivationMutex.Lock()
	ret, specificReturn := fake.createActivationReturnsOnCall[len(fake.createActivationArgsForCall)]
	fake.createActivationArgsForCall = append(fake.createActivationArgsForCall, struct {
		arg1 *ssm.CreateActivationInput
	}{arg1})
	stub := fake.CreateActivationStub
	fakeReturns := fake.createActivationReturns
	fake.recordInvocation("CreateActivation", []interface{}{arg1})
	fake.createActivationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateActivationCallCount() int {
	fake.createActivationMutex.RLock()
	defer fake.createActivationMutex.RUnlock()
	return len(fake.createActivationArgsForCall)
}

func (fake *FakeSSMClient) CreateActivationCalls(stub func(*ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error)) {
	fake.createActivationMutex.Lock()
	defer fake.createActivationMutex.Unlock()
	fake.CreateActivationStub = stub
}

func (fake *FakeSSMClient) CreateActivationArgsForCall(i int) *ssm.CreateActivationInput {
	fake.createActivationMutex.RLock()
	defer fake.createActivationMutex.RUnlock()
	argsForCall := fake.createActivationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateActivationReturns(result1 *ssm.CreateActivationOutput, result2 error) {
	fake.createActivationMutex.Lock()
	defer fake.createActivationMutex.Unlock()
	fake.CreateActivationStub = nil
	fake.createActivationReturns = struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateActivationReturnsOnCall(i int, result1 *ssm.CreateActivationOutput, result2 error) {
	fake.createActivationMutex.Lock()
	defer fake.createActivationMutex.Unlock()
	fake.CreateActivationStub = nil
	if fake.createActivationReturnsOnCall == nil {
		fake.createActivationReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateActivationOutput
			result2 error
		})
	}
	fake.createActivationReturnsOnCall[i] = struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateActivationRequest(arg1 *ssm.CreateActivationInput) (*request.Request, *ssm.CreateActivationOutput) {
	fake.createActivationRequestMutex.Lock()
	ret, specificReturn := fake.createActivationRequestReturnsOnCall[len(fake.createActivationRequestArgsForCall)]
	fake.createActivationRequestArgsForCall = append(fake.createActivationRequestArgsForCall, struct {
		arg1 *ssm.CreateActivationInput
	}{arg1})
	stub := fake.CreateActivationRequestStub
	fakeReturns := fake.createActivationRequestReturns
	fake.recordInvocation("CreateActivationRequest", []interface{}{arg1})
	fake.createActivationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateActivationRequestCallCount() int {
	fake.createActivationRequestMutex.RLock()
	defer fake.createActivationRequestMutex.RUnlock()
	return len(fake.createActivationRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateActivationRequestCalls(stub func(*ssm.CreateActivationInput) (*request.Request, *ssm.CreateActivationOutput)) {
	fake.createActivationRequestMutex.Lock()
	defer fake.createActivationRequestMutex.Unlock()
	fake.CreateActivationRequestStub = stub
}

func (fake *FakeSSMClient) CreateActivationRequestArgsForCall(i int) *ssm.CreateActivationInput {
	fake.createActivationRequestMutex.RLock()
	defer fake.createActivationRequestMutex.RUnlock()
	argsForCall := fake.createActivationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateActivationRequestReturns(result1 *request.Request, result2 *ssm.CreateActivationOutput) {
	fake.createActivationRequestMutex.Lock()
	defer fake.createActivationRequestMutex.Unlock()
	fake.CreateActivationRequestStub = nil
	fake.createActivationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateActivationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateActivationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateActivationOutput) {
	fake.createActivationRequestMutex.Lock()
	defer fake.createActivationRequestMutex.Unlock()
	fake.CreateActivationRequestStub = nil
	if fake.createActivationRequestReturnsOnCall == nil {
		fake.createActivationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateActivationOutput
		})
	}
	fake.createActivationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateActivationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateActivationWithContext(arg1 context.Context, arg2 *ssm.CreateActivationInput, arg3 ...request.Option) (*ssm.CreateActivationOutput, error) {
	fake.createActivationWithContextMutex.Lock()
	ret, specificReturn := fake.createActivationWithContextReturnsOnCall[len(fake.createActivationWithContextArgsForCall)]
	fake.createActivationWithContextArgsForCall = append(fake.createActivationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateActivationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateActivationWithContextStub
	fakeReturns := fake.createActivationWithContextReturns
	fake.recordInvocation("CreateActivationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createActivationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateActivationWithContextCallCount() int {
	fake.createActivationWithContextMutex.RLock()
	defer fake.createActivationWithContextMutex.RUnlock()
	return len(fake.createActivationWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateActivationWithContextCalls(stub func(context.Context, *ssm.CreateActivationInput, ...request.Option) (*ssm.CreateActivationOutput, error)) {
	fake.createActivationWithContextMutex.Lock()
	defer fake.createActivationWithContextMutex.Unlock()
	fake.CreateActivationWithContextStub = stub
}

func (fake *FakeSSMClient) CreateActivationWithContextArgsForCall(i int) (context.Context, *ssm.CreateActivationInput, []request.Option) {
	fake.createActivationWithContextMutex.RLock()
	defer fake.createActivationWithContextMutex.RUnlock()
	argsForCall := fake.createActivationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateActivationWithContextReturns(result1 *ssm.CreateActivationOutput, result2 error) {
	fake.createActivationWithContextMutex.Lock()
	defer fake.createActivationWithContextMutex.Unlock()
	fake.CreateActivationWithContextStub = nil
	fake.createActivationWithContextReturns = struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateActivationWithContextReturnsOnCall(i int, result1 *ssm.CreateActivationOutput, result2 error) {
	fake.createActivationWithContextMutex.Lock()
	defer fake.createActivationWithContextMutex.Unlock()
	fake.CreateActivationWithContextStub = nil
	if fake.createActivationWithContextReturnsOnCall == nil {
		fake.createActivationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateActivationOutput
			result2 error
		})
	}
	fake.createActivationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociation(arg1 *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error) {
	fake.createAssociationMutex.Lock()
	ret, specificReturn := fake.createAssociationReturnsOnCall[len(fake.createAssociationArgsForCall)]
	fake.createAssociationArgsForCall = append(fake.createAssociationArgsForCall, struct {
		arg1 *ssm.CreateAssociationInput
	}{arg1})
	stub := fake.CreateAssociationStub
	fakeReturns := fake.createAssociationReturns
	fake.recordInvocation("CreateAssociation", []interface{}{arg1})
	fake.createAssociationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateAssociationCallCount() int {
	fake.createAssociationMutex.RLock()
	defer fake.createAssociationMutex.RUnlock()
	return len(fake.createAssociationArgsForCall)
}

func (fake *FakeSSMClient) CreateAssociationCalls(stub func(*ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error)) {
	fake.createAssociationMutex.Lock()
	defer fake.createAssociationMutex.Unlock()
	fake.CreateAssociationStub = stub
}

func (fake *FakeSSMClient) CreateAssociationArgsForCall(i int) *ssm.CreateAssociationInput {
	fake.createAssociationMutex.RLock()
	defer fake.createAssociationMutex.RUnlock()
	argsForCall := fake.createAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateAssociationReturns(result1 *ssm.CreateAssociationOutput, result2 error) {
	fake.createAssociationMutex.Lock()
	defer fake.createAssociationMutex.Unlock()
	fake.CreateAssociationStub = nil
	fake.createAssociationReturns = struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationReturnsOnCall(i int, result1 *ssm.CreateAssociationOutput, result2 error) {
	fake.createAssociationMutex.Lock()
	defer fake.createAssociationMutex.Unlock()
	fake.CreateAssociationStub = nil
	if fake.createAssociationReturnsOnCall == nil {
		fake.createAssociationReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateAssociationOutput
			result2 error
		})
	}
	fake.createAssociationReturnsOnCall[i] = struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationBatch(arg1 *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error) {
	fake.createAssociationBatchMutex.Lock()
	ret, specificReturn := fake.createAssociationBatchReturnsOnCall[len(fake.createAssociationBatchArgsForCall)]
	fake.createAssociationBatchArgsForCall = append(fake.createAssociationBatchArgsForCall, struct {
		arg1 *ssm.CreateAssociationBatchInput
	}{arg1})
	stub := fake.CreateAssociationBatchStub
	fakeReturns := fake.createAssociationBatchReturns
	fake.recordInvocation("CreateAssociationBatch", []interface{}{arg1})
	fake.createAssociationBatchMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateAssociationBatchCallCount() int {
	fake.createAssociationBatchMutex.RLock()
	defer fake.createAssociationBatchMutex.RUnlock()
	return len(fake.createAssociationBatchArgsForCall)
}

func (fake *FakeSSMClient) CreateAssociationBatchCalls(stub func(*ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error)) {
	fake.createAssociationBatchMutex.Lock()
	defer fake.createAssociationBatchMutex.Unlock()
	fake.CreateAssociationBatchStub = stub
}

func (fake *FakeSSMClient) CreateAssociationBatchArgsForCall(i int) *ssm.CreateAssociationBatchInput {
	fake.createAssociationBatchMutex.RLock()
	defer fake.createAssociationBatchMutex.RUnlock()
	argsForCall := fake.createAssociationBatchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateAssociationBatchReturns(result1 *ssm.CreateAssociationBatchOutput, result2 error) {
	fake.createAssociationBatchMutex.Lock()
	defer fake.createAssociationBatchMutex.Unlock()
	fake.CreateAssociationBatchStub = nil
	fake.createAssociationBatchReturns = struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationBatchReturnsOnCall(i int, result1 *ssm.CreateAssociationBatchOutput, result2 error) {
	fake.createAssociationBatchMutex.Lock()
	defer fake.createAssociationBatchMutex.Unlock()
	fake.CreateAssociationBatchStub = nil
	if fake.createAssociationBatchReturnsOnCall == nil {
		fake.createAssociationBatchReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateAssociationBatchOutput
			result2 error
		})
	}
	fake.createAssociationBatchReturnsOnCall[i] = struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationBatchRequest(arg1 *ssm.CreateAssociationBatchInput) (*request.Request, *ssm.CreateAssociationBatchOutput) {
	fake.createAssociationBatchRequestMutex.Lock()
	ret, specificReturn := fake.createAssociationBatchRequestReturnsOnCall[len(fake.createAssociationBatchRequestArgsForCall)]
	fake.createAssociationBatchRequestArgsForCall = append(fake.createAssociationBatchRequestArgsForCall, struct {
		arg1 *ssm.CreateAssociationBatchInput
	}{arg1})
	stub := fake.CreateAssociationBatchRequestStub
	fakeReturns := fake.createAssociationBatchRequestReturns
	fake.recordInvocation("CreateAssociationBatchRequest", []interface{}{arg1})
	fake.createAssociationBatchRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateAssociationBatchRequestCallCount() int {
	fake.createAssociationBatchRequestMutex.RLock()
	defer fake.createAssociationBatchRequestMutex.RUnlock()
	return len(fake.createAssociationBatchRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateAssociationBatchRequestCalls(stub func(*ssm.CreateAssociationBatchInput) (*request.Request, *ssm.CreateAssociationBatchOutput)) {
	fake.createAssociationBatchRequestMutex.Lock()
	defer fake.createAssociationBatchRequestMutex.Unlock()
	fake.CreateAssociationBatchRequestStub = stub
}

func (fake *FakeSSMClient) CreateAssociationBatchRequestArgsForCall(i int) *ssm.CreateAssociationBatchInput {
	fake.createAssociationBatchRequestMutex.RLock()
	defer fake.createAssociationBatchRequestMutex.RUnlock()
	argsForCall := fake.createAssociationBatchRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateAssociationBatchRequestReturns(result1 *request.Request, result2 *ssm.CreateAssociationBatchOutput) {
	fake.createAssociationBatchRequestMutex.Lock()
	defer fake.createAssociationBatchRequestMutex.Unlock()
	fake.CreateAssociationBatchRequestStub = nil
	fake.createAssociationBatchRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationBatchOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationBatchRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateAssociationBatchOutput) {
	fake.createAssociationBatchRequestMutex.Lock()
	defer fake.createAssociationBatchRequestMutex.Unlock()
	fake.CreateAssociationBatchRequestStub = nil
	if fake.createAssociationBatchRequestReturnsOnCall == nil {
		fake.createAssociationBatchRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateAssociationBatchOutput
		})
	}
	fake.createAssociationBatchRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationBatchOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationBatchWithContext(arg1 context.Context, arg2 *ssm.CreateAssociationBatchInput, arg3 ...request.Option) (*ssm.CreateAssociationBatchOutput, error) {
	fake.createAssociationBatchWithContextMutex.Lock()
	ret, specificReturn := fake.createAssociationBatchWithContextReturnsOnCall[len(fake.createAssociationBatchWithContextArgsForCall)]
	fake.createAssociationBatchWithContextArgsForCall = append(fake.createAssociationBatchWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateAssociationBatchInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateAssociationBatchWithContextStub
	fakeReturns := fake.createAssociationBatchWithContextReturns
	fake.recordInvocation("CreateAssociationBatchWithContext", []interface{}{arg1, arg2, arg3})
	fake.createAssociationBatchWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateAssociationBatchWithContextCallCount() int {
	fake.createAssociationBatchWithContextMutex.RLock()
	defer fake.createAssociationBatchWithContextMutex.RUnlock()
	return len(fake.createAssociationBatchWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateAssociationBatchWithContextCalls(stub func(context.Context, *ssm.CreateAssociationBatchInput, ...request.Option) (*ssm.CreateAssociationBatchOutput, error)) {
	fake.createAssociationBatchWithContextMutex.Lock()
	defer fake.createAssociationBatchWithContextMutex.Unlock()
	fake.CreateAssociationBatchWithContextStub = stub
}

func (fake *FakeSSMClient) CreateAssociationBatchWithContextArgsForCall(i int) (context.Context, *ssm.CreateAssociationBatchInput, []request.Option) {
	fake.createAssociationBatchWithContextMutex.RLock()
	defer fake.createAssociationBatchWithContextMutex.RUnlock()
	argsForCall := fake.createAssociationBatchWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateAssociationBatchWithContextReturns(result1 *ssm.CreateAssociationBatchOutput, result2 error) {
	fake.createAssociationBatchWithContextMutex.Lock()
	defer fake.createAssociationBatchWithContextMutex.Unlock()
	fake.CreateAssociationBatchWithContextStub = nil
	fake.createAssociationBatchWithContextReturns = struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationBatchWithContextReturnsOnCall(i int, result1 *ssm.CreateAssociationBatchOutput, result2 error) {
	fake.createAssociationBatchWithContextMutex.Lock()
	defer fake.createAssociationBatchWithContextMutex.Unlock()
	fake.CreateAssociationBatchWithContextStub = nil
	if fake.createAssociationBatchWithContextReturnsOnCall == nil {
		fake.createAssociationBatchWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateAssociationBatchOutput
			result2 error
		})
	}
	fake.createAssociationBatchWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateAssociationBatchOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationRequest(arg1 *ssm.CreateAssociationInput) (*request.Request, *ssm.CreateAssociationOutput) {
	fake.createAssociationRequestMutex.Lock()
	ret, specificReturn := fake.createAssociationRequestReturnsOnCall[len(fake.createAssociationRequestArgsForCall)]
	fake.createAssociationRequestArgsForCall = append(fake.createAssociationRequestArgsForCall, struct {
		arg1 *ssm.CreateAssociationInput
	}{arg1})
	stub := fake.CreateAssociationRequestStub
	fakeReturns := fake.createAssociationRequestReturns
	fake.recordInvocation("CreateAssociationRequest", []interface{}{arg1})
	fake.createAssociationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateAssociationRequestCallCount() int {
	fake.createAssociationRequestMutex.RLock()
	defer fake.createAssociationRequestMutex.RUnlock()
	return len(fake.createAssociationRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateAssociationRequestCalls(stub func(*ssm.CreateAssociationInput) (*request.Request, *ssm.CreateAssociationOutput)) {
	fake.createAssociationRequestMutex.Lock()
	defer fake.createAssociationRequestMutex.Unlock()
	fake.CreateAssociationRequestStub = stub
}

func (fake *FakeSSMClient) CreateAssociationRequestArgsForCall(i int) *ssm.CreateAssociationInput {
	fake.createAssociationRequestMutex.RLock()
	defer fake.createAssociationRequestMutex.RUnlock()
	argsForCall := fake.createAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateAssociationRequestReturns(result1 *request.Request, result2 *ssm.CreateAssociationOutput) {
	fake.createAssociationRequestMutex.Lock()
	defer fake.createAssociationRequestMutex.Unlock()
	fake.CreateAssociationRequestStub = nil
	fake.createAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateAssociationOutput) {
	fake.createAssociationRequestMutex.Lock()
	defer fake.createAssociationRequestMutex.Unlock()
	fake.CreateAssociationRequestStub = nil
	if fake.createAssociationRequestReturnsOnCall == nil {
		fake.createAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateAssociationOutput
		})
	}
	fake.createAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationWithContext(arg1 context.Context, arg2 *ssm.CreateAssociationInput, arg3 ...request.Option) (*ssm.CreateAssociationOutput, error) {
	fake.createAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.createAssociationWithContextReturnsOnCall[len(fake.createAssociationWithContextArgsForCall)]
	fake.createAssociationWithContextArgsForCall = append(fake.createAssociationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateAssociationWithContextStub
	fakeReturns := fake.createAssociationWithContextReturns
	fake.recordInvocation("CreateAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createAssociationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateAssociationWithContextCallCount() int {
	fake.createAssociationWithContextMutex.RLock()
	defer fake.createAssociationWithContextMutex.RUnlock()
	return len(fake.createAssociationWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateAssociationWithContextCalls(stub func(context.Context, *ssm.CreateAssociationInput, ...request.Option) (*ssm.CreateAssociationOutput, error)) {
	fake.createAssociationWithContextMutex.Lock()
	defer fake.createAssociationWithContextMutex.Unlock()
	fake.CreateAssociationWithContextStub = stub
}

func (fake *FakeSSMClient) CreateAssociationWithContextArgsForCall(i int) (context.Context, *ssm.CreateAssociationInput, []request.Option) {
	fake.createAssociationWithContextMutex.RLock()
	defer fake.createAssociationWithContextMutex.RUnlock()
	argsForCall := fake.createAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateAssociationWithContextReturns(result1 *ssm.CreateAssociationOutput, result2 error) {
	fake.createAssociationWithContextMutex.Lock()
	defer fake.createAssociationWithContextMutex.Unlock()
	fake.CreateAssociationWithContextStub = nil
	fake.createAssociationWithContextReturns = struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateAssociationWithContextReturnsOnCall(i int, result1 *ssm.CreateAssociationOutput, result2 error) {
	fake.createAssociationWithContextMutex.Lock()
	defer fake.createAssociationWithContextMutex.Unlock()
	fake.CreateAssociationWithContextStub = nil
	if fake.createAssociationWithContextReturnsOnCall == nil {
		fake.createAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateAssociationOutput
			result2 error
		})
	}
	fake.createAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateDocument(arg1 *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error) {
	fake.createDocumentMutex.Lock()
	ret, specificReturn := fake.createDocumentReturnsOnCall[len(fake.createDocumentArgsForCall)]
	fake.createDocumentArgsForCall = append(fake.createDocumentArgsForCall, struct {
		arg1 *ssm.CreateDocumentInput
	}{arg1})
	stub := fake.CreateDocumentStub
	fakeReturns := fake.createDocumentReturns
	fake.recordInvocation("CreateDocument", []interface{}{arg1})
	fake.createDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateDocumentCallCount() int {
	fake.createDocumentMutex.RLock()
	defer fake.createDocumentMutex.RUnlock()
	return len(fake.createDocumentArgsForCall)
}

func (fake *FakeSSMClient) CreateDocumentCalls(stub func(*ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error)) {
	fake.createDocumentMutex.Lock()
	defer fake.createDocumentMutex.Unlock()
	fake.CreateDocumentStub = stub
}

func (fake *FakeSSMClient) CreateDocumentArgsForCall(i int) *ssm.CreateDocumentInput {
	fake.createDocumentMutex.RLock()
	defer fake.createDocumentMutex.RUnlock()
	argsForCall := fake.createDocumentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateDocumentReturns(result1 *ssm.CreateDocumentOutput, result2 error) {
	fake.createDocumentMutex.Lock()
	defer fake.createDocumentMutex.Unlock()
	fake.CreateDocumentStub = nil
	fake.createDocumentReturns = struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateDocumentReturnsOnCall(i int, result1 *ssm.CreateDocumentOutput, result2 error) {
	fake.createDocumentMutex.Lock()
	defer fake.createDocumentMutex.Unlock()
	fake.CreateDocumentStub = nil
	if fake.createDocumentReturnsOnCall == nil {
		fake.createDocumentReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateDocumentOutput
			result2 error
		})
	}
	fake.createDocumentReturnsOnCall[i] = struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateDocumentRequest(arg1 *ssm.CreateDocumentInput) (*request.Request, *ssm.CreateDocumentOutput) {
	fake.createDocumentRequestMutex.Lock()
	ret, specificReturn := fake.createDocumentRequestReturnsOnCall[len(fake.createDocumentRequestArgsForCall)]
	fake.createDocumentRequestArgsForCall = append(fake.createDocumentRequestArgsForCall, struct {
		arg1 *ssm.CreateDocumentInput
	}{arg1})
	stub := fake.CreateDocumentRequestStub
	fakeReturns := fake.createDocumentRequestReturns
	fake.recordInvocation("CreateDocumentRequest", []interface{}{arg1})
	fake.createDocumentRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateDocumentRequestCallCount() int {
	fake.createDocumentRequestMutex.RLock()
	defer fake.createDocumentRequestMutex.RUnlock()
	return len(fake.createDocumentRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateDocumentRequestCalls(stub func(*ssm.CreateDocumentInput) (*request.Request, *ssm.CreateDocumentOutput)) {
	fake.createDocumentRequestMutex.Lock()
	defer fake.createDocumentRequestMutex.Unlock()
	fake.CreateDocumentRequestStub = stub
}

func (fake *FakeSSMClient) CreateDocumentRequestArgsForCall(i int) *ssm.CreateDocumentInput {
	fake.createDocumentRequestMutex.RLock()
	defer fake.createDocumentRequestMutex.RUnlock()
	argsForCall := fake.createDocumentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateDocumentRequestReturns(result1 *request.Request, result2 *ssm.CreateDocumentOutput) {
	fake.createDocumentRequestMutex.Lock()
	defer fake.createDocumentRequestMutex.Unlock()
	fake.CreateDocumentRequestStub = nil
	fake.createDocumentRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateDocumentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateDocumentOutput) {
	fake.createDocumentRequestMutex.Lock()
	defer fake.createDocumentRequestMutex.Unlock()
	fake.CreateDocumentRequestStub = nil
	if fake.createDocumentRequestReturnsOnCall == nil {
		fake.createDocumentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateDocumentOutput
		})
	}
	fake.createDocumentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateDocumentWithContext(arg1 context.Context, arg2 *ssm.CreateDocumentInput, arg3 ...request.Option) (*ssm.CreateDocumentOutput, error) {
	fake.createDocumentWithContextMutex.Lock()
	ret, specificReturn := fake.createDocumentWithContextReturnsOnCall[len(fake.createDocumentWithContextArgsForCall)]
	fake.createDocumentWithContextArgsForCall = append(fake.createDocumentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateDocumentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDocumentWithContextStub
	fakeReturns := fake.createDocumentWithContextReturns
	fake.recordInvocation("CreateDocumentWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDocumentWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateDocumentWithContextCallCount() int {
	fake.createDocumentWithContextMutex.RLock()
	defer fake.createDocumentWithContextMutex.RUnlock()
	return len(fake.createDocumentWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateDocumentWithContextCalls(stub func(context.Context, *ssm.CreateDocumentInput, ...request.Option) (*ssm.CreateDocumentOutput, error)) {
	fake.createDocumentWithContextMutex.Lock()
	defer fake.createDocumentWithContextMutex.Unlock()
	fake.CreateDocumentWithContextStub = stub
}

func (fake *FakeSSMClient) CreateDocumentWithContextArgsForCall(i int) (context.Context, *ssm.CreateDocumentInput, []request.Option) {
	fake.createDocumentWithContextMutex.RLock()
	defer fake.createDocumentWithContextMutex.RUnlock()
	argsForCall := fake.createDocumentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateDocumentWithContextReturns(result1 *ssm.CreateDocumentOutput, result2 error) {
	fake.createDocumentWithContextMutex.Lock()
	defer fake.createDocumentWithContextMutex.Unlock()
	fake.CreateDocumentWithContextStub = nil
	fake.createDocumentWithContextReturns = struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateDocumentWithContextReturnsOnCall(i int, result1 *ssm.CreateDocumentOutput, result2 error) {
	fake.createDocumentWithContextMutex.Lock()
	defer fake.createDocumentWithContextMutex.Unlock()
	fake.CreateDocumentWithContextStub = nil
	if fake.createDocumentWithContextReturnsOnCall == nil {
		fake.createDocumentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateDocumentOutput
			result2 error
		})
	}
	fake.createDocumentWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateMaintenanceWindow(arg1 *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error) {
	fake.createMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.createMaintenanceWindowReturnsOnCall[len(fake.createMaintenanceWindowArgsForCall)]
	fake.createMaintenanceWindowArgsForCall = append(fake.createMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.CreateMaintenanceWindowInput
	}{arg1})
	stub := fake.CreateMaintenanceWindowStub
	fakeReturns := fake.createMaintenanceWindowReturns
	fake.recordInvocation("CreateMaintenanceWindow", []interface{}{arg1})
	fake.createMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateMaintenanceWindowCallCount() int {
	fake.createMaintenanceWindowMutex.RLock()
	defer fake.createMaintenanceWindowMutex.RUnlock()
	return len(fake.createMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) CreateMaintenanceWindowCalls(stub func(*ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error)) {
	fake.createMaintenanceWindowMutex.Lock()
	defer fake.createMaintenanceWindowMutex.Unlock()
	fake.CreateMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) CreateMaintenanceWindowArgsForCall(i int) *ssm.CreateMaintenanceWindowInput {
	fake.createMaintenanceWindowMutex.RLock()
	defer fake.createMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.createMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateMaintenanceWindowReturns(result1 *ssm.CreateMaintenanceWindowOutput, result2 error) {
	fake.createMaintenanceWindowMutex.Lock()
	defer fake.createMaintenanceWindowMutex.Unlock()
	fake.CreateMaintenanceWindowStub = nil
	fake.createMaintenanceWindowReturns = struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateMaintenanceWindowReturnsOnCall(i int, result1 *ssm.CreateMaintenanceWindowOutput, result2 error) {
	fake.createMaintenanceWindowMutex.Lock()
	defer fake.createMaintenanceWindowMutex.Unlock()
	fake.CreateMaintenanceWindowStub = nil
	if fake.createMaintenanceWindowReturnsOnCall == nil {
		fake.createMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateMaintenanceWindowOutput
			result2 error
		})
	}
	fake.createMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateMaintenanceWindowRequest(arg1 *ssm.CreateMaintenanceWindowInput) (*request.Request, *ssm.CreateMaintenanceWindowOutput) {
	fake.createMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.createMaintenanceWindowRequestReturnsOnCall[len(fake.createMaintenanceWindowRequestArgsForCall)]
	fake.createMaintenanceWindowRequestArgsForCall = append(fake.createMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.CreateMaintenanceWindowInput
	}{arg1})
	stub := fake.CreateMaintenanceWindowRequestStub
	fakeReturns := fake.createMaintenanceWindowRequestReturns
	fake.recordInvocation("CreateMaintenanceWindowRequest", []interface{}{arg1})
	fake.createMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateMaintenanceWindowRequestCallCount() int {
	fake.createMaintenanceWindowRequestMutex.RLock()
	defer fake.createMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.createMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateMaintenanceWindowRequestCalls(stub func(*ssm.CreateMaintenanceWindowInput) (*request.Request, *ssm.CreateMaintenanceWindowOutput)) {
	fake.createMaintenanceWindowRequestMutex.Lock()
	defer fake.createMaintenanceWindowRequestMutex.Unlock()
	fake.CreateMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) CreateMaintenanceWindowRequestArgsForCall(i int) *ssm.CreateMaintenanceWindowInput {
	fake.createMaintenanceWindowRequestMutex.RLock()
	defer fake.createMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.createMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.CreateMaintenanceWindowOutput) {
	fake.createMaintenanceWindowRequestMutex.Lock()
	defer fake.createMaintenanceWindowRequestMutex.Unlock()
	fake.CreateMaintenanceWindowRequestStub = nil
	fake.createMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateMaintenanceWindowOutput) {
	fake.createMaintenanceWindowRequestMutex.Lock()
	defer fake.createMaintenanceWindowRequestMutex.Unlock()
	fake.CreateMaintenanceWindowRequestStub = nil
	if fake.createMaintenanceWindowRequestReturnsOnCall == nil {
		fake.createMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateMaintenanceWindowOutput
		})
	}
	fake.createMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.CreateMaintenanceWindowInput, arg3 ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error) {
	fake.createMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.createMaintenanceWindowWithContextReturnsOnCall[len(fake.createMaintenanceWindowWithContextArgsForCall)]
	fake.createMaintenanceWindowWithContextArgsForCall = append(fake.createMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateMaintenanceWindowWithContextStub
	fakeReturns := fake.createMaintenanceWindowWithContextReturns
	fake.recordInvocation("CreateMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.createMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateMaintenanceWindowWithContextCallCount() int {
	fake.createMaintenanceWindowWithContextMutex.RLock()
	defer fake.createMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.createMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.CreateMaintenanceWindowInput, ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error)) {
	fake.createMaintenanceWindowWithContextMutex.Lock()
	defer fake.createMaintenanceWindowWithContextMutex.Unlock()
	fake.CreateMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) CreateMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.CreateMaintenanceWindowInput, []request.Option) {
	fake.createMaintenanceWindowWithContextMutex.RLock()
	defer fake.createMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.createMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateMaintenanceWindowWithContextReturns(result1 *ssm.CreateMaintenanceWindowOutput, result2 error) {
	fake.createMaintenanceWindowWithContextMutex.Lock()
	defer fake.createMaintenanceWindowWithContextMutex.Unlock()
	fake.CreateMaintenanceWindowWithContextStub = nil
	fake.createMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.CreateMaintenanceWindowOutput, result2 error) {
	fake.createMaintenanceWindowWithContextMutex.Lock()
	defer fake.createMaintenanceWindowWithContextMutex.Unlock()
	fake.CreateMaintenanceWindowWithContextStub = nil
	if fake.createMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.createMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateMaintenanceWindowOutput
			result2 error
		})
	}
	fake.createMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsItem(arg1 *ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error) {
	fake.createOpsItemMutex.Lock()
	ret, specificReturn := fake.createOpsItemReturnsOnCall[len(fake.createOpsItemArgsForCall)]
	fake.createOpsItemArgsForCall = append(fake.createOpsItemArgsForCall, struct {
		arg1 *ssm.CreateOpsItemInput
	}{arg1})
	stub := fake.CreateOpsItemStub
	fakeReturns := fake.createOpsItemReturns
	fake.recordInvocation("CreateOpsItem", []interface{}{arg1})
	fake.createOpsItemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateOpsItemCallCount() int {
	fake.createOpsItemMutex.RLock()
	defer fake.createOpsItemMutex.RUnlock()
	return len(fake.createOpsItemArgsForCall)
}

func (fake *FakeSSMClient) CreateOpsItemCalls(stub func(*ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error)) {
	fake.createOpsItemMutex.Lock()
	defer fake.createOpsItemMutex.Unlock()
	fake.CreateOpsItemStub = stub
}

func (fake *FakeSSMClient) CreateOpsItemArgsForCall(i int) *ssm.CreateOpsItemInput {
	fake.createOpsItemMutex.RLock()
	defer fake.createOpsItemMutex.RUnlock()
	argsForCall := fake.createOpsItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateOpsItemReturns(result1 *ssm.CreateOpsItemOutput, result2 error) {
	fake.createOpsItemMutex.Lock()
	defer fake.createOpsItemMutex.Unlock()
	fake.CreateOpsItemStub = nil
	fake.createOpsItemReturns = struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsItemReturnsOnCall(i int, result1 *ssm.CreateOpsItemOutput, result2 error) {
	fake.createOpsItemMutex.Lock()
	defer fake.createOpsItemMutex.Unlock()
	fake.CreateOpsItemStub = nil
	if fake.createOpsItemReturnsOnCall == nil {
		fake.createOpsItemReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateOpsItemOutput
			result2 error
		})
	}
	fake.createOpsItemReturnsOnCall[i] = struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsItemRequest(arg1 *ssm.CreateOpsItemInput) (*request.Request, *ssm.CreateOpsItemOutput) {
	fake.createOpsItemRequestMutex.Lock()
	ret, specificReturn := fake.createOpsItemRequestReturnsOnCall[len(fake.createOpsItemRequestArgsForCall)]
	fake.createOpsItemRequestArgsForCall = append(fake.createOpsItemRequestArgsForCall, struct {
		arg1 *ssm.CreateOpsItemInput
	}{arg1})
	stub := fake.CreateOpsItemRequestStub
	fakeReturns := fake.createOpsItemRequestReturns
	fake.recordInvocation("CreateOpsItemRequest", []interface{}{arg1})
	fake.createOpsItemRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateOpsItemRequestCallCount() int {
	fake.createOpsItemRequestMutex.RLock()
	defer fake.createOpsItemRequestMutex.RUnlock()
	return len(fake.createOpsItemRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateOpsItemRequestCalls(stub func(*ssm.CreateOpsItemInput) (*request.Request, *ssm.CreateOpsItemOutput)) {
	fake.createOpsItemRequestMutex.Lock()
	defer fake.createOpsItemRequestMutex.Unlock()
	fake.CreateOpsItemRequestStub = stub
}

func (fake *FakeSSMClient) CreateOpsItemRequestArgsForCall(i int) *ssm.CreateOpsItemInput {
	fake.createOpsItemRequestMutex.RLock()
	defer fake.createOpsItemRequestMutex.RUnlock()
	argsForCall := fake.createOpsItemRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateOpsItemRequestReturns(result1 *request.Request, result2 *ssm.CreateOpsItemOutput) {
	fake.createOpsItemRequestMutex.Lock()
	defer fake.createOpsItemRequestMutex.Unlock()
	fake.CreateOpsItemRequestStub = nil
	fake.createOpsItemRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateOpsItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsItemRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateOpsItemOutput) {
	fake.createOpsItemRequestMutex.Lock()
	defer fake.createOpsItemRequestMutex.Unlock()
	fake.CreateOpsItemRequestStub = nil
	if fake.createOpsItemRequestReturnsOnCall == nil {
		fake.createOpsItemRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateOpsItemOutput
		})
	}
	fake.createOpsItemRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateOpsItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsItemWithContext(arg1 context.Context, arg2 *ssm.CreateOpsItemInput, arg3 ...request.Option) (*ssm.CreateOpsItemOutput, error) {
	fake.createOpsItemWithContextMutex.Lock()
	ret, specificReturn := fake.createOpsItemWithContextReturnsOnCall[len(fake.createOpsItemWithContextArgsForCall)]
	fake.createOpsItemWithContextArgsForCall = append(fake.createOpsItemWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateOpsItemInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateOpsItemWithContextStub
	fakeReturns := fake.createOpsItemWithContextReturns
	fake.recordInvocation("CreateOpsItemWithContext", []interface{}{arg1, arg2, arg3})
	fake.createOpsItemWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateOpsItemWithContextCallCount() int {
	fake.createOpsItemWithContextMutex.RLock()
	defer fake.createOpsItemWithContextMutex.RUnlock()
	return len(fake.createOpsItemWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateOpsItemWithContextCalls(stub func(context.Context, *ssm.CreateOpsItemInput, ...request.Option) (*ssm.CreateOpsItemOutput, error)) {
	fake.createOpsItemWithContextMutex.Lock()
	defer fake.createOpsItemWithContextMutex.Unlock()
	fake.CreateOpsItemWithContextStub = stub
}

func (fake *FakeSSMClient) CreateOpsItemWithContextArgsForCall(i int) (context.Context, *ssm.CreateOpsItemInput, []request.Option) {
	fake.createOpsItemWithContextMutex.RLock()
	defer fake.createOpsItemWithContextMutex.RUnlock()
	argsForCall := fake.createOpsItemWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateOpsItemWithContextReturns(result1 *ssm.CreateOpsItemOutput, result2 error) {
	fake.createOpsItemWithContextMutex.Lock()
	defer fake.createOpsItemWithContextMutex.Unlock()
	fake.CreateOpsItemWithContextStub = nil
	fake.createOpsItemWithContextReturns = struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsItemWithContextReturnsOnCall(i int, result1 *ssm.CreateOpsItemOutput, result2 error) {
	fake.createOpsItemWithContextMutex.Lock()
	defer fake.createOpsItemWithContextMutex.Unlock()
	fake.CreateOpsItemWithContextStub = nil
	if fake.createOpsItemWithContextReturnsOnCall == nil {
		fake.createOpsItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateOpsItemOutput
			result2 error
		})
	}
	fake.createOpsItemWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsMetadata(arg1 *ssm.CreateOpsMetadataInput) (*ssm.CreateOpsMetadataOutput, error) {
	fake.createOpsMetadataMutex.Lock()
	ret, specificReturn := fake.createOpsMetadataReturnsOnCall[len(fake.createOpsMetadataArgsForCall)]
	fake.createOpsMetadataArgsForCall = append(fake.createOpsMetadataArgsForCall, struct {
		arg1 *ssm.CreateOpsMetadataInput
	}{arg1})
	stub := fake.CreateOpsMetadataStub
	fakeReturns := fake.createOpsMetadataReturns
	fake.recordInvocation("CreateOpsMetadata", []interface{}{arg1})
	fake.createOpsMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateOpsMetadataCallCount() int {
	fake.createOpsMetadataMutex.RLock()
	defer fake.createOpsMetadataMutex.RUnlock()
	return len(fake.createOpsMetadataArgsForCall)
}

func (fake *FakeSSMClient) CreateOpsMetadataCalls(stub func(*ssm.CreateOpsMetadataInput) (*ssm.CreateOpsMetadataOutput, error)) {
	fake.createOpsMetadataMutex.Lock()
	defer fake.createOpsMetadataMutex.Unlock()
	fake.CreateOpsMetadataStub = stub
}

func (fake *FakeSSMClient) CreateOpsMetadataArgsForCall(i int) *ssm.CreateOpsMetadataInput {
	fake.createOpsMetadataMutex.RLock()
	defer fake.createOpsMetadataMutex.RUnlock()
	argsForCall := fake.createOpsMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateOpsMetadataReturns(result1 *ssm.CreateOpsMetadataOutput, result2 error) {
	fake.createOpsMetadataMutex.Lock()
	defer fake.createOpsMetadataMutex.Unlock()
	fake.CreateOpsMetadataStub = nil
	fake.createOpsMetadataReturns = struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsMetadataReturnsOnCall(i int, result1 *ssm.CreateOpsMetadataOutput, result2 error) {
	fake.createOpsMetadataMutex.Lock()
	defer fake.createOpsMetadataMutex.Unlock()
	fake.CreateOpsMetadataStub = nil
	if fake.createOpsMetadataReturnsOnCall == nil {
		fake.createOpsMetadataReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateOpsMetadataOutput
			result2 error
		})
	}
	fake.createOpsMetadataReturnsOnCall[i] = struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsMetadataRequest(arg1 *ssm.CreateOpsMetadataInput) (*request.Request, *ssm.CreateOpsMetadataOutput) {
	fake.createOpsMetadataRequestMutex.Lock()
	ret, specificReturn := fake.createOpsMetadataRequestReturnsOnCall[len(fake.createOpsMetadataRequestArgsForCall)]
	fake.createOpsMetadataRequestArgsForCall = append(fake.createOpsMetadataRequestArgsForCall, struct {
		arg1 *ssm.CreateOpsMetadataInput
	}{arg1})
	stub := fake.CreateOpsMetadataRequestStub
	fakeReturns := fake.createOpsMetadataRequestReturns
	fake.recordInvocation("CreateOpsMetadataRequest", []interface{}{arg1})
	fake.createOpsMetadataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateOpsMetadataRequestCallCount() int {
	fake.createOpsMetadataRequestMutex.RLock()
	defer fake.createOpsMetadataRequestMutex.RUnlock()
	return len(fake.createOpsMetadataRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateOpsMetadataRequestCalls(stub func(*ssm.CreateOpsMetadataInput) (*request.Request, *ssm.CreateOpsMetadataOutput)) {
	fake.createOpsMetadataRequestMutex.Lock()
	defer fake.createOpsMetadataRequestMutex.Unlock()
	fake.CreateOpsMetadataRequestStub = stub
}

func (fake *FakeSSMClient) CreateOpsMetadataRequestArgsForCall(i int) *ssm.CreateOpsMetadataInput {
	fake.createOpsMetadataRequestMutex.RLock()
	defer fake.createOpsMetadataRequestMutex.RUnlock()
	argsForCall := fake.createOpsMetadataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateOpsMetadataRequestReturns(result1 *request.Request, result2 *ssm.CreateOpsMetadataOutput) {
	fake.createOpsMetadataRequestMutex.Lock()
	defer fake.createOpsMetadataRequestMutex.Unlock()
	fake.CreateOpsMetadataRequestStub = nil
	fake.createOpsMetadataRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsMetadataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateOpsMetadataOutput) {
	fake.createOpsMetadataRequestMutex.Lock()
	defer fake.createOpsMetadataRequestMutex.Unlock()
	fake.CreateOpsMetadataRequestStub = nil
	if fake.createOpsMetadataRequestReturnsOnCall == nil {
		fake.createOpsMetadataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateOpsMetadataOutput
		})
	}
	fake.createOpsMetadataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsMetadataWithContext(arg1 context.Context, arg2 *ssm.CreateOpsMetadataInput, arg3 ...request.Option) (*ssm.CreateOpsMetadataOutput, error) {
	fake.createOpsMetadataWithContextMutex.Lock()
	ret, specificReturn := fake.createOpsMetadataWithContextReturnsOnCall[len(fake.createOpsMetadataWithContextArgsForCall)]
	fake.createOpsMetadataWithContextArgsForCall = append(fake.createOpsMetadataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateOpsMetadataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateOpsMetadataWithContextStub
	fakeReturns := fake.createOpsMetadataWithContextReturns
	fake.recordInvocation("CreateOpsMetadataWithContext", []interface{}{arg1, arg2, arg3})
	fake.createOpsMetadataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateOpsMetadataWithContextCallCount() int {
	fake.createOpsMetadataWithContextMutex.RLock()
	defer fake.createOpsMetadataWithContextMutex.RUnlock()
	return len(fake.createOpsMetadataWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateOpsMetadataWithContextCalls(stub func(context.Context, *ssm.CreateOpsMetadataInput, ...request.Option) (*ssm.CreateOpsMetadataOutput, error)) {
	fake.createOpsMetadataWithContextMutex.Lock()
	defer fake.createOpsMetadataWithContextMutex.Unlock()
	fake.CreateOpsMetadataWithContextStub = stub
}

func (fake *FakeSSMClient) CreateOpsMetadataWithContextArgsForCall(i int) (context.Context, *ssm.CreateOpsMetadataInput, []request.Option) {
	fake.createOpsMetadataWithContextMutex.RLock()
	defer fake.createOpsMetadataWithContextMutex.RUnlock()
	argsForCall := fake.createOpsMetadataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateOpsMetadataWithContextReturns(result1 *ssm.CreateOpsMetadataOutput, result2 error) {
	fake.createOpsMetadataWithContextMutex.Lock()
	defer fake.createOpsMetadataWithContextMutex.Unlock()
	fake.CreateOpsMetadataWithContextStub = nil
	fake.createOpsMetadataWithContextReturns = struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateOpsMetadataWithContextReturnsOnCall(i int, result1 *ssm.CreateOpsMetadataOutput, result2 error) {
	fake.createOpsMetadataWithContextMutex.Lock()
	defer fake.createOpsMetadataWithContextMutex.Unlock()
	fake.CreateOpsMetadataWithContextStub = nil
	if fake.createOpsMetadataWithContextReturnsOnCall == nil {
		fake.createOpsMetadataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateOpsMetadataOutput
			result2 error
		})
	}
	fake.createOpsMetadataWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreatePatchBaseline(arg1 *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error) {
	fake.createPatchBaselineMutex.Lock()
	ret, specificReturn := fake.createPatchBaselineReturnsOnCall[len(fake.createPatchBaselineArgsForCall)]
	fake.createPatchBaselineArgsForCall = append(fake.createPatchBaselineArgsForCall, struct {
		arg1 *ssm.CreatePatchBaselineInput
	}{arg1})
	stub := fake.CreatePatchBaselineStub
	fakeReturns := fake.createPatchBaselineReturns
	fake.recordInvocation("CreatePatchBaseline", []interface{}{arg1})
	fake.createPatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreatePatchBaselineCallCount() int {
	fake.createPatchBaselineMutex.RLock()
	defer fake.createPatchBaselineMutex.RUnlock()
	return len(fake.createPatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) CreatePatchBaselineCalls(stub func(*ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error)) {
	fake.createPatchBaselineMutex.Lock()
	defer fake.createPatchBaselineMutex.Unlock()
	fake.CreatePatchBaselineStub = stub
}

func (fake *FakeSSMClient) CreatePatchBaselineArgsForCall(i int) *ssm.CreatePatchBaselineInput {
	fake.createPatchBaselineMutex.RLock()
	defer fake.createPatchBaselineMutex.RUnlock()
	argsForCall := fake.createPatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreatePatchBaselineReturns(result1 *ssm.CreatePatchBaselineOutput, result2 error) {
	fake.createPatchBaselineMutex.Lock()
	defer fake.createPatchBaselineMutex.Unlock()
	fake.CreatePatchBaselineStub = nil
	fake.createPatchBaselineReturns = struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreatePatchBaselineReturnsOnCall(i int, result1 *ssm.CreatePatchBaselineOutput, result2 error) {
	fake.createPatchBaselineMutex.Lock()
	defer fake.createPatchBaselineMutex.Unlock()
	fake.CreatePatchBaselineStub = nil
	if fake.createPatchBaselineReturnsOnCall == nil {
		fake.createPatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreatePatchBaselineOutput
			result2 error
		})
	}
	fake.createPatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreatePatchBaselineRequest(arg1 *ssm.CreatePatchBaselineInput) (*request.Request, *ssm.CreatePatchBaselineOutput) {
	fake.createPatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.createPatchBaselineRequestReturnsOnCall[len(fake.createPatchBaselineRequestArgsForCall)]
	fake.createPatchBaselineRequestArgsForCall = append(fake.createPatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.CreatePatchBaselineInput
	}{arg1})
	stub := fake.CreatePatchBaselineRequestStub
	fakeReturns := fake.createPatchBaselineRequestReturns
	fake.recordInvocation("CreatePatchBaselineRequest", []interface{}{arg1})
	fake.createPatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreatePatchBaselineRequestCallCount() int {
	fake.createPatchBaselineRequestMutex.RLock()
	defer fake.createPatchBaselineRequestMutex.RUnlock()
	return len(fake.createPatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) CreatePatchBaselineRequestCalls(stub func(*ssm.CreatePatchBaselineInput) (*request.Request, *ssm.CreatePatchBaselineOutput)) {
	fake.createPatchBaselineRequestMutex.Lock()
	defer fake.createPatchBaselineRequestMutex.Unlock()
	fake.CreatePatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) CreatePatchBaselineRequestArgsForCall(i int) *ssm.CreatePatchBaselineInput {
	fake.createPatchBaselineRequestMutex.RLock()
	defer fake.createPatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.createPatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreatePatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.CreatePatchBaselineOutput) {
	fake.createPatchBaselineRequestMutex.Lock()
	defer fake.createPatchBaselineRequestMutex.Unlock()
	fake.CreatePatchBaselineRequestStub = nil
	fake.createPatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreatePatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreatePatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreatePatchBaselineOutput) {
	fake.createPatchBaselineRequestMutex.Lock()
	defer fake.createPatchBaselineRequestMutex.Unlock()
	fake.CreatePatchBaselineRequestStub = nil
	if fake.createPatchBaselineRequestReturnsOnCall == nil {
		fake.createPatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreatePatchBaselineOutput
		})
	}
	fake.createPatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreatePatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreatePatchBaselineWithContext(arg1 context.Context, arg2 *ssm.CreatePatchBaselineInput, arg3 ...request.Option) (*ssm.CreatePatchBaselineOutput, error) {
	fake.createPatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.createPatchBaselineWithContextReturnsOnCall[len(fake.createPatchBaselineWithContextArgsForCall)]
	fake.createPatchBaselineWithContextArgsForCall = append(fake.createPatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreatePatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreatePatchBaselineWithContextStub
	fakeReturns := fake.createPatchBaselineWithContextReturns
	fake.recordInvocation("CreatePatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreatePatchBaselineWithContextCallCount() int {
	fake.createPatchBaselineWithContextMutex.RLock()
	defer fake.createPatchBaselineWithContextMutex.RUnlock()
	return len(fake.createPatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreatePatchBaselineWithContextCalls(stub func(context.Context, *ssm.CreatePatchBaselineInput, ...request.Option) (*ssm.CreatePatchBaselineOutput, error)) {
	fake.createPatchBaselineWithContextMutex.Lock()
	defer fake.createPatchBaselineWithContextMutex.Unlock()
	fake.CreatePatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) CreatePatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.CreatePatchBaselineInput, []request.Option) {
	fake.createPatchBaselineWithContextMutex.RLock()
	defer fake.createPatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.createPatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreatePatchBaselineWithContextReturns(result1 *ssm.CreatePatchBaselineOutput, result2 error) {
	fake.createPatchBaselineWithContextMutex.Lock()
	defer fake.createPatchBaselineWithContextMutex.Unlock()
	fake.CreatePatchBaselineWithContextStub = nil
	fake.createPatchBaselineWithContextReturns = struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreatePatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.CreatePatchBaselineOutput, result2 error) {
	fake.createPatchBaselineWithContextMutex.Lock()
	defer fake.createPatchBaselineWithContextMutex.Unlock()
	fake.CreatePatchBaselineWithContextStub = nil
	if fake.createPatchBaselineWithContextReturnsOnCall == nil {
		fake.createPatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreatePatchBaselineOutput
			result2 error
		})
	}
	fake.createPatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateResourceDataSync(arg1 *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error) {
	fake.createResourceDataSyncMutex.Lock()
	ret, specificReturn := fake.createResourceDataSyncReturnsOnCall[len(fake.createResourceDataSyncArgsForCall)]
	fake.createResourceDataSyncArgsForCall = append(fake.createResourceDataSyncArgsForCall, struct {
		arg1 *ssm.CreateResourceDataSyncInput
	}{arg1})
	stub := fake.CreateResourceDataSyncStub
	fakeReturns := fake.createResourceDataSyncReturns
	fake.recordInvocation("CreateResourceDataSync", []interface{}{arg1})
	fake.createResourceDataSyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateResourceDataSyncCallCount() int {
	fake.createResourceDataSyncMutex.RLock()
	defer fake.createResourceDataSyncMutex.RUnlock()
	return len(fake.createResourceDataSyncArgsForCall)
}

func (fake *FakeSSMClient) CreateResourceDataSyncCalls(stub func(*ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error)) {
	fake.createResourceDataSyncMutex.Lock()
	defer fake.createResourceDataSyncMutex.Unlock()
	fake.CreateResourceDataSyncStub = stub
}

func (fake *FakeSSMClient) CreateResourceDataSyncArgsForCall(i int) *ssm.CreateResourceDataSyncInput {
	fake.createResourceDataSyncMutex.RLock()
	defer fake.createResourceDataSyncMutex.RUnlock()
	argsForCall := fake.createResourceDataSyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateResourceDataSyncReturns(result1 *ssm.CreateResourceDataSyncOutput, result2 error) {
	fake.createResourceDataSyncMutex.Lock()
	defer fake.createResourceDataSyncMutex.Unlock()
	fake.CreateResourceDataSyncStub = nil
	fake.createResourceDataSyncReturns = struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateResourceDataSyncReturnsOnCall(i int, result1 *ssm.CreateResourceDataSyncOutput, result2 error) {
	fake.createResourceDataSyncMutex.Lock()
	defer fake.createResourceDataSyncMutex.Unlock()
	fake.CreateResourceDataSyncStub = nil
	if fake.createResourceDataSyncReturnsOnCall == nil {
		fake.createResourceDataSyncReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateResourceDataSyncOutput
			result2 error
		})
	}
	fake.createResourceDataSyncReturnsOnCall[i] = struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateResourceDataSyncRequest(arg1 *ssm.CreateResourceDataSyncInput) (*request.Request, *ssm.CreateResourceDataSyncOutput) {
	fake.createResourceDataSyncRequestMutex.Lock()
	ret, specificReturn := fake.createResourceDataSyncRequestReturnsOnCall[len(fake.createResourceDataSyncRequestArgsForCall)]
	fake.createResourceDataSyncRequestArgsForCall = append(fake.createResourceDataSyncRequestArgsForCall, struct {
		arg1 *ssm.CreateResourceDataSyncInput
	}{arg1})
	stub := fake.CreateResourceDataSyncRequestStub
	fakeReturns := fake.createResourceDataSyncRequestReturns
	fake.recordInvocation("CreateResourceDataSyncRequest", []interface{}{arg1})
	fake.createResourceDataSyncRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateResourceDataSyncRequestCallCount() int {
	fake.createResourceDataSyncRequestMutex.RLock()
	defer fake.createResourceDataSyncRequestMutex.RUnlock()
	return len(fake.createResourceDataSyncRequestArgsForCall)
}

func (fake *FakeSSMClient) CreateResourceDataSyncRequestCalls(stub func(*ssm.CreateResourceDataSyncInput) (*request.Request, *ssm.CreateResourceDataSyncOutput)) {
	fake.createResourceDataSyncRequestMutex.Lock()
	defer fake.createResourceDataSyncRequestMutex.Unlock()
	fake.CreateResourceDataSyncRequestStub = stub
}

func (fake *FakeSSMClient) CreateResourceDataSyncRequestArgsForCall(i int) *ssm.CreateResourceDataSyncInput {
	fake.createResourceDataSyncRequestMutex.RLock()
	defer fake.createResourceDataSyncRequestMutex.RUnlock()
	argsForCall := fake.createResourceDataSyncRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) CreateResourceDataSyncRequestReturns(result1 *request.Request, result2 *ssm.CreateResourceDataSyncOutput) {
	fake.createResourceDataSyncRequestMutex.Lock()
	defer fake.createResourceDataSyncRequestMutex.Unlock()
	fake.CreateResourceDataSyncRequestStub = nil
	fake.createResourceDataSyncRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.CreateResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateResourceDataSyncRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.CreateResourceDataSyncOutput) {
	fake.createResourceDataSyncRequestMutex.Lock()
	defer fake.createResourceDataSyncRequestMutex.Unlock()
	fake.CreateResourceDataSyncRequestStub = nil
	if fake.createResourceDataSyncRequestReturnsOnCall == nil {
		fake.createResourceDataSyncRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.CreateResourceDataSyncOutput
		})
	}
	fake.createResourceDataSyncRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.CreateResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateResourceDataSyncWithContext(arg1 context.Context, arg2 *ssm.CreateResourceDataSyncInput, arg3 ...request.Option) (*ssm.CreateResourceDataSyncOutput, error) {
	fake.createResourceDataSyncWithContextMutex.Lock()
	ret, specificReturn := fake.createResourceDataSyncWithContextReturnsOnCall[len(fake.createResourceDataSyncWithContextArgsForCall)]
	fake.createResourceDataSyncWithContextArgsForCall = append(fake.createResourceDataSyncWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.CreateResourceDataSyncInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateResourceDataSyncWithContextStub
	fakeReturns := fake.createResourceDataSyncWithContextReturns
	fake.recordInvocation("CreateResourceDataSyncWithContext", []interface{}{arg1, arg2, arg3})
	fake.createResourceDataSyncWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) CreateResourceDataSyncWithContextCallCount() int {
	fake.createResourceDataSyncWithContextMutex.RLock()
	defer fake.createResourceDataSyncWithContextMutex.RUnlock()
	return len(fake.createResourceDataSyncWithContextArgsForCall)
}

func (fake *FakeSSMClient) CreateResourceDataSyncWithContextCalls(stub func(context.Context, *ssm.CreateResourceDataSyncInput, ...request.Option) (*ssm.CreateResourceDataSyncOutput, error)) {
	fake.createResourceDataSyncWithContextMutex.Lock()
	defer fake.createResourceDataSyncWithContextMutex.Unlock()
	fake.CreateResourceDataSyncWithContextStub = stub
}

func (fake *FakeSSMClient) CreateResourceDataSyncWithContextArgsForCall(i int) (context.Context, *ssm.CreateResourceDataSyncInput, []request.Option) {
	fake.createResourceDataSyncWithContextMutex.RLock()
	defer fake.createResourceDataSyncWithContextMutex.RUnlock()
	argsForCall := fake.createResourceDataSyncWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) CreateResourceDataSyncWithContextReturns(result1 *ssm.CreateResourceDataSyncOutput, result2 error) {
	fake.createResourceDataSyncWithContextMutex.Lock()
	defer fake.createResourceDataSyncWithContextMutex.Unlock()
	fake.CreateResourceDataSyncWithContextStub = nil
	fake.createResourceDataSyncWithContextReturns = struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) CreateResourceDataSyncWithContextReturnsOnCall(i int, result1 *ssm.CreateResourceDataSyncOutput, result2 error) {
	fake.createResourceDataSyncWithContextMutex.Lock()
	defer fake.createResourceDataSyncWithContextMutex.Unlock()
	fake.CreateResourceDataSyncWithContextStub = nil
	if fake.createResourceDataSyncWithContextReturnsOnCall == nil {
		fake.createResourceDataSyncWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.CreateResourceDataSyncOutput
			result2 error
		})
	}
	fake.createResourceDataSyncWithContextReturnsOnCall[i] = struct {
		result1 *ssm.CreateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteActivation(arg1 *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error) {
	fake.deleteActivationMutex.Lock()
	ret, specificReturn := fake.deleteActivationReturnsOnCall[len(fake.deleteActivationArgsForCall)]
	fake.deleteActivationArgsForCall = append(fake.deleteActivationArgsForCall, struct {
		arg1 *ssm.DeleteActivationInput
	}{arg1})
	stub := fake.DeleteActivationStub
	fakeReturns := fake.deleteActivationReturns
	fake.recordInvocation("DeleteActivation", []interface{}{arg1})
	fake.deleteActivationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteActivationCallCount() int {
	fake.deleteActivationMutex.RLock()
	defer fake.deleteActivationMutex.RUnlock()
	return len(fake.deleteActivationArgsForCall)
}

func (fake *FakeSSMClient) DeleteActivationCalls(stub func(*ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error)) {
	fake.deleteActivationMutex.Lock()
	defer fake.deleteActivationMutex.Unlock()
	fake.DeleteActivationStub = stub
}

func (fake *FakeSSMClient) DeleteActivationArgsForCall(i int) *ssm.DeleteActivationInput {
	fake.deleteActivationMutex.RLock()
	defer fake.deleteActivationMutex.RUnlock()
	argsForCall := fake.deleteActivationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteActivationReturns(result1 *ssm.DeleteActivationOutput, result2 error) {
	fake.deleteActivationMutex.Lock()
	defer fake.deleteActivationMutex.Unlock()
	fake.DeleteActivationStub = nil
	fake.deleteActivationReturns = struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteActivationReturnsOnCall(i int, result1 *ssm.DeleteActivationOutput, result2 error) {
	fake.deleteActivationMutex.Lock()
	defer fake.deleteActivationMutex.Unlock()
	fake.DeleteActivationStub = nil
	if fake.deleteActivationReturnsOnCall == nil {
		fake.deleteActivationReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteActivationOutput
			result2 error
		})
	}
	fake.deleteActivationReturnsOnCall[i] = struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteActivationRequest(arg1 *ssm.DeleteActivationInput) (*request.Request, *ssm.DeleteActivationOutput) {
	fake.deleteActivationRequestMutex.Lock()
	ret, specificReturn := fake.deleteActivationRequestReturnsOnCall[len(fake.deleteActivationRequestArgsForCall)]
	fake.deleteActivationRequestArgsForCall = append(fake.deleteActivationRequestArgsForCall, struct {
		arg1 *ssm.DeleteActivationInput
	}{arg1})
	stub := fake.DeleteActivationRequestStub
	fakeReturns := fake.deleteActivationRequestReturns
	fake.recordInvocation("DeleteActivationRequest", []interface{}{arg1})
	fake.deleteActivationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteActivationRequestCallCount() int {
	fake.deleteActivationRequestMutex.RLock()
	defer fake.deleteActivationRequestMutex.RUnlock()
	return len(fake.deleteActivationRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteActivationRequestCalls(stub func(*ssm.DeleteActivationInput) (*request.Request, *ssm.DeleteActivationOutput)) {
	fake.deleteActivationRequestMutex.Lock()
	defer fake.deleteActivationRequestMutex.Unlock()
	fake.DeleteActivationRequestStub = stub
}

func (fake *FakeSSMClient) DeleteActivationRequestArgsForCall(i int) *ssm.DeleteActivationInput {
	fake.deleteActivationRequestMutex.RLock()
	defer fake.deleteActivationRequestMutex.RUnlock()
	argsForCall := fake.deleteActivationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteActivationRequestReturns(result1 *request.Request, result2 *ssm.DeleteActivationOutput) {
	fake.deleteActivationRequestMutex.Lock()
	defer fake.deleteActivationRequestMutex.Unlock()
	fake.DeleteActivationRequestStub = nil
	fake.deleteActivationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteActivationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteActivationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteActivationOutput) {
	fake.deleteActivationRequestMutex.Lock()
	defer fake.deleteActivationRequestMutex.Unlock()
	fake.DeleteActivationRequestStub = nil
	if fake.deleteActivationRequestReturnsOnCall == nil {
		fake.deleteActivationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteActivationOutput
		})
	}
	fake.deleteActivationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteActivationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteActivationWithContext(arg1 context.Context, arg2 *ssm.DeleteActivationInput, arg3 ...request.Option) (*ssm.DeleteActivationOutput, error) {
	fake.deleteActivationWithContextMutex.Lock()
	ret, specificReturn := fake.deleteActivationWithContextReturnsOnCall[len(fake.deleteActivationWithContextArgsForCall)]
	fake.deleteActivationWithContextArgsForCall = append(fake.deleteActivationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteActivationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteActivationWithContextStub
	fakeReturns := fake.deleteActivationWithContextReturns
	fake.recordInvocation("DeleteActivationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteActivationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteActivationWithContextCallCount() int {
	fake.deleteActivationWithContextMutex.RLock()
	defer fake.deleteActivationWithContextMutex.RUnlock()
	return len(fake.deleteActivationWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteActivationWithContextCalls(stub func(context.Context, *ssm.DeleteActivationInput, ...request.Option) (*ssm.DeleteActivationOutput, error)) {
	fake.deleteActivationWithContextMutex.Lock()
	defer fake.deleteActivationWithContextMutex.Unlock()
	fake.DeleteActivationWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteActivationWithContextArgsForCall(i int) (context.Context, *ssm.DeleteActivationInput, []request.Option) {
	fake.deleteActivationWithContextMutex.RLock()
	defer fake.deleteActivationWithContextMutex.RUnlock()
	argsForCall := fake.deleteActivationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteActivationWithContextReturns(result1 *ssm.DeleteActivationOutput, result2 error) {
	fake.deleteActivationWithContextMutex.Lock()
	defer fake.deleteActivationWithContextMutex.Unlock()
	fake.DeleteActivationWithContextStub = nil
	fake.deleteActivationWithContextReturns = struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteActivationWithContextReturnsOnCall(i int, result1 *ssm.DeleteActivationOutput, result2 error) {
	fake.deleteActivationWithContextMutex.Lock()
	defer fake.deleteActivationWithContextMutex.Unlock()
	fake.DeleteActivationWithContextStub = nil
	if fake.deleteActivationWithContextReturnsOnCall == nil {
		fake.deleteActivationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteActivationOutput
			result2 error
		})
	}
	fake.deleteActivationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteActivationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteAssociation(arg1 *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error) {
	fake.deleteAssociationMutex.Lock()
	ret, specificReturn := fake.deleteAssociationReturnsOnCall[len(fake.deleteAssociationArgsForCall)]
	fake.deleteAssociationArgsForCall = append(fake.deleteAssociationArgsForCall, struct {
		arg1 *ssm.DeleteAssociationInput
	}{arg1})
	stub := fake.DeleteAssociationStub
	fakeReturns := fake.deleteAssociationReturns
	fake.recordInvocation("DeleteAssociation", []interface{}{arg1})
	fake.deleteAssociationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteAssociationCallCount() int {
	fake.deleteAssociationMutex.RLock()
	defer fake.deleteAssociationMutex.RUnlock()
	return len(fake.deleteAssociationArgsForCall)
}

func (fake *FakeSSMClient) DeleteAssociationCalls(stub func(*ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error)) {
	fake.deleteAssociationMutex.Lock()
	defer fake.deleteAssociationMutex.Unlock()
	fake.DeleteAssociationStub = stub
}

func (fake *FakeSSMClient) DeleteAssociationArgsForCall(i int) *ssm.DeleteAssociationInput {
	fake.deleteAssociationMutex.RLock()
	defer fake.deleteAssociationMutex.RUnlock()
	argsForCall := fake.deleteAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteAssociationReturns(result1 *ssm.DeleteAssociationOutput, result2 error) {
	fake.deleteAssociationMutex.Lock()
	defer fake.deleteAssociationMutex.Unlock()
	fake.DeleteAssociationStub = nil
	fake.deleteAssociationReturns = struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteAssociationReturnsOnCall(i int, result1 *ssm.DeleteAssociationOutput, result2 error) {
	fake.deleteAssociationMutex.Lock()
	defer fake.deleteAssociationMutex.Unlock()
	fake.DeleteAssociationStub = nil
	if fake.deleteAssociationReturnsOnCall == nil {
		fake.deleteAssociationReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteAssociationOutput
			result2 error
		})
	}
	fake.deleteAssociationReturnsOnCall[i] = struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteAssociationRequest(arg1 *ssm.DeleteAssociationInput) (*request.Request, *ssm.DeleteAssociationOutput) {
	fake.deleteAssociationRequestMutex.Lock()
	ret, specificReturn := fake.deleteAssociationRequestReturnsOnCall[len(fake.deleteAssociationRequestArgsForCall)]
	fake.deleteAssociationRequestArgsForCall = append(fake.deleteAssociationRequestArgsForCall, struct {
		arg1 *ssm.DeleteAssociationInput
	}{arg1})
	stub := fake.DeleteAssociationRequestStub
	fakeReturns := fake.deleteAssociationRequestReturns
	fake.recordInvocation("DeleteAssociationRequest", []interface{}{arg1})
	fake.deleteAssociationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteAssociationRequestCallCount() int {
	fake.deleteAssociationRequestMutex.RLock()
	defer fake.deleteAssociationRequestMutex.RUnlock()
	return len(fake.deleteAssociationRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteAssociationRequestCalls(stub func(*ssm.DeleteAssociationInput) (*request.Request, *ssm.DeleteAssociationOutput)) {
	fake.deleteAssociationRequestMutex.Lock()
	defer fake.deleteAssociationRequestMutex.Unlock()
	fake.DeleteAssociationRequestStub = stub
}

func (fake *FakeSSMClient) DeleteAssociationRequestArgsForCall(i int) *ssm.DeleteAssociationInput {
	fake.deleteAssociationRequestMutex.RLock()
	defer fake.deleteAssociationRequestMutex.RUnlock()
	argsForCall := fake.deleteAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteAssociationRequestReturns(result1 *request.Request, result2 *ssm.DeleteAssociationOutput) {
	fake.deleteAssociationRequestMutex.Lock()
	defer fake.deleteAssociationRequestMutex.Unlock()
	fake.DeleteAssociationRequestStub = nil
	fake.deleteAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteAssociationOutput) {
	fake.deleteAssociationRequestMutex.Lock()
	defer fake.deleteAssociationRequestMutex.Unlock()
	fake.DeleteAssociationRequestStub = nil
	if fake.deleteAssociationRequestReturnsOnCall == nil {
		fake.deleteAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteAssociationOutput
		})
	}
	fake.deleteAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteAssociationWithContext(arg1 context.Context, arg2 *ssm.DeleteAssociationInput, arg3 ...request.Option) (*ssm.DeleteAssociationOutput, error) {
	fake.deleteAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAssociationWithContextReturnsOnCall[len(fake.deleteAssociationWithContextArgsForCall)]
	fake.deleteAssociationWithContextArgsForCall = append(fake.deleteAssociationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteAssociationWithContextStub
	fakeReturns := fake.deleteAssociationWithContextReturns
	fake.recordInvocation("DeleteAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAssociationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteAssociationWithContextCallCount() int {
	fake.deleteAssociationWithContextMutex.RLock()
	defer fake.deleteAssociationWithContextMutex.RUnlock()
	return len(fake.deleteAssociationWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteAssociationWithContextCalls(stub func(context.Context, *ssm.DeleteAssociationInput, ...request.Option) (*ssm.DeleteAssociationOutput, error)) {
	fake.deleteAssociationWithContextMutex.Lock()
	defer fake.deleteAssociationWithContextMutex.Unlock()
	fake.DeleteAssociationWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteAssociationWithContextArgsForCall(i int) (context.Context, *ssm.DeleteAssociationInput, []request.Option) {
	fake.deleteAssociationWithContextMutex.RLock()
	defer fake.deleteAssociationWithContextMutex.RUnlock()
	argsForCall := fake.deleteAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteAssociationWithContextReturns(result1 *ssm.DeleteAssociationOutput, result2 error) {
	fake.deleteAssociationWithContextMutex.Lock()
	defer fake.deleteAssociationWithContextMutex.Unlock()
	fake.DeleteAssociationWithContextStub = nil
	fake.deleteAssociationWithContextReturns = struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteAssociationWithContextReturnsOnCall(i int, result1 *ssm.DeleteAssociationOutput, result2 error) {
	fake.deleteAssociationWithContextMutex.Lock()
	defer fake.deleteAssociationWithContextMutex.Unlock()
	fake.DeleteAssociationWithContextStub = nil
	if fake.deleteAssociationWithContextReturnsOnCall == nil {
		fake.deleteAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteAssociationOutput
			result2 error
		})
	}
	fake.deleteAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteDocument(arg1 *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error) {
	fake.deleteDocumentMutex.Lock()
	ret, specificReturn := fake.deleteDocumentReturnsOnCall[len(fake.deleteDocumentArgsForCall)]
	fake.deleteDocumentArgsForCall = append(fake.deleteDocumentArgsForCall, struct {
		arg1 *ssm.DeleteDocumentInput
	}{arg1})
	stub := fake.DeleteDocumentStub
	fakeReturns := fake.deleteDocumentReturns
	fake.recordInvocation("DeleteDocument", []interface{}{arg1})
	fake.deleteDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteDocumentCallCount() int {
	fake.deleteDocumentMutex.RLock()
	defer fake.deleteDocumentMutex.RUnlock()
	return len(fake.deleteDocumentArgsForCall)
}

func (fake *FakeSSMClient) DeleteDocumentCalls(stub func(*ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error)) {
	fake.deleteDocumentMutex.Lock()
	defer fake.deleteDocumentMutex.Unlock()
	fake.DeleteDocumentStub = stub
}

func (fake *FakeSSMClient) DeleteDocumentArgsForCall(i int) *ssm.DeleteDocumentInput {
	fake.deleteDocumentMutex.RLock()
	defer fake.deleteDocumentMutex.RUnlock()
	argsForCall := fake.deleteDocumentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteDocumentReturns(result1 *ssm.DeleteDocumentOutput, result2 error) {
	fake.deleteDocumentMutex.Lock()
	defer fake.deleteDocumentMutex.Unlock()
	fake.DeleteDocumentStub = nil
	fake.deleteDocumentReturns = struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteDocumentReturnsOnCall(i int, result1 *ssm.DeleteDocumentOutput, result2 error) {
	fake.deleteDocumentMutex.Lock()
	defer fake.deleteDocumentMutex.Unlock()
	fake.DeleteDocumentStub = nil
	if fake.deleteDocumentReturnsOnCall == nil {
		fake.deleteDocumentReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteDocumentOutput
			result2 error
		})
	}
	fake.deleteDocumentReturnsOnCall[i] = struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteDocumentRequest(arg1 *ssm.DeleteDocumentInput) (*request.Request, *ssm.DeleteDocumentOutput) {
	fake.deleteDocumentRequestMutex.Lock()
	ret, specificReturn := fake.deleteDocumentRequestReturnsOnCall[len(fake.deleteDocumentRequestArgsForCall)]
	fake.deleteDocumentRequestArgsForCall = append(fake.deleteDocumentRequestArgsForCall, struct {
		arg1 *ssm.DeleteDocumentInput
	}{arg1})
	stub := fake.DeleteDocumentRequestStub
	fakeReturns := fake.deleteDocumentRequestReturns
	fake.recordInvocation("DeleteDocumentRequest", []interface{}{arg1})
	fake.deleteDocumentRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteDocumentRequestCallCount() int {
	fake.deleteDocumentRequestMutex.RLock()
	defer fake.deleteDocumentRequestMutex.RUnlock()
	return len(fake.deleteDocumentRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteDocumentRequestCalls(stub func(*ssm.DeleteDocumentInput) (*request.Request, *ssm.DeleteDocumentOutput)) {
	fake.deleteDocumentRequestMutex.Lock()
	defer fake.deleteDocumentRequestMutex.Unlock()
	fake.DeleteDocumentRequestStub = stub
}

func (fake *FakeSSMClient) DeleteDocumentRequestArgsForCall(i int) *ssm.DeleteDocumentInput {
	fake.deleteDocumentRequestMutex.RLock()
	defer fake.deleteDocumentRequestMutex.RUnlock()
	argsForCall := fake.deleteDocumentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteDocumentRequestReturns(result1 *request.Request, result2 *ssm.DeleteDocumentOutput) {
	fake.deleteDocumentRequestMutex.Lock()
	defer fake.deleteDocumentRequestMutex.Unlock()
	fake.DeleteDocumentRequestStub = nil
	fake.deleteDocumentRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteDocumentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteDocumentOutput) {
	fake.deleteDocumentRequestMutex.Lock()
	defer fake.deleteDocumentRequestMutex.Unlock()
	fake.DeleteDocumentRequestStub = nil
	if fake.deleteDocumentRequestReturnsOnCall == nil {
		fake.deleteDocumentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteDocumentOutput
		})
	}
	fake.deleteDocumentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteDocumentWithContext(arg1 context.Context, arg2 *ssm.DeleteDocumentInput, arg3 ...request.Option) (*ssm.DeleteDocumentOutput, error) {
	fake.deleteDocumentWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDocumentWithContextReturnsOnCall[len(fake.deleteDocumentWithContextArgsForCall)]
	fake.deleteDocumentWithContextArgsForCall = append(fake.deleteDocumentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteDocumentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDocumentWithContextStub
	fakeReturns := fake.deleteDocumentWithContextReturns
	fake.recordInvocation("DeleteDocumentWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDocumentWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteDocumentWithContextCallCount() int {
	fake.deleteDocumentWithContextMutex.RLock()
	defer fake.deleteDocumentWithContextMutex.RUnlock()
	return len(fake.deleteDocumentWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteDocumentWithContextCalls(stub func(context.Context, *ssm.DeleteDocumentInput, ...request.Option) (*ssm.DeleteDocumentOutput, error)) {
	fake.deleteDocumentWithContextMutex.Lock()
	defer fake.deleteDocumentWithContextMutex.Unlock()
	fake.DeleteDocumentWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteDocumentWithContextArgsForCall(i int) (context.Context, *ssm.DeleteDocumentInput, []request.Option) {
	fake.deleteDocumentWithContextMutex.RLock()
	defer fake.deleteDocumentWithContextMutex.RUnlock()
	argsForCall := fake.deleteDocumentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteDocumentWithContextReturns(result1 *ssm.DeleteDocumentOutput, result2 error) {
	fake.deleteDocumentWithContextMutex.Lock()
	defer fake.deleteDocumentWithContextMutex.Unlock()
	fake.DeleteDocumentWithContextStub = nil
	fake.deleteDocumentWithContextReturns = struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteDocumentWithContextReturnsOnCall(i int, result1 *ssm.DeleteDocumentOutput, result2 error) {
	fake.deleteDocumentWithContextMutex.Lock()
	defer fake.deleteDocumentWithContextMutex.Unlock()
	fake.DeleteDocumentWithContextStub = nil
	if fake.deleteDocumentWithContextReturnsOnCall == nil {
		fake.deleteDocumentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteDocumentOutput
			result2 error
		})
	}
	fake.deleteDocumentWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteInventory(arg1 *ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error) {
	fake.deleteInventoryMutex.Lock()
	ret, specificReturn := fake.deleteInventoryReturnsOnCall[len(fake.deleteInventoryArgsForCall)]
	fake.deleteInventoryArgsForCall = append(fake.deleteInventoryArgsForCall, struct {
		arg1 *ssm.DeleteInventoryInput
	}{arg1})
	stub := fake.DeleteInventoryStub
	fakeReturns := fake.deleteInventoryReturns
	fake.recordInvocation("DeleteInventory", []interface{}{arg1})
	fake.deleteInventoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteInventoryCallCount() int {
	fake.deleteInventoryMutex.RLock()
	defer fake.deleteInventoryMutex.RUnlock()
	return len(fake.deleteInventoryArgsForCall)
}

func (fake *FakeSSMClient) DeleteInventoryCalls(stub func(*ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error)) {
	fake.deleteInventoryMutex.Lock()
	defer fake.deleteInventoryMutex.Unlock()
	fake.DeleteInventoryStub = stub
}

func (fake *FakeSSMClient) DeleteInventoryArgsForCall(i int) *ssm.DeleteInventoryInput {
	fake.deleteInventoryMutex.RLock()
	defer fake.deleteInventoryMutex.RUnlock()
	argsForCall := fake.deleteInventoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteInventoryReturns(result1 *ssm.DeleteInventoryOutput, result2 error) {
	fake.deleteInventoryMutex.Lock()
	defer fake.deleteInventoryMutex.Unlock()
	fake.DeleteInventoryStub = nil
	fake.deleteInventoryReturns = struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteInventoryReturnsOnCall(i int, result1 *ssm.DeleteInventoryOutput, result2 error) {
	fake.deleteInventoryMutex.Lock()
	defer fake.deleteInventoryMutex.Unlock()
	fake.DeleteInventoryStub = nil
	if fake.deleteInventoryReturnsOnCall == nil {
		fake.deleteInventoryReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteInventoryOutput
			result2 error
		})
	}
	fake.deleteInventoryReturnsOnCall[i] = struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteInventoryRequest(arg1 *ssm.DeleteInventoryInput) (*request.Request, *ssm.DeleteInventoryOutput) {
	fake.deleteInventoryRequestMutex.Lock()
	ret, specificReturn := fake.deleteInventoryRequestReturnsOnCall[len(fake.deleteInventoryRequestArgsForCall)]
	fake.deleteInventoryRequestArgsForCall = append(fake.deleteInventoryRequestArgsForCall, struct {
		arg1 *ssm.DeleteInventoryInput
	}{arg1})
	stub := fake.DeleteInventoryRequestStub
	fakeReturns := fake.deleteInventoryRequestReturns
	fake.recordInvocation("DeleteInventoryRequest", []interface{}{arg1})
	fake.deleteInventoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteInventoryRequestCallCount() int {
	fake.deleteInventoryRequestMutex.RLock()
	defer fake.deleteInventoryRequestMutex.RUnlock()
	return len(fake.deleteInventoryRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteInventoryRequestCalls(stub func(*ssm.DeleteInventoryInput) (*request.Request, *ssm.DeleteInventoryOutput)) {
	fake.deleteInventoryRequestMutex.Lock()
	defer fake.deleteInventoryRequestMutex.Unlock()
	fake.DeleteInventoryRequestStub = stub
}

func (fake *FakeSSMClient) DeleteInventoryRequestArgsForCall(i int) *ssm.DeleteInventoryInput {
	fake.deleteInventoryRequestMutex.RLock()
	defer fake.deleteInventoryRequestMutex.RUnlock()
	argsForCall := fake.deleteInventoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteInventoryRequestReturns(result1 *request.Request, result2 *ssm.DeleteInventoryOutput) {
	fake.deleteInventoryRequestMutex.Lock()
	defer fake.deleteInventoryRequestMutex.Unlock()
	fake.DeleteInventoryRequestStub = nil
	fake.deleteInventoryRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteInventoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteInventoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteInventoryOutput) {
	fake.deleteInventoryRequestMutex.Lock()
	defer fake.deleteInventoryRequestMutex.Unlock()
	fake.DeleteInventoryRequestStub = nil
	if fake.deleteInventoryRequestReturnsOnCall == nil {
		fake.deleteInventoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteInventoryOutput
		})
	}
	fake.deleteInventoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteInventoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteInventoryWithContext(arg1 context.Context, arg2 *ssm.DeleteInventoryInput, arg3 ...request.Option) (*ssm.DeleteInventoryOutput, error) {
	fake.deleteInventoryWithContextMutex.Lock()
	ret, specificReturn := fake.deleteInventoryWithContextReturnsOnCall[len(fake.deleteInventoryWithContextArgsForCall)]
	fake.deleteInventoryWithContextArgsForCall = append(fake.deleteInventoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteInventoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteInventoryWithContextStub
	fakeReturns := fake.deleteInventoryWithContextReturns
	fake.recordInvocation("DeleteInventoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteInventoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteInventoryWithContextCallCount() int {
	fake.deleteInventoryWithContextMutex.RLock()
	defer fake.deleteInventoryWithContextMutex.RUnlock()
	return len(fake.deleteInventoryWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteInventoryWithContextCalls(stub func(context.Context, *ssm.DeleteInventoryInput, ...request.Option) (*ssm.DeleteInventoryOutput, error)) {
	fake.deleteInventoryWithContextMutex.Lock()
	defer fake.deleteInventoryWithContextMutex.Unlock()
	fake.DeleteInventoryWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteInventoryWithContextArgsForCall(i int) (context.Context, *ssm.DeleteInventoryInput, []request.Option) {
	fake.deleteInventoryWithContextMutex.RLock()
	defer fake.deleteInventoryWithContextMutex.RUnlock()
	argsForCall := fake.deleteInventoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteInventoryWithContextReturns(result1 *ssm.DeleteInventoryOutput, result2 error) {
	fake.deleteInventoryWithContextMutex.Lock()
	defer fake.deleteInventoryWithContextMutex.Unlock()
	fake.DeleteInventoryWithContextStub = nil
	fake.deleteInventoryWithContextReturns = struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteInventoryWithContextReturnsOnCall(i int, result1 *ssm.DeleteInventoryOutput, result2 error) {
	fake.deleteInventoryWithContextMutex.Lock()
	defer fake.deleteInventoryWithContextMutex.Unlock()
	fake.DeleteInventoryWithContextStub = nil
	if fake.deleteInventoryWithContextReturnsOnCall == nil {
		fake.deleteInventoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteInventoryOutput
			result2 error
		})
	}
	fake.deleteInventoryWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteMaintenanceWindow(arg1 *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error) {
	fake.deleteMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.deleteMaintenanceWindowReturnsOnCall[len(fake.deleteMaintenanceWindowArgsForCall)]
	fake.deleteMaintenanceWindowArgsForCall = append(fake.deleteMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.DeleteMaintenanceWindowInput
	}{arg1})
	stub := fake.DeleteMaintenanceWindowStub
	fakeReturns := fake.deleteMaintenanceWindowReturns
	fake.recordInvocation("DeleteMaintenanceWindow", []interface{}{arg1})
	fake.deleteMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowCallCount() int {
	fake.deleteMaintenanceWindowMutex.RLock()
	defer fake.deleteMaintenanceWindowMutex.RUnlock()
	return len(fake.deleteMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowCalls(stub func(*ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error)) {
	fake.deleteMaintenanceWindowMutex.Lock()
	defer fake.deleteMaintenanceWindowMutex.Unlock()
	fake.DeleteMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowArgsForCall(i int) *ssm.DeleteMaintenanceWindowInput {
	fake.deleteMaintenanceWindowMutex.RLock()
	defer fake.deleteMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.deleteMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowReturns(result1 *ssm.DeleteMaintenanceWindowOutput, result2 error) {
	fake.deleteMaintenanceWindowMutex.Lock()
	defer fake.deleteMaintenanceWindowMutex.Unlock()
	fake.DeleteMaintenanceWindowStub = nil
	fake.deleteMaintenanceWindowReturns = struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowReturnsOnCall(i int, result1 *ssm.DeleteMaintenanceWindowOutput, result2 error) {
	fake.deleteMaintenanceWindowMutex.Lock()
	defer fake.deleteMaintenanceWindowMutex.Unlock()
	fake.DeleteMaintenanceWindowStub = nil
	if fake.deleteMaintenanceWindowReturnsOnCall == nil {
		fake.deleteMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteMaintenanceWindowOutput
			result2 error
		})
	}
	fake.deleteMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowRequest(arg1 *ssm.DeleteMaintenanceWindowInput) (*request.Request, *ssm.DeleteMaintenanceWindowOutput) {
	fake.deleteMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.deleteMaintenanceWindowRequestReturnsOnCall[len(fake.deleteMaintenanceWindowRequestArgsForCall)]
	fake.deleteMaintenanceWindowRequestArgsForCall = append(fake.deleteMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.DeleteMaintenanceWindowInput
	}{arg1})
	stub := fake.DeleteMaintenanceWindowRequestStub
	fakeReturns := fake.deleteMaintenanceWindowRequestReturns
	fake.recordInvocation("DeleteMaintenanceWindowRequest", []interface{}{arg1})
	fake.deleteMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowRequestCallCount() int {
	fake.deleteMaintenanceWindowRequestMutex.RLock()
	defer fake.deleteMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.deleteMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowRequestCalls(stub func(*ssm.DeleteMaintenanceWindowInput) (*request.Request, *ssm.DeleteMaintenanceWindowOutput)) {
	fake.deleteMaintenanceWindowRequestMutex.Lock()
	defer fake.deleteMaintenanceWindowRequestMutex.Unlock()
	fake.DeleteMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowRequestArgsForCall(i int) *ssm.DeleteMaintenanceWindowInput {
	fake.deleteMaintenanceWindowRequestMutex.RLock()
	defer fake.deleteMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.deleteMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.DeleteMaintenanceWindowOutput) {
	fake.deleteMaintenanceWindowRequestMutex.Lock()
	defer fake.deleteMaintenanceWindowRequestMutex.Unlock()
	fake.DeleteMaintenanceWindowRequestStub = nil
	fake.deleteMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteMaintenanceWindowOutput) {
	fake.deleteMaintenanceWindowRequestMutex.Lock()
	defer fake.deleteMaintenanceWindowRequestMutex.Unlock()
	fake.DeleteMaintenanceWindowRequestStub = nil
	if fake.deleteMaintenanceWindowRequestReturnsOnCall == nil {
		fake.deleteMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteMaintenanceWindowOutput
		})
	}
	fake.deleteMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.DeleteMaintenanceWindowInput, arg3 ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error) {
	fake.deleteMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.deleteMaintenanceWindowWithContextReturnsOnCall[len(fake.deleteMaintenanceWindowWithContextArgsForCall)]
	fake.deleteMaintenanceWindowWithContextArgsForCall = append(fake.deleteMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteMaintenanceWindowWithContextStub
	fakeReturns := fake.deleteMaintenanceWindowWithContextReturns
	fake.recordInvocation("DeleteMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowWithContextCallCount() int {
	fake.deleteMaintenanceWindowWithContextMutex.RLock()
	defer fake.deleteMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.deleteMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.DeleteMaintenanceWindowInput, ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error)) {
	fake.deleteMaintenanceWindowWithContextMutex.Lock()
	defer fake.deleteMaintenanceWindowWithContextMutex.Unlock()
	fake.DeleteMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.DeleteMaintenanceWindowInput, []request.Option) {
	fake.deleteMaintenanceWindowWithContextMutex.RLock()
	defer fake.deleteMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.deleteMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowWithContextReturns(result1 *ssm.DeleteMaintenanceWindowOutput, result2 error) {
	fake.deleteMaintenanceWindowWithContextMutex.Lock()
	defer fake.deleteMaintenanceWindowWithContextMutex.Unlock()
	fake.DeleteMaintenanceWindowWithContextStub = nil
	fake.deleteMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.DeleteMaintenanceWindowOutput, result2 error) {
	fake.deleteMaintenanceWindowWithContextMutex.Lock()
	defer fake.deleteMaintenanceWindowWithContextMutex.Unlock()
	fake.DeleteMaintenanceWindowWithContextStub = nil
	if fake.deleteMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.deleteMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteMaintenanceWindowOutput
			result2 error
		})
	}
	fake.deleteMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteOpsMetadata(arg1 *ssm.DeleteOpsMetadataInput) (*ssm.DeleteOpsMetadataOutput, error) {
	fake.deleteOpsMetadataMutex.Lock()
	ret, specificReturn := fake.deleteOpsMetadataReturnsOnCall[len(fake.deleteOpsMetadataArgsForCall)]
	fake.deleteOpsMetadataArgsForCall = append(fake.deleteOpsMetadataArgsForCall, struct {
		arg1 *ssm.DeleteOpsMetadataInput
	}{arg1})
	stub := fake.DeleteOpsMetadataStub
	fakeReturns := fake.deleteOpsMetadataReturns
	fake.recordInvocation("DeleteOpsMetadata", []interface{}{arg1})
	fake.deleteOpsMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteOpsMetadataCallCount() int {
	fake.deleteOpsMetadataMutex.RLock()
	defer fake.deleteOpsMetadataMutex.RUnlock()
	return len(fake.deleteOpsMetadataArgsForCall)
}

func (fake *FakeSSMClient) DeleteOpsMetadataCalls(stub func(*ssm.DeleteOpsMetadataInput) (*ssm.DeleteOpsMetadataOutput, error)) {
	fake.deleteOpsMetadataMutex.Lock()
	defer fake.deleteOpsMetadataMutex.Unlock()
	fake.DeleteOpsMetadataStub = stub
}

func (fake *FakeSSMClient) DeleteOpsMetadataArgsForCall(i int) *ssm.DeleteOpsMetadataInput {
	fake.deleteOpsMetadataMutex.RLock()
	defer fake.deleteOpsMetadataMutex.RUnlock()
	argsForCall := fake.deleteOpsMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteOpsMetadataReturns(result1 *ssm.DeleteOpsMetadataOutput, result2 error) {
	fake.deleteOpsMetadataMutex.Lock()
	defer fake.deleteOpsMetadataMutex.Unlock()
	fake.DeleteOpsMetadataStub = nil
	fake.deleteOpsMetadataReturns = struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteOpsMetadataReturnsOnCall(i int, result1 *ssm.DeleteOpsMetadataOutput, result2 error) {
	fake.deleteOpsMetadataMutex.Lock()
	defer fake.deleteOpsMetadataMutex.Unlock()
	fake.DeleteOpsMetadataStub = nil
	if fake.deleteOpsMetadataReturnsOnCall == nil {
		fake.deleteOpsMetadataReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteOpsMetadataOutput
			result2 error
		})
	}
	fake.deleteOpsMetadataReturnsOnCall[i] = struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteOpsMetadataRequest(arg1 *ssm.DeleteOpsMetadataInput) (*request.Request, *ssm.DeleteOpsMetadataOutput) {
	fake.deleteOpsMetadataRequestMutex.Lock()
	ret, specificReturn := fake.deleteOpsMetadataRequestReturnsOnCall[len(fake.deleteOpsMetadataRequestArgsForCall)]
	fake.deleteOpsMetadataRequestArgsForCall = append(fake.deleteOpsMetadataRequestArgsForCall, struct {
		arg1 *ssm.DeleteOpsMetadataInput
	}{arg1})
	stub := fake.DeleteOpsMetadataRequestStub
	fakeReturns := fake.deleteOpsMetadataRequestReturns
	fake.recordInvocation("DeleteOpsMetadataRequest", []interface{}{arg1})
	fake.deleteOpsMetadataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteOpsMetadataRequestCallCount() int {
	fake.deleteOpsMetadataRequestMutex.RLock()
	defer fake.deleteOpsMetadataRequestMutex.RUnlock()
	return len(fake.deleteOpsMetadataRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteOpsMetadataRequestCalls(stub func(*ssm.DeleteOpsMetadataInput) (*request.Request, *ssm.DeleteOpsMetadataOutput)) {
	fake.deleteOpsMetadataRequestMutex.Lock()
	defer fake.deleteOpsMetadataRequestMutex.Unlock()
	fake.DeleteOpsMetadataRequestStub = stub
}

func (fake *FakeSSMClient) DeleteOpsMetadataRequestArgsForCall(i int) *ssm.DeleteOpsMetadataInput {
	fake.deleteOpsMetadataRequestMutex.RLock()
	defer fake.deleteOpsMetadataRequestMutex.RUnlock()
	argsForCall := fake.deleteOpsMetadataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteOpsMetadataRequestReturns(result1 *request.Request, result2 *ssm.DeleteOpsMetadataOutput) {
	fake.deleteOpsMetadataRequestMutex.Lock()
	defer fake.deleteOpsMetadataRequestMutex.Unlock()
	fake.DeleteOpsMetadataRequestStub = nil
	fake.deleteOpsMetadataRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteOpsMetadataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteOpsMetadataOutput) {
	fake.deleteOpsMetadataRequestMutex.Lock()
	defer fake.deleteOpsMetadataRequestMutex.Unlock()
	fake.DeleteOpsMetadataRequestStub = nil
	if fake.deleteOpsMetadataRequestReturnsOnCall == nil {
		fake.deleteOpsMetadataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteOpsMetadataOutput
		})
	}
	fake.deleteOpsMetadataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteOpsMetadataWithContext(arg1 context.Context, arg2 *ssm.DeleteOpsMetadataInput, arg3 ...request.Option) (*ssm.DeleteOpsMetadataOutput, error) {
	fake.deleteOpsMetadataWithContextMutex.Lock()
	ret, specificReturn := fake.deleteOpsMetadataWithContextReturnsOnCall[len(fake.deleteOpsMetadataWithContextArgsForCall)]
	fake.deleteOpsMetadataWithContextArgsForCall = append(fake.deleteOpsMetadataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteOpsMetadataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteOpsMetadataWithContextStub
	fakeReturns := fake.deleteOpsMetadataWithContextReturns
	fake.recordInvocation("DeleteOpsMetadataWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteOpsMetadataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteOpsMetadataWithContextCallCount() int {
	fake.deleteOpsMetadataWithContextMutex.RLock()
	defer fake.deleteOpsMetadataWithContextMutex.RUnlock()
	return len(fake.deleteOpsMetadataWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteOpsMetadataWithContextCalls(stub func(context.Context, *ssm.DeleteOpsMetadataInput, ...request.Option) (*ssm.DeleteOpsMetadataOutput, error)) {
	fake.deleteOpsMetadataWithContextMutex.Lock()
	defer fake.deleteOpsMetadataWithContextMutex.Unlock()
	fake.DeleteOpsMetadataWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteOpsMetadataWithContextArgsForCall(i int) (context.Context, *ssm.DeleteOpsMetadataInput, []request.Option) {
	fake.deleteOpsMetadataWithContextMutex.RLock()
	defer fake.deleteOpsMetadataWithContextMutex.RUnlock()
	argsForCall := fake.deleteOpsMetadataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteOpsMetadataWithContextReturns(result1 *ssm.DeleteOpsMetadataOutput, result2 error) {
	fake.deleteOpsMetadataWithContextMutex.Lock()
	defer fake.deleteOpsMetadataWithContextMutex.Unlock()
	fake.DeleteOpsMetadataWithContextStub = nil
	fake.deleteOpsMetadataWithContextReturns = struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteOpsMetadataWithContextReturnsOnCall(i int, result1 *ssm.DeleteOpsMetadataOutput, result2 error) {
	fake.deleteOpsMetadataWithContextMutex.Lock()
	defer fake.deleteOpsMetadataWithContextMutex.Unlock()
	fake.DeleteOpsMetadataWithContextStub = nil
	if fake.deleteOpsMetadataWithContextReturnsOnCall == nil {
		fake.deleteOpsMetadataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteOpsMetadataOutput
			result2 error
		})
	}
	fake.deleteOpsMetadataWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameter(arg1 *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error) {
	fake.deleteParameterMutex.Lock()
	ret, specificReturn := fake.deleteParameterReturnsOnCall[len(fake.deleteParameterArgsForCall)]
	fake.deleteParameterArgsForCall = append(fake.deleteParameterArgsForCall, struct {
		arg1 *ssm.DeleteParameterInput
	}{arg1})
	stub := fake.DeleteParameterStub
	fakeReturns := fake.deleteParameterReturns
	fake.recordInvocation("DeleteParameter", []interface{}{arg1})
	fake.deleteParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteParameterCallCount() int {
	fake.deleteParameterMutex.RLock()
	defer fake.deleteParameterMutex.RUnlock()
	return len(fake.deleteParameterArgsForCall)
}

func (fake *FakeSSMClient) DeleteParameterCalls(stub func(*ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error)) {
	fake.deleteParameterMutex.Lock()
	defer fake.deleteParameterMutex.Unlock()
	fake.DeleteParameterStub = stub
}

func (fake *FakeSSMClient) DeleteParameterArgsForCall(i int) *ssm.DeleteParameterInput {
	fake.deleteParameterMutex.RLock()
	defer fake.deleteParameterMutex.RUnlock()
	argsForCall := fake.deleteParameterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteParameterReturns(result1 *ssm.DeleteParameterOutput, result2 error) {
	fake.deleteParameterMutex.Lock()
	defer fake.deleteParameterMutex.Unlock()
	fake.DeleteParameterStub = nil
	fake.deleteParameterReturns = struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameterReturnsOnCall(i int, result1 *ssm.DeleteParameterOutput, result2 error) {
	fake.deleteParameterMutex.Lock()
	defer fake.deleteParameterMutex.Unlock()
	fake.DeleteParameterStub = nil
	if fake.deleteParameterReturnsOnCall == nil {
		fake.deleteParameterReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteParameterOutput
			result2 error
		})
	}
	fake.deleteParameterReturnsOnCall[i] = struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameterRequest(arg1 *ssm.DeleteParameterInput) (*request.Request, *ssm.DeleteParameterOutput) {
	fake.deleteParameterRequestMutex.Lock()
	ret, specificReturn := fake.deleteParameterRequestReturnsOnCall[len(fake.deleteParameterRequestArgsForCall)]
	fake.deleteParameterRequestArgsForCall = append(fake.deleteParameterRequestArgsForCall, struct {
		arg1 *ssm.DeleteParameterInput
	}{arg1})
	stub := fake.DeleteParameterRequestStub
	fakeReturns := fake.deleteParameterRequestReturns
	fake.recordInvocation("DeleteParameterRequest", []interface{}{arg1})
	fake.deleteParameterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteParameterRequestCallCount() int {
	fake.deleteParameterRequestMutex.RLock()
	defer fake.deleteParameterRequestMutex.RUnlock()
	return len(fake.deleteParameterRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteParameterRequestCalls(stub func(*ssm.DeleteParameterInput) (*request.Request, *ssm.DeleteParameterOutput)) {
	fake.deleteParameterRequestMutex.Lock()
	defer fake.deleteParameterRequestMutex.Unlock()
	fake.DeleteParameterRequestStub = stub
}

func (fake *FakeSSMClient) DeleteParameterRequestArgsForCall(i int) *ssm.DeleteParameterInput {
	fake.deleteParameterRequestMutex.RLock()
	defer fake.deleteParameterRequestMutex.RUnlock()
	argsForCall := fake.deleteParameterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteParameterRequestReturns(result1 *request.Request, result2 *ssm.DeleteParameterOutput) {
	fake.deleteParameterRequestMutex.Lock()
	defer fake.deleteParameterRequestMutex.Unlock()
	fake.DeleteParameterRequestStub = nil
	fake.deleteParameterRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteParameterOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameterRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteParameterOutput) {
	fake.deleteParameterRequestMutex.Lock()
	defer fake.deleteParameterRequestMutex.Unlock()
	fake.DeleteParameterRequestStub = nil
	if fake.deleteParameterRequestReturnsOnCall == nil {
		fake.deleteParameterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteParameterOutput
		})
	}
	fake.deleteParameterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteParameterOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameterWithContext(arg1 context.Context, arg2 *ssm.DeleteParameterInput, arg3 ...request.Option) (*ssm.DeleteParameterOutput, error) {
	fake.deleteParameterWithContextMutex.Lock()
	ret, specificReturn := fake.deleteParameterWithContextReturnsOnCall[len(fake.deleteParameterWithContextArgsForCall)]
	fake.deleteParameterWithContextArgsForCall = append(fake.deleteParameterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteParameterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteParameterWithContextStub
	fakeReturns := fake.deleteParameterWithContextReturns
	fake.recordInvocation("DeleteParameterWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteParameterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteParameterWithContextCallCount() int {
	fake.deleteParameterWithContextMutex.RLock()
	defer fake.deleteParameterWithContextMutex.RUnlock()
	return len(fake.deleteParameterWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteParameterWithContextCalls(stub func(context.Context, *ssm.DeleteParameterInput, ...request.Option) (*ssm.DeleteParameterOutput, error)) {
	fake.deleteParameterWithContextMutex.Lock()
	defer fake.deleteParameterWithContextMutex.Unlock()
	fake.DeleteParameterWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteParameterWithContextArgsForCall(i int) (context.Context, *ssm.DeleteParameterInput, []request.Option) {
	fake.deleteParameterWithContextMutex.RLock()
	defer fake.deleteParameterWithContextMutex.RUnlock()
	argsForCall := fake.deleteParameterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteParameterWithContextReturns(result1 *ssm.DeleteParameterOutput, result2 error) {
	fake.deleteParameterWithContextMutex.Lock()
	defer fake.deleteParameterWithContextMutex.Unlock()
	fake.DeleteParameterWithContextStub = nil
	fake.deleteParameterWithContextReturns = struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameterWithContextReturnsOnCall(i int, result1 *ssm.DeleteParameterOutput, result2 error) {
	fake.deleteParameterWithContextMutex.Lock()
	defer fake.deleteParameterWithContextMutex.Unlock()
	fake.DeleteParameterWithContextStub = nil
	if fake.deleteParameterWithContextReturnsOnCall == nil {
		fake.deleteParameterWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteParameterOutput
			result2 error
		})
	}
	fake.deleteParameterWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParameters(arg1 *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error) {
	fake.deleteParametersMutex.Lock()
	ret, specificReturn := fake.deleteParametersReturnsOnCall[len(fake.deleteParametersArgsForCall)]
	fake.deleteParametersArgsForCall = append(fake.deleteParametersArgsForCall, struct {
		arg1 *ssm.DeleteParametersInput
	}{arg1})
	stub := fake.DeleteParametersStub
	fakeReturns := fake.deleteParametersReturns
	fake.recordInvocation("DeleteParameters", []interface{}{arg1})
	fake.deleteParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteParametersCallCount() int {
	fake.deleteParametersMutex.RLock()
	defer fake.deleteParametersMutex.RUnlock()
	return len(fake.deleteParametersArgsForCall)
}

func (fake *FakeSSMClient) DeleteParametersCalls(stub func(*ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error)) {
	fake.deleteParametersMutex.Lock()
	defer fake.deleteParametersMutex.Unlock()
	fake.DeleteParametersStub = stub
}

func (fake *FakeSSMClient) DeleteParametersArgsForCall(i int) *ssm.DeleteParametersInput {
	fake.deleteParametersMutex.RLock()
	defer fake.deleteParametersMutex.RUnlock()
	argsForCall := fake.deleteParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteParametersReturns(result1 *ssm.DeleteParametersOutput, result2 error) {
	fake.deleteParametersMutex.Lock()
	defer fake.deleteParametersMutex.Unlock()
	fake.DeleteParametersStub = nil
	fake.deleteParametersReturns = struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParametersReturnsOnCall(i int, result1 *ssm.DeleteParametersOutput, result2 error) {
	fake.deleteParametersMutex.Lock()
	defer fake.deleteParametersMutex.Unlock()
	fake.DeleteParametersStub = nil
	if fake.deleteParametersReturnsOnCall == nil {
		fake.deleteParametersReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteParametersOutput
			result2 error
		})
	}
	fake.deleteParametersReturnsOnCall[i] = struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParametersRequest(arg1 *ssm.DeleteParametersInput) (*request.Request, *ssm.DeleteParametersOutput) {
	fake.deleteParametersRequestMutex.Lock()
	ret, specificReturn := fake.deleteParametersRequestReturnsOnCall[len(fake.deleteParametersRequestArgsForCall)]
	fake.deleteParametersRequestArgsForCall = append(fake.deleteParametersRequestArgsForCall, struct {
		arg1 *ssm.DeleteParametersInput
	}{arg1})
	stub := fake.DeleteParametersRequestStub
	fakeReturns := fake.deleteParametersRequestReturns
	fake.recordInvocation("DeleteParametersRequest", []interface{}{arg1})
	fake.deleteParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteParametersRequestCallCount() int {
	fake.deleteParametersRequestMutex.RLock()
	defer fake.deleteParametersRequestMutex.RUnlock()
	return len(fake.deleteParametersRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteParametersRequestCalls(stub func(*ssm.DeleteParametersInput) (*request.Request, *ssm.DeleteParametersOutput)) {
	fake.deleteParametersRequestMutex.Lock()
	defer fake.deleteParametersRequestMutex.Unlock()
	fake.DeleteParametersRequestStub = stub
}

func (fake *FakeSSMClient) DeleteParametersRequestArgsForCall(i int) *ssm.DeleteParametersInput {
	fake.deleteParametersRequestMutex.RLock()
	defer fake.deleteParametersRequestMutex.RUnlock()
	argsForCall := fake.deleteParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteParametersRequestReturns(result1 *request.Request, result2 *ssm.DeleteParametersOutput) {
	fake.deleteParametersRequestMutex.Lock()
	defer fake.deleteParametersRequestMutex.Unlock()
	fake.DeleteParametersRequestStub = nil
	fake.deleteParametersRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteParametersOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteParametersOutput) {
	fake.deleteParametersRequestMutex.Lock()
	defer fake.deleteParametersRequestMutex.Unlock()
	fake.DeleteParametersRequestStub = nil
	if fake.deleteParametersRequestReturnsOnCall == nil {
		fake.deleteParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteParametersOutput
		})
	}
	fake.deleteParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteParametersOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParametersWithContext(arg1 context.Context, arg2 *ssm.DeleteParametersInput, arg3 ...request.Option) (*ssm.DeleteParametersOutput, error) {
	fake.deleteParametersWithContextMutex.Lock()
	ret, specificReturn := fake.deleteParametersWithContextReturnsOnCall[len(fake.deleteParametersWithContextArgsForCall)]
	fake.deleteParametersWithContextArgsForCall = append(fake.deleteParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteParametersWithContextStub
	fakeReturns := fake.deleteParametersWithContextReturns
	fake.recordInvocation("DeleteParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteParametersWithContextCallCount() int {
	fake.deleteParametersWithContextMutex.RLock()
	defer fake.deleteParametersWithContextMutex.RUnlock()
	return len(fake.deleteParametersWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteParametersWithContextCalls(stub func(context.Context, *ssm.DeleteParametersInput, ...request.Option) (*ssm.DeleteParametersOutput, error)) {
	fake.deleteParametersWithContextMutex.Lock()
	defer fake.deleteParametersWithContextMutex.Unlock()
	fake.DeleteParametersWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteParametersWithContextArgsForCall(i int) (context.Context, *ssm.DeleteParametersInput, []request.Option) {
	fake.deleteParametersWithContextMutex.RLock()
	defer fake.deleteParametersWithContextMutex.RUnlock()
	argsForCall := fake.deleteParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteParametersWithContextReturns(result1 *ssm.DeleteParametersOutput, result2 error) {
	fake.deleteParametersWithContextMutex.Lock()
	defer fake.deleteParametersWithContextMutex.Unlock()
	fake.DeleteParametersWithContextStub = nil
	fake.deleteParametersWithContextReturns = struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteParametersWithContextReturnsOnCall(i int, result1 *ssm.DeleteParametersOutput, result2 error) {
	fake.deleteParametersWithContextMutex.Lock()
	defer fake.deleteParametersWithContextMutex.Unlock()
	fake.DeleteParametersWithContextStub = nil
	if fake.deleteParametersWithContextReturnsOnCall == nil {
		fake.deleteParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteParametersOutput
			result2 error
		})
	}
	fake.deleteParametersWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeletePatchBaseline(arg1 *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error) {
	fake.deletePatchBaselineMutex.Lock()
	ret, specificReturn := fake.deletePatchBaselineReturnsOnCall[len(fake.deletePatchBaselineArgsForCall)]
	fake.deletePatchBaselineArgsForCall = append(fake.deletePatchBaselineArgsForCall, struct {
		arg1 *ssm.DeletePatchBaselineInput
	}{arg1})
	stub := fake.DeletePatchBaselineStub
	fakeReturns := fake.deletePatchBaselineReturns
	fake.recordInvocation("DeletePatchBaseline", []interface{}{arg1})
	fake.deletePatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeletePatchBaselineCallCount() int {
	fake.deletePatchBaselineMutex.RLock()
	defer fake.deletePatchBaselineMutex.RUnlock()
	return len(fake.deletePatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) DeletePatchBaselineCalls(stub func(*ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error)) {
	fake.deletePatchBaselineMutex.Lock()
	defer fake.deletePatchBaselineMutex.Unlock()
	fake.DeletePatchBaselineStub = stub
}

func (fake *FakeSSMClient) DeletePatchBaselineArgsForCall(i int) *ssm.DeletePatchBaselineInput {
	fake.deletePatchBaselineMutex.RLock()
	defer fake.deletePatchBaselineMutex.RUnlock()
	argsForCall := fake.deletePatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeletePatchBaselineReturns(result1 *ssm.DeletePatchBaselineOutput, result2 error) {
	fake.deletePatchBaselineMutex.Lock()
	defer fake.deletePatchBaselineMutex.Unlock()
	fake.DeletePatchBaselineStub = nil
	fake.deletePatchBaselineReturns = struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeletePatchBaselineReturnsOnCall(i int, result1 *ssm.DeletePatchBaselineOutput, result2 error) {
	fake.deletePatchBaselineMutex.Lock()
	defer fake.deletePatchBaselineMutex.Unlock()
	fake.DeletePatchBaselineStub = nil
	if fake.deletePatchBaselineReturnsOnCall == nil {
		fake.deletePatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeletePatchBaselineOutput
			result2 error
		})
	}
	fake.deletePatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeletePatchBaselineRequest(arg1 *ssm.DeletePatchBaselineInput) (*request.Request, *ssm.DeletePatchBaselineOutput) {
	fake.deletePatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.deletePatchBaselineRequestReturnsOnCall[len(fake.deletePatchBaselineRequestArgsForCall)]
	fake.deletePatchBaselineRequestArgsForCall = append(fake.deletePatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.DeletePatchBaselineInput
	}{arg1})
	stub := fake.DeletePatchBaselineRequestStub
	fakeReturns := fake.deletePatchBaselineRequestReturns
	fake.recordInvocation("DeletePatchBaselineRequest", []interface{}{arg1})
	fake.deletePatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeletePatchBaselineRequestCallCount() int {
	fake.deletePatchBaselineRequestMutex.RLock()
	defer fake.deletePatchBaselineRequestMutex.RUnlock()
	return len(fake.deletePatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) DeletePatchBaselineRequestCalls(stub func(*ssm.DeletePatchBaselineInput) (*request.Request, *ssm.DeletePatchBaselineOutput)) {
	fake.deletePatchBaselineRequestMutex.Lock()
	defer fake.deletePatchBaselineRequestMutex.Unlock()
	fake.DeletePatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) DeletePatchBaselineRequestArgsForCall(i int) *ssm.DeletePatchBaselineInput {
	fake.deletePatchBaselineRequestMutex.RLock()
	defer fake.deletePatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.deletePatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeletePatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.DeletePatchBaselineOutput) {
	fake.deletePatchBaselineRequestMutex.Lock()
	defer fake.deletePatchBaselineRequestMutex.Unlock()
	fake.DeletePatchBaselineRequestStub = nil
	fake.deletePatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeletePatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeletePatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeletePatchBaselineOutput) {
	fake.deletePatchBaselineRequestMutex.Lock()
	defer fake.deletePatchBaselineRequestMutex.Unlock()
	fake.DeletePatchBaselineRequestStub = nil
	if fake.deletePatchBaselineRequestReturnsOnCall == nil {
		fake.deletePatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeletePatchBaselineOutput
		})
	}
	fake.deletePatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeletePatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeletePatchBaselineWithContext(arg1 context.Context, arg2 *ssm.DeletePatchBaselineInput, arg3 ...request.Option) (*ssm.DeletePatchBaselineOutput, error) {
	fake.deletePatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.deletePatchBaselineWithContextReturnsOnCall[len(fake.deletePatchBaselineWithContextArgsForCall)]
	fake.deletePatchBaselineWithContextArgsForCall = append(fake.deletePatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeletePatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeletePatchBaselineWithContextStub
	fakeReturns := fake.deletePatchBaselineWithContextReturns
	fake.recordInvocation("DeletePatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeletePatchBaselineWithContextCallCount() int {
	fake.deletePatchBaselineWithContextMutex.RLock()
	defer fake.deletePatchBaselineWithContextMutex.RUnlock()
	return len(fake.deletePatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeletePatchBaselineWithContextCalls(stub func(context.Context, *ssm.DeletePatchBaselineInput, ...request.Option) (*ssm.DeletePatchBaselineOutput, error)) {
	fake.deletePatchBaselineWithContextMutex.Lock()
	defer fake.deletePatchBaselineWithContextMutex.Unlock()
	fake.DeletePatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) DeletePatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.DeletePatchBaselineInput, []request.Option) {
	fake.deletePatchBaselineWithContextMutex.RLock()
	defer fake.deletePatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.deletePatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeletePatchBaselineWithContextReturns(result1 *ssm.DeletePatchBaselineOutput, result2 error) {
	fake.deletePatchBaselineWithContextMutex.Lock()
	defer fake.deletePatchBaselineWithContextMutex.Unlock()
	fake.DeletePatchBaselineWithContextStub = nil
	fake.deletePatchBaselineWithContextReturns = struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeletePatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.DeletePatchBaselineOutput, result2 error) {
	fake.deletePatchBaselineWithContextMutex.Lock()
	defer fake.deletePatchBaselineWithContextMutex.Unlock()
	fake.DeletePatchBaselineWithContextStub = nil
	if fake.deletePatchBaselineWithContextReturnsOnCall == nil {
		fake.deletePatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeletePatchBaselineOutput
			result2 error
		})
	}
	fake.deletePatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeletePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteResourceDataSync(arg1 *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error) {
	fake.deleteResourceDataSyncMutex.Lock()
	ret, specificReturn := fake.deleteResourceDataSyncReturnsOnCall[len(fake.deleteResourceDataSyncArgsForCall)]
	fake.deleteResourceDataSyncArgsForCall = append(fake.deleteResourceDataSyncArgsForCall, struct {
		arg1 *ssm.DeleteResourceDataSyncInput
	}{arg1})
	stub := fake.DeleteResourceDataSyncStub
	fakeReturns := fake.deleteResourceDataSyncReturns
	fake.recordInvocation("DeleteResourceDataSync", []interface{}{arg1})
	fake.deleteResourceDataSyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteResourceDataSyncCallCount() int {
	fake.deleteResourceDataSyncMutex.RLock()
	defer fake.deleteResourceDataSyncMutex.RUnlock()
	return len(fake.deleteResourceDataSyncArgsForCall)
}

func (fake *FakeSSMClient) DeleteResourceDataSyncCalls(stub func(*ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error)) {
	fake.deleteResourceDataSyncMutex.Lock()
	defer fake.deleteResourceDataSyncMutex.Unlock()
	fake.DeleteResourceDataSyncStub = stub
}

func (fake *FakeSSMClient) DeleteResourceDataSyncArgsForCall(i int) *ssm.DeleteResourceDataSyncInput {
	fake.deleteResourceDataSyncMutex.RLock()
	defer fake.deleteResourceDataSyncMutex.RUnlock()
	argsForCall := fake.deleteResourceDataSyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteResourceDataSyncReturns(result1 *ssm.DeleteResourceDataSyncOutput, result2 error) {
	fake.deleteResourceDataSyncMutex.Lock()
	defer fake.deleteResourceDataSyncMutex.Unlock()
	fake.DeleteResourceDataSyncStub = nil
	fake.deleteResourceDataSyncReturns = struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteResourceDataSyncReturnsOnCall(i int, result1 *ssm.DeleteResourceDataSyncOutput, result2 error) {
	fake.deleteResourceDataSyncMutex.Lock()
	defer fake.deleteResourceDataSyncMutex.Unlock()
	fake.DeleteResourceDataSyncStub = nil
	if fake.deleteResourceDataSyncReturnsOnCall == nil {
		fake.deleteResourceDataSyncReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteResourceDataSyncOutput
			result2 error
		})
	}
	fake.deleteResourceDataSyncReturnsOnCall[i] = struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteResourceDataSyncRequest(arg1 *ssm.DeleteResourceDataSyncInput) (*request.Request, *ssm.DeleteResourceDataSyncOutput) {
	fake.deleteResourceDataSyncRequestMutex.Lock()
	ret, specificReturn := fake.deleteResourceDataSyncRequestReturnsOnCall[len(fake.deleteResourceDataSyncRequestArgsForCall)]
	fake.deleteResourceDataSyncRequestArgsForCall = append(fake.deleteResourceDataSyncRequestArgsForCall, struct {
		arg1 *ssm.DeleteResourceDataSyncInput
	}{arg1})
	stub := fake.DeleteResourceDataSyncRequestStub
	fakeReturns := fake.deleteResourceDataSyncRequestReturns
	fake.recordInvocation("DeleteResourceDataSyncRequest", []interface{}{arg1})
	fake.deleteResourceDataSyncRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteResourceDataSyncRequestCallCount() int {
	fake.deleteResourceDataSyncRequestMutex.RLock()
	defer fake.deleteResourceDataSyncRequestMutex.RUnlock()
	return len(fake.deleteResourceDataSyncRequestArgsForCall)
}

func (fake *FakeSSMClient) DeleteResourceDataSyncRequestCalls(stub func(*ssm.DeleteResourceDataSyncInput) (*request.Request, *ssm.DeleteResourceDataSyncOutput)) {
	fake.deleteResourceDataSyncRequestMutex.Lock()
	defer fake.deleteResourceDataSyncRequestMutex.Unlock()
	fake.DeleteResourceDataSyncRequestStub = stub
}

func (fake *FakeSSMClient) DeleteResourceDataSyncRequestArgsForCall(i int) *ssm.DeleteResourceDataSyncInput {
	fake.deleteResourceDataSyncRequestMutex.RLock()
	defer fake.deleteResourceDataSyncRequestMutex.RUnlock()
	argsForCall := fake.deleteResourceDataSyncRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeleteResourceDataSyncRequestReturns(result1 *request.Request, result2 *ssm.DeleteResourceDataSyncOutput) {
	fake.deleteResourceDataSyncRequestMutex.Lock()
	defer fake.deleteResourceDataSyncRequestMutex.Unlock()
	fake.DeleteResourceDataSyncRequestStub = nil
	fake.deleteResourceDataSyncRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeleteResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteResourceDataSyncRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeleteResourceDataSyncOutput) {
	fake.deleteResourceDataSyncRequestMutex.Lock()
	defer fake.deleteResourceDataSyncRequestMutex.Unlock()
	fake.DeleteResourceDataSyncRequestStub = nil
	if fake.deleteResourceDataSyncRequestReturnsOnCall == nil {
		fake.deleteResourceDataSyncRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeleteResourceDataSyncOutput
		})
	}
	fake.deleteResourceDataSyncRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeleteResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteResourceDataSyncWithContext(arg1 context.Context, arg2 *ssm.DeleteResourceDataSyncInput, arg3 ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error) {
	fake.deleteResourceDataSyncWithContextMutex.Lock()
	ret, specificReturn := fake.deleteResourceDataSyncWithContextReturnsOnCall[len(fake.deleteResourceDataSyncWithContextArgsForCall)]
	fake.deleteResourceDataSyncWithContextArgsForCall = append(fake.deleteResourceDataSyncWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeleteResourceDataSyncInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteResourceDataSyncWithContextStub
	fakeReturns := fake.deleteResourceDataSyncWithContextReturns
	fake.recordInvocation("DeleteResourceDataSyncWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteResourceDataSyncWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeleteResourceDataSyncWithContextCallCount() int {
	fake.deleteResourceDataSyncWithContextMutex.RLock()
	defer fake.deleteResourceDataSyncWithContextMutex.RUnlock()
	return len(fake.deleteResourceDataSyncWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeleteResourceDataSyncWithContextCalls(stub func(context.Context, *ssm.DeleteResourceDataSyncInput, ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error)) {
	fake.deleteResourceDataSyncWithContextMutex.Lock()
	defer fake.deleteResourceDataSyncWithContextMutex.Unlock()
	fake.DeleteResourceDataSyncWithContextStub = stub
}

func (fake *FakeSSMClient) DeleteResourceDataSyncWithContextArgsForCall(i int) (context.Context, *ssm.DeleteResourceDataSyncInput, []request.Option) {
	fake.deleteResourceDataSyncWithContextMutex.RLock()
	defer fake.deleteResourceDataSyncWithContextMutex.RUnlock()
	argsForCall := fake.deleteResourceDataSyncWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeleteResourceDataSyncWithContextReturns(result1 *ssm.DeleteResourceDataSyncOutput, result2 error) {
	fake.deleteResourceDataSyncWithContextMutex.Lock()
	defer fake.deleteResourceDataSyncWithContextMutex.Unlock()
	fake.DeleteResourceDataSyncWithContextStub = nil
	fake.deleteResourceDataSyncWithContextReturns = struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeleteResourceDataSyncWithContextReturnsOnCall(i int, result1 *ssm.DeleteResourceDataSyncOutput, result2 error) {
	fake.deleteResourceDataSyncWithContextMutex.Lock()
	defer fake.deleteResourceDataSyncWithContextMutex.Unlock()
	fake.DeleteResourceDataSyncWithContextStub = nil
	if fake.deleteResourceDataSyncWithContextReturnsOnCall == nil {
		fake.deleteResourceDataSyncWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeleteResourceDataSyncOutput
			result2 error
		})
	}
	fake.deleteResourceDataSyncWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeleteResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterManagedInstance(arg1 *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error) {
	fake.deregisterManagedInstanceMutex.Lock()
	ret, specificReturn := fake.deregisterManagedInstanceReturnsOnCall[len(fake.deregisterManagedInstanceArgsForCall)]
	fake.deregisterManagedInstanceArgsForCall = append(fake.deregisterManagedInstanceArgsForCall, struct {
		arg1 *ssm.DeregisterManagedInstanceInput
	}{arg1})
	stub := fake.DeregisterManagedInstanceStub
	fakeReturns := fake.deregisterManagedInstanceReturns
	fake.recordInvocation("DeregisterManagedInstance", []interface{}{arg1})
	fake.deregisterManagedInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterManagedInstanceCallCount() int {
	fake.deregisterManagedInstanceMutex.RLock()
	defer fake.deregisterManagedInstanceMutex.RUnlock()
	return len(fake.deregisterManagedInstanceArgsForCall)
}

func (fake *FakeSSMClient) DeregisterManagedInstanceCalls(stub func(*ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error)) {
	fake.deregisterManagedInstanceMutex.Lock()
	defer fake.deregisterManagedInstanceMutex.Unlock()
	fake.DeregisterManagedInstanceStub = stub
}

func (fake *FakeSSMClient) DeregisterManagedInstanceArgsForCall(i int) *ssm.DeregisterManagedInstanceInput {
	fake.deregisterManagedInstanceMutex.RLock()
	defer fake.deregisterManagedInstanceMutex.RUnlock()
	argsForCall := fake.deregisterManagedInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterManagedInstanceReturns(result1 *ssm.DeregisterManagedInstanceOutput, result2 error) {
	fake.deregisterManagedInstanceMutex.Lock()
	defer fake.deregisterManagedInstanceMutex.Unlock()
	fake.DeregisterManagedInstanceStub = nil
	fake.deregisterManagedInstanceReturns = struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterManagedInstanceReturnsOnCall(i int, result1 *ssm.DeregisterManagedInstanceOutput, result2 error) {
	fake.deregisterManagedInstanceMutex.Lock()
	defer fake.deregisterManagedInstanceMutex.Unlock()
	fake.DeregisterManagedInstanceStub = nil
	if fake.deregisterManagedInstanceReturnsOnCall == nil {
		fake.deregisterManagedInstanceReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterManagedInstanceOutput
			result2 error
		})
	}
	fake.deregisterManagedInstanceReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterManagedInstanceRequest(arg1 *ssm.DeregisterManagedInstanceInput) (*request.Request, *ssm.DeregisterManagedInstanceOutput) {
	fake.deregisterManagedInstanceRequestMutex.Lock()
	ret, specificReturn := fake.deregisterManagedInstanceRequestReturnsOnCall[len(fake.deregisterManagedInstanceRequestArgsForCall)]
	fake.deregisterManagedInstanceRequestArgsForCall = append(fake.deregisterManagedInstanceRequestArgsForCall, struct {
		arg1 *ssm.DeregisterManagedInstanceInput
	}{arg1})
	stub := fake.DeregisterManagedInstanceRequestStub
	fakeReturns := fake.deregisterManagedInstanceRequestReturns
	fake.recordInvocation("DeregisterManagedInstanceRequest", []interface{}{arg1})
	fake.deregisterManagedInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterManagedInstanceRequestCallCount() int {
	fake.deregisterManagedInstanceRequestMutex.RLock()
	defer fake.deregisterManagedInstanceRequestMutex.RUnlock()
	return len(fake.deregisterManagedInstanceRequestArgsForCall)
}

func (fake *FakeSSMClient) DeregisterManagedInstanceRequestCalls(stub func(*ssm.DeregisterManagedInstanceInput) (*request.Request, *ssm.DeregisterManagedInstanceOutput)) {
	fake.deregisterManagedInstanceRequestMutex.Lock()
	defer fake.deregisterManagedInstanceRequestMutex.Unlock()
	fake.DeregisterManagedInstanceRequestStub = stub
}

func (fake *FakeSSMClient) DeregisterManagedInstanceRequestArgsForCall(i int) *ssm.DeregisterManagedInstanceInput {
	fake.deregisterManagedInstanceRequestMutex.RLock()
	defer fake.deregisterManagedInstanceRequestMutex.RUnlock()
	argsForCall := fake.deregisterManagedInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterManagedInstanceRequestReturns(result1 *request.Request, result2 *ssm.DeregisterManagedInstanceOutput) {
	fake.deregisterManagedInstanceRequestMutex.Lock()
	defer fake.deregisterManagedInstanceRequestMutex.Unlock()
	fake.DeregisterManagedInstanceRequestStub = nil
	fake.deregisterManagedInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeregisterManagedInstanceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterManagedInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeregisterManagedInstanceOutput) {
	fake.deregisterManagedInstanceRequestMutex.Lock()
	defer fake.deregisterManagedInstanceRequestMutex.Unlock()
	fake.DeregisterManagedInstanceRequestStub = nil
	if fake.deregisterManagedInstanceRequestReturnsOnCall == nil {
		fake.deregisterManagedInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeregisterManagedInstanceOutput
		})
	}
	fake.deregisterManagedInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeregisterManagedInstanceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterManagedInstanceWithContext(arg1 context.Context, arg2 *ssm.DeregisterManagedInstanceInput, arg3 ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error) {
	fake.deregisterManagedInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterManagedInstanceWithContextReturnsOnCall[len(fake.deregisterManagedInstanceWithContextArgsForCall)]
	fake.deregisterManagedInstanceWithContextArgsForCall = append(fake.deregisterManagedInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeregisterManagedInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeregisterManagedInstanceWithContextStub
	fakeReturns := fake.deregisterManagedInstanceWithContextReturns
	fake.recordInvocation("DeregisterManagedInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterManagedInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterManagedInstanceWithContextCallCount() int {
	fake.deregisterManagedInstanceWithContextMutex.RLock()
	defer fake.deregisterManagedInstanceWithContextMutex.RUnlock()
	return len(fake.deregisterManagedInstanceWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeregisterManagedInstanceWithContextCalls(stub func(context.Context, *ssm.DeregisterManagedInstanceInput, ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error)) {
	fake.deregisterManagedInstanceWithContextMutex.Lock()
	defer fake.deregisterManagedInstanceWithContextMutex.Unlock()
	fake.DeregisterManagedInstanceWithContextStub = stub
}

func (fake *FakeSSMClient) DeregisterManagedInstanceWithContextArgsForCall(i int) (context.Context, *ssm.DeregisterManagedInstanceInput, []request.Option) {
	fake.deregisterManagedInstanceWithContextMutex.RLock()
	defer fake.deregisterManagedInstanceWithContextMutex.RUnlock()
	argsForCall := fake.deregisterManagedInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeregisterManagedInstanceWithContextReturns(result1 *ssm.DeregisterManagedInstanceOutput, result2 error) {
	fake.deregisterManagedInstanceWithContextMutex.Lock()
	defer fake.deregisterManagedInstanceWithContextMutex.Unlock()
	fake.DeregisterManagedInstanceWithContextStub = nil
	fake.deregisterManagedInstanceWithContextReturns = struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterManagedInstanceWithContextReturnsOnCall(i int, result1 *ssm.DeregisterManagedInstanceOutput, result2 error) {
	fake.deregisterManagedInstanceWithContextMutex.Lock()
	defer fake.deregisterManagedInstanceWithContextMutex.Unlock()
	fake.DeregisterManagedInstanceWithContextStub = nil
	if fake.deregisterManagedInstanceWithContextReturnsOnCall == nil {
		fake.deregisterManagedInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterManagedInstanceOutput
			result2 error
		})
	}
	fake.deregisterManagedInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterManagedInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroup(arg1 *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	fake.deregisterPatchBaselineForPatchGroupMutex.Lock()
	ret, specificReturn := fake.deregisterPatchBaselineForPatchGroupReturnsOnCall[len(fake.deregisterPatchBaselineForPatchGroupArgsForCall)]
	fake.deregisterPatchBaselineForPatchGroupArgsForCall = append(fake.deregisterPatchBaselineForPatchGroupArgsForCall, struct {
		arg1 *ssm.DeregisterPatchBaselineForPatchGroupInput
	}{arg1})
	stub := fake.DeregisterPatchBaselineForPatchGroupStub
	fakeReturns := fake.deregisterPatchBaselineForPatchGroupReturns
	fake.recordInvocation("DeregisterPatchBaselineForPatchGroup", []interface{}{arg1})
	fake.deregisterPatchBaselineForPatchGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupCallCount() int {
	fake.deregisterPatchBaselineForPatchGroupMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupMutex.RUnlock()
	return len(fake.deregisterPatchBaselineForPatchGroupArgsForCall)
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupCalls(stub func(*ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)) {
	fake.deregisterPatchBaselineForPatchGroupMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupStub = stub
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupArgsForCall(i int) *ssm.DeregisterPatchBaselineForPatchGroupInput {
	fake.deregisterPatchBaselineForPatchGroupMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupMutex.RUnlock()
	argsForCall := fake.deregisterPatchBaselineForPatchGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupReturns(result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.deregisterPatchBaselineForPatchGroupMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupStub = nil
	fake.deregisterPatchBaselineForPatchGroupReturns = struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupReturnsOnCall(i int, result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.deregisterPatchBaselineForPatchGroupMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupStub = nil
	if fake.deregisterPatchBaselineForPatchGroupReturnsOnCall == nil {
		fake.deregisterPatchBaselineForPatchGroupReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
			result2 error
		})
	}
	fake.deregisterPatchBaselineForPatchGroupReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupRequest(arg1 *ssm.DeregisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.DeregisterPatchBaselineForPatchGroupOutput) {
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.Lock()
	ret, specificReturn := fake.deregisterPatchBaselineForPatchGroupRequestReturnsOnCall[len(fake.deregisterPatchBaselineForPatchGroupRequestArgsForCall)]
	fake.deregisterPatchBaselineForPatchGroupRequestArgsForCall = append(fake.deregisterPatchBaselineForPatchGroupRequestArgsForCall, struct {
		arg1 *ssm.DeregisterPatchBaselineForPatchGroupInput
	}{arg1})
	stub := fake.DeregisterPatchBaselineForPatchGroupRequestStub
	fakeReturns := fake.deregisterPatchBaselineForPatchGroupRequestReturns
	fake.recordInvocation("DeregisterPatchBaselineForPatchGroupRequest", []interface{}{arg1})
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupRequestCallCount() int {
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupRequestMutex.RUnlock()
	return len(fake.deregisterPatchBaselineForPatchGroupRequestArgsForCall)
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupRequestCalls(stub func(*ssm.DeregisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.DeregisterPatchBaselineForPatchGroupOutput)) {
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupRequestStub = stub
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupRequestArgsForCall(i int) *ssm.DeregisterPatchBaselineForPatchGroupInput {
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupRequestMutex.RUnlock()
	argsForCall := fake.deregisterPatchBaselineForPatchGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupRequestReturns(result1 *request.Request, result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput) {
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupRequestStub = nil
	fake.deregisterPatchBaselineForPatchGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput) {
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupRequestStub = nil
	if fake.deregisterPatchBaselineForPatchGroupRequestReturnsOnCall == nil {
		fake.deregisterPatchBaselineForPatchGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		})
	}
	fake.deregisterPatchBaselineForPatchGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeregisterPatchBaselineForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupWithContext(arg1 context.Context, arg2 *ssm.DeregisterPatchBaselineForPatchGroupInput, arg3 ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterPatchBaselineForPatchGroupWithContextReturnsOnCall[len(fake.deregisterPatchBaselineForPatchGroupWithContextArgsForCall)]
	fake.deregisterPatchBaselineForPatchGroupWithContextArgsForCall = append(fake.deregisterPatchBaselineForPatchGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeregisterPatchBaselineForPatchGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeregisterPatchBaselineForPatchGroupWithContextStub
	fakeReturns := fake.deregisterPatchBaselineForPatchGroupWithContextReturns
	fake.recordInvocation("DeregisterPatchBaselineForPatchGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupWithContextCallCount() int {
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	return len(fake.deregisterPatchBaselineForPatchGroupWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupWithContextCalls(stub func(context.Context, *ssm.DeregisterPatchBaselineForPatchGroupInput, ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error)) {
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupWithContextStub = stub
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupWithContextArgsForCall(i int) (context.Context, *ssm.DeregisterPatchBaselineForPatchGroupInput, []request.Option) {
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	argsForCall := fake.deregisterPatchBaselineForPatchGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupWithContextReturns(result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupWithContextStub = nil
	fake.deregisterPatchBaselineForPatchGroupWithContextReturns = struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterPatchBaselineForPatchGroupWithContextReturnsOnCall(i int, result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.deregisterPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.DeregisterPatchBaselineForPatchGroupWithContextStub = nil
	if fake.deregisterPatchBaselineForPatchGroupWithContextReturnsOnCall == nil {
		fake.deregisterPatchBaselineForPatchGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
			result2 error
		})
	}
	fake.deregisterPatchBaselineForPatchGroupWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindow(arg1 *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	fake.deregisterTargetFromMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.deregisterTargetFromMaintenanceWindowReturnsOnCall[len(fake.deregisterTargetFromMaintenanceWindowArgsForCall)]
	fake.deregisterTargetFromMaintenanceWindowArgsForCall = append(fake.deregisterTargetFromMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.DeregisterTargetFromMaintenanceWindowInput
	}{arg1})
	stub := fake.DeregisterTargetFromMaintenanceWindowStub
	fakeReturns := fake.deregisterTargetFromMaintenanceWindowReturns
	fake.recordInvocation("DeregisterTargetFromMaintenanceWindow", []interface{}{arg1})
	fake.deregisterTargetFromMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowCallCount() int {
	fake.deregisterTargetFromMaintenanceWindowMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowMutex.RUnlock()
	return len(fake.deregisterTargetFromMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowCalls(stub func(*ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)) {
	fake.deregisterTargetFromMaintenanceWindowMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowArgsForCall(i int) *ssm.DeregisterTargetFromMaintenanceWindowInput {
	fake.deregisterTargetFromMaintenanceWindowMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.deregisterTargetFromMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowReturns(result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTargetFromMaintenanceWindowMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowStub = nil
	fake.deregisterTargetFromMaintenanceWindowReturns = struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowReturnsOnCall(i int, result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTargetFromMaintenanceWindowMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowStub = nil
	if fake.deregisterTargetFromMaintenanceWindowReturnsOnCall == nil {
		fake.deregisterTargetFromMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
			result2 error
		})
	}
	fake.deregisterTargetFromMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowRequest(arg1 *ssm.DeregisterTargetFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTargetFromMaintenanceWindowOutput) {
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.deregisterTargetFromMaintenanceWindowRequestReturnsOnCall[len(fake.deregisterTargetFromMaintenanceWindowRequestArgsForCall)]
	fake.deregisterTargetFromMaintenanceWindowRequestArgsForCall = append(fake.deregisterTargetFromMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.DeregisterTargetFromMaintenanceWindowInput
	}{arg1})
	stub := fake.DeregisterTargetFromMaintenanceWindowRequestStub
	fakeReturns := fake.deregisterTargetFromMaintenanceWindowRequestReturns
	fake.recordInvocation("DeregisterTargetFromMaintenanceWindowRequest", []interface{}{arg1})
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowRequestCallCount() int {
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.deregisterTargetFromMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowRequestCalls(stub func(*ssm.DeregisterTargetFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTargetFromMaintenanceWindowOutput)) {
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowRequestMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowRequestArgsForCall(i int) *ssm.DeregisterTargetFromMaintenanceWindowInput {
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.deregisterTargetFromMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput) {
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowRequestMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowRequestStub = nil
	fake.deregisterTargetFromMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput) {
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowRequestMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowRequestStub = nil
	if fake.deregisterTargetFromMaintenanceWindowRequestReturnsOnCall == nil {
		fake.deregisterTargetFromMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		})
	}
	fake.deregisterTargetFromMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeregisterTargetFromMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.DeregisterTargetFromMaintenanceWindowInput, arg3 ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterTargetFromMaintenanceWindowWithContextReturnsOnCall[len(fake.deregisterTargetFromMaintenanceWindowWithContextArgsForCall)]
	fake.deregisterTargetFromMaintenanceWindowWithContextArgsForCall = append(fake.deregisterTargetFromMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeregisterTargetFromMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeregisterTargetFromMaintenanceWindowWithContextStub
	fakeReturns := fake.deregisterTargetFromMaintenanceWindowWithContextReturns
	fake.recordInvocation("DeregisterTargetFromMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowWithContextCallCount() int {
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.deregisterTargetFromMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.DeregisterTargetFromMaintenanceWindowInput, ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error)) {
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.DeregisterTargetFromMaintenanceWindowInput, []request.Option) {
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.deregisterTargetFromMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowWithContextReturns(result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowWithContextStub = nil
	fake.deregisterTargetFromMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTargetFromMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Lock()
	defer fake.deregisterTargetFromMaintenanceWindowWithContextMutex.Unlock()
	fake.DeregisterTargetFromMaintenanceWindowWithContextStub = nil
	if fake.deregisterTargetFromMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.deregisterTargetFromMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
			result2 error
		})
	}
	fake.deregisterTargetFromMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterTargetFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindow(arg1 *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	fake.deregisterTaskFromMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.deregisterTaskFromMaintenanceWindowReturnsOnCall[len(fake.deregisterTaskFromMaintenanceWindowArgsForCall)]
	fake.deregisterTaskFromMaintenanceWindowArgsForCall = append(fake.deregisterTaskFromMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.DeregisterTaskFromMaintenanceWindowInput
	}{arg1})
	stub := fake.DeregisterTaskFromMaintenanceWindowStub
	fakeReturns := fake.deregisterTaskFromMaintenanceWindowReturns
	fake.recordInvocation("DeregisterTaskFromMaintenanceWindow", []interface{}{arg1})
	fake.deregisterTaskFromMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowCallCount() int {
	fake.deregisterTaskFromMaintenanceWindowMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowMutex.RUnlock()
	return len(fake.deregisterTaskFromMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowCalls(stub func(*ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)) {
	fake.deregisterTaskFromMaintenanceWindowMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowArgsForCall(i int) *ssm.DeregisterTaskFromMaintenanceWindowInput {
	fake.deregisterTaskFromMaintenanceWindowMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.deregisterTaskFromMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowReturns(result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTaskFromMaintenanceWindowMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowStub = nil
	fake.deregisterTaskFromMaintenanceWindowReturns = struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowReturnsOnCall(i int, result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTaskFromMaintenanceWindowMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowStub = nil
	if fake.deregisterTaskFromMaintenanceWindowReturnsOnCall == nil {
		fake.deregisterTaskFromMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
			result2 error
		})
	}
	fake.deregisterTaskFromMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowRequest(arg1 *ssm.DeregisterTaskFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTaskFromMaintenanceWindowOutput) {
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.deregisterTaskFromMaintenanceWindowRequestReturnsOnCall[len(fake.deregisterTaskFromMaintenanceWindowRequestArgsForCall)]
	fake.deregisterTaskFromMaintenanceWindowRequestArgsForCall = append(fake.deregisterTaskFromMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.DeregisterTaskFromMaintenanceWindowInput
	}{arg1})
	stub := fake.DeregisterTaskFromMaintenanceWindowRequestStub
	fakeReturns := fake.deregisterTaskFromMaintenanceWindowRequestReturns
	fake.recordInvocation("DeregisterTaskFromMaintenanceWindowRequest", []interface{}{arg1})
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowRequestCallCount() int {
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.deregisterTaskFromMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowRequestCalls(stub func(*ssm.DeregisterTaskFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTaskFromMaintenanceWindowOutput)) {
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowRequestMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowRequestArgsForCall(i int) *ssm.DeregisterTaskFromMaintenanceWindowInput {
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.deregisterTaskFromMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput) {
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowRequestMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowRequestStub = nil
	fake.deregisterTaskFromMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput) {
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowRequestMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowRequestStub = nil
	if fake.deregisterTaskFromMaintenanceWindowRequestReturnsOnCall == nil {
		fake.deregisterTaskFromMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		})
	}
	fake.deregisterTaskFromMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DeregisterTaskFromMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.DeregisterTaskFromMaintenanceWindowInput, arg3 ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterTaskFromMaintenanceWindowWithContextReturnsOnCall[len(fake.deregisterTaskFromMaintenanceWindowWithContextArgsForCall)]
	fake.deregisterTaskFromMaintenanceWindowWithContextArgsForCall = append(fake.deregisterTaskFromMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DeregisterTaskFromMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeregisterTaskFromMaintenanceWindowWithContextStub
	fakeReturns := fake.deregisterTaskFromMaintenanceWindowWithContextReturns
	fake.recordInvocation("DeregisterTaskFromMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowWithContextCallCount() int {
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.deregisterTaskFromMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.DeregisterTaskFromMaintenanceWindowInput, ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error)) {
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.DeregisterTaskFromMaintenanceWindowInput, []request.Option) {
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.deregisterTaskFromMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowWithContextReturns(result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowWithContextStub = nil
	fake.deregisterTaskFromMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DeregisterTaskFromMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput, result2 error) {
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Lock()
	defer fake.deregisterTaskFromMaintenanceWindowWithContextMutex.Unlock()
	fake.DeregisterTaskFromMaintenanceWindowWithContextStub = nil
	if fake.deregisterTaskFromMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.deregisterTaskFromMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
			result2 error
		})
	}
	fake.deregisterTaskFromMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DeregisterTaskFromMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeActivations(arg1 *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error) {
	fake.describeActivationsMutex.Lock()
	ret, specificReturn := fake.describeActivationsReturnsOnCall[len(fake.describeActivationsArgsForCall)]
	fake.describeActivationsArgsForCall = append(fake.describeActivationsArgsForCall, struct {
		arg1 *ssm.DescribeActivationsInput
	}{arg1})
	stub := fake.DescribeActivationsStub
	fakeReturns := fake.describeActivationsReturns
	fake.recordInvocation("DescribeActivations", []interface{}{arg1})
	fake.describeActivationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeActivationsCallCount() int {
	fake.describeActivationsMutex.RLock()
	defer fake.describeActivationsMutex.RUnlock()
	return len(fake.describeActivationsArgsForCall)
}

func (fake *FakeSSMClient) DescribeActivationsCalls(stub func(*ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error)) {
	fake.describeActivationsMutex.Lock()
	defer fake.describeActivationsMutex.Unlock()
	fake.DescribeActivationsStub = stub
}

func (fake *FakeSSMClient) DescribeActivationsArgsForCall(i int) *ssm.DescribeActivationsInput {
	fake.describeActivationsMutex.RLock()
	defer fake.describeActivationsMutex.RUnlock()
	argsForCall := fake.describeActivationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeActivationsReturns(result1 *ssm.DescribeActivationsOutput, result2 error) {
	fake.describeActivationsMutex.Lock()
	defer fake.describeActivationsMutex.Unlock()
	fake.DescribeActivationsStub = nil
	fake.describeActivationsReturns = struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeActivationsReturnsOnCall(i int, result1 *ssm.DescribeActivationsOutput, result2 error) {
	fake.describeActivationsMutex.Lock()
	defer fake.describeActivationsMutex.Unlock()
	fake.DescribeActivationsStub = nil
	if fake.describeActivationsReturnsOnCall == nil {
		fake.describeActivationsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeActivationsOutput
			result2 error
		})
	}
	fake.describeActivationsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeActivationsPages(arg1 *ssm.DescribeActivationsInput, arg2 func(*ssm.DescribeActivationsOutput, bool) bool) error {
	fake.describeActivationsPagesMutex.Lock()
	ret, specificReturn := fake.describeActivationsPagesReturnsOnCall[len(fake.describeActivationsPagesArgsForCall)]
	fake.describeActivationsPagesArgsForCall = append(fake.describeActivationsPagesArgsForCall, struct {
		arg1 *ssm.DescribeActivationsInput
		arg2 func(*ssm.DescribeActivationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeActivationsPagesStub
	fakeReturns := fake.describeActivationsPagesReturns
	fake.recordInvocation("DescribeActivationsPages", []interface{}{arg1, arg2})
	fake.describeActivationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeActivationsPagesCallCount() int {
	fake.describeActivationsPagesMutex.RLock()
	defer fake.describeActivationsPagesMutex.RUnlock()
	return len(fake.describeActivationsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeActivationsPagesCalls(stub func(*ssm.DescribeActivationsInput, func(*ssm.DescribeActivationsOutput, bool) bool) error) {
	fake.describeActivationsPagesMutex.Lock()
	defer fake.describeActivationsPagesMutex.Unlock()
	fake.DescribeActivationsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeActivationsPagesArgsForCall(i int) (*ssm.DescribeActivationsInput, func(*ssm.DescribeActivationsOutput, bool) bool) {
	fake.describeActivationsPagesMutex.RLock()
	defer fake.describeActivationsPagesMutex.RUnlock()
	argsForCall := fake.describeActivationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeActivationsPagesReturns(result1 error) {
	fake.describeActivationsPagesMutex.Lock()
	defer fake.describeActivationsPagesMutex.Unlock()
	fake.DescribeActivationsPagesStub = nil
	fake.describeActivationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeActivationsPagesReturnsOnCall(i int, result1 error) {
	fake.describeActivationsPagesMutex.Lock()
	defer fake.describeActivationsPagesMutex.Unlock()
	fake.DescribeActivationsPagesStub = nil
	if fake.describeActivationsPagesReturnsOnCall == nil {
		fake.describeActivationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeActivationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeActivationsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeActivationsInput, arg3 func(*ssm.DescribeActivationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeActivationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeActivationsPagesWithContextReturnsOnCall[len(fake.describeActivationsPagesWithContextArgsForCall)]
	fake.describeActivationsPagesWithContextArgsForCall = append(fake.describeActivationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeActivationsInput
		arg3 func(*ssm.DescribeActivationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeActivationsPagesWithContextStub
	fakeReturns := fake.describeActivationsPagesWithContextReturns
	fake.recordInvocation("DescribeActivationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeActivationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeActivationsPagesWithContextCallCount() int {
	fake.describeActivationsPagesWithContextMutex.RLock()
	defer fake.describeActivationsPagesWithContextMutex.RUnlock()
	return len(fake.describeActivationsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeActivationsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeActivationsInput, func(*ssm.DescribeActivationsOutput, bool) bool, ...request.Option) error) {
	fake.describeActivationsPagesWithContextMutex.Lock()
	defer fake.describeActivationsPagesWithContextMutex.Unlock()
	fake.DescribeActivationsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeActivationsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeActivationsInput, func(*ssm.DescribeActivationsOutput, bool) bool, []request.Option) {
	fake.describeActivationsPagesWithContextMutex.RLock()
	defer fake.describeActivationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeActivationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeActivationsPagesWithContextReturns(result1 error) {
	fake.describeActivationsPagesWithContextMutex.Lock()
	defer fake.describeActivationsPagesWithContextMutex.Unlock()
	fake.DescribeActivationsPagesWithContextStub = nil
	fake.describeActivationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeActivationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeActivationsPagesWithContextMutex.Lock()
	defer fake.describeActivationsPagesWithContextMutex.Unlock()
	fake.DescribeActivationsPagesWithContextStub = nil
	if fake.describeActivationsPagesWithContextReturnsOnCall == nil {
		fake.describeActivationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeActivationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeActivationsRequest(arg1 *ssm.DescribeActivationsInput) (*request.Request, *ssm.DescribeActivationsOutput) {
	fake.describeActivationsRequestMutex.Lock()
	ret, specificReturn := fake.describeActivationsRequestReturnsOnCall[len(fake.describeActivationsRequestArgsForCall)]
	fake.describeActivationsRequestArgsForCall = append(fake.describeActivationsRequestArgsForCall, struct {
		arg1 *ssm.DescribeActivationsInput
	}{arg1})
	stub := fake.DescribeActivationsRequestStub
	fakeReturns := fake.describeActivationsRequestReturns
	fake.recordInvocation("DescribeActivationsRequest", []interface{}{arg1})
	fake.describeActivationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeActivationsRequestCallCount() int {
	fake.describeActivationsRequestMutex.RLock()
	defer fake.describeActivationsRequestMutex.RUnlock()
	return len(fake.describeActivationsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeActivationsRequestCalls(stub func(*ssm.DescribeActivationsInput) (*request.Request, *ssm.DescribeActivationsOutput)) {
	fake.describeActivationsRequestMutex.Lock()
	defer fake.describeActivationsRequestMutex.Unlock()
	fake.DescribeActivationsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeActivationsRequestArgsForCall(i int) *ssm.DescribeActivationsInput {
	fake.describeActivationsRequestMutex.RLock()
	defer fake.describeActivationsRequestMutex.RUnlock()
	argsForCall := fake.describeActivationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeActivationsRequestReturns(result1 *request.Request, result2 *ssm.DescribeActivationsOutput) {
	fake.describeActivationsRequestMutex.Lock()
	defer fake.describeActivationsRequestMutex.Unlock()
	fake.DescribeActivationsRequestStub = nil
	fake.describeActivationsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeActivationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeActivationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeActivationsOutput) {
	fake.describeActivationsRequestMutex.Lock()
	defer fake.describeActivationsRequestMutex.Unlock()
	fake.DescribeActivationsRequestStub = nil
	if fake.describeActivationsRequestReturnsOnCall == nil {
		fake.describeActivationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeActivationsOutput
		})
	}
	fake.describeActivationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeActivationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeActivationsWithContext(arg1 context.Context, arg2 *ssm.DescribeActivationsInput, arg3 ...request.Option) (*ssm.DescribeActivationsOutput, error) {
	fake.describeActivationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeActivationsWithContextReturnsOnCall[len(fake.describeActivationsWithContextArgsForCall)]
	fake.describeActivationsWithContextArgsForCall = append(fake.describeActivationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeActivationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeActivationsWithContextStub
	fakeReturns := fake.describeActivationsWithContextReturns
	fake.recordInvocation("DescribeActivationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeActivationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeActivationsWithContextCallCount() int {
	fake.describeActivationsWithContextMutex.RLock()
	defer fake.describeActivationsWithContextMutex.RUnlock()
	return len(fake.describeActivationsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeActivationsWithContextCalls(stub func(context.Context, *ssm.DescribeActivationsInput, ...request.Option) (*ssm.DescribeActivationsOutput, error)) {
	fake.describeActivationsWithContextMutex.Lock()
	defer fake.describeActivationsWithContextMutex.Unlock()
	fake.DescribeActivationsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeActivationsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeActivationsInput, []request.Option) {
	fake.describeActivationsWithContextMutex.RLock()
	defer fake.describeActivationsWithContextMutex.RUnlock()
	argsForCall := fake.describeActivationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeActivationsWithContextReturns(result1 *ssm.DescribeActivationsOutput, result2 error) {
	fake.describeActivationsWithContextMutex.Lock()
	defer fake.describeActivationsWithContextMutex.Unlock()
	fake.DescribeActivationsWithContextStub = nil
	fake.describeActivationsWithContextReturns = struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeActivationsWithContextReturnsOnCall(i int, result1 *ssm.DescribeActivationsOutput, result2 error) {
	fake.describeActivationsWithContextMutex.Lock()
	defer fake.describeActivationsWithContextMutex.Unlock()
	fake.DescribeActivationsWithContextStub = nil
	if fake.describeActivationsWithContextReturnsOnCall == nil {
		fake.describeActivationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeActivationsOutput
			result2 error
		})
	}
	fake.describeActivationsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeActivationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociation(arg1 *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error) {
	fake.describeAssociationMutex.Lock()
	ret, specificReturn := fake.describeAssociationReturnsOnCall[len(fake.describeAssociationArgsForCall)]
	fake.describeAssociationArgsForCall = append(fake.describeAssociationArgsForCall, struct {
		arg1 *ssm.DescribeAssociationInput
	}{arg1})
	stub := fake.DescribeAssociationStub
	fakeReturns := fake.describeAssociationReturns
	fake.recordInvocation("DescribeAssociation", []interface{}{arg1})
	fake.describeAssociationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationCallCount() int {
	fake.describeAssociationMutex.RLock()
	defer fake.describeAssociationMutex.RUnlock()
	return len(fake.describeAssociationArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationCalls(stub func(*ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error)) {
	fake.describeAssociationMutex.Lock()
	defer fake.describeAssociationMutex.Unlock()
	fake.DescribeAssociationStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationArgsForCall(i int) *ssm.DescribeAssociationInput {
	fake.describeAssociationMutex.RLock()
	defer fake.describeAssociationMutex.RUnlock()
	argsForCall := fake.describeAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAssociationReturns(result1 *ssm.DescribeAssociationOutput, result2 error) {
	fake.describeAssociationMutex.Lock()
	defer fake.describeAssociationMutex.Unlock()
	fake.DescribeAssociationStub = nil
	fake.describeAssociationReturns = struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationReturnsOnCall(i int, result1 *ssm.DescribeAssociationOutput, result2 error) {
	fake.describeAssociationMutex.Lock()
	defer fake.describeAssociationMutex.Unlock()
	fake.DescribeAssociationStub = nil
	if fake.describeAssociationReturnsOnCall == nil {
		fake.describeAssociationReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAssociationOutput
			result2 error
		})
	}
	fake.describeAssociationReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargets(arg1 *ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	fake.describeAssociationExecutionTargetsMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionTargetsReturnsOnCall[len(fake.describeAssociationExecutionTargetsArgsForCall)]
	fake.describeAssociationExecutionTargetsArgsForCall = append(fake.describeAssociationExecutionTargetsArgsForCall, struct {
		arg1 *ssm.DescribeAssociationExecutionTargetsInput
	}{arg1})
	stub := fake.DescribeAssociationExecutionTargetsStub
	fakeReturns := fake.describeAssociationExecutionTargetsReturns
	fake.recordInvocation("DescribeAssociationExecutionTargets", []interface{}{arg1})
	fake.describeAssociationExecutionTargetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsCallCount() int {
	fake.describeAssociationExecutionTargetsMutex.RLock()
	defer fake.describeAssociationExecutionTargetsMutex.RUnlock()
	return len(fake.describeAssociationExecutionTargetsArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsCalls(stub func(*ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error)) {
	fake.describeAssociationExecutionTargetsMutex.Lock()
	defer fake.describeAssociationExecutionTargetsMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsArgsForCall(i int) *ssm.DescribeAssociationExecutionTargetsInput {
	fake.describeAssociationExecutionTargetsMutex.RLock()
	defer fake.describeAssociationExecutionTargetsMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsReturns(result1 *ssm.DescribeAssociationExecutionTargetsOutput, result2 error) {
	fake.describeAssociationExecutionTargetsMutex.Lock()
	defer fake.describeAssociationExecutionTargetsMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsStub = nil
	fake.describeAssociationExecutionTargetsReturns = struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsReturnsOnCall(i int, result1 *ssm.DescribeAssociationExecutionTargetsOutput, result2 error) {
	fake.describeAssociationExecutionTargetsMutex.Lock()
	defer fake.describeAssociationExecutionTargetsMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsStub = nil
	if fake.describeAssociationExecutionTargetsReturnsOnCall == nil {
		fake.describeAssociationExecutionTargetsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAssociationExecutionTargetsOutput
			result2 error
		})
	}
	fake.describeAssociationExecutionTargetsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPages(arg1 *ssm.DescribeAssociationExecutionTargetsInput, arg2 func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool) error {
	fake.describeAssociationExecutionTargetsPagesMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionTargetsPagesReturnsOnCall[len(fake.describeAssociationExecutionTargetsPagesArgsForCall)]
	fake.describeAssociationExecutionTargetsPagesArgsForCall = append(fake.describeAssociationExecutionTargetsPagesArgsForCall, struct {
		arg1 *ssm.DescribeAssociationExecutionTargetsInput
		arg2 func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAssociationExecutionTargetsPagesStub
	fakeReturns := fake.describeAssociationExecutionTargetsPagesReturns
	fake.recordInvocation("DescribeAssociationExecutionTargetsPages", []interface{}{arg1, arg2})
	fake.describeAssociationExecutionTargetsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesCallCount() int {
	fake.describeAssociationExecutionTargetsPagesMutex.RLock()
	defer fake.describeAssociationExecutionTargetsPagesMutex.RUnlock()
	return len(fake.describeAssociationExecutionTargetsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesCalls(stub func(*ssm.DescribeAssociationExecutionTargetsInput, func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool) error) {
	fake.describeAssociationExecutionTargetsPagesMutex.Lock()
	defer fake.describeAssociationExecutionTargetsPagesMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesArgsForCall(i int) (*ssm.DescribeAssociationExecutionTargetsInput, func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool) {
	fake.describeAssociationExecutionTargetsPagesMutex.RLock()
	defer fake.describeAssociationExecutionTargetsPagesMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionTargetsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesReturns(result1 error) {
	fake.describeAssociationExecutionTargetsPagesMutex.Lock()
	defer fake.describeAssociationExecutionTargetsPagesMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsPagesStub = nil
	fake.describeAssociationExecutionTargetsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAssociationExecutionTargetsPagesMutex.Lock()
	defer fake.describeAssociationExecutionTargetsPagesMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsPagesStub = nil
	if fake.describeAssociationExecutionTargetsPagesReturnsOnCall == nil {
		fake.describeAssociationExecutionTargetsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAssociationExecutionTargetsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeAssociationExecutionTargetsInput, arg3 func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionTargetsPagesWithContextReturnsOnCall[len(fake.describeAssociationExecutionTargetsPagesWithContextArgsForCall)]
	fake.describeAssociationExecutionTargetsPagesWithContextArgsForCall = append(fake.describeAssociationExecutionTargetsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionTargetsInput
		arg3 func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAssociationExecutionTargetsPagesWithContextStub
	fakeReturns := fake.describeAssociationExecutionTargetsPagesWithContextReturns
	fake.recordInvocation("DescribeAssociationExecutionTargetsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesWithContextCallCount() int {
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.RLock()
	defer fake.describeAssociationExecutionTargetsPagesWithContextMutex.RUnlock()
	return len(fake.describeAssociationExecutionTargetsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeAssociationExecutionTargetsInput, func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool, ...request.Option) error) {
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.Lock()
	defer fake.describeAssociationExecutionTargetsPagesWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAssociationExecutionTargetsInput, func(*ssm.DescribeAssociationExecutionTargetsOutput, bool) bool, []request.Option) {
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.RLock()
	defer fake.describeAssociationExecutionTargetsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionTargetsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesWithContextReturns(result1 error) {
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.Lock()
	defer fake.describeAssociationExecutionTargetsPagesWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsPagesWithContextStub = nil
	fake.describeAssociationExecutionTargetsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.Lock()
	defer fake.describeAssociationExecutionTargetsPagesWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsPagesWithContextStub = nil
	if fake.describeAssociationExecutionTargetsPagesWithContextReturnsOnCall == nil {
		fake.describeAssociationExecutionTargetsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAssociationExecutionTargetsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsRequest(arg1 *ssm.DescribeAssociationExecutionTargetsInput) (*request.Request, *ssm.DescribeAssociationExecutionTargetsOutput) {
	fake.describeAssociationExecutionTargetsRequestMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionTargetsRequestReturnsOnCall[len(fake.describeAssociationExecutionTargetsRequestArgsForCall)]
	fake.describeAssociationExecutionTargetsRequestArgsForCall = append(fake.describeAssociationExecutionTargetsRequestArgsForCall, struct {
		arg1 *ssm.DescribeAssociationExecutionTargetsInput
	}{arg1})
	stub := fake.DescribeAssociationExecutionTargetsRequestStub
	fakeReturns := fake.describeAssociationExecutionTargetsRequestReturns
	fake.recordInvocation("DescribeAssociationExecutionTargetsRequest", []interface{}{arg1})
	fake.describeAssociationExecutionTargetsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsRequestCallCount() int {
	fake.describeAssociationExecutionTargetsRequestMutex.RLock()
	defer fake.describeAssociationExecutionTargetsRequestMutex.RUnlock()
	return len(fake.describeAssociationExecutionTargetsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsRequestCalls(stub func(*ssm.DescribeAssociationExecutionTargetsInput) (*request.Request, *ssm.DescribeAssociationExecutionTargetsOutput)) {
	fake.describeAssociationExecutionTargetsRequestMutex.Lock()
	defer fake.describeAssociationExecutionTargetsRequestMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsRequestArgsForCall(i int) *ssm.DescribeAssociationExecutionTargetsInput {
	fake.describeAssociationExecutionTargetsRequestMutex.RLock()
	defer fake.describeAssociationExecutionTargetsRequestMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsRequestReturns(result1 *request.Request, result2 *ssm.DescribeAssociationExecutionTargetsOutput) {
	fake.describeAssociationExecutionTargetsRequestMutex.Lock()
	defer fake.describeAssociationExecutionTargetsRequestMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsRequestStub = nil
	fake.describeAssociationExecutionTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionTargetsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeAssociationExecutionTargetsOutput) {
	fake.describeAssociationExecutionTargetsRequestMutex.Lock()
	defer fake.describeAssociationExecutionTargetsRequestMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsRequestStub = nil
	if fake.describeAssociationExecutionTargetsRequestReturnsOnCall == nil {
		fake.describeAssociationExecutionTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeAssociationExecutionTargetsOutput
		})
	}
	fake.describeAssociationExecutionTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionTargetsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsWithContext(arg1 context.Context, arg2 *ssm.DescribeAssociationExecutionTargetsInput, arg3 ...request.Option) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	fake.describeAssociationExecutionTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionTargetsWithContextReturnsOnCall[len(fake.describeAssociationExecutionTargetsWithContextArgsForCall)]
	fake.describeAssociationExecutionTargetsWithContextArgsForCall = append(fake.describeAssociationExecutionTargetsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAssociationExecutionTargetsWithContextStub
	fakeReturns := fake.describeAssociationExecutionTargetsWithContextReturns
	fake.recordInvocation("DescribeAssociationExecutionTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAssociationExecutionTargetsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsWithContextCallCount() int {
	fake.describeAssociationExecutionTargetsWithContextMutex.RLock()
	defer fake.describeAssociationExecutionTargetsWithContextMutex.RUnlock()
	return len(fake.describeAssociationExecutionTargetsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsWithContextCalls(stub func(context.Context, *ssm.DescribeAssociationExecutionTargetsInput, ...request.Option) (*ssm.DescribeAssociationExecutionTargetsOutput, error)) {
	fake.describeAssociationExecutionTargetsWithContextMutex.Lock()
	defer fake.describeAssociationExecutionTargetsWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAssociationExecutionTargetsInput, []request.Option) {
	fake.describeAssociationExecutionTargetsWithContextMutex.RLock()
	defer fake.describeAssociationExecutionTargetsWithContextMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsWithContextReturns(result1 *ssm.DescribeAssociationExecutionTargetsOutput, result2 error) {
	fake.describeAssociationExecutionTargetsWithContextMutex.Lock()
	defer fake.describeAssociationExecutionTargetsWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsWithContextStub = nil
	fake.describeAssociationExecutionTargetsWithContextReturns = struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionTargetsWithContextReturnsOnCall(i int, result1 *ssm.DescribeAssociationExecutionTargetsOutput, result2 error) {
	fake.describeAssociationExecutionTargetsWithContextMutex.Lock()
	defer fake.describeAssociationExecutionTargetsWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionTargetsWithContextStub = nil
	if fake.describeAssociationExecutionTargetsWithContextReturnsOnCall == nil {
		fake.describeAssociationExecutionTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAssociationExecutionTargetsOutput
			result2 error
		})
	}
	fake.describeAssociationExecutionTargetsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAssociationExecutionTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutions(arg1 *ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error) {
	fake.describeAssociationExecutionsMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionsReturnsOnCall[len(fake.describeAssociationExecutionsArgsForCall)]
	fake.describeAssociationExecutionsArgsForCall = append(fake.describeAssociationExecutionsArgsForCall, struct {
		arg1 *ssm.DescribeAssociationExecutionsInput
	}{arg1})
	stub := fake.DescribeAssociationExecutionsStub
	fakeReturns := fake.describeAssociationExecutionsReturns
	fake.recordInvocation("DescribeAssociationExecutions", []interface{}{arg1})
	fake.describeAssociationExecutionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsCallCount() int {
	fake.describeAssociationExecutionsMutex.RLock()
	defer fake.describeAssociationExecutionsMutex.RUnlock()
	return len(fake.describeAssociationExecutionsArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsCalls(stub func(*ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error)) {
	fake.describeAssociationExecutionsMutex.Lock()
	defer fake.describeAssociationExecutionsMutex.Unlock()
	fake.DescribeAssociationExecutionsStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsArgsForCall(i int) *ssm.DescribeAssociationExecutionsInput {
	fake.describeAssociationExecutionsMutex.RLock()
	defer fake.describeAssociationExecutionsMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsReturns(result1 *ssm.DescribeAssociationExecutionsOutput, result2 error) {
	fake.describeAssociationExecutionsMutex.Lock()
	defer fake.describeAssociationExecutionsMutex.Unlock()
	fake.DescribeAssociationExecutionsStub = nil
	fake.describeAssociationExecutionsReturns = struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsReturnsOnCall(i int, result1 *ssm.DescribeAssociationExecutionsOutput, result2 error) {
	fake.describeAssociationExecutionsMutex.Lock()
	defer fake.describeAssociationExecutionsMutex.Unlock()
	fake.DescribeAssociationExecutionsStub = nil
	if fake.describeAssociationExecutionsReturnsOnCall == nil {
		fake.describeAssociationExecutionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAssociationExecutionsOutput
			result2 error
		})
	}
	fake.describeAssociationExecutionsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPages(arg1 *ssm.DescribeAssociationExecutionsInput, arg2 func(*ssm.DescribeAssociationExecutionsOutput, bool) bool) error {
	fake.describeAssociationExecutionsPagesMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionsPagesReturnsOnCall[len(fake.describeAssociationExecutionsPagesArgsForCall)]
	fake.describeAssociationExecutionsPagesArgsForCall = append(fake.describeAssociationExecutionsPagesArgsForCall, struct {
		arg1 *ssm.DescribeAssociationExecutionsInput
		arg2 func(*ssm.DescribeAssociationExecutionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAssociationExecutionsPagesStub
	fakeReturns := fake.describeAssociationExecutionsPagesReturns
	fake.recordInvocation("DescribeAssociationExecutionsPages", []interface{}{arg1, arg2})
	fake.describeAssociationExecutionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesCallCount() int {
	fake.describeAssociationExecutionsPagesMutex.RLock()
	defer fake.describeAssociationExecutionsPagesMutex.RUnlock()
	return len(fake.describeAssociationExecutionsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesCalls(stub func(*ssm.DescribeAssociationExecutionsInput, func(*ssm.DescribeAssociationExecutionsOutput, bool) bool) error) {
	fake.describeAssociationExecutionsPagesMutex.Lock()
	defer fake.describeAssociationExecutionsPagesMutex.Unlock()
	fake.DescribeAssociationExecutionsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesArgsForCall(i int) (*ssm.DescribeAssociationExecutionsInput, func(*ssm.DescribeAssociationExecutionsOutput, bool) bool) {
	fake.describeAssociationExecutionsPagesMutex.RLock()
	defer fake.describeAssociationExecutionsPagesMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesReturns(result1 error) {
	fake.describeAssociationExecutionsPagesMutex.Lock()
	defer fake.describeAssociationExecutionsPagesMutex.Unlock()
	fake.DescribeAssociationExecutionsPagesStub = nil
	fake.describeAssociationExecutionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAssociationExecutionsPagesMutex.Lock()
	defer fake.describeAssociationExecutionsPagesMutex.Unlock()
	fake.DescribeAssociationExecutionsPagesStub = nil
	if fake.describeAssociationExecutionsPagesReturnsOnCall == nil {
		fake.describeAssociationExecutionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAssociationExecutionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeAssociationExecutionsInput, arg3 func(*ssm.DescribeAssociationExecutionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAssociationExecutionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionsPagesWithContextReturnsOnCall[len(fake.describeAssociationExecutionsPagesWithContextArgsForCall)]
	fake.describeAssociationExecutionsPagesWithContextArgsForCall = append(fake.describeAssociationExecutionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionsInput
		arg3 func(*ssm.DescribeAssociationExecutionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAssociationExecutionsPagesWithContextStub
	fakeReturns := fake.describeAssociationExecutionsPagesWithContextReturns
	fake.recordInvocation("DescribeAssociationExecutionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAssociationExecutionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesWithContextCallCount() int {
	fake.describeAssociationExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAssociationExecutionsPagesWithContextMutex.RUnlock()
	return len(fake.describeAssociationExecutionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeAssociationExecutionsInput, func(*ssm.DescribeAssociationExecutionsOutput, bool) bool, ...request.Option) error) {
	fake.describeAssociationExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAssociationExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAssociationExecutionsInput, func(*ssm.DescribeAssociationExecutionsOutput, bool) bool, []request.Option) {
	fake.describeAssociationExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAssociationExecutionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesWithContextReturns(result1 error) {
	fake.describeAssociationExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAssociationExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionsPagesWithContextStub = nil
	fake.describeAssociationExecutionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAssociationExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAssociationExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionsPagesWithContextStub = nil
	if fake.describeAssociationExecutionsPagesWithContextReturnsOnCall == nil {
		fake.describeAssociationExecutionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAssociationExecutionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsRequest(arg1 *ssm.DescribeAssociationExecutionsInput) (*request.Request, *ssm.DescribeAssociationExecutionsOutput) {
	fake.describeAssociationExecutionsRequestMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionsRequestReturnsOnCall[len(fake.describeAssociationExecutionsRequestArgsForCall)]
	fake.describeAssociationExecutionsRequestArgsForCall = append(fake.describeAssociationExecutionsRequestArgsForCall, struct {
		arg1 *ssm.DescribeAssociationExecutionsInput
	}{arg1})
	stub := fake.DescribeAssociationExecutionsRequestStub
	fakeReturns := fake.describeAssociationExecutionsRequestReturns
	fake.recordInvocation("DescribeAssociationExecutionsRequest", []interface{}{arg1})
	fake.describeAssociationExecutionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsRequestCallCount() int {
	fake.describeAssociationExecutionsRequestMutex.RLock()
	defer fake.describeAssociationExecutionsRequestMutex.RUnlock()
	return len(fake.describeAssociationExecutionsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsRequestCalls(stub func(*ssm.DescribeAssociationExecutionsInput) (*request.Request, *ssm.DescribeAssociationExecutionsOutput)) {
	fake.describeAssociationExecutionsRequestMutex.Lock()
	defer fake.describeAssociationExecutionsRequestMutex.Unlock()
	fake.DescribeAssociationExecutionsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsRequestArgsForCall(i int) *ssm.DescribeAssociationExecutionsInput {
	fake.describeAssociationExecutionsRequestMutex.RLock()
	defer fake.describeAssociationExecutionsRequestMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsRequestReturns(result1 *request.Request, result2 *ssm.DescribeAssociationExecutionsOutput) {
	fake.describeAssociationExecutionsRequestMutex.Lock()
	defer fake.describeAssociationExecutionsRequestMutex.Unlock()
	fake.DescribeAssociationExecutionsRequestStub = nil
	fake.describeAssociationExecutionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeAssociationExecutionsOutput) {
	fake.describeAssociationExecutionsRequestMutex.Lock()
	defer fake.describeAssociationExecutionsRequestMutex.Unlock()
	fake.DescribeAssociationExecutionsRequestStub = nil
	if fake.describeAssociationExecutionsRequestReturnsOnCall == nil {
		fake.describeAssociationExecutionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeAssociationExecutionsOutput
		})
	}
	fake.describeAssociationExecutionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsWithContext(arg1 context.Context, arg2 *ssm.DescribeAssociationExecutionsInput, arg3 ...request.Option) (*ssm.DescribeAssociationExecutionsOutput, error) {
	fake.describeAssociationExecutionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAssociationExecutionsWithContextReturnsOnCall[len(fake.describeAssociationExecutionsWithContextArgsForCall)]
	fake.describeAssociationExecutionsWithContextArgsForCall = append(fake.describeAssociationExecutionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationExecutionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAssociationExecutionsWithContextStub
	fakeReturns := fake.describeAssociationExecutionsWithContextReturns
	fake.recordInvocation("DescribeAssociationExecutionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAssociationExecutionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsWithContextCallCount() int {
	fake.describeAssociationExecutionsWithContextMutex.RLock()
	defer fake.describeAssociationExecutionsWithContextMutex.RUnlock()
	return len(fake.describeAssociationExecutionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsWithContextCalls(stub func(context.Context, *ssm.DescribeAssociationExecutionsInput, ...request.Option) (*ssm.DescribeAssociationExecutionsOutput, error)) {
	fake.describeAssociationExecutionsWithContextMutex.Lock()
	defer fake.describeAssociationExecutionsWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAssociationExecutionsInput, []request.Option) {
	fake.describeAssociationExecutionsWithContextMutex.RLock()
	defer fake.describeAssociationExecutionsWithContextMutex.RUnlock()
	argsForCall := fake.describeAssociationExecutionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsWithContextReturns(result1 *ssm.DescribeAssociationExecutionsOutput, result2 error) {
	fake.describeAssociationExecutionsWithContextMutex.Lock()
	defer fake.describeAssociationExecutionsWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionsWithContextStub = nil
	fake.describeAssociationExecutionsWithContextReturns = struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationExecutionsWithContextReturnsOnCall(i int, result1 *ssm.DescribeAssociationExecutionsOutput, result2 error) {
	fake.describeAssociationExecutionsWithContextMutex.Lock()
	defer fake.describeAssociationExecutionsWithContextMutex.Unlock()
	fake.DescribeAssociationExecutionsWithContextStub = nil
	if fake.describeAssociationExecutionsWithContextReturnsOnCall == nil {
		fake.describeAssociationExecutionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAssociationExecutionsOutput
			result2 error
		})
	}
	fake.describeAssociationExecutionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAssociationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationRequest(arg1 *ssm.DescribeAssociationInput) (*request.Request, *ssm.DescribeAssociationOutput) {
	fake.describeAssociationRequestMutex.Lock()
	ret, specificReturn := fake.describeAssociationRequestReturnsOnCall[len(fake.describeAssociationRequestArgsForCall)]
	fake.describeAssociationRequestArgsForCall = append(fake.describeAssociationRequestArgsForCall, struct {
		arg1 *ssm.DescribeAssociationInput
	}{arg1})
	stub := fake.DescribeAssociationRequestStub
	fakeReturns := fake.describeAssociationRequestReturns
	fake.recordInvocation("DescribeAssociationRequest", []interface{}{arg1})
	fake.describeAssociationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationRequestCallCount() int {
	fake.describeAssociationRequestMutex.RLock()
	defer fake.describeAssociationRequestMutex.RUnlock()
	return len(fake.describeAssociationRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationRequestCalls(stub func(*ssm.DescribeAssociationInput) (*request.Request, *ssm.DescribeAssociationOutput)) {
	fake.describeAssociationRequestMutex.Lock()
	defer fake.describeAssociationRequestMutex.Unlock()
	fake.DescribeAssociationRequestStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationRequestArgsForCall(i int) *ssm.DescribeAssociationInput {
	fake.describeAssociationRequestMutex.RLock()
	defer fake.describeAssociationRequestMutex.RUnlock()
	argsForCall := fake.describeAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAssociationRequestReturns(result1 *request.Request, result2 *ssm.DescribeAssociationOutput) {
	fake.describeAssociationRequestMutex.Lock()
	defer fake.describeAssociationRequestMutex.Unlock()
	fake.DescribeAssociationRequestStub = nil
	fake.describeAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeAssociationOutput) {
	fake.describeAssociationRequestMutex.Lock()
	defer fake.describeAssociationRequestMutex.Unlock()
	fake.DescribeAssociationRequestStub = nil
	if fake.describeAssociationRequestReturnsOnCall == nil {
		fake.describeAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeAssociationOutput
		})
	}
	fake.describeAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationWithContext(arg1 context.Context, arg2 *ssm.DescribeAssociationInput, arg3 ...request.Option) (*ssm.DescribeAssociationOutput, error) {
	fake.describeAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.describeAssociationWithContextReturnsOnCall[len(fake.describeAssociationWithContextArgsForCall)]
	fake.describeAssociationWithContextArgsForCall = append(fake.describeAssociationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAssociationWithContextStub
	fakeReturns := fake.describeAssociationWithContextReturns
	fake.recordInvocation("DescribeAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAssociationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAssociationWithContextCallCount() int {
	fake.describeAssociationWithContextMutex.RLock()
	defer fake.describeAssociationWithContextMutex.RUnlock()
	return len(fake.describeAssociationWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAssociationWithContextCalls(stub func(context.Context, *ssm.DescribeAssociationInput, ...request.Option) (*ssm.DescribeAssociationOutput, error)) {
	fake.describeAssociationWithContextMutex.Lock()
	defer fake.describeAssociationWithContextMutex.Unlock()
	fake.DescribeAssociationWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAssociationWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAssociationInput, []request.Option) {
	fake.describeAssociationWithContextMutex.RLock()
	defer fake.describeAssociationWithContextMutex.RUnlock()
	argsForCall := fake.describeAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeAssociationWithContextReturns(result1 *ssm.DescribeAssociationOutput, result2 error) {
	fake.describeAssociationWithContextMutex.Lock()
	defer fake.describeAssociationWithContextMutex.Unlock()
	fake.DescribeAssociationWithContextStub = nil
	fake.describeAssociationWithContextReturns = struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAssociationWithContextReturnsOnCall(i int, result1 *ssm.DescribeAssociationOutput, result2 error) {
	fake.describeAssociationWithContextMutex.Lock()
	defer fake.describeAssociationWithContextMutex.Unlock()
	fake.DescribeAssociationWithContextStub = nil
	if fake.describeAssociationWithContextReturnsOnCall == nil {
		fake.describeAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAssociationOutput
			result2 error
		})
	}
	fake.describeAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationExecutions(arg1 *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error) {
	fake.describeAutomationExecutionsMutex.Lock()
	ret, specificReturn := fake.describeAutomationExecutionsReturnsOnCall[len(fake.describeAutomationExecutionsArgsForCall)]
	fake.describeAutomationExecutionsArgsForCall = append(fake.describeAutomationExecutionsArgsForCall, struct {
		arg1 *ssm.DescribeAutomationExecutionsInput
	}{arg1})
	stub := fake.DescribeAutomationExecutionsStub
	fakeReturns := fake.describeAutomationExecutionsReturns
	fake.recordInvocation("DescribeAutomationExecutions", []interface{}{arg1})
	fake.describeAutomationExecutionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsCallCount() int {
	fake.describeAutomationExecutionsMutex.RLock()
	defer fake.describeAutomationExecutionsMutex.RUnlock()
	return len(fake.describeAutomationExecutionsArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsCalls(stub func(*ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error)) {
	fake.describeAutomationExecutionsMutex.Lock()
	defer fake.describeAutomationExecutionsMutex.Unlock()
	fake.DescribeAutomationExecutionsStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsArgsForCall(i int) *ssm.DescribeAutomationExecutionsInput {
	fake.describeAutomationExecutionsMutex.RLock()
	defer fake.describeAutomationExecutionsMutex.RUnlock()
	argsForCall := fake.describeAutomationExecutionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsReturns(result1 *ssm.DescribeAutomationExecutionsOutput, result2 error) {
	fake.describeAutomationExecutionsMutex.Lock()
	defer fake.describeAutomationExecutionsMutex.Unlock()
	fake.DescribeAutomationExecutionsStub = nil
	fake.describeAutomationExecutionsReturns = struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsReturnsOnCall(i int, result1 *ssm.DescribeAutomationExecutionsOutput, result2 error) {
	fake.describeAutomationExecutionsMutex.Lock()
	defer fake.describeAutomationExecutionsMutex.Unlock()
	fake.DescribeAutomationExecutionsStub = nil
	if fake.describeAutomationExecutionsReturnsOnCall == nil {
		fake.describeAutomationExecutionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAutomationExecutionsOutput
			result2 error
		})
	}
	fake.describeAutomationExecutionsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPages(arg1 *ssm.DescribeAutomationExecutionsInput, arg2 func(*ssm.DescribeAutomationExecutionsOutput, bool) bool) error {
	fake.describeAutomationExecutionsPagesMutex.Lock()
	ret, specificReturn := fake.describeAutomationExecutionsPagesReturnsOnCall[len(fake.describeAutomationExecutionsPagesArgsForCall)]
	fake.describeAutomationExecutionsPagesArgsForCall = append(fake.describeAutomationExecutionsPagesArgsForCall, struct {
		arg1 *ssm.DescribeAutomationExecutionsInput
		arg2 func(*ssm.DescribeAutomationExecutionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAutomationExecutionsPagesStub
	fakeReturns := fake.describeAutomationExecutionsPagesReturns
	fake.recordInvocation("DescribeAutomationExecutionsPages", []interface{}{arg1, arg2})
	fake.describeAutomationExecutionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesCallCount() int {
	fake.describeAutomationExecutionsPagesMutex.RLock()
	defer fake.describeAutomationExecutionsPagesMutex.RUnlock()
	return len(fake.describeAutomationExecutionsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesCalls(stub func(*ssm.DescribeAutomationExecutionsInput, func(*ssm.DescribeAutomationExecutionsOutput, bool) bool) error) {
	fake.describeAutomationExecutionsPagesMutex.Lock()
	defer fake.describeAutomationExecutionsPagesMutex.Unlock()
	fake.DescribeAutomationExecutionsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesArgsForCall(i int) (*ssm.DescribeAutomationExecutionsInput, func(*ssm.DescribeAutomationExecutionsOutput, bool) bool) {
	fake.describeAutomationExecutionsPagesMutex.RLock()
	defer fake.describeAutomationExecutionsPagesMutex.RUnlock()
	argsForCall := fake.describeAutomationExecutionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesReturns(result1 error) {
	fake.describeAutomationExecutionsPagesMutex.Lock()
	defer fake.describeAutomationExecutionsPagesMutex.Unlock()
	fake.DescribeAutomationExecutionsPagesStub = nil
	fake.describeAutomationExecutionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAutomationExecutionsPagesMutex.Lock()
	defer fake.describeAutomationExecutionsPagesMutex.Unlock()
	fake.DescribeAutomationExecutionsPagesStub = nil
	if fake.describeAutomationExecutionsPagesReturnsOnCall == nil {
		fake.describeAutomationExecutionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAutomationExecutionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeAutomationExecutionsInput, arg3 func(*ssm.DescribeAutomationExecutionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAutomationExecutionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAutomationExecutionsPagesWithContextReturnsOnCall[len(fake.describeAutomationExecutionsPagesWithContextArgsForCall)]
	fake.describeAutomationExecutionsPagesWithContextArgsForCall = append(fake.describeAutomationExecutionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationExecutionsInput
		arg3 func(*ssm.DescribeAutomationExecutionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAutomationExecutionsPagesWithContextStub
	fakeReturns := fake.describeAutomationExecutionsPagesWithContextReturns
	fake.recordInvocation("DescribeAutomationExecutionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAutomationExecutionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesWithContextCallCount() int {
	fake.describeAutomationExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAutomationExecutionsPagesWithContextMutex.RUnlock()
	return len(fake.describeAutomationExecutionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeAutomationExecutionsInput, func(*ssm.DescribeAutomationExecutionsOutput, bool) bool, ...request.Option) error) {
	fake.describeAutomationExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAutomationExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAutomationExecutionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAutomationExecutionsInput, func(*ssm.DescribeAutomationExecutionsOutput, bool) bool, []request.Option) {
	fake.describeAutomationExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAutomationExecutionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAutomationExecutionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesWithContextReturns(result1 error) {
	fake.describeAutomationExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAutomationExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAutomationExecutionsPagesWithContextStub = nil
	fake.describeAutomationExecutionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAutomationExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAutomationExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAutomationExecutionsPagesWithContextStub = nil
	if fake.describeAutomationExecutionsPagesWithContextReturnsOnCall == nil {
		fake.describeAutomationExecutionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAutomationExecutionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsRequest(arg1 *ssm.DescribeAutomationExecutionsInput) (*request.Request, *ssm.DescribeAutomationExecutionsOutput) {
	fake.describeAutomationExecutionsRequestMutex.Lock()
	ret, specificReturn := fake.describeAutomationExecutionsRequestReturnsOnCall[len(fake.describeAutomationExecutionsRequestArgsForCall)]
	fake.describeAutomationExecutionsRequestArgsForCall = append(fake.describeAutomationExecutionsRequestArgsForCall, struct {
		arg1 *ssm.DescribeAutomationExecutionsInput
	}{arg1})
	stub := fake.DescribeAutomationExecutionsRequestStub
	fakeReturns := fake.describeAutomationExecutionsRequestReturns
	fake.recordInvocation("DescribeAutomationExecutionsRequest", []interface{}{arg1})
	fake.describeAutomationExecutionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsRequestCallCount() int {
	fake.describeAutomationExecutionsRequestMutex.RLock()
	defer fake.describeAutomationExecutionsRequestMutex.RUnlock()
	return len(fake.describeAutomationExecutionsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsRequestCalls(stub func(*ssm.DescribeAutomationExecutionsInput) (*request.Request, *ssm.DescribeAutomationExecutionsOutput)) {
	fake.describeAutomationExecutionsRequestMutex.Lock()
	defer fake.describeAutomationExecutionsRequestMutex.Unlock()
	fake.DescribeAutomationExecutionsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsRequestArgsForCall(i int) *ssm.DescribeAutomationExecutionsInput {
	fake.describeAutomationExecutionsRequestMutex.RLock()
	defer fake.describeAutomationExecutionsRequestMutex.RUnlock()
	argsForCall := fake.describeAutomationExecutionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsRequestReturns(result1 *request.Request, result2 *ssm.DescribeAutomationExecutionsOutput) {
	fake.describeAutomationExecutionsRequestMutex.Lock()
	defer fake.describeAutomationExecutionsRequestMutex.Unlock()
	fake.DescribeAutomationExecutionsRequestStub = nil
	fake.describeAutomationExecutionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeAutomationExecutionsOutput) {
	fake.describeAutomationExecutionsRequestMutex.Lock()
	defer fake.describeAutomationExecutionsRequestMutex.Unlock()
	fake.DescribeAutomationExecutionsRequestStub = nil
	if fake.describeAutomationExecutionsRequestReturnsOnCall == nil {
		fake.describeAutomationExecutionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeAutomationExecutionsOutput
		})
	}
	fake.describeAutomationExecutionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsWithContext(arg1 context.Context, arg2 *ssm.DescribeAutomationExecutionsInput, arg3 ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error) {
	fake.describeAutomationExecutionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAutomationExecutionsWithContextReturnsOnCall[len(fake.describeAutomationExecutionsWithContextArgsForCall)]
	fake.describeAutomationExecutionsWithContextArgsForCall = append(fake.describeAutomationExecutionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationExecutionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAutomationExecutionsWithContextStub
	fakeReturns := fake.describeAutomationExecutionsWithContextReturns
	fake.recordInvocation("DescribeAutomationExecutionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAutomationExecutionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsWithContextCallCount() int {
	fake.describeAutomationExecutionsWithContextMutex.RLock()
	defer fake.describeAutomationExecutionsWithContextMutex.RUnlock()
	return len(fake.describeAutomationExecutionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsWithContextCalls(stub func(context.Context, *ssm.DescribeAutomationExecutionsInput, ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error)) {
	fake.describeAutomationExecutionsWithContextMutex.Lock()
	defer fake.describeAutomationExecutionsWithContextMutex.Unlock()
	fake.DescribeAutomationExecutionsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAutomationExecutionsInput, []request.Option) {
	fake.describeAutomationExecutionsWithContextMutex.RLock()
	defer fake.describeAutomationExecutionsWithContextMutex.RUnlock()
	argsForCall := fake.describeAutomationExecutionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsWithContextReturns(result1 *ssm.DescribeAutomationExecutionsOutput, result2 error) {
	fake.describeAutomationExecutionsWithContextMutex.Lock()
	defer fake.describeAutomationExecutionsWithContextMutex.Unlock()
	fake.DescribeAutomationExecutionsWithContextStub = nil
	fake.describeAutomationExecutionsWithContextReturns = struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationExecutionsWithContextReturnsOnCall(i int, result1 *ssm.DescribeAutomationExecutionsOutput, result2 error) {
	fake.describeAutomationExecutionsWithContextMutex.Lock()
	defer fake.describeAutomationExecutionsWithContextMutex.Unlock()
	fake.DescribeAutomationExecutionsWithContextStub = nil
	if fake.describeAutomationExecutionsWithContextReturnsOnCall == nil {
		fake.describeAutomationExecutionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAutomationExecutionsOutput
			result2 error
		})
	}
	fake.describeAutomationExecutionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAutomationExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutions(arg1 *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	fake.describeAutomationStepExecutionsMutex.Lock()
	ret, specificReturn := fake.describeAutomationStepExecutionsReturnsOnCall[len(fake.describeAutomationStepExecutionsArgsForCall)]
	fake.describeAutomationStepExecutionsArgsForCall = append(fake.describeAutomationStepExecutionsArgsForCall, struct {
		arg1 *ssm.DescribeAutomationStepExecutionsInput
	}{arg1})
	stub := fake.DescribeAutomationStepExecutionsStub
	fakeReturns := fake.describeAutomationStepExecutionsReturns
	fake.recordInvocation("DescribeAutomationStepExecutions", []interface{}{arg1})
	fake.describeAutomationStepExecutionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsCallCount() int {
	fake.describeAutomationStepExecutionsMutex.RLock()
	defer fake.describeAutomationStepExecutionsMutex.RUnlock()
	return len(fake.describeAutomationStepExecutionsArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsCalls(stub func(*ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error)) {
	fake.describeAutomationStepExecutionsMutex.Lock()
	defer fake.describeAutomationStepExecutionsMutex.Unlock()
	fake.DescribeAutomationStepExecutionsStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsArgsForCall(i int) *ssm.DescribeAutomationStepExecutionsInput {
	fake.describeAutomationStepExecutionsMutex.RLock()
	defer fake.describeAutomationStepExecutionsMutex.RUnlock()
	argsForCall := fake.describeAutomationStepExecutionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsReturns(result1 *ssm.DescribeAutomationStepExecutionsOutput, result2 error) {
	fake.describeAutomationStepExecutionsMutex.Lock()
	defer fake.describeAutomationStepExecutionsMutex.Unlock()
	fake.DescribeAutomationStepExecutionsStub = nil
	fake.describeAutomationStepExecutionsReturns = struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsReturnsOnCall(i int, result1 *ssm.DescribeAutomationStepExecutionsOutput, result2 error) {
	fake.describeAutomationStepExecutionsMutex.Lock()
	defer fake.describeAutomationStepExecutionsMutex.Unlock()
	fake.DescribeAutomationStepExecutionsStub = nil
	if fake.describeAutomationStepExecutionsReturnsOnCall == nil {
		fake.describeAutomationStepExecutionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAutomationStepExecutionsOutput
			result2 error
		})
	}
	fake.describeAutomationStepExecutionsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPages(arg1 *ssm.DescribeAutomationStepExecutionsInput, arg2 func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool) error {
	fake.describeAutomationStepExecutionsPagesMutex.Lock()
	ret, specificReturn := fake.describeAutomationStepExecutionsPagesReturnsOnCall[len(fake.describeAutomationStepExecutionsPagesArgsForCall)]
	fake.describeAutomationStepExecutionsPagesArgsForCall = append(fake.describeAutomationStepExecutionsPagesArgsForCall, struct {
		arg1 *ssm.DescribeAutomationStepExecutionsInput
		arg2 func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAutomationStepExecutionsPagesStub
	fakeReturns := fake.describeAutomationStepExecutionsPagesReturns
	fake.recordInvocation("DescribeAutomationStepExecutionsPages", []interface{}{arg1, arg2})
	fake.describeAutomationStepExecutionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesCallCount() int {
	fake.describeAutomationStepExecutionsPagesMutex.RLock()
	defer fake.describeAutomationStepExecutionsPagesMutex.RUnlock()
	return len(fake.describeAutomationStepExecutionsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesCalls(stub func(*ssm.DescribeAutomationStepExecutionsInput, func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool) error) {
	fake.describeAutomationStepExecutionsPagesMutex.Lock()
	defer fake.describeAutomationStepExecutionsPagesMutex.Unlock()
	fake.DescribeAutomationStepExecutionsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesArgsForCall(i int) (*ssm.DescribeAutomationStepExecutionsInput, func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool) {
	fake.describeAutomationStepExecutionsPagesMutex.RLock()
	defer fake.describeAutomationStepExecutionsPagesMutex.RUnlock()
	argsForCall := fake.describeAutomationStepExecutionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesReturns(result1 error) {
	fake.describeAutomationStepExecutionsPagesMutex.Lock()
	defer fake.describeAutomationStepExecutionsPagesMutex.Unlock()
	fake.DescribeAutomationStepExecutionsPagesStub = nil
	fake.describeAutomationStepExecutionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAutomationStepExecutionsPagesMutex.Lock()
	defer fake.describeAutomationStepExecutionsPagesMutex.Unlock()
	fake.DescribeAutomationStepExecutionsPagesStub = nil
	if fake.describeAutomationStepExecutionsPagesReturnsOnCall == nil {
		fake.describeAutomationStepExecutionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAutomationStepExecutionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeAutomationStepExecutionsInput, arg3 func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAutomationStepExecutionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAutomationStepExecutionsPagesWithContextReturnsOnCall[len(fake.describeAutomationStepExecutionsPagesWithContextArgsForCall)]
	fake.describeAutomationStepExecutionsPagesWithContextArgsForCall = append(fake.describeAutomationStepExecutionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationStepExecutionsInput
		arg3 func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAutomationStepExecutionsPagesWithContextStub
	fakeReturns := fake.describeAutomationStepExecutionsPagesWithContextReturns
	fake.recordInvocation("DescribeAutomationStepExecutionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAutomationStepExecutionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesWithContextCallCount() int {
	fake.describeAutomationStepExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAutomationStepExecutionsPagesWithContextMutex.RUnlock()
	return len(fake.describeAutomationStepExecutionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeAutomationStepExecutionsInput, func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool, ...request.Option) error) {
	fake.describeAutomationStepExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAutomationStepExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAutomationStepExecutionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAutomationStepExecutionsInput, func(*ssm.DescribeAutomationStepExecutionsOutput, bool) bool, []request.Option) {
	fake.describeAutomationStepExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAutomationStepExecutionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAutomationStepExecutionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesWithContextReturns(result1 error) {
	fake.describeAutomationStepExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAutomationStepExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAutomationStepExecutionsPagesWithContextStub = nil
	fake.describeAutomationStepExecutionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAutomationStepExecutionsPagesWithContextMutex.Lock()
	defer fake.describeAutomationStepExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeAutomationStepExecutionsPagesWithContextStub = nil
	if fake.describeAutomationStepExecutionsPagesWithContextReturnsOnCall == nil {
		fake.describeAutomationStepExecutionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAutomationStepExecutionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsRequest(arg1 *ssm.DescribeAutomationStepExecutionsInput) (*request.Request, *ssm.DescribeAutomationStepExecutionsOutput) {
	fake.describeAutomationStepExecutionsRequestMutex.Lock()
	ret, specificReturn := fake.describeAutomationStepExecutionsRequestReturnsOnCall[len(fake.describeAutomationStepExecutionsRequestArgsForCall)]
	fake.describeAutomationStepExecutionsRequestArgsForCall = append(fake.describeAutomationStepExecutionsRequestArgsForCall, struct {
		arg1 *ssm.DescribeAutomationStepExecutionsInput
	}{arg1})
	stub := fake.DescribeAutomationStepExecutionsRequestStub
	fakeReturns := fake.describeAutomationStepExecutionsRequestReturns
	fake.recordInvocation("DescribeAutomationStepExecutionsRequest", []interface{}{arg1})
	fake.describeAutomationStepExecutionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsRequestCallCount() int {
	fake.describeAutomationStepExecutionsRequestMutex.RLock()
	defer fake.describeAutomationStepExecutionsRequestMutex.RUnlock()
	return len(fake.describeAutomationStepExecutionsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsRequestCalls(stub func(*ssm.DescribeAutomationStepExecutionsInput) (*request.Request, *ssm.DescribeAutomationStepExecutionsOutput)) {
	fake.describeAutomationStepExecutionsRequestMutex.Lock()
	defer fake.describeAutomationStepExecutionsRequestMutex.Unlock()
	fake.DescribeAutomationStepExecutionsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsRequestArgsForCall(i int) *ssm.DescribeAutomationStepExecutionsInput {
	fake.describeAutomationStepExecutionsRequestMutex.RLock()
	defer fake.describeAutomationStepExecutionsRequestMutex.RUnlock()
	argsForCall := fake.describeAutomationStepExecutionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsRequestReturns(result1 *request.Request, result2 *ssm.DescribeAutomationStepExecutionsOutput) {
	fake.describeAutomationStepExecutionsRequestMutex.Lock()
	defer fake.describeAutomationStepExecutionsRequestMutex.Unlock()
	fake.DescribeAutomationStepExecutionsRequestStub = nil
	fake.describeAutomationStepExecutionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationStepExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeAutomationStepExecutionsOutput) {
	fake.describeAutomationStepExecutionsRequestMutex.Lock()
	defer fake.describeAutomationStepExecutionsRequestMutex.Unlock()
	fake.DescribeAutomationStepExecutionsRequestStub = nil
	if fake.describeAutomationStepExecutionsRequestReturnsOnCall == nil {
		fake.describeAutomationStepExecutionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeAutomationStepExecutionsOutput
		})
	}
	fake.describeAutomationStepExecutionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeAutomationStepExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsWithContext(arg1 context.Context, arg2 *ssm.DescribeAutomationStepExecutionsInput, arg3 ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	fake.describeAutomationStepExecutionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAutomationStepExecutionsWithContextReturnsOnCall[len(fake.describeAutomationStepExecutionsWithContextArgsForCall)]
	fake.describeAutomationStepExecutionsWithContextArgsForCall = append(fake.describeAutomationStepExecutionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAutomationStepExecutionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAutomationStepExecutionsWithContextStub
	fakeReturns := fake.describeAutomationStepExecutionsWithContextReturns
	fake.recordInvocation("DescribeAutomationStepExecutionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAutomationStepExecutionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsWithContextCallCount() int {
	fake.describeAutomationStepExecutionsWithContextMutex.RLock()
	defer fake.describeAutomationStepExecutionsWithContextMutex.RUnlock()
	return len(fake.describeAutomationStepExecutionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsWithContextCalls(stub func(context.Context, *ssm.DescribeAutomationStepExecutionsInput, ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error)) {
	fake.describeAutomationStepExecutionsWithContextMutex.Lock()
	defer fake.describeAutomationStepExecutionsWithContextMutex.Unlock()
	fake.DescribeAutomationStepExecutionsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAutomationStepExecutionsInput, []request.Option) {
	fake.describeAutomationStepExecutionsWithContextMutex.RLock()
	defer fake.describeAutomationStepExecutionsWithContextMutex.RUnlock()
	argsForCall := fake.describeAutomationStepExecutionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsWithContextReturns(result1 *ssm.DescribeAutomationStepExecutionsOutput, result2 error) {
	fake.describeAutomationStepExecutionsWithContextMutex.Lock()
	defer fake.describeAutomationStepExecutionsWithContextMutex.Unlock()
	fake.DescribeAutomationStepExecutionsWithContextStub = nil
	fake.describeAutomationStepExecutionsWithContextReturns = struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAutomationStepExecutionsWithContextReturnsOnCall(i int, result1 *ssm.DescribeAutomationStepExecutionsOutput, result2 error) {
	fake.describeAutomationStepExecutionsWithContextMutex.Lock()
	defer fake.describeAutomationStepExecutionsWithContextMutex.Unlock()
	fake.DescribeAutomationStepExecutionsWithContextStub = nil
	if fake.describeAutomationStepExecutionsWithContextReturnsOnCall == nil {
		fake.describeAutomationStepExecutionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAutomationStepExecutionsOutput
			result2 error
		})
	}
	fake.describeAutomationStepExecutionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAutomationStepExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAvailablePatches(arg1 *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error) {
	fake.describeAvailablePatchesMutex.Lock()
	ret, specificReturn := fake.describeAvailablePatchesReturnsOnCall[len(fake.describeAvailablePatchesArgsForCall)]
	fake.describeAvailablePatchesArgsForCall = append(fake.describeAvailablePatchesArgsForCall, struct {
		arg1 *ssm.DescribeAvailablePatchesInput
	}{arg1})
	stub := fake.DescribeAvailablePatchesStub
	fakeReturns := fake.describeAvailablePatchesReturns
	fake.recordInvocation("DescribeAvailablePatches", []interface{}{arg1})
	fake.describeAvailablePatchesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAvailablePatchesCallCount() int {
	fake.describeAvailablePatchesMutex.RLock()
	defer fake.describeAvailablePatchesMutex.RUnlock()
	return len(fake.describeAvailablePatchesArgsForCall)
}

func (fake *FakeSSMClient) DescribeAvailablePatchesCalls(stub func(*ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error)) {
	fake.describeAvailablePatchesMutex.Lock()
	defer fake.describeAvailablePatchesMutex.Unlock()
	fake.DescribeAvailablePatchesStub = stub
}

func (fake *FakeSSMClient) DescribeAvailablePatchesArgsForCall(i int) *ssm.DescribeAvailablePatchesInput {
	fake.describeAvailablePatchesMutex.RLock()
	defer fake.describeAvailablePatchesMutex.RUnlock()
	argsForCall := fake.describeAvailablePatchesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAvailablePatchesReturns(result1 *ssm.DescribeAvailablePatchesOutput, result2 error) {
	fake.describeAvailablePatchesMutex.Lock()
	defer fake.describeAvailablePatchesMutex.Unlock()
	fake.DescribeAvailablePatchesStub = nil
	fake.describeAvailablePatchesReturns = struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesReturnsOnCall(i int, result1 *ssm.DescribeAvailablePatchesOutput, result2 error) {
	fake.describeAvailablePatchesMutex.Lock()
	defer fake.describeAvailablePatchesMutex.Unlock()
	fake.DescribeAvailablePatchesStub = nil
	if fake.describeAvailablePatchesReturnsOnCall == nil {
		fake.describeAvailablePatchesReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAvailablePatchesOutput
			result2 error
		})
	}
	fake.describeAvailablePatchesReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPages(arg1 *ssm.DescribeAvailablePatchesInput, arg2 func(*ssm.DescribeAvailablePatchesOutput, bool) bool) error {
	fake.describeAvailablePatchesPagesMutex.Lock()
	ret, specificReturn := fake.describeAvailablePatchesPagesReturnsOnCall[len(fake.describeAvailablePatchesPagesArgsForCall)]
	fake.describeAvailablePatchesPagesArgsForCall = append(fake.describeAvailablePatchesPagesArgsForCall, struct {
		arg1 *ssm.DescribeAvailablePatchesInput
		arg2 func(*ssm.DescribeAvailablePatchesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAvailablePatchesPagesStub
	fakeReturns := fake.describeAvailablePatchesPagesReturns
	fake.recordInvocation("DescribeAvailablePatchesPages", []interface{}{arg1, arg2})
	fake.describeAvailablePatchesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesCallCount() int {
	fake.describeAvailablePatchesPagesMutex.RLock()
	defer fake.describeAvailablePatchesPagesMutex.RUnlock()
	return len(fake.describeAvailablePatchesPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesCalls(stub func(*ssm.DescribeAvailablePatchesInput, func(*ssm.DescribeAvailablePatchesOutput, bool) bool) error) {
	fake.describeAvailablePatchesPagesMutex.Lock()
	defer fake.describeAvailablePatchesPagesMutex.Unlock()
	fake.DescribeAvailablePatchesPagesStub = stub
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesArgsForCall(i int) (*ssm.DescribeAvailablePatchesInput, func(*ssm.DescribeAvailablePatchesOutput, bool) bool) {
	fake.describeAvailablePatchesPagesMutex.RLock()
	defer fake.describeAvailablePatchesPagesMutex.RUnlock()
	argsForCall := fake.describeAvailablePatchesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesReturns(result1 error) {
	fake.describeAvailablePatchesPagesMutex.Lock()
	defer fake.describeAvailablePatchesPagesMutex.Unlock()
	fake.DescribeAvailablePatchesPagesStub = nil
	fake.describeAvailablePatchesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesReturnsOnCall(i int, result1 error) {
	fake.describeAvailablePatchesPagesMutex.Lock()
	defer fake.describeAvailablePatchesPagesMutex.Unlock()
	fake.DescribeAvailablePatchesPagesStub = nil
	if fake.describeAvailablePatchesPagesReturnsOnCall == nil {
		fake.describeAvailablePatchesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAvailablePatchesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeAvailablePatchesInput, arg3 func(*ssm.DescribeAvailablePatchesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAvailablePatchesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAvailablePatchesPagesWithContextReturnsOnCall[len(fake.describeAvailablePatchesPagesWithContextArgsForCall)]
	fake.describeAvailablePatchesPagesWithContextArgsForCall = append(fake.describeAvailablePatchesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAvailablePatchesInput
		arg3 func(*ssm.DescribeAvailablePatchesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAvailablePatchesPagesWithContextStub
	fakeReturns := fake.describeAvailablePatchesPagesWithContextReturns
	fake.recordInvocation("DescribeAvailablePatchesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAvailablePatchesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesWithContextCallCount() int {
	fake.describeAvailablePatchesPagesWithContextMutex.RLock()
	defer fake.describeAvailablePatchesPagesWithContextMutex.RUnlock()
	return len(fake.describeAvailablePatchesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesWithContextCalls(stub func(context.Context, *ssm.DescribeAvailablePatchesInput, func(*ssm.DescribeAvailablePatchesOutput, bool) bool, ...request.Option) error) {
	fake.describeAvailablePatchesPagesWithContextMutex.Lock()
	defer fake.describeAvailablePatchesPagesWithContextMutex.Unlock()
	fake.DescribeAvailablePatchesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAvailablePatchesInput, func(*ssm.DescribeAvailablePatchesOutput, bool) bool, []request.Option) {
	fake.describeAvailablePatchesPagesWithContextMutex.RLock()
	defer fake.describeAvailablePatchesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAvailablePatchesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesWithContextReturns(result1 error) {
	fake.describeAvailablePatchesPagesWithContextMutex.Lock()
	defer fake.describeAvailablePatchesPagesWithContextMutex.Unlock()
	fake.DescribeAvailablePatchesPagesWithContextStub = nil
	fake.describeAvailablePatchesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAvailablePatchesPagesWithContextMutex.Lock()
	defer fake.describeAvailablePatchesPagesWithContextMutex.Unlock()
	fake.DescribeAvailablePatchesPagesWithContextStub = nil
	if fake.describeAvailablePatchesPagesWithContextReturnsOnCall == nil {
		fake.describeAvailablePatchesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAvailablePatchesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesRequest(arg1 *ssm.DescribeAvailablePatchesInput) (*request.Request, *ssm.DescribeAvailablePatchesOutput) {
	fake.describeAvailablePatchesRequestMutex.Lock()
	ret, specificReturn := fake.describeAvailablePatchesRequestReturnsOnCall[len(fake.describeAvailablePatchesRequestArgsForCall)]
	fake.describeAvailablePatchesRequestArgsForCall = append(fake.describeAvailablePatchesRequestArgsForCall, struct {
		arg1 *ssm.DescribeAvailablePatchesInput
	}{arg1})
	stub := fake.DescribeAvailablePatchesRequestStub
	fakeReturns := fake.describeAvailablePatchesRequestReturns
	fake.recordInvocation("DescribeAvailablePatchesRequest", []interface{}{arg1})
	fake.describeAvailablePatchesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAvailablePatchesRequestCallCount() int {
	fake.describeAvailablePatchesRequestMutex.RLock()
	defer fake.describeAvailablePatchesRequestMutex.RUnlock()
	return len(fake.describeAvailablePatchesRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeAvailablePatchesRequestCalls(stub func(*ssm.DescribeAvailablePatchesInput) (*request.Request, *ssm.DescribeAvailablePatchesOutput)) {
	fake.describeAvailablePatchesRequestMutex.Lock()
	defer fake.describeAvailablePatchesRequestMutex.Unlock()
	fake.DescribeAvailablePatchesRequestStub = stub
}

func (fake *FakeSSMClient) DescribeAvailablePatchesRequestArgsForCall(i int) *ssm.DescribeAvailablePatchesInput {
	fake.describeAvailablePatchesRequestMutex.RLock()
	defer fake.describeAvailablePatchesRequestMutex.RUnlock()
	argsForCall := fake.describeAvailablePatchesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeAvailablePatchesRequestReturns(result1 *request.Request, result2 *ssm.DescribeAvailablePatchesOutput) {
	fake.describeAvailablePatchesRequestMutex.Lock()
	defer fake.describeAvailablePatchesRequestMutex.Unlock()
	fake.DescribeAvailablePatchesRequestStub = nil
	fake.describeAvailablePatchesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeAvailablePatchesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeAvailablePatchesOutput) {
	fake.describeAvailablePatchesRequestMutex.Lock()
	defer fake.describeAvailablePatchesRequestMutex.Unlock()
	fake.DescribeAvailablePatchesRequestStub = nil
	if fake.describeAvailablePatchesRequestReturnsOnCall == nil {
		fake.describeAvailablePatchesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeAvailablePatchesOutput
		})
	}
	fake.describeAvailablePatchesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeAvailablePatchesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesWithContext(arg1 context.Context, arg2 *ssm.DescribeAvailablePatchesInput, arg3 ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error) {
	fake.describeAvailablePatchesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAvailablePatchesWithContextReturnsOnCall[len(fake.describeAvailablePatchesWithContextArgsForCall)]
	fake.describeAvailablePatchesWithContextArgsForCall = append(fake.describeAvailablePatchesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeAvailablePatchesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAvailablePatchesWithContextStub
	fakeReturns := fake.describeAvailablePatchesWithContextReturns
	fake.recordInvocation("DescribeAvailablePatchesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAvailablePatchesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeAvailablePatchesWithContextCallCount() int {
	fake.describeAvailablePatchesWithContextMutex.RLock()
	defer fake.describeAvailablePatchesWithContextMutex.RUnlock()
	return len(fake.describeAvailablePatchesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeAvailablePatchesWithContextCalls(stub func(context.Context, *ssm.DescribeAvailablePatchesInput, ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error)) {
	fake.describeAvailablePatchesWithContextMutex.Lock()
	defer fake.describeAvailablePatchesWithContextMutex.Unlock()
	fake.DescribeAvailablePatchesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeAvailablePatchesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeAvailablePatchesInput, []request.Option) {
	fake.describeAvailablePatchesWithContextMutex.RLock()
	defer fake.describeAvailablePatchesWithContextMutex.RUnlock()
	argsForCall := fake.describeAvailablePatchesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeAvailablePatchesWithContextReturns(result1 *ssm.DescribeAvailablePatchesOutput, result2 error) {
	fake.describeAvailablePatchesWithContextMutex.Lock()
	defer fake.describeAvailablePatchesWithContextMutex.Unlock()
	fake.DescribeAvailablePatchesWithContextStub = nil
	fake.describeAvailablePatchesWithContextReturns = struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeAvailablePatchesWithContextReturnsOnCall(i int, result1 *ssm.DescribeAvailablePatchesOutput, result2 error) {
	fake.describeAvailablePatchesWithContextMutex.Lock()
	defer fake.describeAvailablePatchesWithContextMutex.Unlock()
	fake.DescribeAvailablePatchesWithContextStub = nil
	if fake.describeAvailablePatchesWithContextReturnsOnCall == nil {
		fake.describeAvailablePatchesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeAvailablePatchesOutput
			result2 error
		})
	}
	fake.describeAvailablePatchesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeAvailablePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocument(arg1 *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error) {
	fake.describeDocumentMutex.Lock()
	ret, specificReturn := fake.describeDocumentReturnsOnCall[len(fake.describeDocumentArgsForCall)]
	fake.describeDocumentArgsForCall = append(fake.describeDocumentArgsForCall, struct {
		arg1 *ssm.DescribeDocumentInput
	}{arg1})
	stub := fake.DescribeDocumentStub
	fakeReturns := fake.describeDocumentReturns
	fake.recordInvocation("DescribeDocument", []interface{}{arg1})
	fake.describeDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeDocumentCallCount() int {
	fake.describeDocumentMutex.RLock()
	defer fake.describeDocumentMutex.RUnlock()
	return len(fake.describeDocumentArgsForCall)
}

func (fake *FakeSSMClient) DescribeDocumentCalls(stub func(*ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error)) {
	fake.describeDocumentMutex.Lock()
	defer fake.describeDocumentMutex.Unlock()
	fake.DescribeDocumentStub = stub
}

func (fake *FakeSSMClient) DescribeDocumentArgsForCall(i int) *ssm.DescribeDocumentInput {
	fake.describeDocumentMutex.RLock()
	defer fake.describeDocumentMutex.RUnlock()
	argsForCall := fake.describeDocumentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeDocumentReturns(result1 *ssm.DescribeDocumentOutput, result2 error) {
	fake.describeDocumentMutex.Lock()
	defer fake.describeDocumentMutex.Unlock()
	fake.DescribeDocumentStub = nil
	fake.describeDocumentReturns = struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentReturnsOnCall(i int, result1 *ssm.DescribeDocumentOutput, result2 error) {
	fake.describeDocumentMutex.Lock()
	defer fake.describeDocumentMutex.Unlock()
	fake.DescribeDocumentStub = nil
	if fake.describeDocumentReturnsOnCall == nil {
		fake.describeDocumentReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeDocumentOutput
			result2 error
		})
	}
	fake.describeDocumentReturnsOnCall[i] = struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentPermission(arg1 *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error) {
	fake.describeDocumentPermissionMutex.Lock()
	ret, specificReturn := fake.describeDocumentPermissionReturnsOnCall[len(fake.describeDocumentPermissionArgsForCall)]
	fake.describeDocumentPermissionArgsForCall = append(fake.describeDocumentPermissionArgsForCall, struct {
		arg1 *ssm.DescribeDocumentPermissionInput
	}{arg1})
	stub := fake.DescribeDocumentPermissionStub
	fakeReturns := fake.describeDocumentPermissionReturns
	fake.recordInvocation("DescribeDocumentPermission", []interface{}{arg1})
	fake.describeDocumentPermissionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeDocumentPermissionCallCount() int {
	fake.describeDocumentPermissionMutex.RLock()
	defer fake.describeDocumentPermissionMutex.RUnlock()
	return len(fake.describeDocumentPermissionArgsForCall)
}

func (fake *FakeSSMClient) DescribeDocumentPermissionCalls(stub func(*ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error)) {
	fake.describeDocumentPermissionMutex.Lock()
	defer fake.describeDocumentPermissionMutex.Unlock()
	fake.DescribeDocumentPermissionStub = stub
}

func (fake *FakeSSMClient) DescribeDocumentPermissionArgsForCall(i int) *ssm.DescribeDocumentPermissionInput {
	fake.describeDocumentPermissionMutex.RLock()
	defer fake.describeDocumentPermissionMutex.RUnlock()
	argsForCall := fake.describeDocumentPermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeDocumentPermissionReturns(result1 *ssm.DescribeDocumentPermissionOutput, result2 error) {
	fake.describeDocumentPermissionMutex.Lock()
	defer fake.describeDocumentPermissionMutex.Unlock()
	fake.DescribeDocumentPermissionStub = nil
	fake.describeDocumentPermissionReturns = struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentPermissionReturnsOnCall(i int, result1 *ssm.DescribeDocumentPermissionOutput, result2 error) {
	fake.describeDocumentPermissionMutex.Lock()
	defer fake.describeDocumentPermissionMutex.Unlock()
	fake.DescribeDocumentPermissionStub = nil
	if fake.describeDocumentPermissionReturnsOnCall == nil {
		fake.describeDocumentPermissionReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeDocumentPermissionOutput
			result2 error
		})
	}
	fake.describeDocumentPermissionReturnsOnCall[i] = struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentPermissionRequest(arg1 *ssm.DescribeDocumentPermissionInput) (*request.Request, *ssm.DescribeDocumentPermissionOutput) {
	fake.describeDocumentPermissionRequestMutex.Lock()
	ret, specificReturn := fake.describeDocumentPermissionRequestReturnsOnCall[len(fake.describeDocumentPermissionRequestArgsForCall)]
	fake.describeDocumentPermissionRequestArgsForCall = append(fake.describeDocumentPermissionRequestArgsForCall, struct {
		arg1 *ssm.DescribeDocumentPermissionInput
	}{arg1})
	stub := fake.DescribeDocumentPermissionRequestStub
	fakeReturns := fake.describeDocumentPermissionRequestReturns
	fake.recordInvocation("DescribeDocumentPermissionRequest", []interface{}{arg1})
	fake.describeDocumentPermissionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeDocumentPermissionRequestCallCount() int {
	fake.describeDocumentPermissionRequestMutex.RLock()
	defer fake.describeDocumentPermissionRequestMutex.RUnlock()
	return len(fake.describeDocumentPermissionRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeDocumentPermissionRequestCalls(stub func(*ssm.DescribeDocumentPermissionInput) (*request.Request, *ssm.DescribeDocumentPermissionOutput)) {
	fake.describeDocumentPermissionRequestMutex.Lock()
	defer fake.describeDocumentPermissionRequestMutex.Unlock()
	fake.DescribeDocumentPermissionRequestStub = stub
}

func (fake *FakeSSMClient) DescribeDocumentPermissionRequestArgsForCall(i int) *ssm.DescribeDocumentPermissionInput {
	fake.describeDocumentPermissionRequestMutex.RLock()
	defer fake.describeDocumentPermissionRequestMutex.RUnlock()
	argsForCall := fake.describeDocumentPermissionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeDocumentPermissionRequestReturns(result1 *request.Request, result2 *ssm.DescribeDocumentPermissionOutput) {
	fake.describeDocumentPermissionRequestMutex.Lock()
	defer fake.describeDocumentPermissionRequestMutex.Unlock()
	fake.DescribeDocumentPermissionRequestStub = nil
	fake.describeDocumentPermissionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentPermissionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentPermissionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeDocumentPermissionOutput) {
	fake.describeDocumentPermissionRequestMutex.Lock()
	defer fake.describeDocumentPermissionRequestMutex.Unlock()
	fake.DescribeDocumentPermissionRequestStub = nil
	if fake.describeDocumentPermissionRequestReturnsOnCall == nil {
		fake.describeDocumentPermissionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeDocumentPermissionOutput
		})
	}
	fake.describeDocumentPermissionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentPermissionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentPermissionWithContext(arg1 context.Context, arg2 *ssm.DescribeDocumentPermissionInput, arg3 ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error) {
	fake.describeDocumentPermissionWithContextMutex.Lock()
	ret, specificReturn := fake.describeDocumentPermissionWithContextReturnsOnCall[len(fake.describeDocumentPermissionWithContextArgsForCall)]
	fake.describeDocumentPermissionWithContextArgsForCall = append(fake.describeDocumentPermissionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeDocumentPermissionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDocumentPermissionWithContextStub
	fakeReturns := fake.describeDocumentPermissionWithContextReturns
	fake.recordInvocation("DescribeDocumentPermissionWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDocumentPermissionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeDocumentPermissionWithContextCallCount() int {
	fake.describeDocumentPermissionWithContextMutex.RLock()
	defer fake.describeDocumentPermissionWithContextMutex.RUnlock()
	return len(fake.describeDocumentPermissionWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeDocumentPermissionWithContextCalls(stub func(context.Context, *ssm.DescribeDocumentPermissionInput, ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error)) {
	fake.describeDocumentPermissionWithContextMutex.Lock()
	defer fake.describeDocumentPermissionWithContextMutex.Unlock()
	fake.DescribeDocumentPermissionWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeDocumentPermissionWithContextArgsForCall(i int) (context.Context, *ssm.DescribeDocumentPermissionInput, []request.Option) {
	fake.describeDocumentPermissionWithContextMutex.RLock()
	defer fake.describeDocumentPermissionWithContextMutex.RUnlock()
	argsForCall := fake.describeDocumentPermissionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeDocumentPermissionWithContextReturns(result1 *ssm.DescribeDocumentPermissionOutput, result2 error) {
	fake.describeDocumentPermissionWithContextMutex.Lock()
	defer fake.describeDocumentPermissionWithContextMutex.Unlock()
	fake.DescribeDocumentPermissionWithContextStub = nil
	fake.describeDocumentPermissionWithContextReturns = struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentPermissionWithContextReturnsOnCall(i int, result1 *ssm.DescribeDocumentPermissionOutput, result2 error) {
	fake.describeDocumentPermissionWithContextMutex.Lock()
	defer fake.describeDocumentPermissionWithContextMutex.Unlock()
	fake.DescribeDocumentPermissionWithContextStub = nil
	if fake.describeDocumentPermissionWithContextReturnsOnCall == nil {
		fake.describeDocumentPermissionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeDocumentPermissionOutput
			result2 error
		})
	}
	fake.describeDocumentPermissionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentRequest(arg1 *ssm.DescribeDocumentInput) (*request.Request, *ssm.DescribeDocumentOutput) {
	fake.describeDocumentRequestMutex.Lock()
	ret, specificReturn := fake.describeDocumentRequestReturnsOnCall[len(fake.describeDocumentRequestArgsForCall)]
	fake.describeDocumentRequestArgsForCall = append(fake.describeDocumentRequestArgsForCall, struct {
		arg1 *ssm.DescribeDocumentInput
	}{arg1})
	stub := fake.DescribeDocumentRequestStub
	fakeReturns := fake.describeDocumentRequestReturns
	fake.recordInvocation("DescribeDocumentRequest", []interface{}{arg1})
	fake.describeDocumentRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeDocumentRequestCallCount() int {
	fake.describeDocumentRequestMutex.RLock()
	defer fake.describeDocumentRequestMutex.RUnlock()
	return len(fake.describeDocumentRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeDocumentRequestCalls(stub func(*ssm.DescribeDocumentInput) (*request.Request, *ssm.DescribeDocumentOutput)) {
	fake.describeDocumentRequestMutex.Lock()
	defer fake.describeDocumentRequestMutex.Unlock()
	fake.DescribeDocumentRequestStub = stub
}

func (fake *FakeSSMClient) DescribeDocumentRequestArgsForCall(i int) *ssm.DescribeDocumentInput {
	fake.describeDocumentRequestMutex.RLock()
	defer fake.describeDocumentRequestMutex.RUnlock()
	argsForCall := fake.describeDocumentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeDocumentRequestReturns(result1 *request.Request, result2 *ssm.DescribeDocumentOutput) {
	fake.describeDocumentRequestMutex.Lock()
	defer fake.describeDocumentRequestMutex.Unlock()
	fake.DescribeDocumentRequestStub = nil
	fake.describeDocumentRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeDocumentOutput) {
	fake.describeDocumentRequestMutex.Lock()
	defer fake.describeDocumentRequestMutex.Unlock()
	fake.DescribeDocumentRequestStub = nil
	if fake.describeDocumentRequestReturnsOnCall == nil {
		fake.describeDocumentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeDocumentOutput
		})
	}
	fake.describeDocumentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentWithContext(arg1 context.Context, arg2 *ssm.DescribeDocumentInput, arg3 ...request.Option) (*ssm.DescribeDocumentOutput, error) {
	fake.describeDocumentWithContextMutex.Lock()
	ret, specificReturn := fake.describeDocumentWithContextReturnsOnCall[len(fake.describeDocumentWithContextArgsForCall)]
	fake.describeDocumentWithContextArgsForCall = append(fake.describeDocumentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeDocumentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeDocumentWithContextStub
	fakeReturns := fake.describeDocumentWithContextReturns
	fake.recordInvocation("DescribeDocumentWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDocumentWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeDocumentWithContextCallCount() int {
	fake.describeDocumentWithContextMutex.RLock()
	defer fake.describeDocumentWithContextMutex.RUnlock()
	return len(fake.describeDocumentWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeDocumentWithContextCalls(stub func(context.Context, *ssm.DescribeDocumentInput, ...request.Option) (*ssm.DescribeDocumentOutput, error)) {
	fake.describeDocumentWithContextMutex.Lock()
	defer fake.describeDocumentWithContextMutex.Unlock()
	fake.DescribeDocumentWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeDocumentWithContextArgsForCall(i int) (context.Context, *ssm.DescribeDocumentInput, []request.Option) {
	fake.describeDocumentWithContextMutex.RLock()
	defer fake.describeDocumentWithContextMutex.RUnlock()
	argsForCall := fake.describeDocumentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeDocumentWithContextReturns(result1 *ssm.DescribeDocumentOutput, result2 error) {
	fake.describeDocumentWithContextMutex.Lock()
	defer fake.describeDocumentWithContextMutex.Unlock()
	fake.DescribeDocumentWithContextStub = nil
	fake.describeDocumentWithContextReturns = struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeDocumentWithContextReturnsOnCall(i int, result1 *ssm.DescribeDocumentOutput, result2 error) {
	fake.describeDocumentWithContextMutex.Lock()
	defer fake.describeDocumentWithContextMutex.Unlock()
	fake.DescribeDocumentWithContextStub = nil
	if fake.describeDocumentWithContextReturnsOnCall == nil {
		fake.describeDocumentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeDocumentOutput
			result2 error
		})
	}
	fake.describeDocumentWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociations(arg1 *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	fake.describeEffectiveInstanceAssociationsMutex.Lock()
	ret, specificReturn := fake.describeEffectiveInstanceAssociationsReturnsOnCall[len(fake.describeEffectiveInstanceAssociationsArgsForCall)]
	fake.describeEffectiveInstanceAssociationsArgsForCall = append(fake.describeEffectiveInstanceAssociationsArgsForCall, struct {
		arg1 *ssm.DescribeEffectiveInstanceAssociationsInput
	}{arg1})
	stub := fake.DescribeEffectiveInstanceAssociationsStub
	fakeReturns := fake.describeEffectiveInstanceAssociationsReturns
	fake.recordInvocation("DescribeEffectiveInstanceAssociations", []interface{}{arg1})
	fake.describeEffectiveInstanceAssociationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsCallCount() int {
	fake.describeEffectiveInstanceAssociationsMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsMutex.RUnlock()
	return len(fake.describeEffectiveInstanceAssociationsArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsCalls(stub func(*ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)) {
	fake.describeEffectiveInstanceAssociationsMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsStub = stub
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsArgsForCall(i int) *ssm.DescribeEffectiveInstanceAssociationsInput {
	fake.describeEffectiveInstanceAssociationsMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsMutex.RUnlock()
	argsForCall := fake.describeEffectiveInstanceAssociationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsReturns(result1 *ssm.DescribeEffectiveInstanceAssociationsOutput, result2 error) {
	fake.describeEffectiveInstanceAssociationsMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsStub = nil
	fake.describeEffectiveInstanceAssociationsReturns = struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsReturnsOnCall(i int, result1 *ssm.DescribeEffectiveInstanceAssociationsOutput, result2 error) {
	fake.describeEffectiveInstanceAssociationsMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsStub = nil
	if fake.describeEffectiveInstanceAssociationsReturnsOnCall == nil {
		fake.describeEffectiveInstanceAssociationsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
			result2 error
		})
	}
	fake.describeEffectiveInstanceAssociationsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPages(arg1 *ssm.DescribeEffectiveInstanceAssociationsInput, arg2 func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool) error {
	fake.describeEffectiveInstanceAssociationsPagesMutex.Lock()
	ret, specificReturn := fake.describeEffectiveInstanceAssociationsPagesReturnsOnCall[len(fake.describeEffectiveInstanceAssociationsPagesArgsForCall)]
	fake.describeEffectiveInstanceAssociationsPagesArgsForCall = append(fake.describeEffectiveInstanceAssociationsPagesArgsForCall, struct {
		arg1 *ssm.DescribeEffectiveInstanceAssociationsInput
		arg2 func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEffectiveInstanceAssociationsPagesStub
	fakeReturns := fake.describeEffectiveInstanceAssociationsPagesReturns
	fake.recordInvocation("DescribeEffectiveInstanceAssociationsPages", []interface{}{arg1, arg2})
	fake.describeEffectiveInstanceAssociationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesCallCount() int {
	fake.describeEffectiveInstanceAssociationsPagesMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsPagesMutex.RUnlock()
	return len(fake.describeEffectiveInstanceAssociationsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesCalls(stub func(*ssm.DescribeEffectiveInstanceAssociationsInput, func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool) error) {
	fake.describeEffectiveInstanceAssociationsPagesMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsPagesMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesArgsForCall(i int) (*ssm.DescribeEffectiveInstanceAssociationsInput, func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool) {
	fake.describeEffectiveInstanceAssociationsPagesMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsPagesMutex.RUnlock()
	argsForCall := fake.describeEffectiveInstanceAssociationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesReturns(result1 error) {
	fake.describeEffectiveInstanceAssociationsPagesMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsPagesMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsPagesStub = nil
	fake.describeEffectiveInstanceAssociationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesReturnsOnCall(i int, result1 error) {
	fake.describeEffectiveInstanceAssociationsPagesMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsPagesMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsPagesStub = nil
	if fake.describeEffectiveInstanceAssociationsPagesReturnsOnCall == nil {
		fake.describeEffectiveInstanceAssociationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEffectiveInstanceAssociationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeEffectiveInstanceAssociationsInput, arg3 func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEffectiveInstanceAssociationsPagesWithContextReturnsOnCall[len(fake.describeEffectiveInstanceAssociationsPagesWithContextArgsForCall)]
	fake.describeEffectiveInstanceAssociationsPagesWithContextArgsForCall = append(fake.describeEffectiveInstanceAssociationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectiveInstanceAssociationsInput
		arg3 func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEffectiveInstanceAssociationsPagesWithContextStub
	fakeReturns := fake.describeEffectiveInstanceAssociationsPagesWithContextReturns
	fake.recordInvocation("DescribeEffectiveInstanceAssociationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesWithContextCallCount() int {
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.RUnlock()
	return len(fake.describeEffectiveInstanceAssociationsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeEffectiveInstanceAssociationsInput, func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool, ...request.Option) error) {
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeEffectiveInstanceAssociationsInput, func(*ssm.DescribeEffectiveInstanceAssociationsOutput, bool) bool, []request.Option) {
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEffectiveInstanceAssociationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesWithContextReturns(result1 error) {
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsPagesWithContextStub = nil
	fake.describeEffectiveInstanceAssociationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsPagesWithContextStub = nil
	if fake.describeEffectiveInstanceAssociationsPagesWithContextReturnsOnCall == nil {
		fake.describeEffectiveInstanceAssociationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEffectiveInstanceAssociationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsRequest(arg1 *ssm.DescribeEffectiveInstanceAssociationsInput) (*request.Request, *ssm.DescribeEffectiveInstanceAssociationsOutput) {
	fake.describeEffectiveInstanceAssociationsRequestMutex.Lock()
	ret, specificReturn := fake.describeEffectiveInstanceAssociationsRequestReturnsOnCall[len(fake.describeEffectiveInstanceAssociationsRequestArgsForCall)]
	fake.describeEffectiveInstanceAssociationsRequestArgsForCall = append(fake.describeEffectiveInstanceAssociationsRequestArgsForCall, struct {
		arg1 *ssm.DescribeEffectiveInstanceAssociationsInput
	}{arg1})
	stub := fake.DescribeEffectiveInstanceAssociationsRequestStub
	fakeReturns := fake.describeEffectiveInstanceAssociationsRequestReturns
	fake.recordInvocation("DescribeEffectiveInstanceAssociationsRequest", []interface{}{arg1})
	fake.describeEffectiveInstanceAssociationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsRequestCallCount() int {
	fake.describeEffectiveInstanceAssociationsRequestMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsRequestMutex.RUnlock()
	return len(fake.describeEffectiveInstanceAssociationsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsRequestCalls(stub func(*ssm.DescribeEffectiveInstanceAssociationsInput) (*request.Request, *ssm.DescribeEffectiveInstanceAssociationsOutput)) {
	fake.describeEffectiveInstanceAssociationsRequestMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsRequestMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsRequestArgsForCall(i int) *ssm.DescribeEffectiveInstanceAssociationsInput {
	fake.describeEffectiveInstanceAssociationsRequestMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsRequestMutex.RUnlock()
	argsForCall := fake.describeEffectiveInstanceAssociationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsRequestReturns(result1 *request.Request, result2 *ssm.DescribeEffectiveInstanceAssociationsOutput) {
	fake.describeEffectiveInstanceAssociationsRequestMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsRequestMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsRequestStub = nil
	fake.describeEffectiveInstanceAssociationsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectiveInstanceAssociationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeEffectiveInstanceAssociationsOutput) {
	fake.describeEffectiveInstanceAssociationsRequestMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsRequestMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsRequestStub = nil
	if fake.describeEffectiveInstanceAssociationsRequestReturnsOnCall == nil {
		fake.describeEffectiveInstanceAssociationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeEffectiveInstanceAssociationsOutput
		})
	}
	fake.describeEffectiveInstanceAssociationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectiveInstanceAssociationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsWithContext(arg1 context.Context, arg2 *ssm.DescribeEffectiveInstanceAssociationsInput, arg3 ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	fake.describeEffectiveInstanceAssociationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEffectiveInstanceAssociationsWithContextReturnsOnCall[len(fake.describeEffectiveInstanceAssociationsWithContextArgsForCall)]
	fake.describeEffectiveInstanceAssociationsWithContextArgsForCall = append(fake.describeEffectiveInstanceAssociationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectiveInstanceAssociationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEffectiveInstanceAssociationsWithContextStub
	fakeReturns := fake.describeEffectiveInstanceAssociationsWithContextReturns
	fake.recordInvocation("DescribeEffectiveInstanceAssociationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEffectiveInstanceAssociationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsWithContextCallCount() int {
	fake.describeEffectiveInstanceAssociationsWithContextMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsWithContextMutex.RUnlock()
	return len(fake.describeEffectiveInstanceAssociationsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsWithContextCalls(stub func(context.Context, *ssm.DescribeEffectiveInstanceAssociationsInput, ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error)) {
	fake.describeEffectiveInstanceAssociationsWithContextMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsWithContextMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeEffectiveInstanceAssociationsInput, []request.Option) {
	fake.describeEffectiveInstanceAssociationsWithContextMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsWithContextMutex.RUnlock()
	argsForCall := fake.describeEffectiveInstanceAssociationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsWithContextReturns(result1 *ssm.DescribeEffectiveInstanceAssociationsOutput, result2 error) {
	fake.describeEffectiveInstanceAssociationsWithContextMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsWithContextMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsWithContextStub = nil
	fake.describeEffectiveInstanceAssociationsWithContextReturns = struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectiveInstanceAssociationsWithContextReturnsOnCall(i int, result1 *ssm.DescribeEffectiveInstanceAssociationsOutput, result2 error) {
	fake.describeEffectiveInstanceAssociationsWithContextMutex.Lock()
	defer fake.describeEffectiveInstanceAssociationsWithContextMutex.Unlock()
	fake.DescribeEffectiveInstanceAssociationsWithContextStub = nil
	if fake.describeEffectiveInstanceAssociationsWithContextReturnsOnCall == nil {
		fake.describeEffectiveInstanceAssociationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
			result2 error
		})
	}
	fake.describeEffectiveInstanceAssociationsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeEffectiveInstanceAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaseline(arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	fake.describeEffectivePatchesForPatchBaselineMutex.Lock()
	ret, specificReturn := fake.describeEffectivePatchesForPatchBaselineReturnsOnCall[len(fake.describeEffectivePatchesForPatchBaselineArgsForCall)]
	fake.describeEffectivePatchesForPatchBaselineArgsForCall = append(fake.describeEffectivePatchesForPatchBaselineArgsForCall, struct {
		arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput
	}{arg1})
	stub := fake.DescribeEffectivePatchesForPatchBaselineStub
	fakeReturns := fake.describeEffectivePatchesForPatchBaselineReturns
	fake.recordInvocation("DescribeEffectivePatchesForPatchBaseline", []interface{}{arg1})
	fake.describeEffectivePatchesForPatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineCallCount() int {
	fake.describeEffectivePatchesForPatchBaselineMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineMutex.RUnlock()
	return len(fake.describeEffectivePatchesForPatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineCalls(stub func(*ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)) {
	fake.describeEffectivePatchesForPatchBaselineMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineStub = stub
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineArgsForCall(i int) *ssm.DescribeEffectivePatchesForPatchBaselineInput {
	fake.describeEffectivePatchesForPatchBaselineMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineMutex.RUnlock()
	argsForCall := fake.describeEffectivePatchesForPatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineReturns(result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput, result2 error) {
	fake.describeEffectivePatchesForPatchBaselineMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineStub = nil
	fake.describeEffectivePatchesForPatchBaselineReturns = struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineReturnsOnCall(i int, result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput, result2 error) {
	fake.describeEffectivePatchesForPatchBaselineMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineStub = nil
	if fake.describeEffectivePatchesForPatchBaselineReturnsOnCall == nil {
		fake.describeEffectivePatchesForPatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
			result2 error
		})
	}
	fake.describeEffectivePatchesForPatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePages(arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput, arg2 func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool) error {
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.Lock()
	ret, specificReturn := fake.describeEffectivePatchesForPatchBaselinePagesReturnsOnCall[len(fake.describeEffectivePatchesForPatchBaselinePagesArgsForCall)]
	fake.describeEffectivePatchesForPatchBaselinePagesArgsForCall = append(fake.describeEffectivePatchesForPatchBaselinePagesArgsForCall, struct {
		arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput
		arg2 func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEffectivePatchesForPatchBaselinePagesStub
	fakeReturns := fake.describeEffectivePatchesForPatchBaselinePagesReturns
	fake.recordInvocation("DescribeEffectivePatchesForPatchBaselinePages", []interface{}{arg1, arg2})
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesCallCount() int {
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesMutex.RUnlock()
	return len(fake.describeEffectivePatchesForPatchBaselinePagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesCalls(stub func(*ssm.DescribeEffectivePatchesForPatchBaselineInput, func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool) error) {
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselinePagesStub = stub
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesArgsForCall(i int) (*ssm.DescribeEffectivePatchesForPatchBaselineInput, func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool) {
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesMutex.RUnlock()
	argsForCall := fake.describeEffectivePatchesForPatchBaselinePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesReturns(result1 error) {
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselinePagesStub = nil
	fake.describeEffectivePatchesForPatchBaselinePagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesReturnsOnCall(i int, result1 error) {
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselinePagesStub = nil
	if fake.describeEffectivePatchesForPatchBaselinePagesReturnsOnCall == nil {
		fake.describeEffectivePatchesForPatchBaselinePagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEffectivePatchesForPatchBaselinePagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesWithContext(arg1 context.Context, arg2 *ssm.DescribeEffectivePatchesForPatchBaselineInput, arg3 func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEffectivePatchesForPatchBaselinePagesWithContextReturnsOnCall[len(fake.describeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall)]
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall = append(fake.describeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectivePatchesForPatchBaselineInput
		arg3 func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEffectivePatchesForPatchBaselinePagesWithContextStub
	fakeReturns := fake.describeEffectivePatchesForPatchBaselinePagesWithContextReturns
	fake.recordInvocation("DescribeEffectivePatchesForPatchBaselinePagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesWithContextCallCount() int {
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.RUnlock()
	return len(fake.describeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesWithContextCalls(stub func(context.Context, *ssm.DescribeEffectivePatchesForPatchBaselineInput, func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool, ...request.Option) error) {
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselinePagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeEffectivePatchesForPatchBaselineInput, func(*ssm.DescribeEffectivePatchesForPatchBaselineOutput, bool) bool, []request.Option) {
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEffectivePatchesForPatchBaselinePagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesWithContextReturns(result1 error) {
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselinePagesWithContextStub = nil
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselinePagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselinePagesWithContextStub = nil
	if fake.describeEffectivePatchesForPatchBaselinePagesWithContextReturnsOnCall == nil {
		fake.describeEffectivePatchesForPatchBaselinePagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineRequest(arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*request.Request, *ssm.DescribeEffectivePatchesForPatchBaselineOutput) {
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.describeEffectivePatchesForPatchBaselineRequestReturnsOnCall[len(fake.describeEffectivePatchesForPatchBaselineRequestArgsForCall)]
	fake.describeEffectivePatchesForPatchBaselineRequestArgsForCall = append(fake.describeEffectivePatchesForPatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput
	}{arg1})
	stub := fake.DescribeEffectivePatchesForPatchBaselineRequestStub
	fakeReturns := fake.describeEffectivePatchesForPatchBaselineRequestReturns
	fake.recordInvocation("DescribeEffectivePatchesForPatchBaselineRequest", []interface{}{arg1})
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineRequestCallCount() int {
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineRequestMutex.RUnlock()
	return len(fake.describeEffectivePatchesForPatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineRequestCalls(stub func(*ssm.DescribeEffectivePatchesForPatchBaselineInput) (*request.Request, *ssm.DescribeEffectivePatchesForPatchBaselineOutput)) {
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineRequestMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineRequestArgsForCall(i int) *ssm.DescribeEffectivePatchesForPatchBaselineInput {
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.describeEffectivePatchesForPatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput) {
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineRequestMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineRequestStub = nil
	fake.describeEffectivePatchesForPatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput) {
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineRequestMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineRequestStub = nil
	if fake.describeEffectivePatchesForPatchBaselineRequestReturnsOnCall == nil {
		fake.describeEffectivePatchesForPatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		})
	}
	fake.describeEffectivePatchesForPatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineWithContext(arg1 context.Context, arg2 *ssm.DescribeEffectivePatchesForPatchBaselineInput, arg3 ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.describeEffectivePatchesForPatchBaselineWithContextReturnsOnCall[len(fake.describeEffectivePatchesForPatchBaselineWithContextArgsForCall)]
	fake.describeEffectivePatchesForPatchBaselineWithContextArgsForCall = append(fake.describeEffectivePatchesForPatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeEffectivePatchesForPatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEffectivePatchesForPatchBaselineWithContextStub
	fakeReturns := fake.describeEffectivePatchesForPatchBaselineWithContextReturns
	fake.recordInvocation("DescribeEffectivePatchesForPatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineWithContextCallCount() int {
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineWithContextMutex.RUnlock()
	return len(fake.describeEffectivePatchesForPatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineWithContextCalls(stub func(context.Context, *ssm.DescribeEffectivePatchesForPatchBaselineInput, ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error)) {
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.DescribeEffectivePatchesForPatchBaselineInput, []request.Option) {
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.describeEffectivePatchesForPatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineWithContextReturns(result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput, result2 error) {
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineWithContextStub = nil
	fake.describeEffectivePatchesForPatchBaselineWithContextReturns = struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeEffectivePatchesForPatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput, result2 error) {
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Lock()
	defer fake.describeEffectivePatchesForPatchBaselineWithContextMutex.Unlock()
	fake.DescribeEffectivePatchesForPatchBaselineWithContextStub = nil
	if fake.describeEffectivePatchesForPatchBaselineWithContextReturnsOnCall == nil {
		fake.describeEffectivePatchesForPatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
			result2 error
		})
	}
	fake.describeEffectivePatchesForPatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatus(arg1 *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	fake.describeInstanceAssociationsStatusMutex.Lock()
	ret, specificReturn := fake.describeInstanceAssociationsStatusReturnsOnCall[len(fake.describeInstanceAssociationsStatusArgsForCall)]
	fake.describeInstanceAssociationsStatusArgsForCall = append(fake.describeInstanceAssociationsStatusArgsForCall, struct {
		arg1 *ssm.DescribeInstanceAssociationsStatusInput
	}{arg1})
	stub := fake.DescribeInstanceAssociationsStatusStub
	fakeReturns := fake.describeInstanceAssociationsStatusReturns
	fake.recordInvocation("DescribeInstanceAssociationsStatus", []interface{}{arg1})
	fake.describeInstanceAssociationsStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusCallCount() int {
	fake.describeInstanceAssociationsStatusMutex.RLock()
	defer fake.describeInstanceAssociationsStatusMutex.RUnlock()
	return len(fake.describeInstanceAssociationsStatusArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusCalls(stub func(*ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error)) {
	fake.describeInstanceAssociationsStatusMutex.Lock()
	defer fake.describeInstanceAssociationsStatusMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusArgsForCall(i int) *ssm.DescribeInstanceAssociationsStatusInput {
	fake.describeInstanceAssociationsStatusMutex.RLock()
	defer fake.describeInstanceAssociationsStatusMutex.RUnlock()
	argsForCall := fake.describeInstanceAssociationsStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusReturns(result1 *ssm.DescribeInstanceAssociationsStatusOutput, result2 error) {
	fake.describeInstanceAssociationsStatusMutex.Lock()
	defer fake.describeInstanceAssociationsStatusMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusStub = nil
	fake.describeInstanceAssociationsStatusReturns = struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusReturnsOnCall(i int, result1 *ssm.DescribeInstanceAssociationsStatusOutput, result2 error) {
	fake.describeInstanceAssociationsStatusMutex.Lock()
	defer fake.describeInstanceAssociationsStatusMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusStub = nil
	if fake.describeInstanceAssociationsStatusReturnsOnCall == nil {
		fake.describeInstanceAssociationsStatusReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstanceAssociationsStatusOutput
			result2 error
		})
	}
	fake.describeInstanceAssociationsStatusReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPages(arg1 *ssm.DescribeInstanceAssociationsStatusInput, arg2 func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool) error {
	fake.describeInstanceAssociationsStatusPagesMutex.Lock()
	ret, specificReturn := fake.describeInstanceAssociationsStatusPagesReturnsOnCall[len(fake.describeInstanceAssociationsStatusPagesArgsForCall)]
	fake.describeInstanceAssociationsStatusPagesArgsForCall = append(fake.describeInstanceAssociationsStatusPagesArgsForCall, struct {
		arg1 *ssm.DescribeInstanceAssociationsStatusInput
		arg2 func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInstanceAssociationsStatusPagesStub
	fakeReturns := fake.describeInstanceAssociationsStatusPagesReturns
	fake.recordInvocation("DescribeInstanceAssociationsStatusPages", []interface{}{arg1, arg2})
	fake.describeInstanceAssociationsStatusPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesCallCount() int {
	fake.describeInstanceAssociationsStatusPagesMutex.RLock()
	defer fake.describeInstanceAssociationsStatusPagesMutex.RUnlock()
	return len(fake.describeInstanceAssociationsStatusPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesCalls(stub func(*ssm.DescribeInstanceAssociationsStatusInput, func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool) error) {
	fake.describeInstanceAssociationsStatusPagesMutex.Lock()
	defer fake.describeInstanceAssociationsStatusPagesMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusPagesStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesArgsForCall(i int) (*ssm.DescribeInstanceAssociationsStatusInput, func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool) {
	fake.describeInstanceAssociationsStatusPagesMutex.RLock()
	defer fake.describeInstanceAssociationsStatusPagesMutex.RUnlock()
	argsForCall := fake.describeInstanceAssociationsStatusPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesReturns(result1 error) {
	fake.describeInstanceAssociationsStatusPagesMutex.Lock()
	defer fake.describeInstanceAssociationsStatusPagesMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusPagesStub = nil
	fake.describeInstanceAssociationsStatusPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstanceAssociationsStatusPagesMutex.Lock()
	defer fake.describeInstanceAssociationsStatusPagesMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusPagesStub = nil
	if fake.describeInstanceAssociationsStatusPagesReturnsOnCall == nil {
		fake.describeInstanceAssociationsStatusPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstanceAssociationsStatusPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstanceAssociationsStatusInput, arg3 func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceAssociationsStatusPagesWithContextReturnsOnCall[len(fake.describeInstanceAssociationsStatusPagesWithContextArgsForCall)]
	fake.describeInstanceAssociationsStatusPagesWithContextArgsForCall = append(fake.describeInstanceAssociationsStatusPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceAssociationsStatusInput
		arg3 func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInstanceAssociationsStatusPagesWithContextStub
	fakeReturns := fake.describeInstanceAssociationsStatusPagesWithContextReturns
	fake.recordInvocation("DescribeInstanceAssociationsStatusPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesWithContextCallCount() int {
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.RLock()
	defer fake.describeInstanceAssociationsStatusPagesWithContextMutex.RUnlock()
	return len(fake.describeInstanceAssociationsStatusPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesWithContextCalls(stub func(context.Context, *ssm.DescribeInstanceAssociationsStatusInput, func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool, ...request.Option) error) {
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.Lock()
	defer fake.describeInstanceAssociationsStatusPagesWithContextMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstanceAssociationsStatusInput, func(*ssm.DescribeInstanceAssociationsStatusOutput, bool) bool, []request.Option) {
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.RLock()
	defer fake.describeInstanceAssociationsStatusPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceAssociationsStatusPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesWithContextReturns(result1 error) {
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.Lock()
	defer fake.describeInstanceAssociationsStatusPagesWithContextMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusPagesWithContextStub = nil
	fake.describeInstanceAssociationsStatusPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.Lock()
	defer fake.describeInstanceAssociationsStatusPagesWithContextMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusPagesWithContextStub = nil
	if fake.describeInstanceAssociationsStatusPagesWithContextReturnsOnCall == nil {
		fake.describeInstanceAssociationsStatusPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstanceAssociationsStatusPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusRequest(arg1 *ssm.DescribeInstanceAssociationsStatusInput) (*request.Request, *ssm.DescribeInstanceAssociationsStatusOutput) {
	fake.describeInstanceAssociationsStatusRequestMutex.Lock()
	ret, specificReturn := fake.describeInstanceAssociationsStatusRequestReturnsOnCall[len(fake.describeInstanceAssociationsStatusRequestArgsForCall)]
	fake.describeInstanceAssociationsStatusRequestArgsForCall = append(fake.describeInstanceAssociationsStatusRequestArgsForCall, struct {
		arg1 *ssm.DescribeInstanceAssociationsStatusInput
	}{arg1})
	stub := fake.DescribeInstanceAssociationsStatusRequestStub
	fakeReturns := fake.describeInstanceAssociationsStatusRequestReturns
	fake.recordInvocation("DescribeInstanceAssociationsStatusRequest", []interface{}{arg1})
	fake.describeInstanceAssociationsStatusRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusRequestCallCount() int {
	fake.describeInstanceAssociationsStatusRequestMutex.RLock()
	defer fake.describeInstanceAssociationsStatusRequestMutex.RUnlock()
	return len(fake.describeInstanceAssociationsStatusRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusRequestCalls(stub func(*ssm.DescribeInstanceAssociationsStatusInput) (*request.Request, *ssm.DescribeInstanceAssociationsStatusOutput)) {
	fake.describeInstanceAssociationsStatusRequestMutex.Lock()
	defer fake.describeInstanceAssociationsStatusRequestMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusRequestStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusRequestArgsForCall(i int) *ssm.DescribeInstanceAssociationsStatusInput {
	fake.describeInstanceAssociationsStatusRequestMutex.RLock()
	defer fake.describeInstanceAssociationsStatusRequestMutex.RUnlock()
	argsForCall := fake.describeInstanceAssociationsStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusRequestReturns(result1 *request.Request, result2 *ssm.DescribeInstanceAssociationsStatusOutput) {
	fake.describeInstanceAssociationsStatusRequestMutex.Lock()
	defer fake.describeInstanceAssociationsStatusRequestMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusRequestStub = nil
	fake.describeInstanceAssociationsStatusRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceAssociationsStatusOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeInstanceAssociationsStatusOutput) {
	fake.describeInstanceAssociationsStatusRequestMutex.Lock()
	defer fake.describeInstanceAssociationsStatusRequestMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusRequestStub = nil
	if fake.describeInstanceAssociationsStatusRequestReturnsOnCall == nil {
		fake.describeInstanceAssociationsStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeInstanceAssociationsStatusOutput
		})
	}
	fake.describeInstanceAssociationsStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceAssociationsStatusOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusWithContext(arg1 context.Context, arg2 *ssm.DescribeInstanceAssociationsStatusInput, arg3 ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	fake.describeInstanceAssociationsStatusWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceAssociationsStatusWithContextReturnsOnCall[len(fake.describeInstanceAssociationsStatusWithContextArgsForCall)]
	fake.describeInstanceAssociationsStatusWithContextArgsForCall = append(fake.describeInstanceAssociationsStatusWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceAssociationsStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInstanceAssociationsStatusWithContextStub
	fakeReturns := fake.describeInstanceAssociationsStatusWithContextReturns
	fake.recordInvocation("DescribeInstanceAssociationsStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstanceAssociationsStatusWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusWithContextCallCount() int {
	fake.describeInstanceAssociationsStatusWithContextMutex.RLock()
	defer fake.describeInstanceAssociationsStatusWithContextMutex.RUnlock()
	return len(fake.describeInstanceAssociationsStatusWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusWithContextCalls(stub func(context.Context, *ssm.DescribeInstanceAssociationsStatusInput, ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error)) {
	fake.describeInstanceAssociationsStatusWithContextMutex.Lock()
	defer fake.describeInstanceAssociationsStatusWithContextMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstanceAssociationsStatusInput, []request.Option) {
	fake.describeInstanceAssociationsStatusWithContextMutex.RLock()
	defer fake.describeInstanceAssociationsStatusWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceAssociationsStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusWithContextReturns(result1 *ssm.DescribeInstanceAssociationsStatusOutput, result2 error) {
	fake.describeInstanceAssociationsStatusWithContextMutex.Lock()
	defer fake.describeInstanceAssociationsStatusWithContextMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusWithContextStub = nil
	fake.describeInstanceAssociationsStatusWithContextReturns = struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceAssociationsStatusWithContextReturnsOnCall(i int, result1 *ssm.DescribeInstanceAssociationsStatusOutput, result2 error) {
	fake.describeInstanceAssociationsStatusWithContextMutex.Lock()
	defer fake.describeInstanceAssociationsStatusWithContextMutex.Unlock()
	fake.DescribeInstanceAssociationsStatusWithContextStub = nil
	if fake.describeInstanceAssociationsStatusWithContextReturnsOnCall == nil {
		fake.describeInstanceAssociationsStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstanceAssociationsStatusOutput
			result2 error
		})
	}
	fake.describeInstanceAssociationsStatusWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstanceAssociationsStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceInformation(arg1 *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error) {
	fake.describeInstanceInformationMutex.Lock()
	ret, specificReturn := fake.describeInstanceInformationReturnsOnCall[len(fake.describeInstanceInformationArgsForCall)]
	fake.describeInstanceInformationArgsForCall = append(fake.describeInstanceInformationArgsForCall, struct {
		arg1 *ssm.DescribeInstanceInformationInput
	}{arg1})
	stub := fake.DescribeInstanceInformationStub
	fakeReturns := fake.describeInstanceInformationReturns
	fake.recordInvocation("DescribeInstanceInformation", []interface{}{arg1})
	fake.describeInstanceInformationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstanceInformationCallCount() int {
	fake.describeInstanceInformationMutex.RLock()
	defer fake.describeInstanceInformationMutex.RUnlock()
	return len(fake.describeInstanceInformationArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceInformationCalls(stub func(*ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error)) {
	fake.describeInstanceInformationMutex.Lock()
	defer fake.describeInstanceInformationMutex.Unlock()
	fake.DescribeInstanceInformationStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceInformationArgsForCall(i int) *ssm.DescribeInstanceInformationInput {
	fake.describeInstanceInformationMutex.RLock()
	defer fake.describeInstanceInformationMutex.RUnlock()
	argsForCall := fake.describeInstanceInformationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstanceInformationReturns(result1 *ssm.DescribeInstanceInformationOutput, result2 error) {
	fake.describeInstanceInformationMutex.Lock()
	defer fake.describeInstanceInformationMutex.Unlock()
	fake.DescribeInstanceInformationStub = nil
	fake.describeInstanceInformationReturns = struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceInformationReturnsOnCall(i int, result1 *ssm.DescribeInstanceInformationOutput, result2 error) {
	fake.describeInstanceInformationMutex.Lock()
	defer fake.describeInstanceInformationMutex.Unlock()
	fake.DescribeInstanceInformationStub = nil
	if fake.describeInstanceInformationReturnsOnCall == nil {
		fake.describeInstanceInformationReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstanceInformationOutput
			result2 error
		})
	}
	fake.describeInstanceInformationReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceInformationPages(arg1 *ssm.DescribeInstanceInformationInput, arg2 func(*ssm.DescribeInstanceInformationOutput, bool) bool) error {
	fake.describeInstanceInformationPagesMutex.Lock()
	ret, specificReturn := fake.describeInstanceInformationPagesReturnsOnCall[len(fake.describeInstanceInformationPagesArgsForCall)]
	fake.describeInstanceInformationPagesArgsForCall = append(fake.describeInstanceInformationPagesArgsForCall, struct {
		arg1 *ssm.DescribeInstanceInformationInput
		arg2 func(*ssm.DescribeInstanceInformationOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInstanceInformationPagesStub
	fakeReturns := fake.describeInstanceInformationPagesReturns
	fake.recordInvocation("DescribeInstanceInformationPages", []interface{}{arg1, arg2})
	fake.describeInstanceInformationPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesCallCount() int {
	fake.describeInstanceInformationPagesMutex.RLock()
	defer fake.describeInstanceInformationPagesMutex.RUnlock()
	return len(fake.describeInstanceInformationPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesCalls(stub func(*ssm.DescribeInstanceInformationInput, func(*ssm.DescribeInstanceInformationOutput, bool) bool) error) {
	fake.describeInstanceInformationPagesMutex.Lock()
	defer fake.describeInstanceInformationPagesMutex.Unlock()
	fake.DescribeInstanceInformationPagesStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesArgsForCall(i int) (*ssm.DescribeInstanceInformationInput, func(*ssm.DescribeInstanceInformationOutput, bool) bool) {
	fake.describeInstanceInformationPagesMutex.RLock()
	defer fake.describeInstanceInformationPagesMutex.RUnlock()
	argsForCall := fake.describeInstanceInformationPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesReturns(result1 error) {
	fake.describeInstanceInformationPagesMutex.Lock()
	defer fake.describeInstanceInformationPagesMutex.Unlock()
	fake.DescribeInstanceInformationPagesStub = nil
	fake.describeInstanceInformationPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstanceInformationPagesMutex.Lock()
	defer fake.describeInstanceInformationPagesMutex.Unlock()
	fake.DescribeInstanceInformationPagesStub = nil
	if fake.describeInstanceInformationPagesReturnsOnCall == nil {
		fake.describeInstanceInformationPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstanceInformationPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstanceInformationInput, arg3 func(*ssm.DescribeInstanceInformationOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstanceInformationPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceInformationPagesWithContextReturnsOnCall[len(fake.describeInstanceInformationPagesWithContextArgsForCall)]
	fake.describeInstanceInformationPagesWithContextArgsForCall = append(fake.describeInstanceInformationPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceInformationInput
		arg3 func(*ssm.DescribeInstanceInformationOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInstanceInformationPagesWithContextStub
	fakeReturns := fake.describeInstanceInformationPagesWithContextReturns
	fake.recordInvocation("DescribeInstanceInformationPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstanceInformationPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesWithContextCallCount() int {
	fake.describeInstanceInformationPagesWithContextMutex.RLock()
	defer fake.describeInstanceInformationPagesWithContextMutex.RUnlock()
	return len(fake.describeInstanceInformationPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesWithContextCalls(stub func(context.Context, *ssm.DescribeInstanceInformationInput, func(*ssm.DescribeInstanceInformationOutput, bool) bool, ...request.Option) error) {
	fake.describeInstanceInformationPagesWithContextMutex.Lock()
	defer fake.describeInstanceInformationPagesWithContextMutex.Unlock()
	fake.DescribeInstanceInformationPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstanceInformationInput, func(*ssm.DescribeInstanceInformationOutput, bool) bool, []request.Option) {
	fake.describeInstanceInformationPagesWithContextMutex.RLock()
	defer fake.describeInstanceInformationPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceInformationPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesWithContextReturns(result1 error) {
	fake.describeInstanceInformationPagesWithContextMutex.Lock()
	defer fake.describeInstanceInformationPagesWithContextMutex.Unlock()
	fake.DescribeInstanceInformationPagesWithContextStub = nil
	fake.describeInstanceInformationPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceInformationPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstanceInformationPagesWithContextMutex.Lock()
	defer fake.describeInstanceInformationPagesWithContextMutex.Unlock()
	fake.DescribeInstanceInformationPagesWithContextStub = nil
	if fake.describeInstanceInformationPagesWithContextReturnsOnCall == nil {
		fake.describeInstanceInformationPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstanceInformationPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstanceInformationRequest(arg1 *ssm.DescribeInstanceInformationInput) (*request.Request, *ssm.DescribeInstanceInformationOutput) {
	fake.describeInstanceInformationRequestMutex.Lock()
	ret, specificReturn := fake.describeInstanceInformationRequestReturnsOnCall[len(fake.describeInstanceInformationRequestArgsForCall)]
	fake.describeInstanceInformationRequestArgsForCall = append(fake.describeInstanceInformationRequestArgsForCall, struct {
		arg1 *ssm.DescribeInstanceInformationInput
	}{arg1})
	stub := fake.DescribeInstanceInformationRequestStub
	fakeReturns := fake.describeInstanceInformationRequestReturns
	fake.recordInvocation("DescribeInstanceInformationRequest", []interface{}{arg1})
	fake.describeInstanceInformationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstanceInformationRequestCallCount() int {
	fake.describeInstanceInformationRequestMutex.RLock()
	defer fake.describeInstanceInformationRequestMutex.RUnlock()
	return len(fake.describeInstanceInformationRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceInformationRequestCalls(stub func(*ssm.DescribeInstanceInformationInput) (*request.Request, *ssm.DescribeInstanceInformationOutput)) {
	fake.describeInstanceInformationRequestMutex.Lock()
	defer fake.describeInstanceInformationRequestMutex.Unlock()
	fake.DescribeInstanceInformationRequestStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceInformationRequestArgsForCall(i int) *ssm.DescribeInstanceInformationInput {
	fake.describeInstanceInformationRequestMutex.RLock()
	defer fake.describeInstanceInformationRequestMutex.RUnlock()
	argsForCall := fake.describeInstanceInformationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstanceInformationRequestReturns(result1 *request.Request, result2 *ssm.DescribeInstanceInformationOutput) {
	fake.describeInstanceInformationRequestMutex.Lock()
	defer fake.describeInstanceInformationRequestMutex.Unlock()
	fake.DescribeInstanceInformationRequestStub = nil
	fake.describeInstanceInformationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceInformationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceInformationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeInstanceInformationOutput) {
	fake.describeInstanceInformationRequestMutex.Lock()
	defer fake.describeInstanceInformationRequestMutex.Unlock()
	fake.DescribeInstanceInformationRequestStub = nil
	if fake.describeInstanceInformationRequestReturnsOnCall == nil {
		fake.describeInstanceInformationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeInstanceInformationOutput
		})
	}
	fake.describeInstanceInformationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstanceInformationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceInformationWithContext(arg1 context.Context, arg2 *ssm.DescribeInstanceInformationInput, arg3 ...request.Option) (*ssm.DescribeInstanceInformationOutput, error) {
	fake.describeInstanceInformationWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceInformationWithContextReturnsOnCall[len(fake.describeInstanceInformationWithContextArgsForCall)]
	fake.describeInstanceInformationWithContextArgsForCall = append(fake.describeInstanceInformationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstanceInformationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInstanceInformationWithContextStub
	fakeReturns := fake.describeInstanceInformationWithContextReturns
	fake.recordInvocation("DescribeInstanceInformationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstanceInformationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstanceInformationWithContextCallCount() int {
	fake.describeInstanceInformationWithContextMutex.RLock()
	defer fake.describeInstanceInformationWithContextMutex.RUnlock()
	return len(fake.describeInstanceInformationWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstanceInformationWithContextCalls(stub func(context.Context, *ssm.DescribeInstanceInformationInput, ...request.Option) (*ssm.DescribeInstanceInformationOutput, error)) {
	fake.describeInstanceInformationWithContextMutex.Lock()
	defer fake.describeInstanceInformationWithContextMutex.Unlock()
	fake.DescribeInstanceInformationWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstanceInformationWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstanceInformationInput, []request.Option) {
	fake.describeInstanceInformationWithContextMutex.RLock()
	defer fake.describeInstanceInformationWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceInformationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeInstanceInformationWithContextReturns(result1 *ssm.DescribeInstanceInformationOutput, result2 error) {
	fake.describeInstanceInformationWithContextMutex.Lock()
	defer fake.describeInstanceInformationWithContextMutex.Unlock()
	fake.DescribeInstanceInformationWithContextStub = nil
	fake.describeInstanceInformationWithContextReturns = struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstanceInformationWithContextReturnsOnCall(i int, result1 *ssm.DescribeInstanceInformationOutput, result2 error) {
	fake.describeInstanceInformationWithContextMutex.Lock()
	defer fake.describeInstanceInformationWithContextMutex.Unlock()
	fake.DescribeInstanceInformationWithContextStub = nil
	if fake.describeInstanceInformationWithContextReturnsOnCall == nil {
		fake.describeInstanceInformationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstanceInformationOutput
			result2 error
		})
	}
	fake.describeInstanceInformationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstanceInformationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStates(arg1 *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error) {
	fake.describeInstancePatchStatesMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesReturnsOnCall[len(fake.describeInstancePatchStatesArgsForCall)]
	fake.describeInstancePatchStatesArgsForCall = append(fake.describeInstancePatchStatesArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchStatesInput
	}{arg1})
	stub := fake.DescribeInstancePatchStatesStub
	fakeReturns := fake.describeInstancePatchStatesReturns
	fake.recordInvocation("DescribeInstancePatchStates", []interface{}{arg1})
	fake.describeInstancePatchStatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesCallCount() int {
	fake.describeInstancePatchStatesMutex.RLock()
	defer fake.describeInstancePatchStatesMutex.RUnlock()
	return len(fake.describeInstancePatchStatesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesCalls(stub func(*ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error)) {
	fake.describeInstancePatchStatesMutex.Lock()
	defer fake.describeInstancePatchStatesMutex.Unlock()
	fake.DescribeInstancePatchStatesStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesArgsForCall(i int) *ssm.DescribeInstancePatchStatesInput {
	fake.describeInstancePatchStatesMutex.RLock()
	defer fake.describeInstancePatchStatesMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesReturns(result1 *ssm.DescribeInstancePatchStatesOutput, result2 error) {
	fake.describeInstancePatchStatesMutex.Lock()
	defer fake.describeInstancePatchStatesMutex.Unlock()
	fake.DescribeInstancePatchStatesStub = nil
	fake.describeInstancePatchStatesReturns = struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesReturnsOnCall(i int, result1 *ssm.DescribeInstancePatchStatesOutput, result2 error) {
	fake.describeInstancePatchStatesMutex.Lock()
	defer fake.describeInstancePatchStatesMutex.Unlock()
	fake.DescribeInstancePatchStatesStub = nil
	if fake.describeInstancePatchStatesReturnsOnCall == nil {
		fake.describeInstancePatchStatesReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstancePatchStatesOutput
			result2 error
		})
	}
	fake.describeInstancePatchStatesReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroup(arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	fake.describeInstancePatchStatesForPatchGroupMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesForPatchGroupReturnsOnCall[len(fake.describeInstancePatchStatesForPatchGroupArgsForCall)]
	fake.describeInstancePatchStatesForPatchGroupArgsForCall = append(fake.describeInstancePatchStatesForPatchGroupArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput
	}{arg1})
	stub := fake.DescribeInstancePatchStatesForPatchGroupStub
	fakeReturns := fake.describeInstancePatchStatesForPatchGroupReturns
	fake.recordInvocation("DescribeInstancePatchStatesForPatchGroup", []interface{}{arg1})
	fake.describeInstancePatchStatesForPatchGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupCallCount() int {
	fake.describeInstancePatchStatesForPatchGroupMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupMutex.RUnlock()
	return len(fake.describeInstancePatchStatesForPatchGroupArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupCalls(stub func(*ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)) {
	fake.describeInstancePatchStatesForPatchGroupMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupArgsForCall(i int) *ssm.DescribeInstancePatchStatesForPatchGroupInput {
	fake.describeInstancePatchStatesForPatchGroupMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesForPatchGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupReturns(result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput, result2 error) {
	fake.describeInstancePatchStatesForPatchGroupMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupStub = nil
	fake.describeInstancePatchStatesForPatchGroupReturns = struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupReturnsOnCall(i int, result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput, result2 error) {
	fake.describeInstancePatchStatesForPatchGroupMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupStub = nil
	if fake.describeInstancePatchStatesForPatchGroupReturnsOnCall == nil {
		fake.describeInstancePatchStatesForPatchGroupReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
			result2 error
		})
	}
	fake.describeInstancePatchStatesForPatchGroupReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPages(arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput, arg2 func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool) error {
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesForPatchGroupPagesReturnsOnCall[len(fake.describeInstancePatchStatesForPatchGroupPagesArgsForCall)]
	fake.describeInstancePatchStatesForPatchGroupPagesArgsForCall = append(fake.describeInstancePatchStatesForPatchGroupPagesArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput
		arg2 func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInstancePatchStatesForPatchGroupPagesStub
	fakeReturns := fake.describeInstancePatchStatesForPatchGroupPagesReturns
	fake.recordInvocation("DescribeInstancePatchStatesForPatchGroupPages", []interface{}{arg1, arg2})
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesCallCount() int {
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesMutex.RUnlock()
	return len(fake.describeInstancePatchStatesForPatchGroupPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesCalls(stub func(*ssm.DescribeInstancePatchStatesForPatchGroupInput, func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool) error) {
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupPagesStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesArgsForCall(i int) (*ssm.DescribeInstancePatchStatesForPatchGroupInput, func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool) {
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesForPatchGroupPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesReturns(result1 error) {
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupPagesStub = nil
	fake.describeInstancePatchStatesForPatchGroupPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupPagesStub = nil
	if fake.describeInstancePatchStatesForPatchGroupPagesReturnsOnCall == nil {
		fake.describeInstancePatchStatesForPatchGroupPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancePatchStatesForPatchGroupPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstancePatchStatesForPatchGroupInput, arg3 func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesForPatchGroupPagesWithContextReturnsOnCall[len(fake.describeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall)]
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall = append(fake.describeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesForPatchGroupInput
		arg3 func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInstancePatchStatesForPatchGroupPagesWithContextStub
	fakeReturns := fake.describeInstancePatchStatesForPatchGroupPagesWithContextReturns
	fake.recordInvocation("DescribeInstancePatchStatesForPatchGroupPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesWithContextCallCount() int {
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.RUnlock()
	return len(fake.describeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesWithContextCalls(stub func(context.Context, *ssm.DescribeInstancePatchStatesForPatchGroupInput, func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool, ...request.Option) error) {
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstancePatchStatesForPatchGroupInput, func(*ssm.DescribeInstancePatchStatesForPatchGroupOutput, bool) bool, []request.Option) {
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesForPatchGroupPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesWithContextReturns(result1 error) {
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupPagesWithContextStub = nil
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupPagesWithContextStub = nil
	if fake.describeInstancePatchStatesForPatchGroupPagesWithContextReturnsOnCall == nil {
		fake.describeInstancePatchStatesForPatchGroupPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupRequest(arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*request.Request, *ssm.DescribeInstancePatchStatesForPatchGroupOutput) {
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesForPatchGroupRequestReturnsOnCall[len(fake.describeInstancePatchStatesForPatchGroupRequestArgsForCall)]
	fake.describeInstancePatchStatesForPatchGroupRequestArgsForCall = append(fake.describeInstancePatchStatesForPatchGroupRequestArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput
	}{arg1})
	stub := fake.DescribeInstancePatchStatesForPatchGroupRequestStub
	fakeReturns := fake.describeInstancePatchStatesForPatchGroupRequestReturns
	fake.recordInvocation("DescribeInstancePatchStatesForPatchGroupRequest", []interface{}{arg1})
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupRequestCallCount() int {
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupRequestMutex.RUnlock()
	return len(fake.describeInstancePatchStatesForPatchGroupRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupRequestCalls(stub func(*ssm.DescribeInstancePatchStatesForPatchGroupInput) (*request.Request, *ssm.DescribeInstancePatchStatesForPatchGroupOutput)) {
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupRequestMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupRequestStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupRequestArgsForCall(i int) *ssm.DescribeInstancePatchStatesForPatchGroupInput {
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupRequestMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesForPatchGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupRequestReturns(result1 *request.Request, result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput) {
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupRequestMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupRequestStub = nil
	fake.describeInstancePatchStatesForPatchGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput) {
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupRequestMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupRequestStub = nil
	if fake.describeInstancePatchStatesForPatchGroupRequestReturnsOnCall == nil {
		fake.describeInstancePatchStatesForPatchGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		})
	}
	fake.describeInstancePatchStatesForPatchGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupWithContext(arg1 context.Context, arg2 *ssm.DescribeInstancePatchStatesForPatchGroupInput, arg3 ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesForPatchGroupWithContextReturnsOnCall[len(fake.describeInstancePatchStatesForPatchGroupWithContextArgsForCall)]
	fake.describeInstancePatchStatesForPatchGroupWithContextArgsForCall = append(fake.describeInstancePatchStatesForPatchGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesForPatchGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInstancePatchStatesForPatchGroupWithContextStub
	fakeReturns := fake.describeInstancePatchStatesForPatchGroupWithContextReturns
	fake.recordInvocation("DescribeInstancePatchStatesForPatchGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupWithContextCallCount() int {
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupWithContextMutex.RUnlock()
	return len(fake.describeInstancePatchStatesForPatchGroupWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupWithContextCalls(stub func(context.Context, *ssm.DescribeInstancePatchStatesForPatchGroupInput, ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error)) {
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstancePatchStatesForPatchGroupInput, []request.Option) {
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesForPatchGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupWithContextReturns(result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput, result2 error) {
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupWithContextStub = nil
	fake.describeInstancePatchStatesForPatchGroupWithContextReturns = struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesForPatchGroupWithContextReturnsOnCall(i int, result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput, result2 error) {
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesForPatchGroupWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesForPatchGroupWithContextStub = nil
	if fake.describeInstancePatchStatesForPatchGroupWithContextReturnsOnCall == nil {
		fake.describeInstancePatchStatesForPatchGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
			result2 error
		})
	}
	fake.describeInstancePatchStatesForPatchGroupWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPages(arg1 *ssm.DescribeInstancePatchStatesInput, arg2 func(*ssm.DescribeInstancePatchStatesOutput, bool) bool) error {
	fake.describeInstancePatchStatesPagesMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesPagesReturnsOnCall[len(fake.describeInstancePatchStatesPagesArgsForCall)]
	fake.describeInstancePatchStatesPagesArgsForCall = append(fake.describeInstancePatchStatesPagesArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchStatesInput
		arg2 func(*ssm.DescribeInstancePatchStatesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInstancePatchStatesPagesStub
	fakeReturns := fake.describeInstancePatchStatesPagesReturns
	fake.recordInvocation("DescribeInstancePatchStatesPages", []interface{}{arg1, arg2})
	fake.describeInstancePatchStatesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesCallCount() int {
	fake.describeInstancePatchStatesPagesMutex.RLock()
	defer fake.describeInstancePatchStatesPagesMutex.RUnlock()
	return len(fake.describeInstancePatchStatesPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesCalls(stub func(*ssm.DescribeInstancePatchStatesInput, func(*ssm.DescribeInstancePatchStatesOutput, bool) bool) error) {
	fake.describeInstancePatchStatesPagesMutex.Lock()
	defer fake.describeInstancePatchStatesPagesMutex.Unlock()
	fake.DescribeInstancePatchStatesPagesStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesArgsForCall(i int) (*ssm.DescribeInstancePatchStatesInput, func(*ssm.DescribeInstancePatchStatesOutput, bool) bool) {
	fake.describeInstancePatchStatesPagesMutex.RLock()
	defer fake.describeInstancePatchStatesPagesMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesReturns(result1 error) {
	fake.describeInstancePatchStatesPagesMutex.Lock()
	defer fake.describeInstancePatchStatesPagesMutex.Unlock()
	fake.DescribeInstancePatchStatesPagesStub = nil
	fake.describeInstancePatchStatesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstancePatchStatesPagesMutex.Lock()
	defer fake.describeInstancePatchStatesPagesMutex.Unlock()
	fake.DescribeInstancePatchStatesPagesStub = nil
	if fake.describeInstancePatchStatesPagesReturnsOnCall == nil {
		fake.describeInstancePatchStatesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancePatchStatesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstancePatchStatesInput, arg3 func(*ssm.DescribeInstancePatchStatesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstancePatchStatesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesPagesWithContextReturnsOnCall[len(fake.describeInstancePatchStatesPagesWithContextArgsForCall)]
	fake.describeInstancePatchStatesPagesWithContextArgsForCall = append(fake.describeInstancePatchStatesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesInput
		arg3 func(*ssm.DescribeInstancePatchStatesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInstancePatchStatesPagesWithContextStub
	fakeReturns := fake.describeInstancePatchStatesPagesWithContextReturns
	fake.recordInvocation("DescribeInstancePatchStatesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstancePatchStatesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesWithContextCallCount() int {
	fake.describeInstancePatchStatesPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesPagesWithContextMutex.RUnlock()
	return len(fake.describeInstancePatchStatesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesWithContextCalls(stub func(context.Context, *ssm.DescribeInstancePatchStatesInput, func(*ssm.DescribeInstancePatchStatesOutput, bool) bool, ...request.Option) error) {
	fake.describeInstancePatchStatesPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstancePatchStatesInput, func(*ssm.DescribeInstancePatchStatesOutput, bool) bool, []request.Option) {
	fake.describeInstancePatchStatesPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesWithContextReturns(result1 error) {
	fake.describeInstancePatchStatesPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesPagesWithContextStub = nil
	fake.describeInstancePatchStatesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstancePatchStatesPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesPagesWithContextStub = nil
	if fake.describeInstancePatchStatesPagesWithContextReturnsOnCall == nil {
		fake.describeInstancePatchStatesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancePatchStatesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesRequest(arg1 *ssm.DescribeInstancePatchStatesInput) (*request.Request, *ssm.DescribeInstancePatchStatesOutput) {
	fake.describeInstancePatchStatesRequestMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesRequestReturnsOnCall[len(fake.describeInstancePatchStatesRequestArgsForCall)]
	fake.describeInstancePatchStatesRequestArgsForCall = append(fake.describeInstancePatchStatesRequestArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchStatesInput
	}{arg1})
	stub := fake.DescribeInstancePatchStatesRequestStub
	fakeReturns := fake.describeInstancePatchStatesRequestReturns
	fake.recordInvocation("DescribeInstancePatchStatesRequest", []interface{}{arg1})
	fake.describeInstancePatchStatesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesRequestCallCount() int {
	fake.describeInstancePatchStatesRequestMutex.RLock()
	defer fake.describeInstancePatchStatesRequestMutex.RUnlock()
	return len(fake.describeInstancePatchStatesRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesRequestCalls(stub func(*ssm.DescribeInstancePatchStatesInput) (*request.Request, *ssm.DescribeInstancePatchStatesOutput)) {
	fake.describeInstancePatchStatesRequestMutex.Lock()
	defer fake.describeInstancePatchStatesRequestMutex.Unlock()
	fake.DescribeInstancePatchStatesRequestStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesRequestArgsForCall(i int) *ssm.DescribeInstancePatchStatesInput {
	fake.describeInstancePatchStatesRequestMutex.RLock()
	defer fake.describeInstancePatchStatesRequestMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesRequestReturns(result1 *request.Request, result2 *ssm.DescribeInstancePatchStatesOutput) {
	fake.describeInstancePatchStatesRequestMutex.Lock()
	defer fake.describeInstancePatchStatesRequestMutex.Unlock()
	fake.DescribeInstancePatchStatesRequestStub = nil
	fake.describeInstancePatchStatesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeInstancePatchStatesOutput) {
	fake.describeInstancePatchStatesRequestMutex.Lock()
	defer fake.describeInstancePatchStatesRequestMutex.Unlock()
	fake.DescribeInstancePatchStatesRequestStub = nil
	if fake.describeInstancePatchStatesRequestReturnsOnCall == nil {
		fake.describeInstancePatchStatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeInstancePatchStatesOutput
		})
	}
	fake.describeInstancePatchStatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchStatesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstancePatchStatesInput, arg3 ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error) {
	fake.describeInstancePatchStatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchStatesWithContextReturnsOnCall[len(fake.describeInstancePatchStatesWithContextArgsForCall)]
	fake.describeInstancePatchStatesWithContextArgsForCall = append(fake.describeInstancePatchStatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchStatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInstancePatchStatesWithContextStub
	fakeReturns := fake.describeInstancePatchStatesWithContextReturns
	fake.recordInvocation("DescribeInstancePatchStatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstancePatchStatesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesWithContextCallCount() int {
	fake.describeInstancePatchStatesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesWithContextMutex.RUnlock()
	return len(fake.describeInstancePatchStatesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesWithContextCalls(stub func(context.Context, *ssm.DescribeInstancePatchStatesInput, ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error)) {
	fake.describeInstancePatchStatesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstancePatchStatesInput, []request.Option) {
	fake.describeInstancePatchStatesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancePatchStatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesWithContextReturns(result1 *ssm.DescribeInstancePatchStatesOutput, result2 error) {
	fake.describeInstancePatchStatesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesWithContextStub = nil
	fake.describeInstancePatchStatesWithContextReturns = struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchStatesWithContextReturnsOnCall(i int, result1 *ssm.DescribeInstancePatchStatesOutput, result2 error) {
	fake.describeInstancePatchStatesWithContextMutex.Lock()
	defer fake.describeInstancePatchStatesWithContextMutex.Unlock()
	fake.DescribeInstancePatchStatesWithContextStub = nil
	if fake.describeInstancePatchStatesWithContextReturnsOnCall == nil {
		fake.describeInstancePatchStatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstancePatchStatesOutput
			result2 error
		})
	}
	fake.describeInstancePatchStatesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstancePatchStatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatches(arg1 *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error) {
	fake.describeInstancePatchesMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchesReturnsOnCall[len(fake.describeInstancePatchesArgsForCall)]
	fake.describeInstancePatchesArgsForCall = append(fake.describeInstancePatchesArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchesInput
	}{arg1})
	stub := fake.DescribeInstancePatchesStub
	fakeReturns := fake.describeInstancePatchesReturns
	fake.recordInvocation("DescribeInstancePatches", []interface{}{arg1})
	fake.describeInstancePatchesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchesCallCount() int {
	fake.describeInstancePatchesMutex.RLock()
	defer fake.describeInstancePatchesMutex.RUnlock()
	return len(fake.describeInstancePatchesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchesCalls(stub func(*ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error)) {
	fake.describeInstancePatchesMutex.Lock()
	defer fake.describeInstancePatchesMutex.Unlock()
	fake.DescribeInstancePatchesStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchesArgsForCall(i int) *ssm.DescribeInstancePatchesInput {
	fake.describeInstancePatchesMutex.RLock()
	defer fake.describeInstancePatchesMutex.RUnlock()
	argsForCall := fake.describeInstancePatchesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstancePatchesReturns(result1 *ssm.DescribeInstancePatchesOutput, result2 error) {
	fake.describeInstancePatchesMutex.Lock()
	defer fake.describeInstancePatchesMutex.Unlock()
	fake.DescribeInstancePatchesStub = nil
	fake.describeInstancePatchesReturns = struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchesReturnsOnCall(i int, result1 *ssm.DescribeInstancePatchesOutput, result2 error) {
	fake.describeInstancePatchesMutex.Lock()
	defer fake.describeInstancePatchesMutex.Unlock()
	fake.DescribeInstancePatchesStub = nil
	if fake.describeInstancePatchesReturnsOnCall == nil {
		fake.describeInstancePatchesReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstancePatchesOutput
			result2 error
		})
	}
	fake.describeInstancePatchesReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchesPages(arg1 *ssm.DescribeInstancePatchesInput, arg2 func(*ssm.DescribeInstancePatchesOutput, bool) bool) error {
	fake.describeInstancePatchesPagesMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchesPagesReturnsOnCall[len(fake.describeInstancePatchesPagesArgsForCall)]
	fake.describeInstancePatchesPagesArgsForCall = append(fake.describeInstancePatchesPagesArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchesInput
		arg2 func(*ssm.DescribeInstancePatchesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInstancePatchesPagesStub
	fakeReturns := fake.describeInstancePatchesPagesReturns
	fake.recordInvocation("DescribeInstancePatchesPages", []interface{}{arg1, arg2})
	fake.describeInstancePatchesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesCallCount() int {
	fake.describeInstancePatchesPagesMutex.RLock()
	defer fake.describeInstancePatchesPagesMutex.RUnlock()
	return len(fake.describeInstancePatchesPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesCalls(stub func(*ssm.DescribeInstancePatchesInput, func(*ssm.DescribeInstancePatchesOutput, bool) bool) error) {
	fake.describeInstancePatchesPagesMutex.Lock()
	defer fake.describeInstancePatchesPagesMutex.Unlock()
	fake.DescribeInstancePatchesPagesStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesArgsForCall(i int) (*ssm.DescribeInstancePatchesInput, func(*ssm.DescribeInstancePatchesOutput, bool) bool) {
	fake.describeInstancePatchesPagesMutex.RLock()
	defer fake.describeInstancePatchesPagesMutex.RUnlock()
	argsForCall := fake.describeInstancePatchesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesReturns(result1 error) {
	fake.describeInstancePatchesPagesMutex.Lock()
	defer fake.describeInstancePatchesPagesMutex.Unlock()
	fake.DescribeInstancePatchesPagesStub = nil
	fake.describeInstancePatchesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstancePatchesPagesMutex.Lock()
	defer fake.describeInstancePatchesPagesMutex.Unlock()
	fake.DescribeInstancePatchesPagesStub = nil
	if fake.describeInstancePatchesPagesReturnsOnCall == nil {
		fake.describeInstancePatchesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancePatchesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstancePatchesInput, arg3 func(*ssm.DescribeInstancePatchesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstancePatchesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchesPagesWithContextReturnsOnCall[len(fake.describeInstancePatchesPagesWithContextArgsForCall)]
	fake.describeInstancePatchesPagesWithContextArgsForCall = append(fake.describeInstancePatchesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchesInput
		arg3 func(*ssm.DescribeInstancePatchesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInstancePatchesPagesWithContextStub
	fakeReturns := fake.describeInstancePatchesPagesWithContextReturns
	fake.recordInvocation("DescribeInstancePatchesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstancePatchesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesWithContextCallCount() int {
	fake.describeInstancePatchesPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchesPagesWithContextMutex.RUnlock()
	return len(fake.describeInstancePatchesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesWithContextCalls(stub func(context.Context, *ssm.DescribeInstancePatchesInput, func(*ssm.DescribeInstancePatchesOutput, bool) bool, ...request.Option) error) {
	fake.describeInstancePatchesPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchesPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstancePatchesInput, func(*ssm.DescribeInstancePatchesOutput, bool) bool, []request.Option) {
	fake.describeInstancePatchesPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancePatchesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesWithContextReturns(result1 error) {
	fake.describeInstancePatchesPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchesPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchesPagesWithContextStub = nil
	fake.describeInstancePatchesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstancePatchesPagesWithContextMutex.Lock()
	defer fake.describeInstancePatchesPagesWithContextMutex.Unlock()
	fake.DescribeInstancePatchesPagesWithContextStub = nil
	if fake.describeInstancePatchesPagesWithContextReturnsOnCall == nil {
		fake.describeInstancePatchesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancePatchesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInstancePatchesRequest(arg1 *ssm.DescribeInstancePatchesInput) (*request.Request, *ssm.DescribeInstancePatchesOutput) {
	fake.describeInstancePatchesRequestMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchesRequestReturnsOnCall[len(fake.describeInstancePatchesRequestArgsForCall)]
	fake.describeInstancePatchesRequestArgsForCall = append(fake.describeInstancePatchesRequestArgsForCall, struct {
		arg1 *ssm.DescribeInstancePatchesInput
	}{arg1})
	stub := fake.DescribeInstancePatchesRequestStub
	fakeReturns := fake.describeInstancePatchesRequestReturns
	fake.recordInvocation("DescribeInstancePatchesRequest", []interface{}{arg1})
	fake.describeInstancePatchesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchesRequestCallCount() int {
	fake.describeInstancePatchesRequestMutex.RLock()
	defer fake.describeInstancePatchesRequestMutex.RUnlock()
	return len(fake.describeInstancePatchesRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchesRequestCalls(stub func(*ssm.DescribeInstancePatchesInput) (*request.Request, *ssm.DescribeInstancePatchesOutput)) {
	fake.describeInstancePatchesRequestMutex.Lock()
	defer fake.describeInstancePatchesRequestMutex.Unlock()
	fake.DescribeInstancePatchesRequestStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchesRequestArgsForCall(i int) *ssm.DescribeInstancePatchesInput {
	fake.describeInstancePatchesRequestMutex.RLock()
	defer fake.describeInstancePatchesRequestMutex.RUnlock()
	argsForCall := fake.describeInstancePatchesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInstancePatchesRequestReturns(result1 *request.Request, result2 *ssm.DescribeInstancePatchesOutput) {
	fake.describeInstancePatchesRequestMutex.Lock()
	defer fake.describeInstancePatchesRequestMutex.Unlock()
	fake.DescribeInstancePatchesRequestStub = nil
	fake.describeInstancePatchesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeInstancePatchesOutput) {
	fake.describeInstancePatchesRequestMutex.Lock()
	defer fake.describeInstancePatchesRequestMutex.Unlock()
	fake.DescribeInstancePatchesRequestStub = nil
	if fake.describeInstancePatchesRequestReturnsOnCall == nil {
		fake.describeInstancePatchesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeInstancePatchesOutput
		})
	}
	fake.describeInstancePatchesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeInstancePatchesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchesWithContext(arg1 context.Context, arg2 *ssm.DescribeInstancePatchesInput, arg3 ...request.Option) (*ssm.DescribeInstancePatchesOutput, error) {
	fake.describeInstancePatchesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancePatchesWithContextReturnsOnCall[len(fake.describeInstancePatchesWithContextArgsForCall)]
	fake.describeInstancePatchesWithContextArgsForCall = append(fake.describeInstancePatchesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInstancePatchesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInstancePatchesWithContextStub
	fakeReturns := fake.describeInstancePatchesWithContextReturns
	fake.recordInvocation("DescribeInstancePatchesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstancePatchesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInstancePatchesWithContextCallCount() int {
	fake.describeInstancePatchesWithContextMutex.RLock()
	defer fake.describeInstancePatchesWithContextMutex.RUnlock()
	return len(fake.describeInstancePatchesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInstancePatchesWithContextCalls(stub func(context.Context, *ssm.DescribeInstancePatchesInput, ...request.Option) (*ssm.DescribeInstancePatchesOutput, error)) {
	fake.describeInstancePatchesWithContextMutex.Lock()
	defer fake.describeInstancePatchesWithContextMutex.Unlock()
	fake.DescribeInstancePatchesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInstancePatchesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInstancePatchesInput, []request.Option) {
	fake.describeInstancePatchesWithContextMutex.RLock()
	defer fake.describeInstancePatchesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancePatchesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeInstancePatchesWithContextReturns(result1 *ssm.DescribeInstancePatchesOutput, result2 error) {
	fake.describeInstancePatchesWithContextMutex.Lock()
	defer fake.describeInstancePatchesWithContextMutex.Unlock()
	fake.DescribeInstancePatchesWithContextStub = nil
	fake.describeInstancePatchesWithContextReturns = struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInstancePatchesWithContextReturnsOnCall(i int, result1 *ssm.DescribeInstancePatchesOutput, result2 error) {
	fake.describeInstancePatchesWithContextMutex.Lock()
	defer fake.describeInstancePatchesWithContextMutex.Unlock()
	fake.DescribeInstancePatchesWithContextStub = nil
	if fake.describeInstancePatchesWithContextReturnsOnCall == nil {
		fake.describeInstancePatchesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInstancePatchesOutput
			result2 error
		})
	}
	fake.describeInstancePatchesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInstancePatchesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInventoryDeletions(arg1 *ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error) {
	fake.describeInventoryDeletionsMutex.Lock()
	ret, specificReturn := fake.describeInventoryDeletionsReturnsOnCall[len(fake.describeInventoryDeletionsArgsForCall)]
	fake.describeInventoryDeletionsArgsForCall = append(fake.describeInventoryDeletionsArgsForCall, struct {
		arg1 *ssm.DescribeInventoryDeletionsInput
	}{arg1})
	stub := fake.DescribeInventoryDeletionsStub
	fakeReturns := fake.describeInventoryDeletionsReturns
	fake.recordInvocation("DescribeInventoryDeletions", []interface{}{arg1})
	fake.describeInventoryDeletionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsCallCount() int {
	fake.describeInventoryDeletionsMutex.RLock()
	defer fake.describeInventoryDeletionsMutex.RUnlock()
	return len(fake.describeInventoryDeletionsArgsForCall)
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsCalls(stub func(*ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error)) {
	fake.describeInventoryDeletionsMutex.Lock()
	defer fake.describeInventoryDeletionsMutex.Unlock()
	fake.DescribeInventoryDeletionsStub = stub
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsArgsForCall(i int) *ssm.DescribeInventoryDeletionsInput {
	fake.describeInventoryDeletionsMutex.RLock()
	defer fake.describeInventoryDeletionsMutex.RUnlock()
	argsForCall := fake.describeInventoryDeletionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsReturns(result1 *ssm.DescribeInventoryDeletionsOutput, result2 error) {
	fake.describeInventoryDeletionsMutex.Lock()
	defer fake.describeInventoryDeletionsMutex.Unlock()
	fake.DescribeInventoryDeletionsStub = nil
	fake.describeInventoryDeletionsReturns = struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsReturnsOnCall(i int, result1 *ssm.DescribeInventoryDeletionsOutput, result2 error) {
	fake.describeInventoryDeletionsMutex.Lock()
	defer fake.describeInventoryDeletionsMutex.Unlock()
	fake.DescribeInventoryDeletionsStub = nil
	if fake.describeInventoryDeletionsReturnsOnCall == nil {
		fake.describeInventoryDeletionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInventoryDeletionsOutput
			result2 error
		})
	}
	fake.describeInventoryDeletionsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPages(arg1 *ssm.DescribeInventoryDeletionsInput, arg2 func(*ssm.DescribeInventoryDeletionsOutput, bool) bool) error {
	fake.describeInventoryDeletionsPagesMutex.Lock()
	ret, specificReturn := fake.describeInventoryDeletionsPagesReturnsOnCall[len(fake.describeInventoryDeletionsPagesArgsForCall)]
	fake.describeInventoryDeletionsPagesArgsForCall = append(fake.describeInventoryDeletionsPagesArgsForCall, struct {
		arg1 *ssm.DescribeInventoryDeletionsInput
		arg2 func(*ssm.DescribeInventoryDeletionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeInventoryDeletionsPagesStub
	fakeReturns := fake.describeInventoryDeletionsPagesReturns
	fake.recordInvocation("DescribeInventoryDeletionsPages", []interface{}{arg1, arg2})
	fake.describeInventoryDeletionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesCallCount() int {
	fake.describeInventoryDeletionsPagesMutex.RLock()
	defer fake.describeInventoryDeletionsPagesMutex.RUnlock()
	return len(fake.describeInventoryDeletionsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesCalls(stub func(*ssm.DescribeInventoryDeletionsInput, func(*ssm.DescribeInventoryDeletionsOutput, bool) bool) error) {
	fake.describeInventoryDeletionsPagesMutex.Lock()
	defer fake.describeInventoryDeletionsPagesMutex.Unlock()
	fake.DescribeInventoryDeletionsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesArgsForCall(i int) (*ssm.DescribeInventoryDeletionsInput, func(*ssm.DescribeInventoryDeletionsOutput, bool) bool) {
	fake.describeInventoryDeletionsPagesMutex.RLock()
	defer fake.describeInventoryDeletionsPagesMutex.RUnlock()
	argsForCall := fake.describeInventoryDeletionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesReturns(result1 error) {
	fake.describeInventoryDeletionsPagesMutex.Lock()
	defer fake.describeInventoryDeletionsPagesMutex.Unlock()
	fake.DescribeInventoryDeletionsPagesStub = nil
	fake.describeInventoryDeletionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeInventoryDeletionsPagesMutex.Lock()
	defer fake.describeInventoryDeletionsPagesMutex.Unlock()
	fake.DescribeInventoryDeletionsPagesStub = nil
	if fake.describeInventoryDeletionsPagesReturnsOnCall == nil {
		fake.describeInventoryDeletionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInventoryDeletionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeInventoryDeletionsInput, arg3 func(*ssm.DescribeInventoryDeletionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInventoryDeletionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInventoryDeletionsPagesWithContextReturnsOnCall[len(fake.describeInventoryDeletionsPagesWithContextArgsForCall)]
	fake.describeInventoryDeletionsPagesWithContextArgsForCall = append(fake.describeInventoryDeletionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInventoryDeletionsInput
		arg3 func(*ssm.DescribeInventoryDeletionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeInventoryDeletionsPagesWithContextStub
	fakeReturns := fake.describeInventoryDeletionsPagesWithContextReturns
	fake.recordInvocation("DescribeInventoryDeletionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInventoryDeletionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesWithContextCallCount() int {
	fake.describeInventoryDeletionsPagesWithContextMutex.RLock()
	defer fake.describeInventoryDeletionsPagesWithContextMutex.RUnlock()
	return len(fake.describeInventoryDeletionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeInventoryDeletionsInput, func(*ssm.DescribeInventoryDeletionsOutput, bool) bool, ...request.Option) error) {
	fake.describeInventoryDeletionsPagesWithContextMutex.Lock()
	defer fake.describeInventoryDeletionsPagesWithContextMutex.Unlock()
	fake.DescribeInventoryDeletionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInventoryDeletionsInput, func(*ssm.DescribeInventoryDeletionsOutput, bool) bool, []request.Option) {
	fake.describeInventoryDeletionsPagesWithContextMutex.RLock()
	defer fake.describeInventoryDeletionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInventoryDeletionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesWithContextReturns(result1 error) {
	fake.describeInventoryDeletionsPagesWithContextMutex.Lock()
	defer fake.describeInventoryDeletionsPagesWithContextMutex.Unlock()
	fake.DescribeInventoryDeletionsPagesWithContextStub = nil
	fake.describeInventoryDeletionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInventoryDeletionsPagesWithContextMutex.Lock()
	defer fake.describeInventoryDeletionsPagesWithContextMutex.Unlock()
	fake.DescribeInventoryDeletionsPagesWithContextStub = nil
	if fake.describeInventoryDeletionsPagesWithContextReturnsOnCall == nil {
		fake.describeInventoryDeletionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInventoryDeletionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsRequest(arg1 *ssm.DescribeInventoryDeletionsInput) (*request.Request, *ssm.DescribeInventoryDeletionsOutput) {
	fake.describeInventoryDeletionsRequestMutex.Lock()
	ret, specificReturn := fake.describeInventoryDeletionsRequestReturnsOnCall[len(fake.describeInventoryDeletionsRequestArgsForCall)]
	fake.describeInventoryDeletionsRequestArgsForCall = append(fake.describeInventoryDeletionsRequestArgsForCall, struct {
		arg1 *ssm.DescribeInventoryDeletionsInput
	}{arg1})
	stub := fake.DescribeInventoryDeletionsRequestStub
	fakeReturns := fake.describeInventoryDeletionsRequestReturns
	fake.recordInvocation("DescribeInventoryDeletionsRequest", []interface{}{arg1})
	fake.describeInventoryDeletionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsRequestCallCount() int {
	fake.describeInventoryDeletionsRequestMutex.RLock()
	defer fake.describeInventoryDeletionsRequestMutex.RUnlock()
	return len(fake.describeInventoryDeletionsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsRequestCalls(stub func(*ssm.DescribeInventoryDeletionsInput) (*request.Request, *ssm.DescribeInventoryDeletionsOutput)) {
	fake.describeInventoryDeletionsRequestMutex.Lock()
	defer fake.describeInventoryDeletionsRequestMutex.Unlock()
	fake.DescribeInventoryDeletionsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsRequestArgsForCall(i int) *ssm.DescribeInventoryDeletionsInput {
	fake.describeInventoryDeletionsRequestMutex.RLock()
	defer fake.describeInventoryDeletionsRequestMutex.RUnlock()
	argsForCall := fake.describeInventoryDeletionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsRequestReturns(result1 *request.Request, result2 *ssm.DescribeInventoryDeletionsOutput) {
	fake.describeInventoryDeletionsRequestMutex.Lock()
	defer fake.describeInventoryDeletionsRequestMutex.Unlock()
	fake.DescribeInventoryDeletionsRequestStub = nil
	fake.describeInventoryDeletionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeInventoryDeletionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeInventoryDeletionsOutput) {
	fake.describeInventoryDeletionsRequestMutex.Lock()
	defer fake.describeInventoryDeletionsRequestMutex.Unlock()
	fake.DescribeInventoryDeletionsRequestStub = nil
	if fake.describeInventoryDeletionsRequestReturnsOnCall == nil {
		fake.describeInventoryDeletionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeInventoryDeletionsOutput
		})
	}
	fake.describeInventoryDeletionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeInventoryDeletionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsWithContext(arg1 context.Context, arg2 *ssm.DescribeInventoryDeletionsInput, arg3 ...request.Option) (*ssm.DescribeInventoryDeletionsOutput, error) {
	fake.describeInventoryDeletionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeInventoryDeletionsWithContextReturnsOnCall[len(fake.describeInventoryDeletionsWithContextArgsForCall)]
	fake.describeInventoryDeletionsWithContextArgsForCall = append(fake.describeInventoryDeletionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeInventoryDeletionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeInventoryDeletionsWithContextStub
	fakeReturns := fake.describeInventoryDeletionsWithContextReturns
	fake.recordInvocation("DescribeInventoryDeletionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInventoryDeletionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsWithContextCallCount() int {
	fake.describeInventoryDeletionsWithContextMutex.RLock()
	defer fake.describeInventoryDeletionsWithContextMutex.RUnlock()
	return len(fake.describeInventoryDeletionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsWithContextCalls(stub func(context.Context, *ssm.DescribeInventoryDeletionsInput, ...request.Option) (*ssm.DescribeInventoryDeletionsOutput, error)) {
	fake.describeInventoryDeletionsWithContextMutex.Lock()
	defer fake.describeInventoryDeletionsWithContextMutex.Unlock()
	fake.DescribeInventoryDeletionsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeInventoryDeletionsInput, []request.Option) {
	fake.describeInventoryDeletionsWithContextMutex.RLock()
	defer fake.describeInventoryDeletionsWithContextMutex.RUnlock()
	argsForCall := fake.describeInventoryDeletionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsWithContextReturns(result1 *ssm.DescribeInventoryDeletionsOutput, result2 error) {
	fake.describeInventoryDeletionsWithContextMutex.Lock()
	defer fake.describeInventoryDeletionsWithContextMutex.Unlock()
	fake.DescribeInventoryDeletionsWithContextStub = nil
	fake.describeInventoryDeletionsWithContextReturns = struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeInventoryDeletionsWithContextReturnsOnCall(i int, result1 *ssm.DescribeInventoryDeletionsOutput, result2 error) {
	fake.describeInventoryDeletionsWithContextMutex.Lock()
	defer fake.describeInventoryDeletionsWithContextMutex.Unlock()
	fake.DescribeInventoryDeletionsWithContextStub = nil
	if fake.describeInventoryDeletionsWithContextReturnsOnCall == nil {
		fake.describeInventoryDeletionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeInventoryDeletionsOutput
			result2 error
		})
	}
	fake.describeInventoryDeletionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeInventoryDeletionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocations(arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTaskInvocationsReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTaskInvocationsArgsForCall)]
	fake.describeMaintenanceWindowExecutionTaskInvocationsArgsForCall = append(fake.describeMaintenanceWindowExecutionTaskInvocationsArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowExecutionTaskInvocationsStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTaskInvocationsReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTaskInvocations", []interface{}{arg1})
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsCallCount() int {
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTaskInvocationsArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsArgsForCall(i int) *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput {
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTaskInvocationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsReturns(result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsStub = nil
	fake.describeMaintenanceWindowExecutionTaskInvocationsReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsStub = nil
	if fake.describeMaintenanceWindowExecutionTaskInvocationsReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTaskInvocationsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowExecutionTaskInvocationsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPages(arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, arg2 func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool) error {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTaskInvocationsPagesReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall)]
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall = append(fake.describeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
		arg2 func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTaskInvocationsPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTaskInvocationsPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesCallCount() int {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool) error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTaskInvocationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesReturns(result1 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesStub = nil
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesStub = nil
	if fake.describeMaintenanceWindowExecutionTaskInvocationsPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTaskInvocationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, arg3 func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
		arg3 func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextStub = nil
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsPagesWithContextStub = nil
	if fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsRequest(arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTaskInvocationsRequestReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall)]
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall = append(fake.describeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowExecutionTaskInvocationsRequestStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTaskInvocationsRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTaskInvocationsRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsRequestCallCount() int {
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsRequestCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput {
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTaskInvocationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsRequestStub = nil
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsRequestStub = nil
	if fake.describeMaintenanceWindowExecutionTaskInvocationsRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTaskInvocationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		})
	}
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall)]
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall = append(fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowExecutionTaskInvocationsWithContextStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTaskInvocationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsWithContextCallCount() int {
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error)) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, []request.Option) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsWithContextReturns(result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsWithContextStub = nil
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTaskInvocationsWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTaskInvocationsWithContextStub = nil
	if fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasks(arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	fake.describeMaintenanceWindowExecutionTasksMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTasksReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTasksArgsForCall)]
	fake.describeMaintenanceWindowExecutionTasksArgsForCall = append(fake.describeMaintenanceWindowExecutionTasksArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowExecutionTasksStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTasksReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTasks", []interface{}{arg1})
	fake.describeMaintenanceWindowExecutionTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksCallCount() int {
	fake.describeMaintenanceWindowExecutionTasksMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTasksArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)) {
	fake.describeMaintenanceWindowExecutionTasksMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksArgsForCall(i int) *ssm.DescribeMaintenanceWindowExecutionTasksInput {
	fake.describeMaintenanceWindowExecutionTasksMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksReturns(result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTasksMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksStub = nil
	fake.describeMaintenanceWindowExecutionTasksReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTasksMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksStub = nil
	if fake.describeMaintenanceWindowExecutionTasksReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTasksReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowExecutionTasksReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPages(arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput, arg2 func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool) error {
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTasksPagesReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTasksPagesArgsForCall)]
	fake.describeMaintenanceWindowExecutionTasksPagesArgsForCall = append(fake.describeMaintenanceWindowExecutionTasksPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput
		arg2 func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowExecutionTasksPagesStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTasksPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTasksPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesCallCount() int {
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTasksPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionTasksInput, func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool) error) {
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowExecutionTasksInput, func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool) {
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTasksPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesReturns(result1 error) {
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksPagesStub = nil
	fake.describeMaintenanceWindowExecutionTasksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksPagesStub = nil
	if fake.describeMaintenanceWindowExecutionTasksPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTasksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowExecutionTasksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowExecutionTasksInput, arg3 func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTasksPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTasksInput
		arg3 func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowExecutionTasksPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTasksPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTasksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTasksInput, func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowExecutionTasksInput, func(*ssm.DescribeMaintenanceWindowExecutionTasksOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTasksPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksPagesWithContextStub = nil
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksPagesWithContextStub = nil
	if fake.describeMaintenanceWindowExecutionTasksPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTasksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksRequest(arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTasksOutput) {
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTasksRequestReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTasksRequestArgsForCall)]
	fake.describeMaintenanceWindowExecutionTasksRequestArgsForCall = append(fake.describeMaintenanceWindowExecutionTasksRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowExecutionTasksRequestStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTasksRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTasksRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksRequestCallCount() int {
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTasksRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksRequestCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTasksOutput)) {
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowExecutionTasksInput {
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput) {
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksRequestStub = nil
	fake.describeMaintenanceWindowExecutionTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput) {
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksRequestStub = nil
	if fake.describeMaintenanceWindowExecutionTasksRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		})
	}
	fake.describeMaintenanceWindowExecutionTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowExecutionTasksInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionTasksWithContextReturnsOnCall[len(fake.describeMaintenanceWindowExecutionTasksWithContextArgsForCall)]
	fake.describeMaintenanceWindowExecutionTasksWithContextArgsForCall = append(fake.describeMaintenanceWindowExecutionTasksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowExecutionTasksWithContextStub
	fakeReturns := fake.describeMaintenanceWindowExecutionTasksWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksWithContextCallCount() int {
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionTasksWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowExecutionTasksInput, ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error)) {
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowExecutionTasksInput, []request.Option) {
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksWithContextReturns(result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksWithContextStub = nil
	fake.describeMaintenanceWindowExecutionTasksWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionTasksWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionTasksWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionTasksWithContextStub = nil
	if fake.describeMaintenanceWindowExecutionTasksWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowExecutionTasksWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutions(arg1 *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	fake.describeMaintenanceWindowExecutionsMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionsReturnsOnCall[len(fake.describeMaintenanceWindowExecutionsArgsForCall)]
	fake.describeMaintenanceWindowExecutionsArgsForCall = append(fake.describeMaintenanceWindowExecutionsArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowExecutionsStub
	fakeReturns := fake.describeMaintenanceWindowExecutionsReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutions", []interface{}{arg1})
	fake.describeMaintenanceWindowExecutionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsCallCount() int {
	fake.describeMaintenanceWindowExecutionsMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionsArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)) {
	fake.describeMaintenanceWindowExecutionsMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsArgsForCall(i int) *ssm.DescribeMaintenanceWindowExecutionsInput {
	fake.describeMaintenanceWindowExecutionsMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsReturns(result1 *ssm.DescribeMaintenanceWindowExecutionsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionsMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsStub = nil
	fake.describeMaintenanceWindowExecutionsReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowExecutionsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionsMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsStub = nil
	if fake.describeMaintenanceWindowExecutionsReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowExecutionsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPages(arg1 *ssm.DescribeMaintenanceWindowExecutionsInput, arg2 func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool) error {
	fake.describeMaintenanceWindowExecutionsPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionsPagesReturnsOnCall[len(fake.describeMaintenanceWindowExecutionsPagesArgsForCall)]
	fake.describeMaintenanceWindowExecutionsPagesArgsForCall = append(fake.describeMaintenanceWindowExecutionsPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionsInput
		arg2 func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowExecutionsPagesStub
	fakeReturns := fake.describeMaintenanceWindowExecutionsPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionsPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowExecutionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesCallCount() int {
	fake.describeMaintenanceWindowExecutionsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionsInput, func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool) error) {
	fake.describeMaintenanceWindowExecutionsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowExecutionsInput, func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool) {
	fake.describeMaintenanceWindowExecutionsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesReturns(result1 error) {
	fake.describeMaintenanceWindowExecutionsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsPagesStub = nil
	fake.describeMaintenanceWindowExecutionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowExecutionsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsPagesStub = nil
	if fake.describeMaintenanceWindowExecutionsPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowExecutionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowExecutionsInput, arg3 func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionsPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowExecutionsPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowExecutionsPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowExecutionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionsInput
		arg3 func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowExecutionsPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowExecutionsPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowExecutionsInput, func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowExecutionsInput, func(*ssm.DescribeMaintenanceWindowExecutionsOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsPagesWithContextStub = nil
	fake.describeMaintenanceWindowExecutionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsPagesWithContextStub = nil
	if fake.describeMaintenanceWindowExecutionsPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowExecutionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsRequest(arg1 *ssm.DescribeMaintenanceWindowExecutionsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionsOutput) {
	fake.describeMaintenanceWindowExecutionsRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionsRequestReturnsOnCall[len(fake.describeMaintenanceWindowExecutionsRequestArgsForCall)]
	fake.describeMaintenanceWindowExecutionsRequestArgsForCall = append(fake.describeMaintenanceWindowExecutionsRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowExecutionsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowExecutionsRequestStub
	fakeReturns := fake.describeMaintenanceWindowExecutionsRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionsRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowExecutionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsRequestCallCount() int {
	fake.describeMaintenanceWindowExecutionsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsRequestCalls(stub func(*ssm.DescribeMaintenanceWindowExecutionsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionsOutput)) {
	fake.describeMaintenanceWindowExecutionsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowExecutionsInput {
	fake.describeMaintenanceWindowExecutionsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowExecutionsOutput) {
	fake.describeMaintenanceWindowExecutionsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsRequestStub = nil
	fake.describeMaintenanceWindowExecutionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowExecutionsOutput) {
	fake.describeMaintenanceWindowExecutionsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsRequestStub = nil
	if fake.describeMaintenanceWindowExecutionsRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowExecutionsOutput
		})
	}
	fake.describeMaintenanceWindowExecutionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowExecutionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowExecutionsInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	fake.describeMaintenanceWindowExecutionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowExecutionsWithContextReturnsOnCall[len(fake.describeMaintenanceWindowExecutionsWithContextArgsForCall)]
	fake.describeMaintenanceWindowExecutionsWithContextArgsForCall = append(fake.describeMaintenanceWindowExecutionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowExecutionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowExecutionsWithContextStub
	fakeReturns := fake.describeMaintenanceWindowExecutionsWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowExecutionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowExecutionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsWithContextCallCount() int {
	fake.describeMaintenanceWindowExecutionsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowExecutionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowExecutionsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error)) {
	fake.describeMaintenanceWindowExecutionsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowExecutionsInput, []request.Option) {
	fake.describeMaintenanceWindowExecutionsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowExecutionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsWithContextReturns(result1 *ssm.DescribeMaintenanceWindowExecutionsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsWithContextStub = nil
	fake.describeMaintenanceWindowExecutionsWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowExecutionsWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowExecutionsOutput, result2 error) {
	fake.describeMaintenanceWindowExecutionsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowExecutionsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowExecutionsWithContextStub = nil
	if fake.describeMaintenanceWindowExecutionsWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowExecutionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowExecutionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowExecutionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedule(arg1 *ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	fake.describeMaintenanceWindowScheduleMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowScheduleReturnsOnCall[len(fake.describeMaintenanceWindowScheduleArgsForCall)]
	fake.describeMaintenanceWindowScheduleArgsForCall = append(fake.describeMaintenanceWindowScheduleArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowScheduleInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowScheduleStub
	fakeReturns := fake.describeMaintenanceWindowScheduleReturns
	fake.recordInvocation("DescribeMaintenanceWindowSchedule", []interface{}{arg1})
	fake.describeMaintenanceWindowScheduleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleCallCount() int {
	fake.describeMaintenanceWindowScheduleMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleMutex.RUnlock()
	return len(fake.describeMaintenanceWindowScheduleArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleCalls(stub func(*ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)) {
	fake.describeMaintenanceWindowScheduleMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleArgsForCall(i int) *ssm.DescribeMaintenanceWindowScheduleInput {
	fake.describeMaintenanceWindowScheduleMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowScheduleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleReturns(result1 *ssm.DescribeMaintenanceWindowScheduleOutput, result2 error) {
	fake.describeMaintenanceWindowScheduleMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleStub = nil
	fake.describeMaintenanceWindowScheduleReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowScheduleOutput, result2 error) {
	fake.describeMaintenanceWindowScheduleMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleStub = nil
	if fake.describeMaintenanceWindowScheduleReturnsOnCall == nil {
		fake.describeMaintenanceWindowScheduleReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowScheduleOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowScheduleReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePages(arg1 *ssm.DescribeMaintenanceWindowScheduleInput, arg2 func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool) error {
	fake.describeMaintenanceWindowSchedulePagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowSchedulePagesReturnsOnCall[len(fake.describeMaintenanceWindowSchedulePagesArgsForCall)]
	fake.describeMaintenanceWindowSchedulePagesArgsForCall = append(fake.describeMaintenanceWindowSchedulePagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowScheduleInput
		arg2 func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowSchedulePagesStub
	fakeReturns := fake.describeMaintenanceWindowSchedulePagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowSchedulePages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowSchedulePagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesCallCount() int {
	fake.describeMaintenanceWindowSchedulePagesMutex.RLock()
	defer fake.describeMaintenanceWindowSchedulePagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowSchedulePagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesCalls(stub func(*ssm.DescribeMaintenanceWindowScheduleInput, func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool) error) {
	fake.describeMaintenanceWindowSchedulePagesMutex.Lock()
	defer fake.describeMaintenanceWindowSchedulePagesMutex.Unlock()
	fake.DescribeMaintenanceWindowSchedulePagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowScheduleInput, func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool) {
	fake.describeMaintenanceWindowSchedulePagesMutex.RLock()
	defer fake.describeMaintenanceWindowSchedulePagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowSchedulePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesReturns(result1 error) {
	fake.describeMaintenanceWindowSchedulePagesMutex.Lock()
	defer fake.describeMaintenanceWindowSchedulePagesMutex.Unlock()
	fake.DescribeMaintenanceWindowSchedulePagesStub = nil
	fake.describeMaintenanceWindowSchedulePagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowSchedulePagesMutex.Lock()
	defer fake.describeMaintenanceWindowSchedulePagesMutex.Unlock()
	fake.DescribeMaintenanceWindowSchedulePagesStub = nil
	if fake.describeMaintenanceWindowSchedulePagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowSchedulePagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowSchedulePagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowScheduleInput, arg3 func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowSchedulePagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowSchedulePagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowSchedulePagesWithContextArgsForCall = append(fake.describeMaintenanceWindowSchedulePagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowScheduleInput
		arg3 func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowSchedulePagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowSchedulePagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowSchedulePagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesWithContextCallCount() int {
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowSchedulePagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowSchedulePagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowScheduleInput, func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowSchedulePagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowScheduleInput, func(*ssm.DescribeMaintenanceWindowScheduleOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowSchedulePagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowSchedulePagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowSchedulePagesWithContextStub = nil
	fake.describeMaintenanceWindowSchedulePagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowSchedulePagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowSchedulePagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowSchedulePagesWithContextStub = nil
	if fake.describeMaintenanceWindowSchedulePagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowSchedulePagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowSchedulePagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleRequest(arg1 *ssm.DescribeMaintenanceWindowScheduleInput) (*request.Request, *ssm.DescribeMaintenanceWindowScheduleOutput) {
	fake.describeMaintenanceWindowScheduleRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowScheduleRequestReturnsOnCall[len(fake.describeMaintenanceWindowScheduleRequestArgsForCall)]
	fake.describeMaintenanceWindowScheduleRequestArgsForCall = append(fake.describeMaintenanceWindowScheduleRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowScheduleInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowScheduleRequestStub
	fakeReturns := fake.describeMaintenanceWindowScheduleRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowScheduleRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowScheduleRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleRequestCallCount() int {
	fake.describeMaintenanceWindowScheduleRequestMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowScheduleRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleRequestCalls(stub func(*ssm.DescribeMaintenanceWindowScheduleInput) (*request.Request, *ssm.DescribeMaintenanceWindowScheduleOutput)) {
	fake.describeMaintenanceWindowScheduleRequestMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowScheduleInput {
	fake.describeMaintenanceWindowScheduleRequestMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowScheduleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowScheduleOutput) {
	fake.describeMaintenanceWindowScheduleRequestMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleRequestStub = nil
	fake.describeMaintenanceWindowScheduleRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowScheduleOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowScheduleOutput) {
	fake.describeMaintenanceWindowScheduleRequestMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleRequestStub = nil
	if fake.describeMaintenanceWindowScheduleRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowScheduleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowScheduleOutput
		})
	}
	fake.describeMaintenanceWindowScheduleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowScheduleOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowScheduleInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	fake.describeMaintenanceWindowScheduleWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowScheduleWithContextReturnsOnCall[len(fake.describeMaintenanceWindowScheduleWithContextArgsForCall)]
	fake.describeMaintenanceWindowScheduleWithContextArgsForCall = append(fake.describeMaintenanceWindowScheduleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowScheduleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowScheduleWithContextStub
	fakeReturns := fake.describeMaintenanceWindowScheduleWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowScheduleWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowScheduleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleWithContextCallCount() int {
	fake.describeMaintenanceWindowScheduleWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowScheduleWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowScheduleInput, ...request.Option) (*ssm.DescribeMaintenanceWindowScheduleOutput, error)) {
	fake.describeMaintenanceWindowScheduleWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowScheduleInput, []request.Option) {
	fake.describeMaintenanceWindowScheduleWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowScheduleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleWithContextReturns(result1 *ssm.DescribeMaintenanceWindowScheduleOutput, result2 error) {
	fake.describeMaintenanceWindowScheduleWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleWithContextStub = nil
	fake.describeMaintenanceWindowScheduleWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowScheduleWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowScheduleOutput, result2 error) {
	fake.describeMaintenanceWindowScheduleWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowScheduleWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowScheduleWithContextStub = nil
	if fake.describeMaintenanceWindowScheduleWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowScheduleWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowScheduleOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowScheduleWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowScheduleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargets(arg1 *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	fake.describeMaintenanceWindowTargetsMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTargetsReturnsOnCall[len(fake.describeMaintenanceWindowTargetsArgsForCall)]
	fake.describeMaintenanceWindowTargetsArgsForCall = append(fake.describeMaintenanceWindowTargetsArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowTargetsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowTargetsStub
	fakeReturns := fake.describeMaintenanceWindowTargetsReturns
	fake.recordInvocation("DescribeMaintenanceWindowTargets", []interface{}{arg1})
	fake.describeMaintenanceWindowTargetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsCallCount() int {
	fake.describeMaintenanceWindowTargetsMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTargetsArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsCalls(stub func(*ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)) {
	fake.describeMaintenanceWindowTargetsMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsArgsForCall(i int) *ssm.DescribeMaintenanceWindowTargetsInput {
	fake.describeMaintenanceWindowTargetsMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsReturns(result1 *ssm.DescribeMaintenanceWindowTargetsOutput, result2 error) {
	fake.describeMaintenanceWindowTargetsMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsStub = nil
	fake.describeMaintenanceWindowTargetsReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowTargetsOutput, result2 error) {
	fake.describeMaintenanceWindowTargetsMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsStub = nil
	if fake.describeMaintenanceWindowTargetsReturnsOnCall == nil {
		fake.describeMaintenanceWindowTargetsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowTargetsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowTargetsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPages(arg1 *ssm.DescribeMaintenanceWindowTargetsInput, arg2 func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool) error {
	fake.describeMaintenanceWindowTargetsPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTargetsPagesReturnsOnCall[len(fake.describeMaintenanceWindowTargetsPagesArgsForCall)]
	fake.describeMaintenanceWindowTargetsPagesArgsForCall = append(fake.describeMaintenanceWindowTargetsPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowTargetsInput
		arg2 func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowTargetsPagesStub
	fakeReturns := fake.describeMaintenanceWindowTargetsPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowTargetsPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowTargetsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesCallCount() int {
	fake.describeMaintenanceWindowTargetsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTargetsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesCalls(stub func(*ssm.DescribeMaintenanceWindowTargetsInput, func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool) error) {
	fake.describeMaintenanceWindowTargetsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowTargetsInput, func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool) {
	fake.describeMaintenanceWindowTargetsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTargetsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesReturns(result1 error) {
	fake.describeMaintenanceWindowTargetsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsPagesStub = nil
	fake.describeMaintenanceWindowTargetsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowTargetsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsPagesStub = nil
	if fake.describeMaintenanceWindowTargetsPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowTargetsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowTargetsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowTargetsInput, arg3 func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTargetsPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowTargetsPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowTargetsPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowTargetsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTargetsInput
		arg3 func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowTargetsPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowTargetsPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowTargetsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTargetsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowTargetsInput, func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowTargetsInput, func(*ssm.DescribeMaintenanceWindowTargetsOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTargetsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsPagesWithContextStub = nil
	fake.describeMaintenanceWindowTargetsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsPagesWithContextStub = nil
	if fake.describeMaintenanceWindowTargetsPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowTargetsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowTargetsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsRequest(arg1 *ssm.DescribeMaintenanceWindowTargetsInput) (*request.Request, *ssm.DescribeMaintenanceWindowTargetsOutput) {
	fake.describeMaintenanceWindowTargetsRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTargetsRequestReturnsOnCall[len(fake.describeMaintenanceWindowTargetsRequestArgsForCall)]
	fake.describeMaintenanceWindowTargetsRequestArgsForCall = append(fake.describeMaintenanceWindowTargetsRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowTargetsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowTargetsRequestStub
	fakeReturns := fake.describeMaintenanceWindowTargetsRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowTargetsRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowTargetsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsRequestCallCount() int {
	fake.describeMaintenanceWindowTargetsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTargetsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsRequestCalls(stub func(*ssm.DescribeMaintenanceWindowTargetsInput) (*request.Request, *ssm.DescribeMaintenanceWindowTargetsOutput)) {
	fake.describeMaintenanceWindowTargetsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowTargetsInput {
	fake.describeMaintenanceWindowTargetsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowTargetsOutput) {
	fake.describeMaintenanceWindowTargetsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsRequestStub = nil
	fake.describeMaintenanceWindowTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTargetsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowTargetsOutput) {
	fake.describeMaintenanceWindowTargetsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsRequestStub = nil
	if fake.describeMaintenanceWindowTargetsRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowTargetsOutput
		})
	}
	fake.describeMaintenanceWindowTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTargetsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowTargetsInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	fake.describeMaintenanceWindowTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTargetsWithContextReturnsOnCall[len(fake.describeMaintenanceWindowTargetsWithContextArgsForCall)]
	fake.describeMaintenanceWindowTargetsWithContextArgsForCall = append(fake.describeMaintenanceWindowTargetsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowTargetsWithContextStub
	fakeReturns := fake.describeMaintenanceWindowTargetsWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowTargetsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsWithContextCallCount() int {
	fake.describeMaintenanceWindowTargetsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTargetsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowTargetsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error)) {
	fake.describeMaintenanceWindowTargetsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowTargetsInput, []request.Option) {
	fake.describeMaintenanceWindowTargetsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsWithContextReturns(result1 *ssm.DescribeMaintenanceWindowTargetsOutput, result2 error) {
	fake.describeMaintenanceWindowTargetsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsWithContextStub = nil
	fake.describeMaintenanceWindowTargetsWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTargetsWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowTargetsOutput, result2 error) {
	fake.describeMaintenanceWindowTargetsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTargetsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTargetsWithContextStub = nil
	if fake.describeMaintenanceWindowTargetsWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowTargetsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowTargetsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasks(arg1 *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	fake.describeMaintenanceWindowTasksMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTasksReturnsOnCall[len(fake.describeMaintenanceWindowTasksArgsForCall)]
	fake.describeMaintenanceWindowTasksArgsForCall = append(fake.describeMaintenanceWindowTasksArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowTasksInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowTasksStub
	fakeReturns := fake.describeMaintenanceWindowTasksReturns
	fake.recordInvocation("DescribeMaintenanceWindowTasks", []interface{}{arg1})
	fake.describeMaintenanceWindowTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksCallCount() int {
	fake.describeMaintenanceWindowTasksMutex.RLock()
	defer fake.describeMaintenanceWindowTasksMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTasksArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksCalls(stub func(*ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error)) {
	fake.describeMaintenanceWindowTasksMutex.Lock()
	defer fake.describeMaintenanceWindowTasksMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksArgsForCall(i int) *ssm.DescribeMaintenanceWindowTasksInput {
	fake.describeMaintenanceWindowTasksMutex.RLock()
	defer fake.describeMaintenanceWindowTasksMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksReturns(result1 *ssm.DescribeMaintenanceWindowTasksOutput, result2 error) {
	fake.describeMaintenanceWindowTasksMutex.Lock()
	defer fake.describeMaintenanceWindowTasksMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksStub = nil
	fake.describeMaintenanceWindowTasksReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowTasksOutput, result2 error) {
	fake.describeMaintenanceWindowTasksMutex.Lock()
	defer fake.describeMaintenanceWindowTasksMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksStub = nil
	if fake.describeMaintenanceWindowTasksReturnsOnCall == nil {
		fake.describeMaintenanceWindowTasksReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowTasksOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowTasksReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPages(arg1 *ssm.DescribeMaintenanceWindowTasksInput, arg2 func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool) error {
	fake.describeMaintenanceWindowTasksPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTasksPagesReturnsOnCall[len(fake.describeMaintenanceWindowTasksPagesArgsForCall)]
	fake.describeMaintenanceWindowTasksPagesArgsForCall = append(fake.describeMaintenanceWindowTasksPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowTasksInput
		arg2 func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowTasksPagesStub
	fakeReturns := fake.describeMaintenanceWindowTasksPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowTasksPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowTasksPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesCallCount() int {
	fake.describeMaintenanceWindowTasksPagesMutex.RLock()
	defer fake.describeMaintenanceWindowTasksPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTasksPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesCalls(stub func(*ssm.DescribeMaintenanceWindowTasksInput, func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool) error) {
	fake.describeMaintenanceWindowTasksPagesMutex.Lock()
	defer fake.describeMaintenanceWindowTasksPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowTasksInput, func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool) {
	fake.describeMaintenanceWindowTasksPagesMutex.RLock()
	defer fake.describeMaintenanceWindowTasksPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTasksPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesReturns(result1 error) {
	fake.describeMaintenanceWindowTasksPagesMutex.Lock()
	defer fake.describeMaintenanceWindowTasksPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksPagesStub = nil
	fake.describeMaintenanceWindowTasksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowTasksPagesMutex.Lock()
	defer fake.describeMaintenanceWindowTasksPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksPagesStub = nil
	if fake.describeMaintenanceWindowTasksPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowTasksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowTasksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowTasksInput, arg3 func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTasksPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowTasksPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowTasksPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowTasksPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTasksInput
		arg3 func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowTasksPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowTasksPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowTasksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTasksPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTasksPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowTasksInput, func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTasksPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowTasksInput, func(*ssm.DescribeMaintenanceWindowTasksOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTasksPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTasksPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTasksPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksPagesWithContextStub = nil
	fake.describeMaintenanceWindowTasksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTasksPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksPagesWithContextStub = nil
	if fake.describeMaintenanceWindowTasksPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowTasksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowTasksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksRequest(arg1 *ssm.DescribeMaintenanceWindowTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowTasksOutput) {
	fake.describeMaintenanceWindowTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTasksRequestReturnsOnCall[len(fake.describeMaintenanceWindowTasksRequestArgsForCall)]
	fake.describeMaintenanceWindowTasksRequestArgsForCall = append(fake.describeMaintenanceWindowTasksRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowTasksInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowTasksRequestStub
	fakeReturns := fake.describeMaintenanceWindowTasksRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowTasksRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowTasksRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksRequestCallCount() int {
	fake.describeMaintenanceWindowTasksRequestMutex.RLock()
	defer fake.describeMaintenanceWindowTasksRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTasksRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksRequestCalls(stub func(*ssm.DescribeMaintenanceWindowTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowTasksOutput)) {
	fake.describeMaintenanceWindowTasksRequestMutex.Lock()
	defer fake.describeMaintenanceWindowTasksRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowTasksInput {
	fake.describeMaintenanceWindowTasksRequestMutex.RLock()
	defer fake.describeMaintenanceWindowTasksRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowTasksOutput) {
	fake.describeMaintenanceWindowTasksRequestMutex.Lock()
	defer fake.describeMaintenanceWindowTasksRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksRequestStub = nil
	fake.describeMaintenanceWindowTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTasksOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowTasksOutput) {
	fake.describeMaintenanceWindowTasksRequestMutex.Lock()
	defer fake.describeMaintenanceWindowTasksRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksRequestStub = nil
	if fake.describeMaintenanceWindowTasksRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowTasksOutput
		})
	}
	fake.describeMaintenanceWindowTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowTasksOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowTasksInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	fake.describeMaintenanceWindowTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowTasksWithContextReturnsOnCall[len(fake.describeMaintenanceWindowTasksWithContextArgsForCall)]
	fake.describeMaintenanceWindowTasksWithContextArgsForCall = append(fake.describeMaintenanceWindowTasksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowTasksWithContextStub
	fakeReturns := fake.describeMaintenanceWindowTasksWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowTasksWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksWithContextCallCount() int {
	fake.describeMaintenanceWindowTasksWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTasksWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowTasksWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowTasksInput, ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error)) {
	fake.describeMaintenanceWindowTasksWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTasksWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowTasksInput, []request.Option) {
	fake.describeMaintenanceWindowTasksWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksWithContextReturns(result1 *ssm.DescribeMaintenanceWindowTasksOutput, result2 error) {
	fake.describeMaintenanceWindowTasksWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTasksWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksWithContextStub = nil
	fake.describeMaintenanceWindowTasksWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowTasksWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowTasksOutput, result2 error) {
	fake.describeMaintenanceWindowTasksWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowTasksWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowTasksWithContextStub = nil
	if fake.describeMaintenanceWindowTasksWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowTasksOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowTasksWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindows(arg1 *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	fake.describeMaintenanceWindowsMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsReturnsOnCall[len(fake.describeMaintenanceWindowsArgsForCall)]
	fake.describeMaintenanceWindowsArgsForCall = append(fake.describeMaintenanceWindowsArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowsStub
	fakeReturns := fake.describeMaintenanceWindowsReturns
	fake.recordInvocation("DescribeMaintenanceWindows", []interface{}{arg1})
	fake.describeMaintenanceWindowsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsCallCount() int {
	fake.describeMaintenanceWindowsMutex.RLock()
	defer fake.describeMaintenanceWindowsMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsCalls(stub func(*ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error)) {
	fake.describeMaintenanceWindowsMutex.Lock()
	defer fake.describeMaintenanceWindowsMutex.Unlock()
	fake.DescribeMaintenanceWindowsStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsArgsForCall(i int) *ssm.DescribeMaintenanceWindowsInput {
	fake.describeMaintenanceWindowsMutex.RLock()
	defer fake.describeMaintenanceWindowsMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsReturns(result1 *ssm.DescribeMaintenanceWindowsOutput, result2 error) {
	fake.describeMaintenanceWindowsMutex.Lock()
	defer fake.describeMaintenanceWindowsMutex.Unlock()
	fake.DescribeMaintenanceWindowsStub = nil
	fake.describeMaintenanceWindowsReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowsOutput, result2 error) {
	fake.describeMaintenanceWindowsMutex.Lock()
	defer fake.describeMaintenanceWindowsMutex.Unlock()
	fake.DescribeMaintenanceWindowsStub = nil
	if fake.describeMaintenanceWindowsReturnsOnCall == nil {
		fake.describeMaintenanceWindowsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTarget(arg1 *ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	fake.describeMaintenanceWindowsForTargetMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsForTargetReturnsOnCall[len(fake.describeMaintenanceWindowsForTargetArgsForCall)]
	fake.describeMaintenanceWindowsForTargetArgsForCall = append(fake.describeMaintenanceWindowsForTargetArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowsForTargetInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowsForTargetStub
	fakeReturns := fake.describeMaintenanceWindowsForTargetReturns
	fake.recordInvocation("DescribeMaintenanceWindowsForTarget", []interface{}{arg1})
	fake.describeMaintenanceWindowsForTargetMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetCallCount() int {
	fake.describeMaintenanceWindowsForTargetMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsForTargetArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetCalls(stub func(*ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)) {
	fake.describeMaintenanceWindowsForTargetMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetArgsForCall(i int) *ssm.DescribeMaintenanceWindowsForTargetInput {
	fake.describeMaintenanceWindowsForTargetMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsForTargetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetReturns(result1 *ssm.DescribeMaintenanceWindowsForTargetOutput, result2 error) {
	fake.describeMaintenanceWindowsForTargetMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetStub = nil
	fake.describeMaintenanceWindowsForTargetReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowsForTargetOutput, result2 error) {
	fake.describeMaintenanceWindowsForTargetMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetStub = nil
	if fake.describeMaintenanceWindowsForTargetReturnsOnCall == nil {
		fake.describeMaintenanceWindowsForTargetReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowsForTargetReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPages(arg1 *ssm.DescribeMaintenanceWindowsForTargetInput, arg2 func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool) error {
	fake.describeMaintenanceWindowsForTargetPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsForTargetPagesReturnsOnCall[len(fake.describeMaintenanceWindowsForTargetPagesArgsForCall)]
	fake.describeMaintenanceWindowsForTargetPagesArgsForCall = append(fake.describeMaintenanceWindowsForTargetPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowsForTargetInput
		arg2 func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowsForTargetPagesStub
	fakeReturns := fake.describeMaintenanceWindowsForTargetPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowsForTargetPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowsForTargetPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesCallCount() int {
	fake.describeMaintenanceWindowsForTargetPagesMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsForTargetPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesCalls(stub func(*ssm.DescribeMaintenanceWindowsForTargetInput, func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool) error) {
	fake.describeMaintenanceWindowsForTargetPagesMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowsForTargetInput, func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool) {
	fake.describeMaintenanceWindowsForTargetPagesMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsForTargetPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesReturns(result1 error) {
	fake.describeMaintenanceWindowsForTargetPagesMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetPagesStub = nil
	fake.describeMaintenanceWindowsForTargetPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowsForTargetPagesMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetPagesStub = nil
	if fake.describeMaintenanceWindowsForTargetPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowsForTargetPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowsForTargetPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowsForTargetInput, arg3 func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsForTargetPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowsForTargetPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowsForTargetPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowsForTargetPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsForTargetInput
		arg3 func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowsForTargetPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowsForTargetPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowsForTargetPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsForTargetPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowsForTargetInput, func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowsForTargetInput, func(*ssm.DescribeMaintenanceWindowsForTargetOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsForTargetPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetPagesWithContextStub = nil
	fake.describeMaintenanceWindowsForTargetPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetPagesWithContextStub = nil
	if fake.describeMaintenanceWindowsForTargetPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowsForTargetPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowsForTargetPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetRequest(arg1 *ssm.DescribeMaintenanceWindowsForTargetInput) (*request.Request, *ssm.DescribeMaintenanceWindowsForTargetOutput) {
	fake.describeMaintenanceWindowsForTargetRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsForTargetRequestReturnsOnCall[len(fake.describeMaintenanceWindowsForTargetRequestArgsForCall)]
	fake.describeMaintenanceWindowsForTargetRequestArgsForCall = append(fake.describeMaintenanceWindowsForTargetRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowsForTargetInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowsForTargetRequestStub
	fakeReturns := fake.describeMaintenanceWindowsForTargetRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowsForTargetRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowsForTargetRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetRequestCallCount() int {
	fake.describeMaintenanceWindowsForTargetRequestMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsForTargetRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetRequestCalls(stub func(*ssm.DescribeMaintenanceWindowsForTargetInput) (*request.Request, *ssm.DescribeMaintenanceWindowsForTargetOutput)) {
	fake.describeMaintenanceWindowsForTargetRequestMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowsForTargetInput {
	fake.describeMaintenanceWindowsForTargetRequestMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsForTargetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowsForTargetOutput) {
	fake.describeMaintenanceWindowsForTargetRequestMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetRequestStub = nil
	fake.describeMaintenanceWindowsForTargetRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsForTargetOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowsForTargetOutput) {
	fake.describeMaintenanceWindowsForTargetRequestMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetRequestStub = nil
	if fake.describeMaintenanceWindowsForTargetRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowsForTargetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowsForTargetOutput
		})
	}
	fake.describeMaintenanceWindowsForTargetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsForTargetOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowsForTargetInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	fake.describeMaintenanceWindowsForTargetWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsForTargetWithContextReturnsOnCall[len(fake.describeMaintenanceWindowsForTargetWithContextArgsForCall)]
	fake.describeMaintenanceWindowsForTargetWithContextArgsForCall = append(fake.describeMaintenanceWindowsForTargetWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsForTargetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowsForTargetWithContextStub
	fakeReturns := fake.describeMaintenanceWindowsForTargetWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowsForTargetWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowsForTargetWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetWithContextCallCount() int {
	fake.describeMaintenanceWindowsForTargetWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsForTargetWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowsForTargetInput, ...request.Option) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error)) {
	fake.describeMaintenanceWindowsForTargetWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowsForTargetInput, []request.Option) {
	fake.describeMaintenanceWindowsForTargetWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsForTargetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetWithContextReturns(result1 *ssm.DescribeMaintenanceWindowsForTargetOutput, result2 error) {
	fake.describeMaintenanceWindowsForTargetWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetWithContextStub = nil
	fake.describeMaintenanceWindowsForTargetWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsForTargetWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowsForTargetOutput, result2 error) {
	fake.describeMaintenanceWindowsForTargetWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsForTargetWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsForTargetWithContextStub = nil
	if fake.describeMaintenanceWindowsForTargetWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowsForTargetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowsForTargetWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowsForTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPages(arg1 *ssm.DescribeMaintenanceWindowsInput, arg2 func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool) error {
	fake.describeMaintenanceWindowsPagesMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsPagesReturnsOnCall[len(fake.describeMaintenanceWindowsPagesArgsForCall)]
	fake.describeMaintenanceWindowsPagesArgsForCall = append(fake.describeMaintenanceWindowsPagesArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowsInput
		arg2 func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeMaintenanceWindowsPagesStub
	fakeReturns := fake.describeMaintenanceWindowsPagesReturns
	fake.recordInvocation("DescribeMaintenanceWindowsPages", []interface{}{arg1, arg2})
	fake.describeMaintenanceWindowsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesCallCount() int {
	fake.describeMaintenanceWindowsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowsPagesMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesCalls(stub func(*ssm.DescribeMaintenanceWindowsInput, func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool) error) {
	fake.describeMaintenanceWindowsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesArgsForCall(i int) (*ssm.DescribeMaintenanceWindowsInput, func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool) {
	fake.describeMaintenanceWindowsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowsPagesMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesReturns(result1 error) {
	fake.describeMaintenanceWindowsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowsPagesStub = nil
	fake.describeMaintenanceWindowsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowsPagesMutex.Lock()
	defer fake.describeMaintenanceWindowsPagesMutex.Unlock()
	fake.DescribeMaintenanceWindowsPagesStub = nil
	if fake.describeMaintenanceWindowsPagesReturnsOnCall == nil {
		fake.describeMaintenanceWindowsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowsInput, arg3 func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeMaintenanceWindowsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsPagesWithContextReturnsOnCall[len(fake.describeMaintenanceWindowsPagesWithContextArgsForCall)]
	fake.describeMaintenanceWindowsPagesWithContextArgsForCall = append(fake.describeMaintenanceWindowsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsInput
		arg3 func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeMaintenanceWindowsPagesWithContextStub
	fakeReturns := fake.describeMaintenanceWindowsPagesWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeMaintenanceWindowsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesWithContextCallCount() int {
	fake.describeMaintenanceWindowsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsPagesWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowsInput, func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool, ...request.Option) error) {
	fake.describeMaintenanceWindowsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowsInput, func(*ssm.DescribeMaintenanceWindowsOutput, bool) bool, []request.Option) {
	fake.describeMaintenanceWindowsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesWithContextReturns(result1 error) {
	fake.describeMaintenanceWindowsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsPagesWithContextStub = nil
	fake.describeMaintenanceWindowsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeMaintenanceWindowsPagesWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsPagesWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsPagesWithContextStub = nil
	if fake.describeMaintenanceWindowsPagesWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeMaintenanceWindowsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsRequest(arg1 *ssm.DescribeMaintenanceWindowsInput) (*request.Request, *ssm.DescribeMaintenanceWindowsOutput) {
	fake.describeMaintenanceWindowsRequestMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsRequestReturnsOnCall[len(fake.describeMaintenanceWindowsRequestArgsForCall)]
	fake.describeMaintenanceWindowsRequestArgsForCall = append(fake.describeMaintenanceWindowsRequestArgsForCall, struct {
		arg1 *ssm.DescribeMaintenanceWindowsInput
	}{arg1})
	stub := fake.DescribeMaintenanceWindowsRequestStub
	fakeReturns := fake.describeMaintenanceWindowsRequestReturns
	fake.recordInvocation("DescribeMaintenanceWindowsRequest", []interface{}{arg1})
	fake.describeMaintenanceWindowsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsRequestCallCount() int {
	fake.describeMaintenanceWindowsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowsRequestMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsRequestCalls(stub func(*ssm.DescribeMaintenanceWindowsInput) (*request.Request, *ssm.DescribeMaintenanceWindowsOutput)) {
	fake.describeMaintenanceWindowsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsRequestArgsForCall(i int) *ssm.DescribeMaintenanceWindowsInput {
	fake.describeMaintenanceWindowsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowsRequestMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsRequestReturns(result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowsOutput) {
	fake.describeMaintenanceWindowsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowsRequestStub = nil
	fake.describeMaintenanceWindowsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeMaintenanceWindowsOutput) {
	fake.describeMaintenanceWindowsRequestMutex.Lock()
	defer fake.describeMaintenanceWindowsRequestMutex.Unlock()
	fake.DescribeMaintenanceWindowsRequestStub = nil
	if fake.describeMaintenanceWindowsRequestReturnsOnCall == nil {
		fake.describeMaintenanceWindowsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeMaintenanceWindowsOutput
		})
	}
	fake.describeMaintenanceWindowsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeMaintenanceWindowsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsWithContext(arg1 context.Context, arg2 *ssm.DescribeMaintenanceWindowsInput, arg3 ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	fake.describeMaintenanceWindowsWithContextMutex.Lock()
	ret, specificReturn := fake.describeMaintenanceWindowsWithContextReturnsOnCall[len(fake.describeMaintenanceWindowsWithContextArgsForCall)]
	fake.describeMaintenanceWindowsWithContextArgsForCall = append(fake.describeMaintenanceWindowsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeMaintenanceWindowsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeMaintenanceWindowsWithContextStub
	fakeReturns := fake.describeMaintenanceWindowsWithContextReturns
	fake.recordInvocation("DescribeMaintenanceWindowsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMaintenanceWindowsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsWithContextCallCount() int {
	fake.describeMaintenanceWindowsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsWithContextMutex.RUnlock()
	return len(fake.describeMaintenanceWindowsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsWithContextCalls(stub func(context.Context, *ssm.DescribeMaintenanceWindowsInput, ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error)) {
	fake.describeMaintenanceWindowsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeMaintenanceWindowsInput, []request.Option) {
	fake.describeMaintenanceWindowsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsWithContextMutex.RUnlock()
	argsForCall := fake.describeMaintenanceWindowsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsWithContextReturns(result1 *ssm.DescribeMaintenanceWindowsOutput, result2 error) {
	fake.describeMaintenanceWindowsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsWithContextStub = nil
	fake.describeMaintenanceWindowsWithContextReturns = struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeMaintenanceWindowsWithContextReturnsOnCall(i int, result1 *ssm.DescribeMaintenanceWindowsOutput, result2 error) {
	fake.describeMaintenanceWindowsWithContextMutex.Lock()
	defer fake.describeMaintenanceWindowsWithContextMutex.Unlock()
	fake.DescribeMaintenanceWindowsWithContextStub = nil
	if fake.describeMaintenanceWindowsWithContextReturnsOnCall == nil {
		fake.describeMaintenanceWindowsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeMaintenanceWindowsOutput
			result2 error
		})
	}
	fake.describeMaintenanceWindowsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeMaintenanceWindowsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeOpsItems(arg1 *ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error) {
	fake.describeOpsItemsMutex.Lock()
	ret, specificReturn := fake.describeOpsItemsReturnsOnCall[len(fake.describeOpsItemsArgsForCall)]
	fake.describeOpsItemsArgsForCall = append(fake.describeOpsItemsArgsForCall, struct {
		arg1 *ssm.DescribeOpsItemsInput
	}{arg1})
	stub := fake.DescribeOpsItemsStub
	fakeReturns := fake.describeOpsItemsReturns
	fake.recordInvocation("DescribeOpsItems", []interface{}{arg1})
	fake.describeOpsItemsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeOpsItemsCallCount() int {
	fake.describeOpsItemsMutex.RLock()
	defer fake.describeOpsItemsMutex.RUnlock()
	return len(fake.describeOpsItemsArgsForCall)
}

func (fake *FakeSSMClient) DescribeOpsItemsCalls(stub func(*ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error)) {
	fake.describeOpsItemsMutex.Lock()
	defer fake.describeOpsItemsMutex.Unlock()
	fake.DescribeOpsItemsStub = stub
}

func (fake *FakeSSMClient) DescribeOpsItemsArgsForCall(i int) *ssm.DescribeOpsItemsInput {
	fake.describeOpsItemsMutex.RLock()
	defer fake.describeOpsItemsMutex.RUnlock()
	argsForCall := fake.describeOpsItemsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeOpsItemsReturns(result1 *ssm.DescribeOpsItemsOutput, result2 error) {
	fake.describeOpsItemsMutex.Lock()
	defer fake.describeOpsItemsMutex.Unlock()
	fake.DescribeOpsItemsStub = nil
	fake.describeOpsItemsReturns = struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeOpsItemsReturnsOnCall(i int, result1 *ssm.DescribeOpsItemsOutput, result2 error) {
	fake.describeOpsItemsMutex.Lock()
	defer fake.describeOpsItemsMutex.Unlock()
	fake.DescribeOpsItemsStub = nil
	if fake.describeOpsItemsReturnsOnCall == nil {
		fake.describeOpsItemsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeOpsItemsOutput
			result2 error
		})
	}
	fake.describeOpsItemsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeOpsItemsPages(arg1 *ssm.DescribeOpsItemsInput, arg2 func(*ssm.DescribeOpsItemsOutput, bool) bool) error {
	fake.describeOpsItemsPagesMutex.Lock()
	ret, specificReturn := fake.describeOpsItemsPagesReturnsOnCall[len(fake.describeOpsItemsPagesArgsForCall)]
	fake.describeOpsItemsPagesArgsForCall = append(fake.describeOpsItemsPagesArgsForCall, struct {
		arg1 *ssm.DescribeOpsItemsInput
		arg2 func(*ssm.DescribeOpsItemsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeOpsItemsPagesStub
	fakeReturns := fake.describeOpsItemsPagesReturns
	fake.recordInvocation("DescribeOpsItemsPages", []interface{}{arg1, arg2})
	fake.describeOpsItemsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesCallCount() int {
	fake.describeOpsItemsPagesMutex.RLock()
	defer fake.describeOpsItemsPagesMutex.RUnlock()
	return len(fake.describeOpsItemsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesCalls(stub func(*ssm.DescribeOpsItemsInput, func(*ssm.DescribeOpsItemsOutput, bool) bool) error) {
	fake.describeOpsItemsPagesMutex.Lock()
	defer fake.describeOpsItemsPagesMutex.Unlock()
	fake.DescribeOpsItemsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesArgsForCall(i int) (*ssm.DescribeOpsItemsInput, func(*ssm.DescribeOpsItemsOutput, bool) bool) {
	fake.describeOpsItemsPagesMutex.RLock()
	defer fake.describeOpsItemsPagesMutex.RUnlock()
	argsForCall := fake.describeOpsItemsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesReturns(result1 error) {
	fake.describeOpsItemsPagesMutex.Lock()
	defer fake.describeOpsItemsPagesMutex.Unlock()
	fake.DescribeOpsItemsPagesStub = nil
	fake.describeOpsItemsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesReturnsOnCall(i int, result1 error) {
	fake.describeOpsItemsPagesMutex.Lock()
	defer fake.describeOpsItemsPagesMutex.Unlock()
	fake.DescribeOpsItemsPagesStub = nil
	if fake.describeOpsItemsPagesReturnsOnCall == nil {
		fake.describeOpsItemsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOpsItemsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeOpsItemsInput, arg3 func(*ssm.DescribeOpsItemsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeOpsItemsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeOpsItemsPagesWithContextReturnsOnCall[len(fake.describeOpsItemsPagesWithContextArgsForCall)]
	fake.describeOpsItemsPagesWithContextArgsForCall = append(fake.describeOpsItemsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeOpsItemsInput
		arg3 func(*ssm.DescribeOpsItemsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeOpsItemsPagesWithContextStub
	fakeReturns := fake.describeOpsItemsPagesWithContextReturns
	fake.recordInvocation("DescribeOpsItemsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeOpsItemsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesWithContextCallCount() int {
	fake.describeOpsItemsPagesWithContextMutex.RLock()
	defer fake.describeOpsItemsPagesWithContextMutex.RUnlock()
	return len(fake.describeOpsItemsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeOpsItemsInput, func(*ssm.DescribeOpsItemsOutput, bool) bool, ...request.Option) error) {
	fake.describeOpsItemsPagesWithContextMutex.Lock()
	defer fake.describeOpsItemsPagesWithContextMutex.Unlock()
	fake.DescribeOpsItemsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeOpsItemsInput, func(*ssm.DescribeOpsItemsOutput, bool) bool, []request.Option) {
	fake.describeOpsItemsPagesWithContextMutex.RLock()
	defer fake.describeOpsItemsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeOpsItemsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesWithContextReturns(result1 error) {
	fake.describeOpsItemsPagesWithContextMutex.Lock()
	defer fake.describeOpsItemsPagesWithContextMutex.Unlock()
	fake.DescribeOpsItemsPagesWithContextStub = nil
	fake.describeOpsItemsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeOpsItemsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeOpsItemsPagesWithContextMutex.Lock()
	defer fake.describeOpsItemsPagesWithContextMutex.Unlock()
	fake.DescribeOpsItemsPagesWithContextStub = nil
	if fake.describeOpsItemsPagesWithContextReturnsOnCall == nil {
		fake.describeOpsItemsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeOpsItemsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeOpsItemsRequest(arg1 *ssm.DescribeOpsItemsInput) (*request.Request, *ssm.DescribeOpsItemsOutput) {
	fake.describeOpsItemsRequestMutex.Lock()
	ret, specificReturn := fake.describeOpsItemsRequestReturnsOnCall[len(fake.describeOpsItemsRequestArgsForCall)]
	fake.describeOpsItemsRequestArgsForCall = append(fake.describeOpsItemsRequestArgsForCall, struct {
		arg1 *ssm.DescribeOpsItemsInput
	}{arg1})
	stub := fake.DescribeOpsItemsRequestStub
	fakeReturns := fake.describeOpsItemsRequestReturns
	fake.recordInvocation("DescribeOpsItemsRequest", []interface{}{arg1})
	fake.describeOpsItemsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeOpsItemsRequestCallCount() int {
	fake.describeOpsItemsRequestMutex.RLock()
	defer fake.describeOpsItemsRequestMutex.RUnlock()
	return len(fake.describeOpsItemsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeOpsItemsRequestCalls(stub func(*ssm.DescribeOpsItemsInput) (*request.Request, *ssm.DescribeOpsItemsOutput)) {
	fake.describeOpsItemsRequestMutex.Lock()
	defer fake.describeOpsItemsRequestMutex.Unlock()
	fake.DescribeOpsItemsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeOpsItemsRequestArgsForCall(i int) *ssm.DescribeOpsItemsInput {
	fake.describeOpsItemsRequestMutex.RLock()
	defer fake.describeOpsItemsRequestMutex.RUnlock()
	argsForCall := fake.describeOpsItemsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeOpsItemsRequestReturns(result1 *request.Request, result2 *ssm.DescribeOpsItemsOutput) {
	fake.describeOpsItemsRequestMutex.Lock()
	defer fake.describeOpsItemsRequestMutex.Unlock()
	fake.DescribeOpsItemsRequestStub = nil
	fake.describeOpsItemsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeOpsItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeOpsItemsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeOpsItemsOutput) {
	fake.describeOpsItemsRequestMutex.Lock()
	defer fake.describeOpsItemsRequestMutex.Unlock()
	fake.DescribeOpsItemsRequestStub = nil
	if fake.describeOpsItemsRequestReturnsOnCall == nil {
		fake.describeOpsItemsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeOpsItemsOutput
		})
	}
	fake.describeOpsItemsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeOpsItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeOpsItemsWithContext(arg1 context.Context, arg2 *ssm.DescribeOpsItemsInput, arg3 ...request.Option) (*ssm.DescribeOpsItemsOutput, error) {
	fake.describeOpsItemsWithContextMutex.Lock()
	ret, specificReturn := fake.describeOpsItemsWithContextReturnsOnCall[len(fake.describeOpsItemsWithContextArgsForCall)]
	fake.describeOpsItemsWithContextArgsForCall = append(fake.describeOpsItemsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeOpsItemsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeOpsItemsWithContextStub
	fakeReturns := fake.describeOpsItemsWithContextReturns
	fake.recordInvocation("DescribeOpsItemsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeOpsItemsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeOpsItemsWithContextCallCount() int {
	fake.describeOpsItemsWithContextMutex.RLock()
	defer fake.describeOpsItemsWithContextMutex.RUnlock()
	return len(fake.describeOpsItemsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeOpsItemsWithContextCalls(stub func(context.Context, *ssm.DescribeOpsItemsInput, ...request.Option) (*ssm.DescribeOpsItemsOutput, error)) {
	fake.describeOpsItemsWithContextMutex.Lock()
	defer fake.describeOpsItemsWithContextMutex.Unlock()
	fake.DescribeOpsItemsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeOpsItemsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeOpsItemsInput, []request.Option) {
	fake.describeOpsItemsWithContextMutex.RLock()
	defer fake.describeOpsItemsWithContextMutex.RUnlock()
	argsForCall := fake.describeOpsItemsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeOpsItemsWithContextReturns(result1 *ssm.DescribeOpsItemsOutput, result2 error) {
	fake.describeOpsItemsWithContextMutex.Lock()
	defer fake.describeOpsItemsWithContextMutex.Unlock()
	fake.DescribeOpsItemsWithContextStub = nil
	fake.describeOpsItemsWithContextReturns = struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeOpsItemsWithContextReturnsOnCall(i int, result1 *ssm.DescribeOpsItemsOutput, result2 error) {
	fake.describeOpsItemsWithContextMutex.Lock()
	defer fake.describeOpsItemsWithContextMutex.Unlock()
	fake.DescribeOpsItemsWithContextStub = nil
	if fake.describeOpsItemsWithContextReturnsOnCall == nil {
		fake.describeOpsItemsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeOpsItemsOutput
			result2 error
		})
	}
	fake.describeOpsItemsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeOpsItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeParameters(arg1 *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error) {
	fake.describeParametersMutex.Lock()
	ret, specificReturn := fake.describeParametersReturnsOnCall[len(fake.describeParametersArgsForCall)]
	fake.describeParametersArgsForCall = append(fake.describeParametersArgsForCall, struct {
		arg1 *ssm.DescribeParametersInput
	}{arg1})
	stub := fake.DescribeParametersStub
	fakeReturns := fake.describeParametersReturns
	fake.recordInvocation("DescribeParameters", []interface{}{arg1})
	fake.describeParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeParametersCallCount() int {
	fake.describeParametersMutex.RLock()
	defer fake.describeParametersMutex.RUnlock()
	return len(fake.describeParametersArgsForCall)
}

func (fake *FakeSSMClient) DescribeParametersCalls(stub func(*ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error)) {
	fake.describeParametersMutex.Lock()
	defer fake.describeParametersMutex.Unlock()
	fake.DescribeParametersStub = stub
}

func (fake *FakeSSMClient) DescribeParametersArgsForCall(i int) *ssm.DescribeParametersInput {
	fake.describeParametersMutex.RLock()
	defer fake.describeParametersMutex.RUnlock()
	argsForCall := fake.describeParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeParametersReturns(result1 *ssm.DescribeParametersOutput, result2 error) {
	fake.describeParametersMutex.Lock()
	defer fake.describeParametersMutex.Unlock()
	fake.DescribeParametersStub = nil
	fake.describeParametersReturns = struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeParametersReturnsOnCall(i int, result1 *ssm.DescribeParametersOutput, result2 error) {
	fake.describeParametersMutex.Lock()
	defer fake.describeParametersMutex.Unlock()
	fake.DescribeParametersStub = nil
	if fake.describeParametersReturnsOnCall == nil {
		fake.describeParametersReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeParametersOutput
			result2 error
		})
	}
	fake.describeParametersReturnsOnCall[i] = struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeParametersPages(arg1 *ssm.DescribeParametersInput, arg2 func(*ssm.DescribeParametersOutput, bool) bool) error {
	fake.describeParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeParametersPagesReturnsOnCall[len(fake.describeParametersPagesArgsForCall)]
	fake.describeParametersPagesArgsForCall = append(fake.describeParametersPagesArgsForCall, struct {
		arg1 *ssm.DescribeParametersInput
		arg2 func(*ssm.DescribeParametersOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeParametersPagesStub
	fakeReturns := fake.describeParametersPagesReturns
	fake.recordInvocation("DescribeParametersPages", []interface{}{arg1, arg2})
	fake.describeParametersPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeParametersPagesCallCount() int {
	fake.describeParametersPagesMutex.RLock()
	defer fake.describeParametersPagesMutex.RUnlock()
	return len(fake.describeParametersPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeParametersPagesCalls(stub func(*ssm.DescribeParametersInput, func(*ssm.DescribeParametersOutput, bool) bool) error) {
	fake.describeParametersPagesMutex.Lock()
	defer fake.describeParametersPagesMutex.Unlock()
	fake.DescribeParametersPagesStub = stub
}

func (fake *FakeSSMClient) DescribeParametersPagesArgsForCall(i int) (*ssm.DescribeParametersInput, func(*ssm.DescribeParametersOutput, bool) bool) {
	fake.describeParametersPagesMutex.RLock()
	defer fake.describeParametersPagesMutex.RUnlock()
	argsForCall := fake.describeParametersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeParametersPagesReturns(result1 error) {
	fake.describeParametersPagesMutex.Lock()
	defer fake.describeParametersPagesMutex.Unlock()
	fake.DescribeParametersPagesStub = nil
	fake.describeParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeParametersPagesReturnsOnCall(i int, result1 error) {
	fake.describeParametersPagesMutex.Lock()
	defer fake.describeParametersPagesMutex.Unlock()
	fake.DescribeParametersPagesStub = nil
	if fake.describeParametersPagesReturnsOnCall == nil {
		fake.describeParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeParametersPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeParametersInput, arg3 func(*ssm.DescribeParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeParametersPagesWithContextReturnsOnCall[len(fake.describeParametersPagesWithContextArgsForCall)]
	fake.describeParametersPagesWithContextArgsForCall = append(fake.describeParametersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeParametersInput
		arg3 func(*ssm.DescribeParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeParametersPagesWithContextStub
	fakeReturns := fake.describeParametersPagesWithContextReturns
	fake.recordInvocation("DescribeParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeParametersPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeParametersPagesWithContextCallCount() int {
	fake.describeParametersPagesWithContextMutex.RLock()
	defer fake.describeParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeParametersPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeParametersPagesWithContextCalls(stub func(context.Context, *ssm.DescribeParametersInput, func(*ssm.DescribeParametersOutput, bool) bool, ...request.Option) error) {
	fake.describeParametersPagesWithContextMutex.Lock()
	defer fake.describeParametersPagesWithContextMutex.Unlock()
	fake.DescribeParametersPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeParametersPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeParametersInput, func(*ssm.DescribeParametersOutput, bool) bool, []request.Option) {
	fake.describeParametersPagesWithContextMutex.RLock()
	defer fake.describeParametersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeParametersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeParametersPagesWithContextReturns(result1 error) {
	fake.describeParametersPagesWithContextMutex.Lock()
	defer fake.describeParametersPagesWithContextMutex.Unlock()
	fake.DescribeParametersPagesWithContextStub = nil
	fake.describeParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeParametersPagesWithContextMutex.Lock()
	defer fake.describeParametersPagesWithContextMutex.Unlock()
	fake.DescribeParametersPagesWithContextStub = nil
	if fake.describeParametersPagesWithContextReturnsOnCall == nil {
		fake.describeParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeParametersRequest(arg1 *ssm.DescribeParametersInput) (*request.Request, *ssm.DescribeParametersOutput) {
	fake.describeParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeParametersRequestReturnsOnCall[len(fake.describeParametersRequestArgsForCall)]
	fake.describeParametersRequestArgsForCall = append(fake.describeParametersRequestArgsForCall, struct {
		arg1 *ssm.DescribeParametersInput
	}{arg1})
	stub := fake.DescribeParametersRequestStub
	fakeReturns := fake.describeParametersRequestReturns
	fake.recordInvocation("DescribeParametersRequest", []interface{}{arg1})
	fake.describeParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeParametersRequestCallCount() int {
	fake.describeParametersRequestMutex.RLock()
	defer fake.describeParametersRequestMutex.RUnlock()
	return len(fake.describeParametersRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeParametersRequestCalls(stub func(*ssm.DescribeParametersInput) (*request.Request, *ssm.DescribeParametersOutput)) {
	fake.describeParametersRequestMutex.Lock()
	defer fake.describeParametersRequestMutex.Unlock()
	fake.DescribeParametersRequestStub = stub
}

func (fake *FakeSSMClient) DescribeParametersRequestArgsForCall(i int) *ssm.DescribeParametersInput {
	fake.describeParametersRequestMutex.RLock()
	defer fake.describeParametersRequestMutex.RUnlock()
	argsForCall := fake.describeParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeParametersRequestReturns(result1 *request.Request, result2 *ssm.DescribeParametersOutput) {
	fake.describeParametersRequestMutex.Lock()
	defer fake.describeParametersRequestMutex.Unlock()
	fake.DescribeParametersRequestStub = nil
	fake.describeParametersRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeParametersOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeParametersOutput) {
	fake.describeParametersRequestMutex.Lock()
	defer fake.describeParametersRequestMutex.Unlock()
	fake.DescribeParametersRequestStub = nil
	if fake.describeParametersRequestReturnsOnCall == nil {
		fake.describeParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeParametersOutput
		})
	}
	fake.describeParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeParametersOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeParametersWithContext(arg1 context.Context, arg2 *ssm.DescribeParametersInput, arg3 ...request.Option) (*ssm.DescribeParametersOutput, error) {
	fake.describeParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeParametersWithContextReturnsOnCall[len(fake.describeParametersWithContextArgsForCall)]
	fake.describeParametersWithContextArgsForCall = append(fake.describeParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeParametersWithContextStub
	fakeReturns := fake.describeParametersWithContextReturns
	fake.recordInvocation("DescribeParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeParametersWithContextCallCount() int {
	fake.describeParametersWithContextMutex.RLock()
	defer fake.describeParametersWithContextMutex.RUnlock()
	return len(fake.describeParametersWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeParametersWithContextCalls(stub func(context.Context, *ssm.DescribeParametersInput, ...request.Option) (*ssm.DescribeParametersOutput, error)) {
	fake.describeParametersWithContextMutex.Lock()
	defer fake.describeParametersWithContextMutex.Unlock()
	fake.DescribeParametersWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeParametersWithContextArgsForCall(i int) (context.Context, *ssm.DescribeParametersInput, []request.Option) {
	fake.describeParametersWithContextMutex.RLock()
	defer fake.describeParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeParametersWithContextReturns(result1 *ssm.DescribeParametersOutput, result2 error) {
	fake.describeParametersWithContextMutex.Lock()
	defer fake.describeParametersWithContextMutex.Unlock()
	fake.DescribeParametersWithContextStub = nil
	fake.describeParametersWithContextReturns = struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeParametersWithContextReturnsOnCall(i int, result1 *ssm.DescribeParametersOutput, result2 error) {
	fake.describeParametersWithContextMutex.Lock()
	defer fake.describeParametersWithContextMutex.Unlock()
	fake.DescribeParametersWithContextStub = nil
	if fake.describeParametersWithContextReturnsOnCall == nil {
		fake.describeParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeParametersOutput
			result2 error
		})
	}
	fake.describeParametersWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchBaselines(arg1 *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error) {
	fake.describePatchBaselinesMutex.Lock()
	ret, specificReturn := fake.describePatchBaselinesReturnsOnCall[len(fake.describePatchBaselinesArgsForCall)]
	fake.describePatchBaselinesArgsForCall = append(fake.describePatchBaselinesArgsForCall, struct {
		arg1 *ssm.DescribePatchBaselinesInput
	}{arg1})
	stub := fake.DescribePatchBaselinesStub
	fakeReturns := fake.describePatchBaselinesReturns
	fake.recordInvocation("DescribePatchBaselines", []interface{}{arg1})
	fake.describePatchBaselinesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchBaselinesCallCount() int {
	fake.describePatchBaselinesMutex.RLock()
	defer fake.describePatchBaselinesMutex.RUnlock()
	return len(fake.describePatchBaselinesArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchBaselinesCalls(stub func(*ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error)) {
	fake.describePatchBaselinesMutex.Lock()
	defer fake.describePatchBaselinesMutex.Unlock()
	fake.DescribePatchBaselinesStub = stub
}

func (fake *FakeSSMClient) DescribePatchBaselinesArgsForCall(i int) *ssm.DescribePatchBaselinesInput {
	fake.describePatchBaselinesMutex.RLock()
	defer fake.describePatchBaselinesMutex.RUnlock()
	argsForCall := fake.describePatchBaselinesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchBaselinesReturns(result1 *ssm.DescribePatchBaselinesOutput, result2 error) {
	fake.describePatchBaselinesMutex.Lock()
	defer fake.describePatchBaselinesMutex.Unlock()
	fake.DescribePatchBaselinesStub = nil
	fake.describePatchBaselinesReturns = struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchBaselinesReturnsOnCall(i int, result1 *ssm.DescribePatchBaselinesOutput, result2 error) {
	fake.describePatchBaselinesMutex.Lock()
	defer fake.describePatchBaselinesMutex.Unlock()
	fake.DescribePatchBaselinesStub = nil
	if fake.describePatchBaselinesReturnsOnCall == nil {
		fake.describePatchBaselinesReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchBaselinesOutput
			result2 error
		})
	}
	fake.describePatchBaselinesReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchBaselinesPages(arg1 *ssm.DescribePatchBaselinesInput, arg2 func(*ssm.DescribePatchBaselinesOutput, bool) bool) error {
	fake.describePatchBaselinesPagesMutex.Lock()
	ret, specificReturn := fake.describePatchBaselinesPagesReturnsOnCall[len(fake.describePatchBaselinesPagesArgsForCall)]
	fake.describePatchBaselinesPagesArgsForCall = append(fake.describePatchBaselinesPagesArgsForCall, struct {
		arg1 *ssm.DescribePatchBaselinesInput
		arg2 func(*ssm.DescribePatchBaselinesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribePatchBaselinesPagesStub
	fakeReturns := fake.describePatchBaselinesPagesReturns
	fake.recordInvocation("DescribePatchBaselinesPages", []interface{}{arg1, arg2})
	fake.describePatchBaselinesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesCallCount() int {
	fake.describePatchBaselinesPagesMutex.RLock()
	defer fake.describePatchBaselinesPagesMutex.RUnlock()
	return len(fake.describePatchBaselinesPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesCalls(stub func(*ssm.DescribePatchBaselinesInput, func(*ssm.DescribePatchBaselinesOutput, bool) bool) error) {
	fake.describePatchBaselinesPagesMutex.Lock()
	defer fake.describePatchBaselinesPagesMutex.Unlock()
	fake.DescribePatchBaselinesPagesStub = stub
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesArgsForCall(i int) (*ssm.DescribePatchBaselinesInput, func(*ssm.DescribePatchBaselinesOutput, bool) bool) {
	fake.describePatchBaselinesPagesMutex.RLock()
	defer fake.describePatchBaselinesPagesMutex.RUnlock()
	argsForCall := fake.describePatchBaselinesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesReturns(result1 error) {
	fake.describePatchBaselinesPagesMutex.Lock()
	defer fake.describePatchBaselinesPagesMutex.Unlock()
	fake.DescribePatchBaselinesPagesStub = nil
	fake.describePatchBaselinesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesReturnsOnCall(i int, result1 error) {
	fake.describePatchBaselinesPagesMutex.Lock()
	defer fake.describePatchBaselinesPagesMutex.Unlock()
	fake.DescribePatchBaselinesPagesStub = nil
	if fake.describePatchBaselinesPagesReturnsOnCall == nil {
		fake.describePatchBaselinesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePatchBaselinesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesWithContext(arg1 context.Context, arg2 *ssm.DescribePatchBaselinesInput, arg3 func(*ssm.DescribePatchBaselinesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describePatchBaselinesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchBaselinesPagesWithContextReturnsOnCall[len(fake.describePatchBaselinesPagesWithContextArgsForCall)]
	fake.describePatchBaselinesPagesWithContextArgsForCall = append(fake.describePatchBaselinesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchBaselinesInput
		arg3 func(*ssm.DescribePatchBaselinesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribePatchBaselinesPagesWithContextStub
	fakeReturns := fake.describePatchBaselinesPagesWithContextReturns
	fake.recordInvocation("DescribePatchBaselinesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describePatchBaselinesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesWithContextCallCount() int {
	fake.describePatchBaselinesPagesWithContextMutex.RLock()
	defer fake.describePatchBaselinesPagesWithContextMutex.RUnlock()
	return len(fake.describePatchBaselinesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesWithContextCalls(stub func(context.Context, *ssm.DescribePatchBaselinesInput, func(*ssm.DescribePatchBaselinesOutput, bool) bool, ...request.Option) error) {
	fake.describePatchBaselinesPagesWithContextMutex.Lock()
	defer fake.describePatchBaselinesPagesWithContextMutex.Unlock()
	fake.DescribePatchBaselinesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchBaselinesInput, func(*ssm.DescribePatchBaselinesOutput, bool) bool, []request.Option) {
	fake.describePatchBaselinesPagesWithContextMutex.RLock()
	defer fake.describePatchBaselinesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describePatchBaselinesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesWithContextReturns(result1 error) {
	fake.describePatchBaselinesPagesWithContextMutex.Lock()
	defer fake.describePatchBaselinesPagesWithContextMutex.Unlock()
	fake.DescribePatchBaselinesPagesWithContextStub = nil
	fake.describePatchBaselinesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchBaselinesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describePatchBaselinesPagesWithContextMutex.Lock()
	defer fake.describePatchBaselinesPagesWithContextMutex.Unlock()
	fake.DescribePatchBaselinesPagesWithContextStub = nil
	if fake.describePatchBaselinesPagesWithContextReturnsOnCall == nil {
		fake.describePatchBaselinesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePatchBaselinesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchBaselinesRequest(arg1 *ssm.DescribePatchBaselinesInput) (*request.Request, *ssm.DescribePatchBaselinesOutput) {
	fake.describePatchBaselinesRequestMutex.Lock()
	ret, specificReturn := fake.describePatchBaselinesRequestReturnsOnCall[len(fake.describePatchBaselinesRequestArgsForCall)]
	fake.describePatchBaselinesRequestArgsForCall = append(fake.describePatchBaselinesRequestArgsForCall, struct {
		arg1 *ssm.DescribePatchBaselinesInput
	}{arg1})
	stub := fake.DescribePatchBaselinesRequestStub
	fakeReturns := fake.describePatchBaselinesRequestReturns
	fake.recordInvocation("DescribePatchBaselinesRequest", []interface{}{arg1})
	fake.describePatchBaselinesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchBaselinesRequestCallCount() int {
	fake.describePatchBaselinesRequestMutex.RLock()
	defer fake.describePatchBaselinesRequestMutex.RUnlock()
	return len(fake.describePatchBaselinesRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchBaselinesRequestCalls(stub func(*ssm.DescribePatchBaselinesInput) (*request.Request, *ssm.DescribePatchBaselinesOutput)) {
	fake.describePatchBaselinesRequestMutex.Lock()
	defer fake.describePatchBaselinesRequestMutex.Unlock()
	fake.DescribePatchBaselinesRequestStub = stub
}

func (fake *FakeSSMClient) DescribePatchBaselinesRequestArgsForCall(i int) *ssm.DescribePatchBaselinesInput {
	fake.describePatchBaselinesRequestMutex.RLock()
	defer fake.describePatchBaselinesRequestMutex.RUnlock()
	argsForCall := fake.describePatchBaselinesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchBaselinesRequestReturns(result1 *request.Request, result2 *ssm.DescribePatchBaselinesOutput) {
	fake.describePatchBaselinesRequestMutex.Lock()
	defer fake.describePatchBaselinesRequestMutex.Unlock()
	fake.DescribePatchBaselinesRequestStub = nil
	fake.describePatchBaselinesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchBaselinesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchBaselinesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribePatchBaselinesOutput) {
	fake.describePatchBaselinesRequestMutex.Lock()
	defer fake.describePatchBaselinesRequestMutex.Unlock()
	fake.DescribePatchBaselinesRequestStub = nil
	if fake.describePatchBaselinesRequestReturnsOnCall == nil {
		fake.describePatchBaselinesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribePatchBaselinesOutput
		})
	}
	fake.describePatchBaselinesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchBaselinesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchBaselinesWithContext(arg1 context.Context, arg2 *ssm.DescribePatchBaselinesInput, arg3 ...request.Option) (*ssm.DescribePatchBaselinesOutput, error) {
	fake.describePatchBaselinesWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchBaselinesWithContextReturnsOnCall[len(fake.describePatchBaselinesWithContextArgsForCall)]
	fake.describePatchBaselinesWithContextArgsForCall = append(fake.describePatchBaselinesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchBaselinesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribePatchBaselinesWithContextStub
	fakeReturns := fake.describePatchBaselinesWithContextReturns
	fake.recordInvocation("DescribePatchBaselinesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePatchBaselinesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchBaselinesWithContextCallCount() int {
	fake.describePatchBaselinesWithContextMutex.RLock()
	defer fake.describePatchBaselinesWithContextMutex.RUnlock()
	return len(fake.describePatchBaselinesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchBaselinesWithContextCalls(stub func(context.Context, *ssm.DescribePatchBaselinesInput, ...request.Option) (*ssm.DescribePatchBaselinesOutput, error)) {
	fake.describePatchBaselinesWithContextMutex.Lock()
	defer fake.describePatchBaselinesWithContextMutex.Unlock()
	fake.DescribePatchBaselinesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchBaselinesWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchBaselinesInput, []request.Option) {
	fake.describePatchBaselinesWithContextMutex.RLock()
	defer fake.describePatchBaselinesWithContextMutex.RUnlock()
	argsForCall := fake.describePatchBaselinesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribePatchBaselinesWithContextReturns(result1 *ssm.DescribePatchBaselinesOutput, result2 error) {
	fake.describePatchBaselinesWithContextMutex.Lock()
	defer fake.describePatchBaselinesWithContextMutex.Unlock()
	fake.DescribePatchBaselinesWithContextStub = nil
	fake.describePatchBaselinesWithContextReturns = struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchBaselinesWithContextReturnsOnCall(i int, result1 *ssm.DescribePatchBaselinesOutput, result2 error) {
	fake.describePatchBaselinesWithContextMutex.Lock()
	defer fake.describePatchBaselinesWithContextMutex.Unlock()
	fake.DescribePatchBaselinesWithContextStub = nil
	if fake.describePatchBaselinesWithContextReturnsOnCall == nil {
		fake.describePatchBaselinesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchBaselinesOutput
			result2 error
		})
	}
	fake.describePatchBaselinesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchBaselinesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupState(arg1 *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error) {
	fake.describePatchGroupStateMutex.Lock()
	ret, specificReturn := fake.describePatchGroupStateReturnsOnCall[len(fake.describePatchGroupStateArgsForCall)]
	fake.describePatchGroupStateArgsForCall = append(fake.describePatchGroupStateArgsForCall, struct {
		arg1 *ssm.DescribePatchGroupStateInput
	}{arg1})
	stub := fake.DescribePatchGroupStateStub
	fakeReturns := fake.describePatchGroupStateReturns
	fake.recordInvocation("DescribePatchGroupState", []interface{}{arg1})
	fake.describePatchGroupStateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchGroupStateCallCount() int {
	fake.describePatchGroupStateMutex.RLock()
	defer fake.describePatchGroupStateMutex.RUnlock()
	return len(fake.describePatchGroupStateArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupStateCalls(stub func(*ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error)) {
	fake.describePatchGroupStateMutex.Lock()
	defer fake.describePatchGroupStateMutex.Unlock()
	fake.DescribePatchGroupStateStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupStateArgsForCall(i int) *ssm.DescribePatchGroupStateInput {
	fake.describePatchGroupStateMutex.RLock()
	defer fake.describePatchGroupStateMutex.RUnlock()
	argsForCall := fake.describePatchGroupStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchGroupStateReturns(result1 *ssm.DescribePatchGroupStateOutput, result2 error) {
	fake.describePatchGroupStateMutex.Lock()
	defer fake.describePatchGroupStateMutex.Unlock()
	fake.DescribePatchGroupStateStub = nil
	fake.describePatchGroupStateReturns = struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupStateReturnsOnCall(i int, result1 *ssm.DescribePatchGroupStateOutput, result2 error) {
	fake.describePatchGroupStateMutex.Lock()
	defer fake.describePatchGroupStateMutex.Unlock()
	fake.DescribePatchGroupStateStub = nil
	if fake.describePatchGroupStateReturnsOnCall == nil {
		fake.describePatchGroupStateReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchGroupStateOutput
			result2 error
		})
	}
	fake.describePatchGroupStateReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupStateRequest(arg1 *ssm.DescribePatchGroupStateInput) (*request.Request, *ssm.DescribePatchGroupStateOutput) {
	fake.describePatchGroupStateRequestMutex.Lock()
	ret, specificReturn := fake.describePatchGroupStateRequestReturnsOnCall[len(fake.describePatchGroupStateRequestArgsForCall)]
	fake.describePatchGroupStateRequestArgsForCall = append(fake.describePatchGroupStateRequestArgsForCall, struct {
		arg1 *ssm.DescribePatchGroupStateInput
	}{arg1})
	stub := fake.DescribePatchGroupStateRequestStub
	fakeReturns := fake.describePatchGroupStateRequestReturns
	fake.recordInvocation("DescribePatchGroupStateRequest", []interface{}{arg1})
	fake.describePatchGroupStateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchGroupStateRequestCallCount() int {
	fake.describePatchGroupStateRequestMutex.RLock()
	defer fake.describePatchGroupStateRequestMutex.RUnlock()
	return len(fake.describePatchGroupStateRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupStateRequestCalls(stub func(*ssm.DescribePatchGroupStateInput) (*request.Request, *ssm.DescribePatchGroupStateOutput)) {
	fake.describePatchGroupStateRequestMutex.Lock()
	defer fake.describePatchGroupStateRequestMutex.Unlock()
	fake.DescribePatchGroupStateRequestStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupStateRequestArgsForCall(i int) *ssm.DescribePatchGroupStateInput {
	fake.describePatchGroupStateRequestMutex.RLock()
	defer fake.describePatchGroupStateRequestMutex.RUnlock()
	argsForCall := fake.describePatchGroupStateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchGroupStateRequestReturns(result1 *request.Request, result2 *ssm.DescribePatchGroupStateOutput) {
	fake.describePatchGroupStateRequestMutex.Lock()
	defer fake.describePatchGroupStateRequestMutex.Unlock()
	fake.DescribePatchGroupStateRequestStub = nil
	fake.describePatchGroupStateRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupStateOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupStateRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribePatchGroupStateOutput) {
	fake.describePatchGroupStateRequestMutex.Lock()
	defer fake.describePatchGroupStateRequestMutex.Unlock()
	fake.DescribePatchGroupStateRequestStub = nil
	if fake.describePatchGroupStateRequestReturnsOnCall == nil {
		fake.describePatchGroupStateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribePatchGroupStateOutput
		})
	}
	fake.describePatchGroupStateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupStateOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupStateWithContext(arg1 context.Context, arg2 *ssm.DescribePatchGroupStateInput, arg3 ...request.Option) (*ssm.DescribePatchGroupStateOutput, error) {
	fake.describePatchGroupStateWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchGroupStateWithContextReturnsOnCall[len(fake.describePatchGroupStateWithContextArgsForCall)]
	fake.describePatchGroupStateWithContextArgsForCall = append(fake.describePatchGroupStateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchGroupStateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribePatchGroupStateWithContextStub
	fakeReturns := fake.describePatchGroupStateWithContextReturns
	fake.recordInvocation("DescribePatchGroupStateWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePatchGroupStateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchGroupStateWithContextCallCount() int {
	fake.describePatchGroupStateWithContextMutex.RLock()
	defer fake.describePatchGroupStateWithContextMutex.RUnlock()
	return len(fake.describePatchGroupStateWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupStateWithContextCalls(stub func(context.Context, *ssm.DescribePatchGroupStateInput, ...request.Option) (*ssm.DescribePatchGroupStateOutput, error)) {
	fake.describePatchGroupStateWithContextMutex.Lock()
	defer fake.describePatchGroupStateWithContextMutex.Unlock()
	fake.DescribePatchGroupStateWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupStateWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchGroupStateInput, []request.Option) {
	fake.describePatchGroupStateWithContextMutex.RLock()
	defer fake.describePatchGroupStateWithContextMutex.RUnlock()
	argsForCall := fake.describePatchGroupStateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribePatchGroupStateWithContextReturns(result1 *ssm.DescribePatchGroupStateOutput, result2 error) {
	fake.describePatchGroupStateWithContextMutex.Lock()
	defer fake.describePatchGroupStateWithContextMutex.Unlock()
	fake.DescribePatchGroupStateWithContextStub = nil
	fake.describePatchGroupStateWithContextReturns = struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupStateWithContextReturnsOnCall(i int, result1 *ssm.DescribePatchGroupStateOutput, result2 error) {
	fake.describePatchGroupStateWithContextMutex.Lock()
	defer fake.describePatchGroupStateWithContextMutex.Unlock()
	fake.DescribePatchGroupStateWithContextStub = nil
	if fake.describePatchGroupStateWithContextReturnsOnCall == nil {
		fake.describePatchGroupStateWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchGroupStateOutput
			result2 error
		})
	}
	fake.describePatchGroupStateWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchGroupStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroups(arg1 *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error) {
	fake.describePatchGroupsMutex.Lock()
	ret, specificReturn := fake.describePatchGroupsReturnsOnCall[len(fake.describePatchGroupsArgsForCall)]
	fake.describePatchGroupsArgsForCall = append(fake.describePatchGroupsArgsForCall, struct {
		arg1 *ssm.DescribePatchGroupsInput
	}{arg1})
	stub := fake.DescribePatchGroupsStub
	fakeReturns := fake.describePatchGroupsReturns
	fake.recordInvocation("DescribePatchGroups", []interface{}{arg1})
	fake.describePatchGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchGroupsCallCount() int {
	fake.describePatchGroupsMutex.RLock()
	defer fake.describePatchGroupsMutex.RUnlock()
	return len(fake.describePatchGroupsArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupsCalls(stub func(*ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error)) {
	fake.describePatchGroupsMutex.Lock()
	defer fake.describePatchGroupsMutex.Unlock()
	fake.DescribePatchGroupsStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupsArgsForCall(i int) *ssm.DescribePatchGroupsInput {
	fake.describePatchGroupsMutex.RLock()
	defer fake.describePatchGroupsMutex.RUnlock()
	argsForCall := fake.describePatchGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchGroupsReturns(result1 *ssm.DescribePatchGroupsOutput, result2 error) {
	fake.describePatchGroupsMutex.Lock()
	defer fake.describePatchGroupsMutex.Unlock()
	fake.DescribePatchGroupsStub = nil
	fake.describePatchGroupsReturns = struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupsReturnsOnCall(i int, result1 *ssm.DescribePatchGroupsOutput, result2 error) {
	fake.describePatchGroupsMutex.Lock()
	defer fake.describePatchGroupsMutex.Unlock()
	fake.DescribePatchGroupsStub = nil
	if fake.describePatchGroupsReturnsOnCall == nil {
		fake.describePatchGroupsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchGroupsOutput
			result2 error
		})
	}
	fake.describePatchGroupsReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupsPages(arg1 *ssm.DescribePatchGroupsInput, arg2 func(*ssm.DescribePatchGroupsOutput, bool) bool) error {
	fake.describePatchGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describePatchGroupsPagesReturnsOnCall[len(fake.describePatchGroupsPagesArgsForCall)]
	fake.describePatchGroupsPagesArgsForCall = append(fake.describePatchGroupsPagesArgsForCall, struct {
		arg1 *ssm.DescribePatchGroupsInput
		arg2 func(*ssm.DescribePatchGroupsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribePatchGroupsPagesStub
	fakeReturns := fake.describePatchGroupsPagesReturns
	fake.recordInvocation("DescribePatchGroupsPages", []interface{}{arg1, arg2})
	fake.describePatchGroupsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesCallCount() int {
	fake.describePatchGroupsPagesMutex.RLock()
	defer fake.describePatchGroupsPagesMutex.RUnlock()
	return len(fake.describePatchGroupsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesCalls(stub func(*ssm.DescribePatchGroupsInput, func(*ssm.DescribePatchGroupsOutput, bool) bool) error) {
	fake.describePatchGroupsPagesMutex.Lock()
	defer fake.describePatchGroupsPagesMutex.Unlock()
	fake.DescribePatchGroupsPagesStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesArgsForCall(i int) (*ssm.DescribePatchGroupsInput, func(*ssm.DescribePatchGroupsOutput, bool) bool) {
	fake.describePatchGroupsPagesMutex.RLock()
	defer fake.describePatchGroupsPagesMutex.RUnlock()
	argsForCall := fake.describePatchGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesReturns(result1 error) {
	fake.describePatchGroupsPagesMutex.Lock()
	defer fake.describePatchGroupsPagesMutex.Unlock()
	fake.DescribePatchGroupsPagesStub = nil
	fake.describePatchGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describePatchGroupsPagesMutex.Lock()
	defer fake.describePatchGroupsPagesMutex.Unlock()
	fake.DescribePatchGroupsPagesStub = nil
	if fake.describePatchGroupsPagesReturnsOnCall == nil {
		fake.describePatchGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePatchGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribePatchGroupsInput, arg3 func(*ssm.DescribePatchGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describePatchGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchGroupsPagesWithContextReturnsOnCall[len(fake.describePatchGroupsPagesWithContextArgsForCall)]
	fake.describePatchGroupsPagesWithContextArgsForCall = append(fake.describePatchGroupsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchGroupsInput
		arg3 func(*ssm.DescribePatchGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribePatchGroupsPagesWithContextStub
	fakeReturns := fake.describePatchGroupsPagesWithContextReturns
	fake.recordInvocation("DescribePatchGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describePatchGroupsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesWithContextCallCount() int {
	fake.describePatchGroupsPagesWithContextMutex.RLock()
	defer fake.describePatchGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describePatchGroupsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesWithContextCalls(stub func(context.Context, *ssm.DescribePatchGroupsInput, func(*ssm.DescribePatchGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describePatchGroupsPagesWithContextMutex.Lock()
	defer fake.describePatchGroupsPagesWithContextMutex.Unlock()
	fake.DescribePatchGroupsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchGroupsInput, func(*ssm.DescribePatchGroupsOutput, bool) bool, []request.Option) {
	fake.describePatchGroupsPagesWithContextMutex.RLock()
	defer fake.describePatchGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describePatchGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesWithContextReturns(result1 error) {
	fake.describePatchGroupsPagesWithContextMutex.Lock()
	defer fake.describePatchGroupsPagesWithContextMutex.Unlock()
	fake.DescribePatchGroupsPagesWithContextStub = nil
	fake.describePatchGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describePatchGroupsPagesWithContextMutex.Lock()
	defer fake.describePatchGroupsPagesWithContextMutex.Unlock()
	fake.DescribePatchGroupsPagesWithContextStub = nil
	if fake.describePatchGroupsPagesWithContextReturnsOnCall == nil {
		fake.describePatchGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePatchGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchGroupsRequest(arg1 *ssm.DescribePatchGroupsInput) (*request.Request, *ssm.DescribePatchGroupsOutput) {
	fake.describePatchGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describePatchGroupsRequestReturnsOnCall[len(fake.describePatchGroupsRequestArgsForCall)]
	fake.describePatchGroupsRequestArgsForCall = append(fake.describePatchGroupsRequestArgsForCall, struct {
		arg1 *ssm.DescribePatchGroupsInput
	}{arg1})
	stub := fake.DescribePatchGroupsRequestStub
	fakeReturns := fake.describePatchGroupsRequestReturns
	fake.recordInvocation("DescribePatchGroupsRequest", []interface{}{arg1})
	fake.describePatchGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchGroupsRequestCallCount() int {
	fake.describePatchGroupsRequestMutex.RLock()
	defer fake.describePatchGroupsRequestMutex.RUnlock()
	return len(fake.describePatchGroupsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupsRequestCalls(stub func(*ssm.DescribePatchGroupsInput) (*request.Request, *ssm.DescribePatchGroupsOutput)) {
	fake.describePatchGroupsRequestMutex.Lock()
	defer fake.describePatchGroupsRequestMutex.Unlock()
	fake.DescribePatchGroupsRequestStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupsRequestArgsForCall(i int) *ssm.DescribePatchGroupsInput {
	fake.describePatchGroupsRequestMutex.RLock()
	defer fake.describePatchGroupsRequestMutex.RUnlock()
	argsForCall := fake.describePatchGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchGroupsRequestReturns(result1 *request.Request, result2 *ssm.DescribePatchGroupsOutput) {
	fake.describePatchGroupsRequestMutex.Lock()
	defer fake.describePatchGroupsRequestMutex.Unlock()
	fake.DescribePatchGroupsRequestStub = nil
	fake.describePatchGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribePatchGroupsOutput) {
	fake.describePatchGroupsRequestMutex.Lock()
	defer fake.describePatchGroupsRequestMutex.Unlock()
	fake.DescribePatchGroupsRequestStub = nil
	if fake.describePatchGroupsRequestReturnsOnCall == nil {
		fake.describePatchGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribePatchGroupsOutput
		})
	}
	fake.describePatchGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchGroupsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupsWithContext(arg1 context.Context, arg2 *ssm.DescribePatchGroupsInput, arg3 ...request.Option) (*ssm.DescribePatchGroupsOutput, error) {
	fake.describePatchGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchGroupsWithContextReturnsOnCall[len(fake.describePatchGroupsWithContextArgsForCall)]
	fake.describePatchGroupsWithContextArgsForCall = append(fake.describePatchGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribePatchGroupsWithContextStub
	fakeReturns := fake.describePatchGroupsWithContextReturns
	fake.recordInvocation("DescribePatchGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePatchGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchGroupsWithContextCallCount() int {
	fake.describePatchGroupsWithContextMutex.RLock()
	defer fake.describePatchGroupsWithContextMutex.RUnlock()
	return len(fake.describePatchGroupsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchGroupsWithContextCalls(stub func(context.Context, *ssm.DescribePatchGroupsInput, ...request.Option) (*ssm.DescribePatchGroupsOutput, error)) {
	fake.describePatchGroupsWithContextMutex.Lock()
	defer fake.describePatchGroupsWithContextMutex.Unlock()
	fake.DescribePatchGroupsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchGroupsWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchGroupsInput, []request.Option) {
	fake.describePatchGroupsWithContextMutex.RLock()
	defer fake.describePatchGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describePatchGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribePatchGroupsWithContextReturns(result1 *ssm.DescribePatchGroupsOutput, result2 error) {
	fake.describePatchGroupsWithContextMutex.Lock()
	defer fake.describePatchGroupsWithContextMutex.Unlock()
	fake.DescribePatchGroupsWithContextStub = nil
	fake.describePatchGroupsWithContextReturns = struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchGroupsWithContextReturnsOnCall(i int, result1 *ssm.DescribePatchGroupsOutput, result2 error) {
	fake.describePatchGroupsWithContextMutex.Lock()
	defer fake.describePatchGroupsWithContextMutex.Unlock()
	fake.DescribePatchGroupsWithContextStub = nil
	if fake.describePatchGroupsWithContextReturnsOnCall == nil {
		fake.describePatchGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchGroupsOutput
			result2 error
		})
	}
	fake.describePatchGroupsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchProperties(arg1 *ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error) {
	fake.describePatchPropertiesMutex.Lock()
	ret, specificReturn := fake.describePatchPropertiesReturnsOnCall[len(fake.describePatchPropertiesArgsForCall)]
	fake.describePatchPropertiesArgsForCall = append(fake.describePatchPropertiesArgsForCall, struct {
		arg1 *ssm.DescribePatchPropertiesInput
	}{arg1})
	stub := fake.DescribePatchPropertiesStub
	fakeReturns := fake.describePatchPropertiesReturns
	fake.recordInvocation("DescribePatchProperties", []interface{}{arg1})
	fake.describePatchPropertiesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchPropertiesCallCount() int {
	fake.describePatchPropertiesMutex.RLock()
	defer fake.describePatchPropertiesMutex.RUnlock()
	return len(fake.describePatchPropertiesArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchPropertiesCalls(stub func(*ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error)) {
	fake.describePatchPropertiesMutex.Lock()
	defer fake.describePatchPropertiesMutex.Unlock()
	fake.DescribePatchPropertiesStub = stub
}

func (fake *FakeSSMClient) DescribePatchPropertiesArgsForCall(i int) *ssm.DescribePatchPropertiesInput {
	fake.describePatchPropertiesMutex.RLock()
	defer fake.describePatchPropertiesMutex.RUnlock()
	argsForCall := fake.describePatchPropertiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchPropertiesReturns(result1 *ssm.DescribePatchPropertiesOutput, result2 error) {
	fake.describePatchPropertiesMutex.Lock()
	defer fake.describePatchPropertiesMutex.Unlock()
	fake.DescribePatchPropertiesStub = nil
	fake.describePatchPropertiesReturns = struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchPropertiesReturnsOnCall(i int, result1 *ssm.DescribePatchPropertiesOutput, result2 error) {
	fake.describePatchPropertiesMutex.Lock()
	defer fake.describePatchPropertiesMutex.Unlock()
	fake.DescribePatchPropertiesStub = nil
	if fake.describePatchPropertiesReturnsOnCall == nil {
		fake.describePatchPropertiesReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchPropertiesOutput
			result2 error
		})
	}
	fake.describePatchPropertiesReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchPropertiesPages(arg1 *ssm.DescribePatchPropertiesInput, arg2 func(*ssm.DescribePatchPropertiesOutput, bool) bool) error {
	fake.describePatchPropertiesPagesMutex.Lock()
	ret, specificReturn := fake.describePatchPropertiesPagesReturnsOnCall[len(fake.describePatchPropertiesPagesArgsForCall)]
	fake.describePatchPropertiesPagesArgsForCall = append(fake.describePatchPropertiesPagesArgsForCall, struct {
		arg1 *ssm.DescribePatchPropertiesInput
		arg2 func(*ssm.DescribePatchPropertiesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribePatchPropertiesPagesStub
	fakeReturns := fake.describePatchPropertiesPagesReturns
	fake.recordInvocation("DescribePatchPropertiesPages", []interface{}{arg1, arg2})
	fake.describePatchPropertiesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesCallCount() int {
	fake.describePatchPropertiesPagesMutex.RLock()
	defer fake.describePatchPropertiesPagesMutex.RUnlock()
	return len(fake.describePatchPropertiesPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesCalls(stub func(*ssm.DescribePatchPropertiesInput, func(*ssm.DescribePatchPropertiesOutput, bool) bool) error) {
	fake.describePatchPropertiesPagesMutex.Lock()
	defer fake.describePatchPropertiesPagesMutex.Unlock()
	fake.DescribePatchPropertiesPagesStub = stub
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesArgsForCall(i int) (*ssm.DescribePatchPropertiesInput, func(*ssm.DescribePatchPropertiesOutput, bool) bool) {
	fake.describePatchPropertiesPagesMutex.RLock()
	defer fake.describePatchPropertiesPagesMutex.RUnlock()
	argsForCall := fake.describePatchPropertiesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesReturns(result1 error) {
	fake.describePatchPropertiesPagesMutex.Lock()
	defer fake.describePatchPropertiesPagesMutex.Unlock()
	fake.DescribePatchPropertiesPagesStub = nil
	fake.describePatchPropertiesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesReturnsOnCall(i int, result1 error) {
	fake.describePatchPropertiesPagesMutex.Lock()
	defer fake.describePatchPropertiesPagesMutex.Unlock()
	fake.DescribePatchPropertiesPagesStub = nil
	if fake.describePatchPropertiesPagesReturnsOnCall == nil {
		fake.describePatchPropertiesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePatchPropertiesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesWithContext(arg1 context.Context, arg2 *ssm.DescribePatchPropertiesInput, arg3 func(*ssm.DescribePatchPropertiesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describePatchPropertiesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchPropertiesPagesWithContextReturnsOnCall[len(fake.describePatchPropertiesPagesWithContextArgsForCall)]
	fake.describePatchPropertiesPagesWithContextArgsForCall = append(fake.describePatchPropertiesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchPropertiesInput
		arg3 func(*ssm.DescribePatchPropertiesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribePatchPropertiesPagesWithContextStub
	fakeReturns := fake.describePatchPropertiesPagesWithContextReturns
	fake.recordInvocation("DescribePatchPropertiesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describePatchPropertiesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesWithContextCallCount() int {
	fake.describePatchPropertiesPagesWithContextMutex.RLock()
	defer fake.describePatchPropertiesPagesWithContextMutex.RUnlock()
	return len(fake.describePatchPropertiesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesWithContextCalls(stub func(context.Context, *ssm.DescribePatchPropertiesInput, func(*ssm.DescribePatchPropertiesOutput, bool) bool, ...request.Option) error) {
	fake.describePatchPropertiesPagesWithContextMutex.Lock()
	defer fake.describePatchPropertiesPagesWithContextMutex.Unlock()
	fake.DescribePatchPropertiesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchPropertiesInput, func(*ssm.DescribePatchPropertiesOutput, bool) bool, []request.Option) {
	fake.describePatchPropertiesPagesWithContextMutex.RLock()
	defer fake.describePatchPropertiesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describePatchPropertiesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesWithContextReturns(result1 error) {
	fake.describePatchPropertiesPagesWithContextMutex.Lock()
	defer fake.describePatchPropertiesPagesWithContextMutex.Unlock()
	fake.DescribePatchPropertiesPagesWithContextStub = nil
	fake.describePatchPropertiesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchPropertiesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describePatchPropertiesPagesWithContextMutex.Lock()
	defer fake.describePatchPropertiesPagesWithContextMutex.Unlock()
	fake.DescribePatchPropertiesPagesWithContextStub = nil
	if fake.describePatchPropertiesPagesWithContextReturnsOnCall == nil {
		fake.describePatchPropertiesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describePatchPropertiesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribePatchPropertiesRequest(arg1 *ssm.DescribePatchPropertiesInput) (*request.Request, *ssm.DescribePatchPropertiesOutput) {
	fake.describePatchPropertiesRequestMutex.Lock()
	ret, specificReturn := fake.describePatchPropertiesRequestReturnsOnCall[len(fake.describePatchPropertiesRequestArgsForCall)]
	fake.describePatchPropertiesRequestArgsForCall = append(fake.describePatchPropertiesRequestArgsForCall, struct {
		arg1 *ssm.DescribePatchPropertiesInput
	}{arg1})
	stub := fake.DescribePatchPropertiesRequestStub
	fakeReturns := fake.describePatchPropertiesRequestReturns
	fake.recordInvocation("DescribePatchPropertiesRequest", []interface{}{arg1})
	fake.describePatchPropertiesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchPropertiesRequestCallCount() int {
	fake.describePatchPropertiesRequestMutex.RLock()
	defer fake.describePatchPropertiesRequestMutex.RUnlock()
	return len(fake.describePatchPropertiesRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchPropertiesRequestCalls(stub func(*ssm.DescribePatchPropertiesInput) (*request.Request, *ssm.DescribePatchPropertiesOutput)) {
	fake.describePatchPropertiesRequestMutex.Lock()
	defer fake.describePatchPropertiesRequestMutex.Unlock()
	fake.DescribePatchPropertiesRequestStub = stub
}

func (fake *FakeSSMClient) DescribePatchPropertiesRequestArgsForCall(i int) *ssm.DescribePatchPropertiesInput {
	fake.describePatchPropertiesRequestMutex.RLock()
	defer fake.describePatchPropertiesRequestMutex.RUnlock()
	argsForCall := fake.describePatchPropertiesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribePatchPropertiesRequestReturns(result1 *request.Request, result2 *ssm.DescribePatchPropertiesOutput) {
	fake.describePatchPropertiesRequestMutex.Lock()
	defer fake.describePatchPropertiesRequestMutex.Unlock()
	fake.DescribePatchPropertiesRequestStub = nil
	fake.describePatchPropertiesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchPropertiesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchPropertiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribePatchPropertiesOutput) {
	fake.describePatchPropertiesRequestMutex.Lock()
	defer fake.describePatchPropertiesRequestMutex.Unlock()
	fake.DescribePatchPropertiesRequestStub = nil
	if fake.describePatchPropertiesRequestReturnsOnCall == nil {
		fake.describePatchPropertiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribePatchPropertiesOutput
		})
	}
	fake.describePatchPropertiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribePatchPropertiesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchPropertiesWithContext(arg1 context.Context, arg2 *ssm.DescribePatchPropertiesInput, arg3 ...request.Option) (*ssm.DescribePatchPropertiesOutput, error) {
	fake.describePatchPropertiesWithContextMutex.Lock()
	ret, specificReturn := fake.describePatchPropertiesWithContextReturnsOnCall[len(fake.describePatchPropertiesWithContextArgsForCall)]
	fake.describePatchPropertiesWithContextArgsForCall = append(fake.describePatchPropertiesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribePatchPropertiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribePatchPropertiesWithContextStub
	fakeReturns := fake.describePatchPropertiesWithContextReturns
	fake.recordInvocation("DescribePatchPropertiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePatchPropertiesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribePatchPropertiesWithContextCallCount() int {
	fake.describePatchPropertiesWithContextMutex.RLock()
	defer fake.describePatchPropertiesWithContextMutex.RUnlock()
	return len(fake.describePatchPropertiesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribePatchPropertiesWithContextCalls(stub func(context.Context, *ssm.DescribePatchPropertiesInput, ...request.Option) (*ssm.DescribePatchPropertiesOutput, error)) {
	fake.describePatchPropertiesWithContextMutex.Lock()
	defer fake.describePatchPropertiesWithContextMutex.Unlock()
	fake.DescribePatchPropertiesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribePatchPropertiesWithContextArgsForCall(i int) (context.Context, *ssm.DescribePatchPropertiesInput, []request.Option) {
	fake.describePatchPropertiesWithContextMutex.RLock()
	defer fake.describePatchPropertiesWithContextMutex.RUnlock()
	argsForCall := fake.describePatchPropertiesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribePatchPropertiesWithContextReturns(result1 *ssm.DescribePatchPropertiesOutput, result2 error) {
	fake.describePatchPropertiesWithContextMutex.Lock()
	defer fake.describePatchPropertiesWithContextMutex.Unlock()
	fake.DescribePatchPropertiesWithContextStub = nil
	fake.describePatchPropertiesWithContextReturns = struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribePatchPropertiesWithContextReturnsOnCall(i int, result1 *ssm.DescribePatchPropertiesOutput, result2 error) {
	fake.describePatchPropertiesWithContextMutex.Lock()
	defer fake.describePatchPropertiesWithContextMutex.Unlock()
	fake.DescribePatchPropertiesWithContextStub = nil
	if fake.describePatchPropertiesWithContextReturnsOnCall == nil {
		fake.describePatchPropertiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribePatchPropertiesOutput
			result2 error
		})
	}
	fake.describePatchPropertiesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribePatchPropertiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeSessions(arg1 *ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error) {
	fake.describeSessionsMutex.Lock()
	ret, specificReturn := fake.describeSessionsReturnsOnCall[len(fake.describeSessionsArgsForCall)]
	fake.describeSessionsArgsForCall = append(fake.describeSessionsArgsForCall, struct {
		arg1 *ssm.DescribeSessionsInput
	}{arg1})
	stub := fake.DescribeSessionsStub
	fakeReturns := fake.describeSessionsReturns
	fake.recordInvocation("DescribeSessions", []interface{}{arg1})
	fake.describeSessionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeSessionsCallCount() int {
	fake.describeSessionsMutex.RLock()
	defer fake.describeSessionsMutex.RUnlock()
	return len(fake.describeSessionsArgsForCall)
}

func (fake *FakeSSMClient) DescribeSessionsCalls(stub func(*ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error)) {
	fake.describeSessionsMutex.Lock()
	defer fake.describeSessionsMutex.Unlock()
	fake.DescribeSessionsStub = stub
}

func (fake *FakeSSMClient) DescribeSessionsArgsForCall(i int) *ssm.DescribeSessionsInput {
	fake.describeSessionsMutex.RLock()
	defer fake.describeSessionsMutex.RUnlock()
	argsForCall := fake.describeSessionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeSessionsReturns(result1 *ssm.DescribeSessionsOutput, result2 error) {
	fake.describeSessionsMutex.Lock()
	defer fake.describeSessionsMutex.Unlock()
	fake.DescribeSessionsStub = nil
	fake.describeSessionsReturns = struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeSessionsReturnsOnCall(i int, result1 *ssm.DescribeSessionsOutput, result2 error) {
	fake.describeSessionsMutex.Lock()
	defer fake.describeSessionsMutex.Unlock()
	fake.DescribeSessionsStub = nil
	if fake.describeSessionsReturnsOnCall == nil {
		fake.describeSessionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeSessionsOutput
			result2 error
		})
	}
	fake.describeSessionsReturnsOnCall[i] = struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeSessionsPages(arg1 *ssm.DescribeSessionsInput, arg2 func(*ssm.DescribeSessionsOutput, bool) bool) error {
	fake.describeSessionsPagesMutex.Lock()
	ret, specificReturn := fake.describeSessionsPagesReturnsOnCall[len(fake.describeSessionsPagesArgsForCall)]
	fake.describeSessionsPagesArgsForCall = append(fake.describeSessionsPagesArgsForCall, struct {
		arg1 *ssm.DescribeSessionsInput
		arg2 func(*ssm.DescribeSessionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeSessionsPagesStub
	fakeReturns := fake.describeSessionsPagesReturns
	fake.recordInvocation("DescribeSessionsPages", []interface{}{arg1, arg2})
	fake.describeSessionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeSessionsPagesCallCount() int {
	fake.describeSessionsPagesMutex.RLock()
	defer fake.describeSessionsPagesMutex.RUnlock()
	return len(fake.describeSessionsPagesArgsForCall)
}

func (fake *FakeSSMClient) DescribeSessionsPagesCalls(stub func(*ssm.DescribeSessionsInput, func(*ssm.DescribeSessionsOutput, bool) bool) error) {
	fake.describeSessionsPagesMutex.Lock()
	defer fake.describeSessionsPagesMutex.Unlock()
	fake.DescribeSessionsPagesStub = stub
}

func (fake *FakeSSMClient) DescribeSessionsPagesArgsForCall(i int) (*ssm.DescribeSessionsInput, func(*ssm.DescribeSessionsOutput, bool) bool) {
	fake.describeSessionsPagesMutex.RLock()
	defer fake.describeSessionsPagesMutex.RUnlock()
	argsForCall := fake.describeSessionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) DescribeSessionsPagesReturns(result1 error) {
	fake.describeSessionsPagesMutex.Lock()
	defer fake.describeSessionsPagesMutex.Unlock()
	fake.DescribeSessionsPagesStub = nil
	fake.describeSessionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeSessionsPagesReturnsOnCall(i int, result1 error) {
	fake.describeSessionsPagesMutex.Lock()
	defer fake.describeSessionsPagesMutex.Unlock()
	fake.DescribeSessionsPagesStub = nil
	if fake.describeSessionsPagesReturnsOnCall == nil {
		fake.describeSessionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSessionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeSessionsPagesWithContext(arg1 context.Context, arg2 *ssm.DescribeSessionsInput, arg3 func(*ssm.DescribeSessionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSessionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSessionsPagesWithContextReturnsOnCall[len(fake.describeSessionsPagesWithContextArgsForCall)]
	fake.describeSessionsPagesWithContextArgsForCall = append(fake.describeSessionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeSessionsInput
		arg3 func(*ssm.DescribeSessionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeSessionsPagesWithContextStub
	fakeReturns := fake.describeSessionsPagesWithContextReturns
	fake.recordInvocation("DescribeSessionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSessionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) DescribeSessionsPagesWithContextCallCount() int {
	fake.describeSessionsPagesWithContextMutex.RLock()
	defer fake.describeSessionsPagesWithContextMutex.RUnlock()
	return len(fake.describeSessionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeSessionsPagesWithContextCalls(stub func(context.Context, *ssm.DescribeSessionsInput, func(*ssm.DescribeSessionsOutput, bool) bool, ...request.Option) error) {
	fake.describeSessionsPagesWithContextMutex.Lock()
	defer fake.describeSessionsPagesWithContextMutex.Unlock()
	fake.DescribeSessionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeSessionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.DescribeSessionsInput, func(*ssm.DescribeSessionsOutput, bool) bool, []request.Option) {
	fake.describeSessionsPagesWithContextMutex.RLock()
	defer fake.describeSessionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSessionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) DescribeSessionsPagesWithContextReturns(result1 error) {
	fake.describeSessionsPagesWithContextMutex.Lock()
	defer fake.describeSessionsPagesWithContextMutex.Unlock()
	fake.DescribeSessionsPagesWithContextStub = nil
	fake.describeSessionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeSessionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSessionsPagesWithContextMutex.Lock()
	defer fake.describeSessionsPagesWithContextMutex.Unlock()
	fake.DescribeSessionsPagesWithContextStub = nil
	if fake.describeSessionsPagesWithContextReturnsOnCall == nil {
		fake.describeSessionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSessionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) DescribeSessionsRequest(arg1 *ssm.DescribeSessionsInput) (*request.Request, *ssm.DescribeSessionsOutput) {
	fake.describeSessionsRequestMutex.Lock()
	ret, specificReturn := fake.describeSessionsRequestReturnsOnCall[len(fake.describeSessionsRequestArgsForCall)]
	fake.describeSessionsRequestArgsForCall = append(fake.describeSessionsRequestArgsForCall, struct {
		arg1 *ssm.DescribeSessionsInput
	}{arg1})
	stub := fake.DescribeSessionsRequestStub
	fakeReturns := fake.describeSessionsRequestReturns
	fake.recordInvocation("DescribeSessionsRequest", []interface{}{arg1})
	fake.describeSessionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeSessionsRequestCallCount() int {
	fake.describeSessionsRequestMutex.RLock()
	defer fake.describeSessionsRequestMutex.RUnlock()
	return len(fake.describeSessionsRequestArgsForCall)
}

func (fake *FakeSSMClient) DescribeSessionsRequestCalls(stub func(*ssm.DescribeSessionsInput) (*request.Request, *ssm.DescribeSessionsOutput)) {
	fake.describeSessionsRequestMutex.Lock()
	defer fake.describeSessionsRequestMutex.Unlock()
	fake.DescribeSessionsRequestStub = stub
}

func (fake *FakeSSMClient) DescribeSessionsRequestArgsForCall(i int) *ssm.DescribeSessionsInput {
	fake.describeSessionsRequestMutex.RLock()
	defer fake.describeSessionsRequestMutex.RUnlock()
	argsForCall := fake.describeSessionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DescribeSessionsRequestReturns(result1 *request.Request, result2 *ssm.DescribeSessionsOutput) {
	fake.describeSessionsRequestMutex.Lock()
	defer fake.describeSessionsRequestMutex.Unlock()
	fake.DescribeSessionsRequestStub = nil
	fake.describeSessionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DescribeSessionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeSessionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DescribeSessionsOutput) {
	fake.describeSessionsRequestMutex.Lock()
	defer fake.describeSessionsRequestMutex.Unlock()
	fake.DescribeSessionsRequestStub = nil
	if fake.describeSessionsRequestReturnsOnCall == nil {
		fake.describeSessionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DescribeSessionsOutput
		})
	}
	fake.describeSessionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DescribeSessionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeSessionsWithContext(arg1 context.Context, arg2 *ssm.DescribeSessionsInput, arg3 ...request.Option) (*ssm.DescribeSessionsOutput, error) {
	fake.describeSessionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSessionsWithContextReturnsOnCall[len(fake.describeSessionsWithContextArgsForCall)]
	fake.describeSessionsWithContextArgsForCall = append(fake.describeSessionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DescribeSessionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeSessionsWithContextStub
	fakeReturns := fake.describeSessionsWithContextReturns
	fake.recordInvocation("DescribeSessionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSessionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DescribeSessionsWithContextCallCount() int {
	fake.describeSessionsWithContextMutex.RLock()
	defer fake.describeSessionsWithContextMutex.RUnlock()
	return len(fake.describeSessionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) DescribeSessionsWithContextCalls(stub func(context.Context, *ssm.DescribeSessionsInput, ...request.Option) (*ssm.DescribeSessionsOutput, error)) {
	fake.describeSessionsWithContextMutex.Lock()
	defer fake.describeSessionsWithContextMutex.Unlock()
	fake.DescribeSessionsWithContextStub = stub
}

func (fake *FakeSSMClient) DescribeSessionsWithContextArgsForCall(i int) (context.Context, *ssm.DescribeSessionsInput, []request.Option) {
	fake.describeSessionsWithContextMutex.RLock()
	defer fake.describeSessionsWithContextMutex.RUnlock()
	argsForCall := fake.describeSessionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DescribeSessionsWithContextReturns(result1 *ssm.DescribeSessionsOutput, result2 error) {
	fake.describeSessionsWithContextMutex.Lock()
	defer fake.describeSessionsWithContextMutex.Unlock()
	fake.DescribeSessionsWithContextStub = nil
	fake.describeSessionsWithContextReturns = struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DescribeSessionsWithContextReturnsOnCall(i int, result1 *ssm.DescribeSessionsOutput, result2 error) {
	fake.describeSessionsWithContextMutex.Lock()
	defer fake.describeSessionsWithContextMutex.Unlock()
	fake.DescribeSessionsWithContextStub = nil
	if fake.describeSessionsWithContextReturnsOnCall == nil {
		fake.describeSessionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DescribeSessionsOutput
			result2 error
		})
	}
	fake.describeSessionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DescribeSessionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItem(arg1 *ssm.DisassociateOpsItemRelatedItemInput) (*ssm.DisassociateOpsItemRelatedItemOutput, error) {
	fake.disassociateOpsItemRelatedItemMutex.Lock()
	ret, specificReturn := fake.disassociateOpsItemRelatedItemReturnsOnCall[len(fake.disassociateOpsItemRelatedItemArgsForCall)]
	fake.disassociateOpsItemRelatedItemArgsForCall = append(fake.disassociateOpsItemRelatedItemArgsForCall, struct {
		arg1 *ssm.DisassociateOpsItemRelatedItemInput
	}{arg1})
	stub := fake.DisassociateOpsItemRelatedItemStub
	fakeReturns := fake.disassociateOpsItemRelatedItemReturns
	fake.recordInvocation("DisassociateOpsItemRelatedItem", []interface{}{arg1})
	fake.disassociateOpsItemRelatedItemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemCallCount() int {
	fake.disassociateOpsItemRelatedItemMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemMutex.RUnlock()
	return len(fake.disassociateOpsItemRelatedItemArgsForCall)
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemCalls(stub func(*ssm.DisassociateOpsItemRelatedItemInput) (*ssm.DisassociateOpsItemRelatedItemOutput, error)) {
	fake.disassociateOpsItemRelatedItemMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemStub = stub
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemArgsForCall(i int) *ssm.DisassociateOpsItemRelatedItemInput {
	fake.disassociateOpsItemRelatedItemMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemMutex.RUnlock()
	argsForCall := fake.disassociateOpsItemRelatedItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemReturns(result1 *ssm.DisassociateOpsItemRelatedItemOutput, result2 error) {
	fake.disassociateOpsItemRelatedItemMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemStub = nil
	fake.disassociateOpsItemRelatedItemReturns = struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemReturnsOnCall(i int, result1 *ssm.DisassociateOpsItemRelatedItemOutput, result2 error) {
	fake.disassociateOpsItemRelatedItemMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemStub = nil
	if fake.disassociateOpsItemRelatedItemReturnsOnCall == nil {
		fake.disassociateOpsItemRelatedItemReturnsOnCall = make(map[int]struct {
			result1 *ssm.DisassociateOpsItemRelatedItemOutput
			result2 error
		})
	}
	fake.disassociateOpsItemRelatedItemReturnsOnCall[i] = struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemRequest(arg1 *ssm.DisassociateOpsItemRelatedItemInput) (*request.Request, *ssm.DisassociateOpsItemRelatedItemOutput) {
	fake.disassociateOpsItemRelatedItemRequestMutex.Lock()
	ret, specificReturn := fake.disassociateOpsItemRelatedItemRequestReturnsOnCall[len(fake.disassociateOpsItemRelatedItemRequestArgsForCall)]
	fake.disassociateOpsItemRelatedItemRequestArgsForCall = append(fake.disassociateOpsItemRelatedItemRequestArgsForCall, struct {
		arg1 *ssm.DisassociateOpsItemRelatedItemInput
	}{arg1})
	stub := fake.DisassociateOpsItemRelatedItemRequestStub
	fakeReturns := fake.disassociateOpsItemRelatedItemRequestReturns
	fake.recordInvocation("DisassociateOpsItemRelatedItemRequest", []interface{}{arg1})
	fake.disassociateOpsItemRelatedItemRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemRequestCallCount() int {
	fake.disassociateOpsItemRelatedItemRequestMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemRequestMutex.RUnlock()
	return len(fake.disassociateOpsItemRelatedItemRequestArgsForCall)
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemRequestCalls(stub func(*ssm.DisassociateOpsItemRelatedItemInput) (*request.Request, *ssm.DisassociateOpsItemRelatedItemOutput)) {
	fake.disassociateOpsItemRelatedItemRequestMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemRequestMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemRequestStub = stub
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemRequestArgsForCall(i int) *ssm.DisassociateOpsItemRelatedItemInput {
	fake.disassociateOpsItemRelatedItemRequestMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemRequestMutex.RUnlock()
	argsForCall := fake.disassociateOpsItemRelatedItemRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemRequestReturns(result1 *request.Request, result2 *ssm.DisassociateOpsItemRelatedItemOutput) {
	fake.disassociateOpsItemRelatedItemRequestMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemRequestMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemRequestStub = nil
	fake.disassociateOpsItemRelatedItemRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.DisassociateOpsItemRelatedItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.DisassociateOpsItemRelatedItemOutput) {
	fake.disassociateOpsItemRelatedItemRequestMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemRequestMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemRequestStub = nil
	if fake.disassociateOpsItemRelatedItemRequestReturnsOnCall == nil {
		fake.disassociateOpsItemRelatedItemRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.DisassociateOpsItemRelatedItemOutput
		})
	}
	fake.disassociateOpsItemRelatedItemRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.DisassociateOpsItemRelatedItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemWithContext(arg1 context.Context, arg2 *ssm.DisassociateOpsItemRelatedItemInput, arg3 ...request.Option) (*ssm.DisassociateOpsItemRelatedItemOutput, error) {
	fake.disassociateOpsItemRelatedItemWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateOpsItemRelatedItemWithContextReturnsOnCall[len(fake.disassociateOpsItemRelatedItemWithContextArgsForCall)]
	fake.disassociateOpsItemRelatedItemWithContextArgsForCall = append(fake.disassociateOpsItemRelatedItemWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.DisassociateOpsItemRelatedItemInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisassociateOpsItemRelatedItemWithContextStub
	fakeReturns := fake.disassociateOpsItemRelatedItemWithContextReturns
	fake.recordInvocation("DisassociateOpsItemRelatedItemWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateOpsItemRelatedItemWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemWithContextCallCount() int {
	fake.disassociateOpsItemRelatedItemWithContextMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemWithContextMutex.RUnlock()
	return len(fake.disassociateOpsItemRelatedItemWithContextArgsForCall)
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemWithContextCalls(stub func(context.Context, *ssm.DisassociateOpsItemRelatedItemInput, ...request.Option) (*ssm.DisassociateOpsItemRelatedItemOutput, error)) {
	fake.disassociateOpsItemRelatedItemWithContextMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemWithContextMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemWithContextStub = stub
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemWithContextArgsForCall(i int) (context.Context, *ssm.DisassociateOpsItemRelatedItemInput, []request.Option) {
	fake.disassociateOpsItemRelatedItemWithContextMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemWithContextMutex.RUnlock()
	argsForCall := fake.disassociateOpsItemRelatedItemWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemWithContextReturns(result1 *ssm.DisassociateOpsItemRelatedItemOutput, result2 error) {
	fake.disassociateOpsItemRelatedItemWithContextMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemWithContextMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemWithContextStub = nil
	fake.disassociateOpsItemRelatedItemWithContextReturns = struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) DisassociateOpsItemRelatedItemWithContextReturnsOnCall(i int, result1 *ssm.DisassociateOpsItemRelatedItemOutput, result2 error) {
	fake.disassociateOpsItemRelatedItemWithContextMutex.Lock()
	defer fake.disassociateOpsItemRelatedItemWithContextMutex.Unlock()
	fake.DisassociateOpsItemRelatedItemWithContextStub = nil
	if fake.disassociateOpsItemRelatedItemWithContextReturnsOnCall == nil {
		fake.disassociateOpsItemRelatedItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.DisassociateOpsItemRelatedItemOutput
			result2 error
		})
	}
	fake.disassociateOpsItemRelatedItemWithContextReturnsOnCall[i] = struct {
		result1 *ssm.DisassociateOpsItemRelatedItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetAutomationExecution(arg1 *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error) {
	fake.getAutomationExecutionMutex.Lock()
	ret, specificReturn := fake.getAutomationExecutionReturnsOnCall[len(fake.getAutomationExecutionArgsForCall)]
	fake.getAutomationExecutionArgsForCall = append(fake.getAutomationExecutionArgsForCall, struct {
		arg1 *ssm.GetAutomationExecutionInput
	}{arg1})
	stub := fake.GetAutomationExecutionStub
	fakeReturns := fake.getAutomationExecutionReturns
	fake.recordInvocation("GetAutomationExecution", []interface{}{arg1})
	fake.getAutomationExecutionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetAutomationExecutionCallCount() int {
	fake.getAutomationExecutionMutex.RLock()
	defer fake.getAutomationExecutionMutex.RUnlock()
	return len(fake.getAutomationExecutionArgsForCall)
}

func (fake *FakeSSMClient) GetAutomationExecutionCalls(stub func(*ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error)) {
	fake.getAutomationExecutionMutex.Lock()
	defer fake.getAutomationExecutionMutex.Unlock()
	fake.GetAutomationExecutionStub = stub
}

func (fake *FakeSSMClient) GetAutomationExecutionArgsForCall(i int) *ssm.GetAutomationExecutionInput {
	fake.getAutomationExecutionMutex.RLock()
	defer fake.getAutomationExecutionMutex.RUnlock()
	argsForCall := fake.getAutomationExecutionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetAutomationExecutionReturns(result1 *ssm.GetAutomationExecutionOutput, result2 error) {
	fake.getAutomationExecutionMutex.Lock()
	defer fake.getAutomationExecutionMutex.Unlock()
	fake.GetAutomationExecutionStub = nil
	fake.getAutomationExecutionReturns = struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetAutomationExecutionReturnsOnCall(i int, result1 *ssm.GetAutomationExecutionOutput, result2 error) {
	fake.getAutomationExecutionMutex.Lock()
	defer fake.getAutomationExecutionMutex.Unlock()
	fake.GetAutomationExecutionStub = nil
	if fake.getAutomationExecutionReturnsOnCall == nil {
		fake.getAutomationExecutionReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetAutomationExecutionOutput
			result2 error
		})
	}
	fake.getAutomationExecutionReturnsOnCall[i] = struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetAutomationExecutionRequest(arg1 *ssm.GetAutomationExecutionInput) (*request.Request, *ssm.GetAutomationExecutionOutput) {
	fake.getAutomationExecutionRequestMutex.Lock()
	ret, specificReturn := fake.getAutomationExecutionRequestReturnsOnCall[len(fake.getAutomationExecutionRequestArgsForCall)]
	fake.getAutomationExecutionRequestArgsForCall = append(fake.getAutomationExecutionRequestArgsForCall, struct {
		arg1 *ssm.GetAutomationExecutionInput
	}{arg1})
	stub := fake.GetAutomationExecutionRequestStub
	fakeReturns := fake.getAutomationExecutionRequestReturns
	fake.recordInvocation("GetAutomationExecutionRequest", []interface{}{arg1})
	fake.getAutomationExecutionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetAutomationExecutionRequestCallCount() int {
	fake.getAutomationExecutionRequestMutex.RLock()
	defer fake.getAutomationExecutionRequestMutex.RUnlock()
	return len(fake.getAutomationExecutionRequestArgsForCall)
}

func (fake *FakeSSMClient) GetAutomationExecutionRequestCalls(stub func(*ssm.GetAutomationExecutionInput) (*request.Request, *ssm.GetAutomationExecutionOutput)) {
	fake.getAutomationExecutionRequestMutex.Lock()
	defer fake.getAutomationExecutionRequestMutex.Unlock()
	fake.GetAutomationExecutionRequestStub = stub
}

func (fake *FakeSSMClient) GetAutomationExecutionRequestArgsForCall(i int) *ssm.GetAutomationExecutionInput {
	fake.getAutomationExecutionRequestMutex.RLock()
	defer fake.getAutomationExecutionRequestMutex.RUnlock()
	argsForCall := fake.getAutomationExecutionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetAutomationExecutionRequestReturns(result1 *request.Request, result2 *ssm.GetAutomationExecutionOutput) {
	fake.getAutomationExecutionRequestMutex.Lock()
	defer fake.getAutomationExecutionRequestMutex.Unlock()
	fake.GetAutomationExecutionRequestStub = nil
	fake.getAutomationExecutionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetAutomationExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetAutomationExecutionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetAutomationExecutionOutput) {
	fake.getAutomationExecutionRequestMutex.Lock()
	defer fake.getAutomationExecutionRequestMutex.Unlock()
	fake.GetAutomationExecutionRequestStub = nil
	if fake.getAutomationExecutionRequestReturnsOnCall == nil {
		fake.getAutomationExecutionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetAutomationExecutionOutput
		})
	}
	fake.getAutomationExecutionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetAutomationExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetAutomationExecutionWithContext(arg1 context.Context, arg2 *ssm.GetAutomationExecutionInput, arg3 ...request.Option) (*ssm.GetAutomationExecutionOutput, error) {
	fake.getAutomationExecutionWithContextMutex.Lock()
	ret, specificReturn := fake.getAutomationExecutionWithContextReturnsOnCall[len(fake.getAutomationExecutionWithContextArgsForCall)]
	fake.getAutomationExecutionWithContextArgsForCall = append(fake.getAutomationExecutionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetAutomationExecutionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetAutomationExecutionWithContextStub
	fakeReturns := fake.getAutomationExecutionWithContextReturns
	fake.recordInvocation("GetAutomationExecutionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getAutomationExecutionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetAutomationExecutionWithContextCallCount() int {
	fake.getAutomationExecutionWithContextMutex.RLock()
	defer fake.getAutomationExecutionWithContextMutex.RUnlock()
	return len(fake.getAutomationExecutionWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetAutomationExecutionWithContextCalls(stub func(context.Context, *ssm.GetAutomationExecutionInput, ...request.Option) (*ssm.GetAutomationExecutionOutput, error)) {
	fake.getAutomationExecutionWithContextMutex.Lock()
	defer fake.getAutomationExecutionWithContextMutex.Unlock()
	fake.GetAutomationExecutionWithContextStub = stub
}

func (fake *FakeSSMClient) GetAutomationExecutionWithContextArgsForCall(i int) (context.Context, *ssm.GetAutomationExecutionInput, []request.Option) {
	fake.getAutomationExecutionWithContextMutex.RLock()
	defer fake.getAutomationExecutionWithContextMutex.RUnlock()
	argsForCall := fake.getAutomationExecutionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetAutomationExecutionWithContextReturns(result1 *ssm.GetAutomationExecutionOutput, result2 error) {
	fake.getAutomationExecutionWithContextMutex.Lock()
	defer fake.getAutomationExecutionWithContextMutex.Unlock()
	fake.GetAutomationExecutionWithContextStub = nil
	fake.getAutomationExecutionWithContextReturns = struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetAutomationExecutionWithContextReturnsOnCall(i int, result1 *ssm.GetAutomationExecutionOutput, result2 error) {
	fake.getAutomationExecutionWithContextMutex.Lock()
	defer fake.getAutomationExecutionWithContextMutex.Unlock()
	fake.GetAutomationExecutionWithContextStub = nil
	if fake.getAutomationExecutionWithContextReturnsOnCall == nil {
		fake.getAutomationExecutionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetAutomationExecutionOutput
			result2 error
		})
	}
	fake.getAutomationExecutionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCalendarState(arg1 *ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error) {
	fake.getCalendarStateMutex.Lock()
	ret, specificReturn := fake.getCalendarStateReturnsOnCall[len(fake.getCalendarStateArgsForCall)]
	fake.getCalendarStateArgsForCall = append(fake.getCalendarStateArgsForCall, struct {
		arg1 *ssm.GetCalendarStateInput
	}{arg1})
	stub := fake.GetCalendarStateStub
	fakeReturns := fake.getCalendarStateReturns
	fake.recordInvocation("GetCalendarState", []interface{}{arg1})
	fake.getCalendarStateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetCalendarStateCallCount() int {
	fake.getCalendarStateMutex.RLock()
	defer fake.getCalendarStateMutex.RUnlock()
	return len(fake.getCalendarStateArgsForCall)
}

func (fake *FakeSSMClient) GetCalendarStateCalls(stub func(*ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error)) {
	fake.getCalendarStateMutex.Lock()
	defer fake.getCalendarStateMutex.Unlock()
	fake.GetCalendarStateStub = stub
}

func (fake *FakeSSMClient) GetCalendarStateArgsForCall(i int) *ssm.GetCalendarStateInput {
	fake.getCalendarStateMutex.RLock()
	defer fake.getCalendarStateMutex.RUnlock()
	argsForCall := fake.getCalendarStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetCalendarStateReturns(result1 *ssm.GetCalendarStateOutput, result2 error) {
	fake.getCalendarStateMutex.Lock()
	defer fake.getCalendarStateMutex.Unlock()
	fake.GetCalendarStateStub = nil
	fake.getCalendarStateReturns = struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCalendarStateReturnsOnCall(i int, result1 *ssm.GetCalendarStateOutput, result2 error) {
	fake.getCalendarStateMutex.Lock()
	defer fake.getCalendarStateMutex.Unlock()
	fake.GetCalendarStateStub = nil
	if fake.getCalendarStateReturnsOnCall == nil {
		fake.getCalendarStateReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetCalendarStateOutput
			result2 error
		})
	}
	fake.getCalendarStateReturnsOnCall[i] = struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCalendarStateRequest(arg1 *ssm.GetCalendarStateInput) (*request.Request, *ssm.GetCalendarStateOutput) {
	fake.getCalendarStateRequestMutex.Lock()
	ret, specificReturn := fake.getCalendarStateRequestReturnsOnCall[len(fake.getCalendarStateRequestArgsForCall)]
	fake.getCalendarStateRequestArgsForCall = append(fake.getCalendarStateRequestArgsForCall, struct {
		arg1 *ssm.GetCalendarStateInput
	}{arg1})
	stub := fake.GetCalendarStateRequestStub
	fakeReturns := fake.getCalendarStateRequestReturns
	fake.recordInvocation("GetCalendarStateRequest", []interface{}{arg1})
	fake.getCalendarStateRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetCalendarStateRequestCallCount() int {
	fake.getCalendarStateRequestMutex.RLock()
	defer fake.getCalendarStateRequestMutex.RUnlock()
	return len(fake.getCalendarStateRequestArgsForCall)
}

func (fake *FakeSSMClient) GetCalendarStateRequestCalls(stub func(*ssm.GetCalendarStateInput) (*request.Request, *ssm.GetCalendarStateOutput)) {
	fake.getCalendarStateRequestMutex.Lock()
	defer fake.getCalendarStateRequestMutex.Unlock()
	fake.GetCalendarStateRequestStub = stub
}

func (fake *FakeSSMClient) GetCalendarStateRequestArgsForCall(i int) *ssm.GetCalendarStateInput {
	fake.getCalendarStateRequestMutex.RLock()
	defer fake.getCalendarStateRequestMutex.RUnlock()
	argsForCall := fake.getCalendarStateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetCalendarStateRequestReturns(result1 *request.Request, result2 *ssm.GetCalendarStateOutput) {
	fake.getCalendarStateRequestMutex.Lock()
	defer fake.getCalendarStateRequestMutex.Unlock()
	fake.GetCalendarStateRequestStub = nil
	fake.getCalendarStateRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetCalendarStateOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCalendarStateRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetCalendarStateOutput) {
	fake.getCalendarStateRequestMutex.Lock()
	defer fake.getCalendarStateRequestMutex.Unlock()
	fake.GetCalendarStateRequestStub = nil
	if fake.getCalendarStateRequestReturnsOnCall == nil {
		fake.getCalendarStateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetCalendarStateOutput
		})
	}
	fake.getCalendarStateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetCalendarStateOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCalendarStateWithContext(arg1 context.Context, arg2 *ssm.GetCalendarStateInput, arg3 ...request.Option) (*ssm.GetCalendarStateOutput, error) {
	fake.getCalendarStateWithContextMutex.Lock()
	ret, specificReturn := fake.getCalendarStateWithContextReturnsOnCall[len(fake.getCalendarStateWithContextArgsForCall)]
	fake.getCalendarStateWithContextArgsForCall = append(fake.getCalendarStateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetCalendarStateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetCalendarStateWithContextStub
	fakeReturns := fake.getCalendarStateWithContextReturns
	fake.recordInvocation("GetCalendarStateWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCalendarStateWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetCalendarStateWithContextCallCount() int {
	fake.getCalendarStateWithContextMutex.RLock()
	defer fake.getCalendarStateWithContextMutex.RUnlock()
	return len(fake.getCalendarStateWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetCalendarStateWithContextCalls(stub func(context.Context, *ssm.GetCalendarStateInput, ...request.Option) (*ssm.GetCalendarStateOutput, error)) {
	fake.getCalendarStateWithContextMutex.Lock()
	defer fake.getCalendarStateWithContextMutex.Unlock()
	fake.GetCalendarStateWithContextStub = stub
}

func (fake *FakeSSMClient) GetCalendarStateWithContextArgsForCall(i int) (context.Context, *ssm.GetCalendarStateInput, []request.Option) {
	fake.getCalendarStateWithContextMutex.RLock()
	defer fake.getCalendarStateWithContextMutex.RUnlock()
	argsForCall := fake.getCalendarStateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetCalendarStateWithContextReturns(result1 *ssm.GetCalendarStateOutput, result2 error) {
	fake.getCalendarStateWithContextMutex.Lock()
	defer fake.getCalendarStateWithContextMutex.Unlock()
	fake.GetCalendarStateWithContextStub = nil
	fake.getCalendarStateWithContextReturns = struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCalendarStateWithContextReturnsOnCall(i int, result1 *ssm.GetCalendarStateOutput, result2 error) {
	fake.getCalendarStateWithContextMutex.Lock()
	defer fake.getCalendarStateWithContextMutex.Unlock()
	fake.GetCalendarStateWithContextStub = nil
	if fake.getCalendarStateWithContextReturnsOnCall == nil {
		fake.getCalendarStateWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetCalendarStateOutput
			result2 error
		})
	}
	fake.getCalendarStateWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetCalendarStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCommandInvocation(arg1 *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error) {
	fake.getCommandInvocationMutex.Lock()
	ret, specificReturn := fake.getCommandInvocationReturnsOnCall[len(fake.getCommandInvocationArgsForCall)]
	fake.getCommandInvocationArgsForCall = append(fake.getCommandInvocationArgsForCall, struct {
		arg1 *ssm.GetCommandInvocationInput
	}{arg1})
	stub := fake.GetCommandInvocationStub
	fakeReturns := fake.getCommandInvocationReturns
	fake.recordInvocation("GetCommandInvocation", []interface{}{arg1})
	fake.getCommandInvocationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetCommandInvocationCallCount() int {
	fake.getCommandInvocationMutex.RLock()
	defer fake.getCommandInvocationMutex.RUnlock()
	return len(fake.getCommandInvocationArgsForCall)
}

func (fake *FakeSSMClient) GetCommandInvocationCalls(stub func(*ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error)) {
	fake.getCommandInvocationMutex.Lock()
	defer fake.getCommandInvocationMutex.Unlock()
	fake.GetCommandInvocationStub = stub
}

func (fake *FakeSSMClient) GetCommandInvocationArgsForCall(i int) *ssm.GetCommandInvocationInput {
	fake.getCommandInvocationMutex.RLock()
	defer fake.getCommandInvocationMutex.RUnlock()
	argsForCall := fake.getCommandInvocationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetCommandInvocationReturns(result1 *ssm.GetCommandInvocationOutput, result2 error) {
	fake.getCommandInvocationMutex.Lock()
	defer fake.getCommandInvocationMutex.Unlock()
	fake.GetCommandInvocationStub = nil
	fake.getCommandInvocationReturns = struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCommandInvocationReturnsOnCall(i int, result1 *ssm.GetCommandInvocationOutput, result2 error) {
	fake.getCommandInvocationMutex.Lock()
	defer fake.getCommandInvocationMutex.Unlock()
	fake.GetCommandInvocationStub = nil
	if fake.getCommandInvocationReturnsOnCall == nil {
		fake.getCommandInvocationReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetCommandInvocationOutput
			result2 error
		})
	}
	fake.getCommandInvocationReturnsOnCall[i] = struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCommandInvocationRequest(arg1 *ssm.GetCommandInvocationInput) (*request.Request, *ssm.GetCommandInvocationOutput) {
	fake.getCommandInvocationRequestMutex.Lock()
	ret, specificReturn := fake.getCommandInvocationRequestReturnsOnCall[len(fake.getCommandInvocationRequestArgsForCall)]
	fake.getCommandInvocationRequestArgsForCall = append(fake.getCommandInvocationRequestArgsForCall, struct {
		arg1 *ssm.GetCommandInvocationInput
	}{arg1})
	stub := fake.GetCommandInvocationRequestStub
	fakeReturns := fake.getCommandInvocationRequestReturns
	fake.recordInvocation("GetCommandInvocationRequest", []interface{}{arg1})
	fake.getCommandInvocationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetCommandInvocationRequestCallCount() int {
	fake.getCommandInvocationRequestMutex.RLock()
	defer fake.getCommandInvocationRequestMutex.RUnlock()
	return len(fake.getCommandInvocationRequestArgsForCall)
}

func (fake *FakeSSMClient) GetCommandInvocationRequestCalls(stub func(*ssm.GetCommandInvocationInput) (*request.Request, *ssm.GetCommandInvocationOutput)) {
	fake.getCommandInvocationRequestMutex.Lock()
	defer fake.getCommandInvocationRequestMutex.Unlock()
	fake.GetCommandInvocationRequestStub = stub
}

func (fake *FakeSSMClient) GetCommandInvocationRequestArgsForCall(i int) *ssm.GetCommandInvocationInput {
	fake.getCommandInvocationRequestMutex.RLock()
	defer fake.getCommandInvocationRequestMutex.RUnlock()
	argsForCall := fake.getCommandInvocationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetCommandInvocationRequestReturns(result1 *request.Request, result2 *ssm.GetCommandInvocationOutput) {
	fake.getCommandInvocationRequestMutex.Lock()
	defer fake.getCommandInvocationRequestMutex.Unlock()
	fake.GetCommandInvocationRequestStub = nil
	fake.getCommandInvocationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetCommandInvocationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCommandInvocationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetCommandInvocationOutput) {
	fake.getCommandInvocationRequestMutex.Lock()
	defer fake.getCommandInvocationRequestMutex.Unlock()
	fake.GetCommandInvocationRequestStub = nil
	if fake.getCommandInvocationRequestReturnsOnCall == nil {
		fake.getCommandInvocationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetCommandInvocationOutput
		})
	}
	fake.getCommandInvocationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetCommandInvocationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCommandInvocationWithContext(arg1 context.Context, arg2 *ssm.GetCommandInvocationInput, arg3 ...request.Option) (*ssm.GetCommandInvocationOutput, error) {
	fake.getCommandInvocationWithContextMutex.Lock()
	ret, specificReturn := fake.getCommandInvocationWithContextReturnsOnCall[len(fake.getCommandInvocationWithContextArgsForCall)]
	fake.getCommandInvocationWithContextArgsForCall = append(fake.getCommandInvocationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetCommandInvocationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetCommandInvocationWithContextStub
	fakeReturns := fake.getCommandInvocationWithContextReturns
	fake.recordInvocation("GetCommandInvocationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCommandInvocationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetCommandInvocationWithContextCallCount() int {
	fake.getCommandInvocationWithContextMutex.RLock()
	defer fake.getCommandInvocationWithContextMutex.RUnlock()
	return len(fake.getCommandInvocationWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetCommandInvocationWithContextCalls(stub func(context.Context, *ssm.GetCommandInvocationInput, ...request.Option) (*ssm.GetCommandInvocationOutput, error)) {
	fake.getCommandInvocationWithContextMutex.Lock()
	defer fake.getCommandInvocationWithContextMutex.Unlock()
	fake.GetCommandInvocationWithContextStub = stub
}

func (fake *FakeSSMClient) GetCommandInvocationWithContextArgsForCall(i int) (context.Context, *ssm.GetCommandInvocationInput, []request.Option) {
	fake.getCommandInvocationWithContextMutex.RLock()
	defer fake.getCommandInvocationWithContextMutex.RUnlock()
	argsForCall := fake.getCommandInvocationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetCommandInvocationWithContextReturns(result1 *ssm.GetCommandInvocationOutput, result2 error) {
	fake.getCommandInvocationWithContextMutex.Lock()
	defer fake.getCommandInvocationWithContextMutex.Unlock()
	fake.GetCommandInvocationWithContextStub = nil
	fake.getCommandInvocationWithContextReturns = struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetCommandInvocationWithContextReturnsOnCall(i int, result1 *ssm.GetCommandInvocationOutput, result2 error) {
	fake.getCommandInvocationWithContextMutex.Lock()
	defer fake.getCommandInvocationWithContextMutex.Unlock()
	fake.GetCommandInvocationWithContextStub = nil
	if fake.getCommandInvocationWithContextReturnsOnCall == nil {
		fake.getCommandInvocationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetCommandInvocationOutput
			result2 error
		})
	}
	fake.getCommandInvocationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetCommandInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetConnectionStatus(arg1 *ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error) {
	fake.getConnectionStatusMutex.Lock()
	ret, specificReturn := fake.getConnectionStatusReturnsOnCall[len(fake.getConnectionStatusArgsForCall)]
	fake.getConnectionStatusArgsForCall = append(fake.getConnectionStatusArgsForCall, struct {
		arg1 *ssm.GetConnectionStatusInput
	}{arg1})
	stub := fake.GetConnectionStatusStub
	fakeReturns := fake.getConnectionStatusReturns
	fake.recordInvocation("GetConnectionStatus", []interface{}{arg1})
	fake.getConnectionStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetConnectionStatusCallCount() int {
	fake.getConnectionStatusMutex.RLock()
	defer fake.getConnectionStatusMutex.RUnlock()
	return len(fake.getConnectionStatusArgsForCall)
}

func (fake *FakeSSMClient) GetConnectionStatusCalls(stub func(*ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error)) {
	fake.getConnectionStatusMutex.Lock()
	defer fake.getConnectionStatusMutex.Unlock()
	fake.GetConnectionStatusStub = stub
}

func (fake *FakeSSMClient) GetConnectionStatusArgsForCall(i int) *ssm.GetConnectionStatusInput {
	fake.getConnectionStatusMutex.RLock()
	defer fake.getConnectionStatusMutex.RUnlock()
	argsForCall := fake.getConnectionStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetConnectionStatusReturns(result1 *ssm.GetConnectionStatusOutput, result2 error) {
	fake.getConnectionStatusMutex.Lock()
	defer fake.getConnectionStatusMutex.Unlock()
	fake.GetConnectionStatusStub = nil
	fake.getConnectionStatusReturns = struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetConnectionStatusReturnsOnCall(i int, result1 *ssm.GetConnectionStatusOutput, result2 error) {
	fake.getConnectionStatusMutex.Lock()
	defer fake.getConnectionStatusMutex.Unlock()
	fake.GetConnectionStatusStub = nil
	if fake.getConnectionStatusReturnsOnCall == nil {
		fake.getConnectionStatusReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetConnectionStatusOutput
			result2 error
		})
	}
	fake.getConnectionStatusReturnsOnCall[i] = struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetConnectionStatusRequest(arg1 *ssm.GetConnectionStatusInput) (*request.Request, *ssm.GetConnectionStatusOutput) {
	fake.getConnectionStatusRequestMutex.Lock()
	ret, specificReturn := fake.getConnectionStatusRequestReturnsOnCall[len(fake.getConnectionStatusRequestArgsForCall)]
	fake.getConnectionStatusRequestArgsForCall = append(fake.getConnectionStatusRequestArgsForCall, struct {
		arg1 *ssm.GetConnectionStatusInput
	}{arg1})
	stub := fake.GetConnectionStatusRequestStub
	fakeReturns := fake.getConnectionStatusRequestReturns
	fake.recordInvocation("GetConnectionStatusRequest", []interface{}{arg1})
	fake.getConnectionStatusRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetConnectionStatusRequestCallCount() int {
	fake.getConnectionStatusRequestMutex.RLock()
	defer fake.getConnectionStatusRequestMutex.RUnlock()
	return len(fake.getConnectionStatusRequestArgsForCall)
}

func (fake *FakeSSMClient) GetConnectionStatusRequestCalls(stub func(*ssm.GetConnectionStatusInput) (*request.Request, *ssm.GetConnectionStatusOutput)) {
	fake.getConnectionStatusRequestMutex.Lock()
	defer fake.getConnectionStatusRequestMutex.Unlock()
	fake.GetConnectionStatusRequestStub = stub
}

func (fake *FakeSSMClient) GetConnectionStatusRequestArgsForCall(i int) *ssm.GetConnectionStatusInput {
	fake.getConnectionStatusRequestMutex.RLock()
	defer fake.getConnectionStatusRequestMutex.RUnlock()
	argsForCall := fake.getConnectionStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetConnectionStatusRequestReturns(result1 *request.Request, result2 *ssm.GetConnectionStatusOutput) {
	fake.getConnectionStatusRequestMutex.Lock()
	defer fake.getConnectionStatusRequestMutex.Unlock()
	fake.GetConnectionStatusRequestStub = nil
	fake.getConnectionStatusRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetConnectionStatusOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetConnectionStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetConnectionStatusOutput) {
	fake.getConnectionStatusRequestMutex.Lock()
	defer fake.getConnectionStatusRequestMutex.Unlock()
	fake.GetConnectionStatusRequestStub = nil
	if fake.getConnectionStatusRequestReturnsOnCall == nil {
		fake.getConnectionStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetConnectionStatusOutput
		})
	}
	fake.getConnectionStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetConnectionStatusOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetConnectionStatusWithContext(arg1 context.Context, arg2 *ssm.GetConnectionStatusInput, arg3 ...request.Option) (*ssm.GetConnectionStatusOutput, error) {
	fake.getConnectionStatusWithContextMutex.Lock()
	ret, specificReturn := fake.getConnectionStatusWithContextReturnsOnCall[len(fake.getConnectionStatusWithContextArgsForCall)]
	fake.getConnectionStatusWithContextArgsForCall = append(fake.getConnectionStatusWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetConnectionStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetConnectionStatusWithContextStub
	fakeReturns := fake.getConnectionStatusWithContextReturns
	fake.recordInvocation("GetConnectionStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.getConnectionStatusWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetConnectionStatusWithContextCallCount() int {
	fake.getConnectionStatusWithContextMutex.RLock()
	defer fake.getConnectionStatusWithContextMutex.RUnlock()
	return len(fake.getConnectionStatusWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetConnectionStatusWithContextCalls(stub func(context.Context, *ssm.GetConnectionStatusInput, ...request.Option) (*ssm.GetConnectionStatusOutput, error)) {
	fake.getConnectionStatusWithContextMutex.Lock()
	defer fake.getConnectionStatusWithContextMutex.Unlock()
	fake.GetConnectionStatusWithContextStub = stub
}

func (fake *FakeSSMClient) GetConnectionStatusWithContextArgsForCall(i int) (context.Context, *ssm.GetConnectionStatusInput, []request.Option) {
	fake.getConnectionStatusWithContextMutex.RLock()
	defer fake.getConnectionStatusWithContextMutex.RUnlock()
	argsForCall := fake.getConnectionStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetConnectionStatusWithContextReturns(result1 *ssm.GetConnectionStatusOutput, result2 error) {
	fake.getConnectionStatusWithContextMutex.Lock()
	defer fake.getConnectionStatusWithContextMutex.Unlock()
	fake.GetConnectionStatusWithContextStub = nil
	fake.getConnectionStatusWithContextReturns = struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetConnectionStatusWithContextReturnsOnCall(i int, result1 *ssm.GetConnectionStatusOutput, result2 error) {
	fake.getConnectionStatusWithContextMutex.Lock()
	defer fake.getConnectionStatusWithContextMutex.Unlock()
	fake.GetConnectionStatusWithContextStub = nil
	if fake.getConnectionStatusWithContextReturnsOnCall == nil {
		fake.getConnectionStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetConnectionStatusOutput
			result2 error
		})
	}
	fake.getConnectionStatusWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetConnectionStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDefaultPatchBaseline(arg1 *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error) {
	fake.getDefaultPatchBaselineMutex.Lock()
	ret, specificReturn := fake.getDefaultPatchBaselineReturnsOnCall[len(fake.getDefaultPatchBaselineArgsForCall)]
	fake.getDefaultPatchBaselineArgsForCall = append(fake.getDefaultPatchBaselineArgsForCall, struct {
		arg1 *ssm.GetDefaultPatchBaselineInput
	}{arg1})
	stub := fake.GetDefaultPatchBaselineStub
	fakeReturns := fake.getDefaultPatchBaselineReturns
	fake.recordInvocation("GetDefaultPatchBaseline", []interface{}{arg1})
	fake.getDefaultPatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineCallCount() int {
	fake.getDefaultPatchBaselineMutex.RLock()
	defer fake.getDefaultPatchBaselineMutex.RUnlock()
	return len(fake.getDefaultPatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineCalls(stub func(*ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error)) {
	fake.getDefaultPatchBaselineMutex.Lock()
	defer fake.getDefaultPatchBaselineMutex.Unlock()
	fake.GetDefaultPatchBaselineStub = stub
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineArgsForCall(i int) *ssm.GetDefaultPatchBaselineInput {
	fake.getDefaultPatchBaselineMutex.RLock()
	defer fake.getDefaultPatchBaselineMutex.RUnlock()
	argsForCall := fake.getDefaultPatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineReturns(result1 *ssm.GetDefaultPatchBaselineOutput, result2 error) {
	fake.getDefaultPatchBaselineMutex.Lock()
	defer fake.getDefaultPatchBaselineMutex.Unlock()
	fake.GetDefaultPatchBaselineStub = nil
	fake.getDefaultPatchBaselineReturns = struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineReturnsOnCall(i int, result1 *ssm.GetDefaultPatchBaselineOutput, result2 error) {
	fake.getDefaultPatchBaselineMutex.Lock()
	defer fake.getDefaultPatchBaselineMutex.Unlock()
	fake.GetDefaultPatchBaselineStub = nil
	if fake.getDefaultPatchBaselineReturnsOnCall == nil {
		fake.getDefaultPatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetDefaultPatchBaselineOutput
			result2 error
		})
	}
	fake.getDefaultPatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineRequest(arg1 *ssm.GetDefaultPatchBaselineInput) (*request.Request, *ssm.GetDefaultPatchBaselineOutput) {
	fake.getDefaultPatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.getDefaultPatchBaselineRequestReturnsOnCall[len(fake.getDefaultPatchBaselineRequestArgsForCall)]
	fake.getDefaultPatchBaselineRequestArgsForCall = append(fake.getDefaultPatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.GetDefaultPatchBaselineInput
	}{arg1})
	stub := fake.GetDefaultPatchBaselineRequestStub
	fakeReturns := fake.getDefaultPatchBaselineRequestReturns
	fake.recordInvocation("GetDefaultPatchBaselineRequest", []interface{}{arg1})
	fake.getDefaultPatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineRequestCallCount() int {
	fake.getDefaultPatchBaselineRequestMutex.RLock()
	defer fake.getDefaultPatchBaselineRequestMutex.RUnlock()
	return len(fake.getDefaultPatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineRequestCalls(stub func(*ssm.GetDefaultPatchBaselineInput) (*request.Request, *ssm.GetDefaultPatchBaselineOutput)) {
	fake.getDefaultPatchBaselineRequestMutex.Lock()
	defer fake.getDefaultPatchBaselineRequestMutex.Unlock()
	fake.GetDefaultPatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineRequestArgsForCall(i int) *ssm.GetDefaultPatchBaselineInput {
	fake.getDefaultPatchBaselineRequestMutex.RLock()
	defer fake.getDefaultPatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.getDefaultPatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.GetDefaultPatchBaselineOutput) {
	fake.getDefaultPatchBaselineRequestMutex.Lock()
	defer fake.getDefaultPatchBaselineRequestMutex.Unlock()
	fake.GetDefaultPatchBaselineRequestStub = nil
	fake.getDefaultPatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetDefaultPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetDefaultPatchBaselineOutput) {
	fake.getDefaultPatchBaselineRequestMutex.Lock()
	defer fake.getDefaultPatchBaselineRequestMutex.Unlock()
	fake.GetDefaultPatchBaselineRequestStub = nil
	if fake.getDefaultPatchBaselineRequestReturnsOnCall == nil {
		fake.getDefaultPatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetDefaultPatchBaselineOutput
		})
	}
	fake.getDefaultPatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetDefaultPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineWithContext(arg1 context.Context, arg2 *ssm.GetDefaultPatchBaselineInput, arg3 ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error) {
	fake.getDefaultPatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.getDefaultPatchBaselineWithContextReturnsOnCall[len(fake.getDefaultPatchBaselineWithContextArgsForCall)]
	fake.getDefaultPatchBaselineWithContextArgsForCall = append(fake.getDefaultPatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetDefaultPatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetDefaultPatchBaselineWithContextStub
	fakeReturns := fake.getDefaultPatchBaselineWithContextReturns
	fake.recordInvocation("GetDefaultPatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDefaultPatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineWithContextCallCount() int {
	fake.getDefaultPatchBaselineWithContextMutex.RLock()
	defer fake.getDefaultPatchBaselineWithContextMutex.RUnlock()
	return len(fake.getDefaultPatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineWithContextCalls(stub func(context.Context, *ssm.GetDefaultPatchBaselineInput, ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error)) {
	fake.getDefaultPatchBaselineWithContextMutex.Lock()
	defer fake.getDefaultPatchBaselineWithContextMutex.Unlock()
	fake.GetDefaultPatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.GetDefaultPatchBaselineInput, []request.Option) {
	fake.getDefaultPatchBaselineWithContextMutex.RLock()
	defer fake.getDefaultPatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.getDefaultPatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineWithContextReturns(result1 *ssm.GetDefaultPatchBaselineOutput, result2 error) {
	fake.getDefaultPatchBaselineWithContextMutex.Lock()
	defer fake.getDefaultPatchBaselineWithContextMutex.Unlock()
	fake.GetDefaultPatchBaselineWithContextStub = nil
	fake.getDefaultPatchBaselineWithContextReturns = struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDefaultPatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.GetDefaultPatchBaselineOutput, result2 error) {
	fake.getDefaultPatchBaselineWithContextMutex.Lock()
	defer fake.getDefaultPatchBaselineWithContextMutex.Unlock()
	fake.GetDefaultPatchBaselineWithContextStub = nil
	if fake.getDefaultPatchBaselineWithContextReturnsOnCall == nil {
		fake.getDefaultPatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetDefaultPatchBaselineOutput
			result2 error
		})
	}
	fake.getDefaultPatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstance(arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	fake.getDeployablePatchSnapshotForInstanceMutex.Lock()
	ret, specificReturn := fake.getDeployablePatchSnapshotForInstanceReturnsOnCall[len(fake.getDeployablePatchSnapshotForInstanceArgsForCall)]
	fake.getDeployablePatchSnapshotForInstanceArgsForCall = append(fake.getDeployablePatchSnapshotForInstanceArgsForCall, struct {
		arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput
	}{arg1})
	stub := fake.GetDeployablePatchSnapshotForInstanceStub
	fakeReturns := fake.getDeployablePatchSnapshotForInstanceReturns
	fake.recordInvocation("GetDeployablePatchSnapshotForInstance", []interface{}{arg1})
	fake.getDeployablePatchSnapshotForInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceCallCount() int {
	fake.getDeployablePatchSnapshotForInstanceMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceMutex.RUnlock()
	return len(fake.getDeployablePatchSnapshotForInstanceArgsForCall)
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceCalls(stub func(*ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)) {
	fake.getDeployablePatchSnapshotForInstanceMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceStub = stub
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceArgsForCall(i int) *ssm.GetDeployablePatchSnapshotForInstanceInput {
	fake.getDeployablePatchSnapshotForInstanceMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceMutex.RUnlock()
	argsForCall := fake.getDeployablePatchSnapshotForInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceReturns(result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput, result2 error) {
	fake.getDeployablePatchSnapshotForInstanceMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceStub = nil
	fake.getDeployablePatchSnapshotForInstanceReturns = struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceReturnsOnCall(i int, result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput, result2 error) {
	fake.getDeployablePatchSnapshotForInstanceMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceStub = nil
	if fake.getDeployablePatchSnapshotForInstanceReturnsOnCall == nil {
		fake.getDeployablePatchSnapshotForInstanceReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
			result2 error
		})
	}
	fake.getDeployablePatchSnapshotForInstanceReturnsOnCall[i] = struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceRequest(arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput) (*request.Request, *ssm.GetDeployablePatchSnapshotForInstanceOutput) {
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.Lock()
	ret, specificReturn := fake.getDeployablePatchSnapshotForInstanceRequestReturnsOnCall[len(fake.getDeployablePatchSnapshotForInstanceRequestArgsForCall)]
	fake.getDeployablePatchSnapshotForInstanceRequestArgsForCall = append(fake.getDeployablePatchSnapshotForInstanceRequestArgsForCall, struct {
		arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput
	}{arg1})
	stub := fake.GetDeployablePatchSnapshotForInstanceRequestStub
	fakeReturns := fake.getDeployablePatchSnapshotForInstanceRequestReturns
	fake.recordInvocation("GetDeployablePatchSnapshotForInstanceRequest", []interface{}{arg1})
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceRequestCallCount() int {
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceRequestMutex.RUnlock()
	return len(fake.getDeployablePatchSnapshotForInstanceRequestArgsForCall)
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceRequestCalls(stub func(*ssm.GetDeployablePatchSnapshotForInstanceInput) (*request.Request, *ssm.GetDeployablePatchSnapshotForInstanceOutput)) {
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceRequestMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceRequestStub = stub
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceRequestArgsForCall(i int) *ssm.GetDeployablePatchSnapshotForInstanceInput {
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceRequestMutex.RUnlock()
	argsForCall := fake.getDeployablePatchSnapshotForInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceRequestReturns(result1 *request.Request, result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput) {
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceRequestMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceRequestStub = nil
	fake.getDeployablePatchSnapshotForInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput) {
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceRequestMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceRequestStub = nil
	if fake.getDeployablePatchSnapshotForInstanceRequestReturnsOnCall == nil {
		fake.getDeployablePatchSnapshotForInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		})
	}
	fake.getDeployablePatchSnapshotForInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetDeployablePatchSnapshotForInstanceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceWithContext(arg1 context.Context, arg2 *ssm.GetDeployablePatchSnapshotForInstanceInput, arg3 ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.getDeployablePatchSnapshotForInstanceWithContextReturnsOnCall[len(fake.getDeployablePatchSnapshotForInstanceWithContextArgsForCall)]
	fake.getDeployablePatchSnapshotForInstanceWithContextArgsForCall = append(fake.getDeployablePatchSnapshotForInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetDeployablePatchSnapshotForInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetDeployablePatchSnapshotForInstanceWithContextStub
	fakeReturns := fake.getDeployablePatchSnapshotForInstanceWithContextReturns
	fake.recordInvocation("GetDeployablePatchSnapshotForInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceWithContextCallCount() int {
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceWithContextMutex.RUnlock()
	return len(fake.getDeployablePatchSnapshotForInstanceWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceWithContextCalls(stub func(context.Context, *ssm.GetDeployablePatchSnapshotForInstanceInput, ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error)) {
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceWithContextStub = stub
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceWithContextArgsForCall(i int) (context.Context, *ssm.GetDeployablePatchSnapshotForInstanceInput, []request.Option) {
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceWithContextMutex.RUnlock()
	argsForCall := fake.getDeployablePatchSnapshotForInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceWithContextReturns(result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput, result2 error) {
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceWithContextStub = nil
	fake.getDeployablePatchSnapshotForInstanceWithContextReturns = struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDeployablePatchSnapshotForInstanceWithContextReturnsOnCall(i int, result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput, result2 error) {
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Lock()
	defer fake.getDeployablePatchSnapshotForInstanceWithContextMutex.Unlock()
	fake.GetDeployablePatchSnapshotForInstanceWithContextStub = nil
	if fake.getDeployablePatchSnapshotForInstanceWithContextReturnsOnCall == nil {
		fake.getDeployablePatchSnapshotForInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
			result2 error
		})
	}
	fake.getDeployablePatchSnapshotForInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetDeployablePatchSnapshotForInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDocument(arg1 *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error) {
	fake.getDocumentMutex.Lock()
	ret, specificReturn := fake.getDocumentReturnsOnCall[len(fake.getDocumentArgsForCall)]
	fake.getDocumentArgsForCall = append(fake.getDocumentArgsForCall, struct {
		arg1 *ssm.GetDocumentInput
	}{arg1})
	stub := fake.GetDocumentStub
	fakeReturns := fake.getDocumentReturns
	fake.recordInvocation("GetDocument", []interface{}{arg1})
	fake.getDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDocumentCallCount() int {
	fake.getDocumentMutex.RLock()
	defer fake.getDocumentMutex.RUnlock()
	return len(fake.getDocumentArgsForCall)
}

func (fake *FakeSSMClient) GetDocumentCalls(stub func(*ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error)) {
	fake.getDocumentMutex.Lock()
	defer fake.getDocumentMutex.Unlock()
	fake.GetDocumentStub = stub
}

func (fake *FakeSSMClient) GetDocumentArgsForCall(i int) *ssm.GetDocumentInput {
	fake.getDocumentMutex.RLock()
	defer fake.getDocumentMutex.RUnlock()
	argsForCall := fake.getDocumentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetDocumentReturns(result1 *ssm.GetDocumentOutput, result2 error) {
	fake.getDocumentMutex.Lock()
	defer fake.getDocumentMutex.Unlock()
	fake.GetDocumentStub = nil
	fake.getDocumentReturns = struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDocumentReturnsOnCall(i int, result1 *ssm.GetDocumentOutput, result2 error) {
	fake.getDocumentMutex.Lock()
	defer fake.getDocumentMutex.Unlock()
	fake.GetDocumentStub = nil
	if fake.getDocumentReturnsOnCall == nil {
		fake.getDocumentReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetDocumentOutput
			result2 error
		})
	}
	fake.getDocumentReturnsOnCall[i] = struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDocumentRequest(arg1 *ssm.GetDocumentInput) (*request.Request, *ssm.GetDocumentOutput) {
	fake.getDocumentRequestMutex.Lock()
	ret, specificReturn := fake.getDocumentRequestReturnsOnCall[len(fake.getDocumentRequestArgsForCall)]
	fake.getDocumentRequestArgsForCall = append(fake.getDocumentRequestArgsForCall, struct {
		arg1 *ssm.GetDocumentInput
	}{arg1})
	stub := fake.GetDocumentRequestStub
	fakeReturns := fake.getDocumentRequestReturns
	fake.recordInvocation("GetDocumentRequest", []interface{}{arg1})
	fake.getDocumentRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDocumentRequestCallCount() int {
	fake.getDocumentRequestMutex.RLock()
	defer fake.getDocumentRequestMutex.RUnlock()
	return len(fake.getDocumentRequestArgsForCall)
}

func (fake *FakeSSMClient) GetDocumentRequestCalls(stub func(*ssm.GetDocumentInput) (*request.Request, *ssm.GetDocumentOutput)) {
	fake.getDocumentRequestMutex.Lock()
	defer fake.getDocumentRequestMutex.Unlock()
	fake.GetDocumentRequestStub = stub
}

func (fake *FakeSSMClient) GetDocumentRequestArgsForCall(i int) *ssm.GetDocumentInput {
	fake.getDocumentRequestMutex.RLock()
	defer fake.getDocumentRequestMutex.RUnlock()
	argsForCall := fake.getDocumentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetDocumentRequestReturns(result1 *request.Request, result2 *ssm.GetDocumentOutput) {
	fake.getDocumentRequestMutex.Lock()
	defer fake.getDocumentRequestMutex.Unlock()
	fake.GetDocumentRequestStub = nil
	fake.getDocumentRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDocumentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetDocumentOutput) {
	fake.getDocumentRequestMutex.Lock()
	defer fake.getDocumentRequestMutex.Unlock()
	fake.GetDocumentRequestStub = nil
	if fake.getDocumentRequestReturnsOnCall == nil {
		fake.getDocumentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetDocumentOutput
		})
	}
	fake.getDocumentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDocumentWithContext(arg1 context.Context, arg2 *ssm.GetDocumentInput, arg3 ...request.Option) (*ssm.GetDocumentOutput, error) {
	fake.getDocumentWithContextMutex.Lock()
	ret, specificReturn := fake.getDocumentWithContextReturnsOnCall[len(fake.getDocumentWithContextArgsForCall)]
	fake.getDocumentWithContextArgsForCall = append(fake.getDocumentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetDocumentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetDocumentWithContextStub
	fakeReturns := fake.getDocumentWithContextReturns
	fake.recordInvocation("GetDocumentWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDocumentWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetDocumentWithContextCallCount() int {
	fake.getDocumentWithContextMutex.RLock()
	defer fake.getDocumentWithContextMutex.RUnlock()
	return len(fake.getDocumentWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetDocumentWithContextCalls(stub func(context.Context, *ssm.GetDocumentInput, ...request.Option) (*ssm.GetDocumentOutput, error)) {
	fake.getDocumentWithContextMutex.Lock()
	defer fake.getDocumentWithContextMutex.Unlock()
	fake.GetDocumentWithContextStub = stub
}

func (fake *FakeSSMClient) GetDocumentWithContextArgsForCall(i int) (context.Context, *ssm.GetDocumentInput, []request.Option) {
	fake.getDocumentWithContextMutex.RLock()
	defer fake.getDocumentWithContextMutex.RUnlock()
	argsForCall := fake.getDocumentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetDocumentWithContextReturns(result1 *ssm.GetDocumentOutput, result2 error) {
	fake.getDocumentWithContextMutex.Lock()
	defer fake.getDocumentWithContextMutex.Unlock()
	fake.GetDocumentWithContextStub = nil
	fake.getDocumentWithContextReturns = struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetDocumentWithContextReturnsOnCall(i int, result1 *ssm.GetDocumentOutput, result2 error) {
	fake.getDocumentWithContextMutex.Lock()
	defer fake.getDocumentWithContextMutex.Unlock()
	fake.GetDocumentWithContextStub = nil
	if fake.getDocumentWithContextReturnsOnCall == nil {
		fake.getDocumentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetDocumentOutput
			result2 error
		})
	}
	fake.getDocumentWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventory(arg1 *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error) {
	fake.getInventoryMutex.Lock()
	ret, specificReturn := fake.getInventoryReturnsOnCall[len(fake.getInventoryArgsForCall)]
	fake.getInventoryArgsForCall = append(fake.getInventoryArgsForCall, struct {
		arg1 *ssm.GetInventoryInput
	}{arg1})
	stub := fake.GetInventoryStub
	fakeReturns := fake.getInventoryReturns
	fake.recordInvocation("GetInventory", []interface{}{arg1})
	fake.getInventoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetInventoryCallCount() int {
	fake.getInventoryMutex.RLock()
	defer fake.getInventoryMutex.RUnlock()
	return len(fake.getInventoryArgsForCall)
}

func (fake *FakeSSMClient) GetInventoryCalls(stub func(*ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error)) {
	fake.getInventoryMutex.Lock()
	defer fake.getInventoryMutex.Unlock()
	fake.GetInventoryStub = stub
}

func (fake *FakeSSMClient) GetInventoryArgsForCall(i int) *ssm.GetInventoryInput {
	fake.getInventoryMutex.RLock()
	defer fake.getInventoryMutex.RUnlock()
	argsForCall := fake.getInventoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetInventoryReturns(result1 *ssm.GetInventoryOutput, result2 error) {
	fake.getInventoryMutex.Lock()
	defer fake.getInventoryMutex.Unlock()
	fake.GetInventoryStub = nil
	fake.getInventoryReturns = struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventoryReturnsOnCall(i int, result1 *ssm.GetInventoryOutput, result2 error) {
	fake.getInventoryMutex.Lock()
	defer fake.getInventoryMutex.Unlock()
	fake.GetInventoryStub = nil
	if fake.getInventoryReturnsOnCall == nil {
		fake.getInventoryReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetInventoryOutput
			result2 error
		})
	}
	fake.getInventoryReturnsOnCall[i] = struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventoryPages(arg1 *ssm.GetInventoryInput, arg2 func(*ssm.GetInventoryOutput, bool) bool) error {
	fake.getInventoryPagesMutex.Lock()
	ret, specificReturn := fake.getInventoryPagesReturnsOnCall[len(fake.getInventoryPagesArgsForCall)]
	fake.getInventoryPagesArgsForCall = append(fake.getInventoryPagesArgsForCall, struct {
		arg1 *ssm.GetInventoryInput
		arg2 func(*ssm.GetInventoryOutput, bool) bool
	}{arg1, arg2})
	stub := fake.GetInventoryPagesStub
	fakeReturns := fake.getInventoryPagesReturns
	fake.recordInvocation("GetInventoryPages", []interface{}{arg1, arg2})
	fake.getInventoryPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetInventoryPagesCallCount() int {
	fake.getInventoryPagesMutex.RLock()
	defer fake.getInventoryPagesMutex.RUnlock()
	return len(fake.getInventoryPagesArgsForCall)
}

func (fake *FakeSSMClient) GetInventoryPagesCalls(stub func(*ssm.GetInventoryInput, func(*ssm.GetInventoryOutput, bool) bool) error) {
	fake.getInventoryPagesMutex.Lock()
	defer fake.getInventoryPagesMutex.Unlock()
	fake.GetInventoryPagesStub = stub
}

func (fake *FakeSSMClient) GetInventoryPagesArgsForCall(i int) (*ssm.GetInventoryInput, func(*ssm.GetInventoryOutput, bool) bool) {
	fake.getInventoryPagesMutex.RLock()
	defer fake.getInventoryPagesMutex.RUnlock()
	argsForCall := fake.getInventoryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) GetInventoryPagesReturns(result1 error) {
	fake.getInventoryPagesMutex.Lock()
	defer fake.getInventoryPagesMutex.Unlock()
	fake.GetInventoryPagesStub = nil
	fake.getInventoryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventoryPagesReturnsOnCall(i int, result1 error) {
	fake.getInventoryPagesMutex.Lock()
	defer fake.getInventoryPagesMutex.Unlock()
	fake.GetInventoryPagesStub = nil
	if fake.getInventoryPagesReturnsOnCall == nil {
		fake.getInventoryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getInventoryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventoryPagesWithContext(arg1 context.Context, arg2 *ssm.GetInventoryInput, arg3 func(*ssm.GetInventoryOutput, bool) bool, arg4 ...request.Option) error {
	fake.getInventoryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getInventoryPagesWithContextReturnsOnCall[len(fake.getInventoryPagesWithContextArgsForCall)]
	fake.getInventoryPagesWithContextArgsForCall = append(fake.getInventoryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetInventoryInput
		arg3 func(*ssm.GetInventoryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetInventoryPagesWithContextStub
	fakeReturns := fake.getInventoryPagesWithContextReturns
	fake.recordInvocation("GetInventoryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getInventoryPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetInventoryPagesWithContextCallCount() int {
	fake.getInventoryPagesWithContextMutex.RLock()
	defer fake.getInventoryPagesWithContextMutex.RUnlock()
	return len(fake.getInventoryPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetInventoryPagesWithContextCalls(stub func(context.Context, *ssm.GetInventoryInput, func(*ssm.GetInventoryOutput, bool) bool, ...request.Option) error) {
	fake.getInventoryPagesWithContextMutex.Lock()
	defer fake.getInventoryPagesWithContextMutex.Unlock()
	fake.GetInventoryPagesWithContextStub = stub
}

func (fake *FakeSSMClient) GetInventoryPagesWithContextArgsForCall(i int) (context.Context, *ssm.GetInventoryInput, func(*ssm.GetInventoryOutput, bool) bool, []request.Option) {
	fake.getInventoryPagesWithContextMutex.RLock()
	defer fake.getInventoryPagesWithContextMutex.RUnlock()
	argsForCall := fake.getInventoryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) GetInventoryPagesWithContextReturns(result1 error) {
	fake.getInventoryPagesWithContextMutex.Lock()
	defer fake.getInventoryPagesWithContextMutex.Unlock()
	fake.GetInventoryPagesWithContextStub = nil
	fake.getInventoryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventoryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getInventoryPagesWithContextMutex.Lock()
	defer fake.getInventoryPagesWithContextMutex.Unlock()
	fake.GetInventoryPagesWithContextStub = nil
	if fake.getInventoryPagesWithContextReturnsOnCall == nil {
		fake.getInventoryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getInventoryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventoryRequest(arg1 *ssm.GetInventoryInput) (*request.Request, *ssm.GetInventoryOutput) {
	fake.getInventoryRequestMutex.Lock()
	ret, specificReturn := fake.getInventoryRequestReturnsOnCall[len(fake.getInventoryRequestArgsForCall)]
	fake.getInventoryRequestArgsForCall = append(fake.getInventoryRequestArgsForCall, struct {
		arg1 *ssm.GetInventoryInput
	}{arg1})
	stub := fake.GetInventoryRequestStub
	fakeReturns := fake.getInventoryRequestReturns
	fake.recordInvocation("GetInventoryRequest", []interface{}{arg1})
	fake.getInventoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetInventoryRequestCallCount() int {
	fake.getInventoryRequestMutex.RLock()
	defer fake.getInventoryRequestMutex.RUnlock()
	return len(fake.getInventoryRequestArgsForCall)
}

func (fake *FakeSSMClient) GetInventoryRequestCalls(stub func(*ssm.GetInventoryInput) (*request.Request, *ssm.GetInventoryOutput)) {
	fake.getInventoryRequestMutex.Lock()
	defer fake.getInventoryRequestMutex.Unlock()
	fake.GetInventoryRequestStub = stub
}

func (fake *FakeSSMClient) GetInventoryRequestArgsForCall(i int) *ssm.GetInventoryInput {
	fake.getInventoryRequestMutex.RLock()
	defer fake.getInventoryRequestMutex.RUnlock()
	argsForCall := fake.getInventoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetInventoryRequestReturns(result1 *request.Request, result2 *ssm.GetInventoryOutput) {
	fake.getInventoryRequestMutex.Lock()
	defer fake.getInventoryRequestMutex.Unlock()
	fake.GetInventoryRequestStub = nil
	fake.getInventoryRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetInventoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetInventoryOutput) {
	fake.getInventoryRequestMutex.Lock()
	defer fake.getInventoryRequestMutex.Unlock()
	fake.GetInventoryRequestStub = nil
	if fake.getInventoryRequestReturnsOnCall == nil {
		fake.getInventoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetInventoryOutput
		})
	}
	fake.getInventoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetInventoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventorySchema(arg1 *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error) {
	fake.getInventorySchemaMutex.Lock()
	ret, specificReturn := fake.getInventorySchemaReturnsOnCall[len(fake.getInventorySchemaArgsForCall)]
	fake.getInventorySchemaArgsForCall = append(fake.getInventorySchemaArgsForCall, struct {
		arg1 *ssm.GetInventorySchemaInput
	}{arg1})
	stub := fake.GetInventorySchemaStub
	fakeReturns := fake.getInventorySchemaReturns
	fake.recordInvocation("GetInventorySchema", []interface{}{arg1})
	fake.getInventorySchemaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetInventorySchemaCallCount() int {
	fake.getInventorySchemaMutex.RLock()
	defer fake.getInventorySchemaMutex.RUnlock()
	return len(fake.getInventorySchemaArgsForCall)
}

func (fake *FakeSSMClient) GetInventorySchemaCalls(stub func(*ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error)) {
	fake.getInventorySchemaMutex.Lock()
	defer fake.getInventorySchemaMutex.Unlock()
	fake.GetInventorySchemaStub = stub
}

func (fake *FakeSSMClient) GetInventorySchemaArgsForCall(i int) *ssm.GetInventorySchemaInput {
	fake.getInventorySchemaMutex.RLock()
	defer fake.getInventorySchemaMutex.RUnlock()
	argsForCall := fake.getInventorySchemaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetInventorySchemaReturns(result1 *ssm.GetInventorySchemaOutput, result2 error) {
	fake.getInventorySchemaMutex.Lock()
	defer fake.getInventorySchemaMutex.Unlock()
	fake.GetInventorySchemaStub = nil
	fake.getInventorySchemaReturns = struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventorySchemaReturnsOnCall(i int, result1 *ssm.GetInventorySchemaOutput, result2 error) {
	fake.getInventorySchemaMutex.Lock()
	defer fake.getInventorySchemaMutex.Unlock()
	fake.GetInventorySchemaStub = nil
	if fake.getInventorySchemaReturnsOnCall == nil {
		fake.getInventorySchemaReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetInventorySchemaOutput
			result2 error
		})
	}
	fake.getInventorySchemaReturnsOnCall[i] = struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventorySchemaPages(arg1 *ssm.GetInventorySchemaInput, arg2 func(*ssm.GetInventorySchemaOutput, bool) bool) error {
	fake.getInventorySchemaPagesMutex.Lock()
	ret, specificReturn := fake.getInventorySchemaPagesReturnsOnCall[len(fake.getInventorySchemaPagesArgsForCall)]
	fake.getInventorySchemaPagesArgsForCall = append(fake.getInventorySchemaPagesArgsForCall, struct {
		arg1 *ssm.GetInventorySchemaInput
		arg2 func(*ssm.GetInventorySchemaOutput, bool) bool
	}{arg1, arg2})
	stub := fake.GetInventorySchemaPagesStub
	fakeReturns := fake.getInventorySchemaPagesReturns
	fake.recordInvocation("GetInventorySchemaPages", []interface{}{arg1, arg2})
	fake.getInventorySchemaPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetInventorySchemaPagesCallCount() int {
	fake.getInventorySchemaPagesMutex.RLock()
	defer fake.getInventorySchemaPagesMutex.RUnlock()
	return len(fake.getInventorySchemaPagesArgsForCall)
}

func (fake *FakeSSMClient) GetInventorySchemaPagesCalls(stub func(*ssm.GetInventorySchemaInput, func(*ssm.GetInventorySchemaOutput, bool) bool) error) {
	fake.getInventorySchemaPagesMutex.Lock()
	defer fake.getInventorySchemaPagesMutex.Unlock()
	fake.GetInventorySchemaPagesStub = stub
}

func (fake *FakeSSMClient) GetInventorySchemaPagesArgsForCall(i int) (*ssm.GetInventorySchemaInput, func(*ssm.GetInventorySchemaOutput, bool) bool) {
	fake.getInventorySchemaPagesMutex.RLock()
	defer fake.getInventorySchemaPagesMutex.RUnlock()
	argsForCall := fake.getInventorySchemaPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) GetInventorySchemaPagesReturns(result1 error) {
	fake.getInventorySchemaPagesMutex.Lock()
	defer fake.getInventorySchemaPagesMutex.Unlock()
	fake.GetInventorySchemaPagesStub = nil
	fake.getInventorySchemaPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventorySchemaPagesReturnsOnCall(i int, result1 error) {
	fake.getInventorySchemaPagesMutex.Lock()
	defer fake.getInventorySchemaPagesMutex.Unlock()
	fake.GetInventorySchemaPagesStub = nil
	if fake.getInventorySchemaPagesReturnsOnCall == nil {
		fake.getInventorySchemaPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getInventorySchemaPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventorySchemaPagesWithContext(arg1 context.Context, arg2 *ssm.GetInventorySchemaInput, arg3 func(*ssm.GetInventorySchemaOutput, bool) bool, arg4 ...request.Option) error {
	fake.getInventorySchemaPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getInventorySchemaPagesWithContextReturnsOnCall[len(fake.getInventorySchemaPagesWithContextArgsForCall)]
	fake.getInventorySchemaPagesWithContextArgsForCall = append(fake.getInventorySchemaPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetInventorySchemaInput
		arg3 func(*ssm.GetInventorySchemaOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetInventorySchemaPagesWithContextStub
	fakeReturns := fake.getInventorySchemaPagesWithContextReturns
	fake.recordInvocation("GetInventorySchemaPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getInventorySchemaPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetInventorySchemaPagesWithContextCallCount() int {
	fake.getInventorySchemaPagesWithContextMutex.RLock()
	defer fake.getInventorySchemaPagesWithContextMutex.RUnlock()
	return len(fake.getInventorySchemaPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetInventorySchemaPagesWithContextCalls(stub func(context.Context, *ssm.GetInventorySchemaInput, func(*ssm.GetInventorySchemaOutput, bool) bool, ...request.Option) error) {
	fake.getInventorySchemaPagesWithContextMutex.Lock()
	defer fake.getInventorySchemaPagesWithContextMutex.Unlock()
	fake.GetInventorySchemaPagesWithContextStub = stub
}

func (fake *FakeSSMClient) GetInventorySchemaPagesWithContextArgsForCall(i int) (context.Context, *ssm.GetInventorySchemaInput, func(*ssm.GetInventorySchemaOutput, bool) bool, []request.Option) {
	fake.getInventorySchemaPagesWithContextMutex.RLock()
	defer fake.getInventorySchemaPagesWithContextMutex.RUnlock()
	argsForCall := fake.getInventorySchemaPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) GetInventorySchemaPagesWithContextReturns(result1 error) {
	fake.getInventorySchemaPagesWithContextMutex.Lock()
	defer fake.getInventorySchemaPagesWithContextMutex.Unlock()
	fake.GetInventorySchemaPagesWithContextStub = nil
	fake.getInventorySchemaPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventorySchemaPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getInventorySchemaPagesWithContextMutex.Lock()
	defer fake.getInventorySchemaPagesWithContextMutex.Unlock()
	fake.GetInventorySchemaPagesWithContextStub = nil
	if fake.getInventorySchemaPagesWithContextReturnsOnCall == nil {
		fake.getInventorySchemaPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getInventorySchemaPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetInventorySchemaRequest(arg1 *ssm.GetInventorySchemaInput) (*request.Request, *ssm.GetInventorySchemaOutput) {
	fake.getInventorySchemaRequestMutex.Lock()
	ret, specificReturn := fake.getInventorySchemaRequestReturnsOnCall[len(fake.getInventorySchemaRequestArgsForCall)]
	fake.getInventorySchemaRequestArgsForCall = append(fake.getInventorySchemaRequestArgsForCall, struct {
		arg1 *ssm.GetInventorySchemaInput
	}{arg1})
	stub := fake.GetInventorySchemaRequestStub
	fakeReturns := fake.getInventorySchemaRequestReturns
	fake.recordInvocation("GetInventorySchemaRequest", []interface{}{arg1})
	fake.getInventorySchemaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetInventorySchemaRequestCallCount() int {
	fake.getInventorySchemaRequestMutex.RLock()
	defer fake.getInventorySchemaRequestMutex.RUnlock()
	return len(fake.getInventorySchemaRequestArgsForCall)
}

func (fake *FakeSSMClient) GetInventorySchemaRequestCalls(stub func(*ssm.GetInventorySchemaInput) (*request.Request, *ssm.GetInventorySchemaOutput)) {
	fake.getInventorySchemaRequestMutex.Lock()
	defer fake.getInventorySchemaRequestMutex.Unlock()
	fake.GetInventorySchemaRequestStub = stub
}

func (fake *FakeSSMClient) GetInventorySchemaRequestArgsForCall(i int) *ssm.GetInventorySchemaInput {
	fake.getInventorySchemaRequestMutex.RLock()
	defer fake.getInventorySchemaRequestMutex.RUnlock()
	argsForCall := fake.getInventorySchemaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetInventorySchemaRequestReturns(result1 *request.Request, result2 *ssm.GetInventorySchemaOutput) {
	fake.getInventorySchemaRequestMutex.Lock()
	defer fake.getInventorySchemaRequestMutex.Unlock()
	fake.GetInventorySchemaRequestStub = nil
	fake.getInventorySchemaRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetInventorySchemaOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventorySchemaRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetInventorySchemaOutput) {
	fake.getInventorySchemaRequestMutex.Lock()
	defer fake.getInventorySchemaRequestMutex.Unlock()
	fake.GetInventorySchemaRequestStub = nil
	if fake.getInventorySchemaRequestReturnsOnCall == nil {
		fake.getInventorySchemaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetInventorySchemaOutput
		})
	}
	fake.getInventorySchemaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetInventorySchemaOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventorySchemaWithContext(arg1 context.Context, arg2 *ssm.GetInventorySchemaInput, arg3 ...request.Option) (*ssm.GetInventorySchemaOutput, error) {
	fake.getInventorySchemaWithContextMutex.Lock()
	ret, specificReturn := fake.getInventorySchemaWithContextReturnsOnCall[len(fake.getInventorySchemaWithContextArgsForCall)]
	fake.getInventorySchemaWithContextArgsForCall = append(fake.getInventorySchemaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetInventorySchemaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetInventorySchemaWithContextStub
	fakeReturns := fake.getInventorySchemaWithContextReturns
	fake.recordInvocation("GetInventorySchemaWithContext", []interface{}{arg1, arg2, arg3})
	fake.getInventorySchemaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetInventorySchemaWithContextCallCount() int {
	fake.getInventorySchemaWithContextMutex.RLock()
	defer fake.getInventorySchemaWithContextMutex.RUnlock()
	return len(fake.getInventorySchemaWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetInventorySchemaWithContextCalls(stub func(context.Context, *ssm.GetInventorySchemaInput, ...request.Option) (*ssm.GetInventorySchemaOutput, error)) {
	fake.getInventorySchemaWithContextMutex.Lock()
	defer fake.getInventorySchemaWithContextMutex.Unlock()
	fake.GetInventorySchemaWithContextStub = stub
}

func (fake *FakeSSMClient) GetInventorySchemaWithContextArgsForCall(i int) (context.Context, *ssm.GetInventorySchemaInput, []request.Option) {
	fake.getInventorySchemaWithContextMutex.RLock()
	defer fake.getInventorySchemaWithContextMutex.RUnlock()
	argsForCall := fake.getInventorySchemaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetInventorySchemaWithContextReturns(result1 *ssm.GetInventorySchemaOutput, result2 error) {
	fake.getInventorySchemaWithContextMutex.Lock()
	defer fake.getInventorySchemaWithContextMutex.Unlock()
	fake.GetInventorySchemaWithContextStub = nil
	fake.getInventorySchemaWithContextReturns = struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventorySchemaWithContextReturnsOnCall(i int, result1 *ssm.GetInventorySchemaOutput, result2 error) {
	fake.getInventorySchemaWithContextMutex.Lock()
	defer fake.getInventorySchemaWithContextMutex.Unlock()
	fake.GetInventorySchemaWithContextStub = nil
	if fake.getInventorySchemaWithContextReturnsOnCall == nil {
		fake.getInventorySchemaWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetInventorySchemaOutput
			result2 error
		})
	}
	fake.getInventorySchemaWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetInventorySchemaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventoryWithContext(arg1 context.Context, arg2 *ssm.GetInventoryInput, arg3 ...request.Option) (*ssm.GetInventoryOutput, error) {
	fake.getInventoryWithContextMutex.Lock()
	ret, specificReturn := fake.getInventoryWithContextReturnsOnCall[len(fake.getInventoryWithContextArgsForCall)]
	fake.getInventoryWithContextArgsForCall = append(fake.getInventoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetInventoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetInventoryWithContextStub
	fakeReturns := fake.getInventoryWithContextReturns
	fake.recordInvocation("GetInventoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.getInventoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetInventoryWithContextCallCount() int {
	fake.getInventoryWithContextMutex.RLock()
	defer fake.getInventoryWithContextMutex.RUnlock()
	return len(fake.getInventoryWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetInventoryWithContextCalls(stub func(context.Context, *ssm.GetInventoryInput, ...request.Option) (*ssm.GetInventoryOutput, error)) {
	fake.getInventoryWithContextMutex.Lock()
	defer fake.getInventoryWithContextMutex.Unlock()
	fake.GetInventoryWithContextStub = stub
}

func (fake *FakeSSMClient) GetInventoryWithContextArgsForCall(i int) (context.Context, *ssm.GetInventoryInput, []request.Option) {
	fake.getInventoryWithContextMutex.RLock()
	defer fake.getInventoryWithContextMutex.RUnlock()
	argsForCall := fake.getInventoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetInventoryWithContextReturns(result1 *ssm.GetInventoryOutput, result2 error) {
	fake.getInventoryWithContextMutex.Lock()
	defer fake.getInventoryWithContextMutex.Unlock()
	fake.GetInventoryWithContextStub = nil
	fake.getInventoryWithContextReturns = struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetInventoryWithContextReturnsOnCall(i int, result1 *ssm.GetInventoryOutput, result2 error) {
	fake.getInventoryWithContextMutex.Lock()
	defer fake.getInventoryWithContextMutex.Unlock()
	fake.GetInventoryWithContextStub = nil
	if fake.getInventoryWithContextReturnsOnCall == nil {
		fake.getInventoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetInventoryOutput
			result2 error
		})
	}
	fake.getInventoryWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindow(arg1 *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error) {
	fake.getMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowReturnsOnCall[len(fake.getMaintenanceWindowArgsForCall)]
	fake.getMaintenanceWindowArgsForCall = append(fake.getMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowInput
	}{arg1})
	stub := fake.GetMaintenanceWindowStub
	fakeReturns := fake.getMaintenanceWindowReturns
	fake.recordInvocation("GetMaintenanceWindow", []interface{}{arg1})
	fake.getMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowCallCount() int {
	fake.getMaintenanceWindowMutex.RLock()
	defer fake.getMaintenanceWindowMutex.RUnlock()
	return len(fake.getMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowCalls(stub func(*ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error)) {
	fake.getMaintenanceWindowMutex.Lock()
	defer fake.getMaintenanceWindowMutex.Unlock()
	fake.GetMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowArgsForCall(i int) *ssm.GetMaintenanceWindowInput {
	fake.getMaintenanceWindowMutex.RLock()
	defer fake.getMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowReturns(result1 *ssm.GetMaintenanceWindowOutput, result2 error) {
	fake.getMaintenanceWindowMutex.Lock()
	defer fake.getMaintenanceWindowMutex.Unlock()
	fake.GetMaintenanceWindowStub = nil
	fake.getMaintenanceWindowReturns = struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowOutput, result2 error) {
	fake.getMaintenanceWindowMutex.Lock()
	defer fake.getMaintenanceWindowMutex.Unlock()
	fake.GetMaintenanceWindowStub = nil
	if fake.getMaintenanceWindowReturnsOnCall == nil {
		fake.getMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecution(arg1 *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	fake.getMaintenanceWindowExecutionMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionReturnsOnCall[len(fake.getMaintenanceWindowExecutionArgsForCall)]
	fake.getMaintenanceWindowExecutionArgsForCall = append(fake.getMaintenanceWindowExecutionArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowExecutionInput
	}{arg1})
	stub := fake.GetMaintenanceWindowExecutionStub
	fakeReturns := fake.getMaintenanceWindowExecutionReturns
	fake.recordInvocation("GetMaintenanceWindowExecution", []interface{}{arg1})
	fake.getMaintenanceWindowExecutionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionCallCount() int {
	fake.getMaintenanceWindowExecutionMutex.RLock()
	defer fake.getMaintenanceWindowExecutionMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionCalls(stub func(*ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error)) {
	fake.getMaintenanceWindowExecutionMutex.Lock()
	defer fake.getMaintenanceWindowExecutionMutex.Unlock()
	fake.GetMaintenanceWindowExecutionStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionArgsForCall(i int) *ssm.GetMaintenanceWindowExecutionInput {
	fake.getMaintenanceWindowExecutionMutex.RLock()
	defer fake.getMaintenanceWindowExecutionMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionReturns(result1 *ssm.GetMaintenanceWindowExecutionOutput, result2 error) {
	fake.getMaintenanceWindowExecutionMutex.Lock()
	defer fake.getMaintenanceWindowExecutionMutex.Unlock()
	fake.GetMaintenanceWindowExecutionStub = nil
	fake.getMaintenanceWindowExecutionReturns = struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowExecutionOutput, result2 error) {
	fake.getMaintenanceWindowExecutionMutex.Lock()
	defer fake.getMaintenanceWindowExecutionMutex.Unlock()
	fake.GetMaintenanceWindowExecutionStub = nil
	if fake.getMaintenanceWindowExecutionReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowExecutionOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowExecutionReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionRequest(arg1 *ssm.GetMaintenanceWindowExecutionInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionOutput) {
	fake.getMaintenanceWindowExecutionRequestMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionRequestReturnsOnCall[len(fake.getMaintenanceWindowExecutionRequestArgsForCall)]
	fake.getMaintenanceWindowExecutionRequestArgsForCall = append(fake.getMaintenanceWindowExecutionRequestArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowExecutionInput
	}{arg1})
	stub := fake.GetMaintenanceWindowExecutionRequestStub
	fakeReturns := fake.getMaintenanceWindowExecutionRequestReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionRequest", []interface{}{arg1})
	fake.getMaintenanceWindowExecutionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionRequestCallCount() int {
	fake.getMaintenanceWindowExecutionRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionRequestMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionRequestArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionRequestCalls(stub func(*ssm.GetMaintenanceWindowExecutionInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionOutput)) {
	fake.getMaintenanceWindowExecutionRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionRequestStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionRequestArgsForCall(i int) *ssm.GetMaintenanceWindowExecutionInput {
	fake.getMaintenanceWindowExecutionRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionRequestMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionRequestReturns(result1 *request.Request, result2 *ssm.GetMaintenanceWindowExecutionOutput) {
	fake.getMaintenanceWindowExecutionRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionRequestStub = nil
	fake.getMaintenanceWindowExecutionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetMaintenanceWindowExecutionOutput) {
	fake.getMaintenanceWindowExecutionRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionRequestStub = nil
	if fake.getMaintenanceWindowExecutionRequestReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetMaintenanceWindowExecutionOutput
		})
	}
	fake.getMaintenanceWindowExecutionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTask(arg1 *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	fake.getMaintenanceWindowExecutionTaskMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionTaskReturnsOnCall[len(fake.getMaintenanceWindowExecutionTaskArgsForCall)]
	fake.getMaintenanceWindowExecutionTaskArgsForCall = append(fake.getMaintenanceWindowExecutionTaskArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInput
	}{arg1})
	stub := fake.GetMaintenanceWindowExecutionTaskStub
	fakeReturns := fake.getMaintenanceWindowExecutionTaskReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionTask", []interface{}{arg1})
	fake.getMaintenanceWindowExecutionTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskCallCount() int {
	fake.getMaintenanceWindowExecutionTaskMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionTaskArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskCalls(stub func(*ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)) {
	fake.getMaintenanceWindowExecutionTaskMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskArgsForCall(i int) *ssm.GetMaintenanceWindowExecutionTaskInput {
	fake.getMaintenanceWindowExecutionTaskMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskReturns(result1 *ssm.GetMaintenanceWindowExecutionTaskOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskStub = nil
	fake.getMaintenanceWindowExecutionTaskReturns = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowExecutionTaskOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskStub = nil
	if fake.getMaintenanceWindowExecutionTaskReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionTaskReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowExecutionTaskReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocation(arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionTaskInvocationReturnsOnCall[len(fake.getMaintenanceWindowExecutionTaskInvocationArgsForCall)]
	fake.getMaintenanceWindowExecutionTaskInvocationArgsForCall = append(fake.getMaintenanceWindowExecutionTaskInvocationArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput
	}{arg1})
	stub := fake.GetMaintenanceWindowExecutionTaskInvocationStub
	fakeReturns := fake.getMaintenanceWindowExecutionTaskInvocationReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionTaskInvocation", []interface{}{arg1})
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationCallCount() int {
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionTaskInvocationArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationCalls(stub func(*ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)) {
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationArgsForCall(i int) *ssm.GetMaintenanceWindowExecutionTaskInvocationInput {
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionTaskInvocationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationReturns(result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationStub = nil
	fake.getMaintenanceWindowExecutionTaskInvocationReturns = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationStub = nil
	if fake.getMaintenanceWindowExecutionTaskInvocationReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionTaskInvocationReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowExecutionTaskInvocationReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationRequest(arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput) {
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionTaskInvocationRequestReturnsOnCall[len(fake.getMaintenanceWindowExecutionTaskInvocationRequestArgsForCall)]
	fake.getMaintenanceWindowExecutionTaskInvocationRequestArgsForCall = append(fake.getMaintenanceWindowExecutionTaskInvocationRequestArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput
	}{arg1})
	stub := fake.GetMaintenanceWindowExecutionTaskInvocationRequestStub
	fakeReturns := fake.getMaintenanceWindowExecutionTaskInvocationRequestReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionTaskInvocationRequest", []interface{}{arg1})
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationRequestCallCount() int {
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionTaskInvocationRequestArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationRequestCalls(stub func(*ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)) {
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationRequestStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationRequestArgsForCall(i int) *ssm.GetMaintenanceWindowExecutionTaskInvocationInput {
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionTaskInvocationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationRequestReturns(result1 *request.Request, result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput) {
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationRequestStub = nil
	fake.getMaintenanceWindowExecutionTaskInvocationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput) {
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationRequestStub = nil
	if fake.getMaintenanceWindowExecutionTaskInvocationRequestReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionTaskInvocationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		})
	}
	fake.getMaintenanceWindowExecutionTaskInvocationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationWithContext(arg1 context.Context, arg2 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, arg3 ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionTaskInvocationWithContextReturnsOnCall[len(fake.getMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall)]
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall = append(fake.getMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMaintenanceWindowExecutionTaskInvocationWithContextStub
	fakeReturns := fake.getMaintenanceWindowExecutionTaskInvocationWithContextReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionTaskInvocationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationWithContextCallCount() int {
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationWithContextCalls(stub func(context.Context, *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error)) {
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationWithContextStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall(i int) (context.Context, *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, []request.Option) {
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionTaskInvocationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationWithContextReturns(result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationWithContextStub = nil
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextReturns = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskInvocationWithContextReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskInvocationWithContextStub = nil
	if fake.getMaintenanceWindowExecutionTaskInvocationWithContextReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionTaskInvocationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskRequest(arg1 *ssm.GetMaintenanceWindowExecutionTaskInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskOutput) {
	fake.getMaintenanceWindowExecutionTaskRequestMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionTaskRequestReturnsOnCall[len(fake.getMaintenanceWindowExecutionTaskRequestArgsForCall)]
	fake.getMaintenanceWindowExecutionTaskRequestArgsForCall = append(fake.getMaintenanceWindowExecutionTaskRequestArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowExecutionTaskInput
	}{arg1})
	stub := fake.GetMaintenanceWindowExecutionTaskRequestStub
	fakeReturns := fake.getMaintenanceWindowExecutionTaskRequestReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionTaskRequest", []interface{}{arg1})
	fake.getMaintenanceWindowExecutionTaskRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskRequestCallCount() int {
	fake.getMaintenanceWindowExecutionTaskRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskRequestMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionTaskRequestArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskRequestCalls(stub func(*ssm.GetMaintenanceWindowExecutionTaskInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskOutput)) {
	fake.getMaintenanceWindowExecutionTaskRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskRequestStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskRequestArgsForCall(i int) *ssm.GetMaintenanceWindowExecutionTaskInput {
	fake.getMaintenanceWindowExecutionTaskRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskRequestMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskRequestReturns(result1 *request.Request, result2 *ssm.GetMaintenanceWindowExecutionTaskOutput) {
	fake.getMaintenanceWindowExecutionTaskRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskRequestStub = nil
	fake.getMaintenanceWindowExecutionTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetMaintenanceWindowExecutionTaskOutput) {
	fake.getMaintenanceWindowExecutionTaskRequestMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskRequestMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskRequestStub = nil
	if fake.getMaintenanceWindowExecutionTaskRequestReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetMaintenanceWindowExecutionTaskOutput
		})
	}
	fake.getMaintenanceWindowExecutionTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowExecutionTaskOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskWithContext(arg1 context.Context, arg2 *ssm.GetMaintenanceWindowExecutionTaskInput, arg3 ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionTaskWithContextReturnsOnCall[len(fake.getMaintenanceWindowExecutionTaskWithContextArgsForCall)]
	fake.getMaintenanceWindowExecutionTaskWithContextArgsForCall = append(fake.getMaintenanceWindowExecutionTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowExecutionTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMaintenanceWindowExecutionTaskWithContextStub
	fakeReturns := fake.getMaintenanceWindowExecutionTaskWithContextReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskWithContextCallCount() int {
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskWithContextMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionTaskWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskWithContextCalls(stub func(context.Context, *ssm.GetMaintenanceWindowExecutionTaskInput, ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error)) {
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskWithContextStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskWithContextArgsForCall(i int) (context.Context, *ssm.GetMaintenanceWindowExecutionTaskInput, []request.Option) {
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskWithContextMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskWithContextReturns(result1 *ssm.GetMaintenanceWindowExecutionTaskOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskWithContextStub = nil
	fake.getMaintenanceWindowExecutionTaskWithContextReturns = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionTaskWithContextReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowExecutionTaskOutput, result2 error) {
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionTaskWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionTaskWithContextStub = nil
	if fake.getMaintenanceWindowExecutionTaskWithContextReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowExecutionTaskWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowExecutionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionWithContext(arg1 context.Context, arg2 *ssm.GetMaintenanceWindowExecutionInput, arg3 ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	fake.getMaintenanceWindowExecutionWithContextMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowExecutionWithContextReturnsOnCall[len(fake.getMaintenanceWindowExecutionWithContextArgsForCall)]
	fake.getMaintenanceWindowExecutionWithContextArgsForCall = append(fake.getMaintenanceWindowExecutionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowExecutionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMaintenanceWindowExecutionWithContextStub
	fakeReturns := fake.getMaintenanceWindowExecutionWithContextReturns
	fake.recordInvocation("GetMaintenanceWindowExecutionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMaintenanceWindowExecutionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionWithContextCallCount() int {
	fake.getMaintenanceWindowExecutionWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionWithContextMutex.RUnlock()
	return len(fake.getMaintenanceWindowExecutionWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionWithContextCalls(stub func(context.Context, *ssm.GetMaintenanceWindowExecutionInput, ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error)) {
	fake.getMaintenanceWindowExecutionWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionWithContextStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionWithContextArgsForCall(i int) (context.Context, *ssm.GetMaintenanceWindowExecutionInput, []request.Option) {
	fake.getMaintenanceWindowExecutionWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionWithContextMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowExecutionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionWithContextReturns(result1 *ssm.GetMaintenanceWindowExecutionOutput, result2 error) {
	fake.getMaintenanceWindowExecutionWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionWithContextStub = nil
	fake.getMaintenanceWindowExecutionWithContextReturns = struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowExecutionWithContextReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowExecutionOutput, result2 error) {
	fake.getMaintenanceWindowExecutionWithContextMutex.Lock()
	defer fake.getMaintenanceWindowExecutionWithContextMutex.Unlock()
	fake.GetMaintenanceWindowExecutionWithContextStub = nil
	if fake.getMaintenanceWindowExecutionWithContextReturnsOnCall == nil {
		fake.getMaintenanceWindowExecutionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowExecutionOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowExecutionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowRequest(arg1 *ssm.GetMaintenanceWindowInput) (*request.Request, *ssm.GetMaintenanceWindowOutput) {
	fake.getMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowRequestReturnsOnCall[len(fake.getMaintenanceWindowRequestArgsForCall)]
	fake.getMaintenanceWindowRequestArgsForCall = append(fake.getMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowInput
	}{arg1})
	stub := fake.GetMaintenanceWindowRequestStub
	fakeReturns := fake.getMaintenanceWindowRequestReturns
	fake.recordInvocation("GetMaintenanceWindowRequest", []interface{}{arg1})
	fake.getMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowRequestCallCount() int {
	fake.getMaintenanceWindowRequestMutex.RLock()
	defer fake.getMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.getMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowRequestCalls(stub func(*ssm.GetMaintenanceWindowInput) (*request.Request, *ssm.GetMaintenanceWindowOutput)) {
	fake.getMaintenanceWindowRequestMutex.Lock()
	defer fake.getMaintenanceWindowRequestMutex.Unlock()
	fake.GetMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowRequestArgsForCall(i int) *ssm.GetMaintenanceWindowInput {
	fake.getMaintenanceWindowRequestMutex.RLock()
	defer fake.getMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.GetMaintenanceWindowOutput) {
	fake.getMaintenanceWindowRequestMutex.Lock()
	defer fake.getMaintenanceWindowRequestMutex.Unlock()
	fake.GetMaintenanceWindowRequestStub = nil
	fake.getMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetMaintenanceWindowOutput) {
	fake.getMaintenanceWindowRequestMutex.Lock()
	defer fake.getMaintenanceWindowRequestMutex.Unlock()
	fake.GetMaintenanceWindowRequestStub = nil
	if fake.getMaintenanceWindowRequestReturnsOnCall == nil {
		fake.getMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetMaintenanceWindowOutput
		})
	}
	fake.getMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowTask(arg1 *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	fake.getMaintenanceWindowTaskMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowTaskReturnsOnCall[len(fake.getMaintenanceWindowTaskArgsForCall)]
	fake.getMaintenanceWindowTaskArgsForCall = append(fake.getMaintenanceWindowTaskArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowTaskInput
	}{arg1})
	stub := fake.GetMaintenanceWindowTaskStub
	fakeReturns := fake.getMaintenanceWindowTaskReturns
	fake.recordInvocation("GetMaintenanceWindowTask", []interface{}{arg1})
	fake.getMaintenanceWindowTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskCallCount() int {
	fake.getMaintenanceWindowTaskMutex.RLock()
	defer fake.getMaintenanceWindowTaskMutex.RUnlock()
	return len(fake.getMaintenanceWindowTaskArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskCalls(stub func(*ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error)) {
	fake.getMaintenanceWindowTaskMutex.Lock()
	defer fake.getMaintenanceWindowTaskMutex.Unlock()
	fake.GetMaintenanceWindowTaskStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskArgsForCall(i int) *ssm.GetMaintenanceWindowTaskInput {
	fake.getMaintenanceWindowTaskMutex.RLock()
	defer fake.getMaintenanceWindowTaskMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskReturns(result1 *ssm.GetMaintenanceWindowTaskOutput, result2 error) {
	fake.getMaintenanceWindowTaskMutex.Lock()
	defer fake.getMaintenanceWindowTaskMutex.Unlock()
	fake.GetMaintenanceWindowTaskStub = nil
	fake.getMaintenanceWindowTaskReturns = struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowTaskOutput, result2 error) {
	fake.getMaintenanceWindowTaskMutex.Lock()
	defer fake.getMaintenanceWindowTaskMutex.Unlock()
	fake.GetMaintenanceWindowTaskStub = nil
	if fake.getMaintenanceWindowTaskReturnsOnCall == nil {
		fake.getMaintenanceWindowTaskReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowTaskOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowTaskReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskRequest(arg1 *ssm.GetMaintenanceWindowTaskInput) (*request.Request, *ssm.GetMaintenanceWindowTaskOutput) {
	fake.getMaintenanceWindowTaskRequestMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowTaskRequestReturnsOnCall[len(fake.getMaintenanceWindowTaskRequestArgsForCall)]
	fake.getMaintenanceWindowTaskRequestArgsForCall = append(fake.getMaintenanceWindowTaskRequestArgsForCall, struct {
		arg1 *ssm.GetMaintenanceWindowTaskInput
	}{arg1})
	stub := fake.GetMaintenanceWindowTaskRequestStub
	fakeReturns := fake.getMaintenanceWindowTaskRequestReturns
	fake.recordInvocation("GetMaintenanceWindowTaskRequest", []interface{}{arg1})
	fake.getMaintenanceWindowTaskRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskRequestCallCount() int {
	fake.getMaintenanceWindowTaskRequestMutex.RLock()
	defer fake.getMaintenanceWindowTaskRequestMutex.RUnlock()
	return len(fake.getMaintenanceWindowTaskRequestArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskRequestCalls(stub func(*ssm.GetMaintenanceWindowTaskInput) (*request.Request, *ssm.GetMaintenanceWindowTaskOutput)) {
	fake.getMaintenanceWindowTaskRequestMutex.Lock()
	defer fake.getMaintenanceWindowTaskRequestMutex.Unlock()
	fake.GetMaintenanceWindowTaskRequestStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskRequestArgsForCall(i int) *ssm.GetMaintenanceWindowTaskInput {
	fake.getMaintenanceWindowTaskRequestMutex.RLock()
	defer fake.getMaintenanceWindowTaskRequestMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskRequestReturns(result1 *request.Request, result2 *ssm.GetMaintenanceWindowTaskOutput) {
	fake.getMaintenanceWindowTaskRequestMutex.Lock()
	defer fake.getMaintenanceWindowTaskRequestMutex.Unlock()
	fake.GetMaintenanceWindowTaskRequestStub = nil
	fake.getMaintenanceWindowTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowTaskOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetMaintenanceWindowTaskOutput) {
	fake.getMaintenanceWindowTaskRequestMutex.Lock()
	defer fake.getMaintenanceWindowTaskRequestMutex.Unlock()
	fake.GetMaintenanceWindowTaskRequestStub = nil
	if fake.getMaintenanceWindowTaskRequestReturnsOnCall == nil {
		fake.getMaintenanceWindowTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetMaintenanceWindowTaskOutput
		})
	}
	fake.getMaintenanceWindowTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetMaintenanceWindowTaskOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskWithContext(arg1 context.Context, arg2 *ssm.GetMaintenanceWindowTaskInput, arg3 ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	fake.getMaintenanceWindowTaskWithContextMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowTaskWithContextReturnsOnCall[len(fake.getMaintenanceWindowTaskWithContextArgsForCall)]
	fake.getMaintenanceWindowTaskWithContextArgsForCall = append(fake.getMaintenanceWindowTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMaintenanceWindowTaskWithContextStub
	fakeReturns := fake.getMaintenanceWindowTaskWithContextReturns
	fake.recordInvocation("GetMaintenanceWindowTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMaintenanceWindowTaskWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskWithContextCallCount() int {
	fake.getMaintenanceWindowTaskWithContextMutex.RLock()
	defer fake.getMaintenanceWindowTaskWithContextMutex.RUnlock()
	return len(fake.getMaintenanceWindowTaskWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskWithContextCalls(stub func(context.Context, *ssm.GetMaintenanceWindowTaskInput, ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error)) {
	fake.getMaintenanceWindowTaskWithContextMutex.Lock()
	defer fake.getMaintenanceWindowTaskWithContextMutex.Unlock()
	fake.GetMaintenanceWindowTaskWithContextStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskWithContextArgsForCall(i int) (context.Context, *ssm.GetMaintenanceWindowTaskInput, []request.Option) {
	fake.getMaintenanceWindowTaskWithContextMutex.RLock()
	defer fake.getMaintenanceWindowTaskWithContextMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskWithContextReturns(result1 *ssm.GetMaintenanceWindowTaskOutput, result2 error) {
	fake.getMaintenanceWindowTaskWithContextMutex.Lock()
	defer fake.getMaintenanceWindowTaskWithContextMutex.Unlock()
	fake.GetMaintenanceWindowTaskWithContextStub = nil
	fake.getMaintenanceWindowTaskWithContextReturns = struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowTaskWithContextReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowTaskOutput, result2 error) {
	fake.getMaintenanceWindowTaskWithContextMutex.Lock()
	defer fake.getMaintenanceWindowTaskWithContextMutex.Unlock()
	fake.GetMaintenanceWindowTaskWithContextStub = nil
	if fake.getMaintenanceWindowTaskWithContextReturnsOnCall == nil {
		fake.getMaintenanceWindowTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowTaskOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowTaskWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.GetMaintenanceWindowInput, arg3 ...request.Option) (*ssm.GetMaintenanceWindowOutput, error) {
	fake.getMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.getMaintenanceWindowWithContextReturnsOnCall[len(fake.getMaintenanceWindowWithContextArgsForCall)]
	fake.getMaintenanceWindowWithContextArgsForCall = append(fake.getMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMaintenanceWindowWithContextStub
	fakeReturns := fake.getMaintenanceWindowWithContextReturns
	fake.recordInvocation("GetMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetMaintenanceWindowWithContextCallCount() int {
	fake.getMaintenanceWindowWithContextMutex.RLock()
	defer fake.getMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.getMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.GetMaintenanceWindowInput, ...request.Option) (*ssm.GetMaintenanceWindowOutput, error)) {
	fake.getMaintenanceWindowWithContextMutex.Lock()
	defer fake.getMaintenanceWindowWithContextMutex.Unlock()
	fake.GetMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) GetMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.GetMaintenanceWindowInput, []request.Option) {
	fake.getMaintenanceWindowWithContextMutex.RLock()
	defer fake.getMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.getMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetMaintenanceWindowWithContextReturns(result1 *ssm.GetMaintenanceWindowOutput, result2 error) {
	fake.getMaintenanceWindowWithContextMutex.Lock()
	defer fake.getMaintenanceWindowWithContextMutex.Unlock()
	fake.GetMaintenanceWindowWithContextStub = nil
	fake.getMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.GetMaintenanceWindowOutput, result2 error) {
	fake.getMaintenanceWindowWithContextMutex.Lock()
	defer fake.getMaintenanceWindowWithContextMutex.Unlock()
	fake.GetMaintenanceWindowWithContextStub = nil
	if fake.getMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.getMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetMaintenanceWindowOutput
			result2 error
		})
	}
	fake.getMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsItem(arg1 *ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error) {
	fake.getOpsItemMutex.Lock()
	ret, specificReturn := fake.getOpsItemReturnsOnCall[len(fake.getOpsItemArgsForCall)]
	fake.getOpsItemArgsForCall = append(fake.getOpsItemArgsForCall, struct {
		arg1 *ssm.GetOpsItemInput
	}{arg1})
	stub := fake.GetOpsItemStub
	fakeReturns := fake.getOpsItemReturns
	fake.recordInvocation("GetOpsItem", []interface{}{arg1})
	fake.getOpsItemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsItemCallCount() int {
	fake.getOpsItemMutex.RLock()
	defer fake.getOpsItemMutex.RUnlock()
	return len(fake.getOpsItemArgsForCall)
}

func (fake *FakeSSMClient) GetOpsItemCalls(stub func(*ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error)) {
	fake.getOpsItemMutex.Lock()
	defer fake.getOpsItemMutex.Unlock()
	fake.GetOpsItemStub = stub
}

func (fake *FakeSSMClient) GetOpsItemArgsForCall(i int) *ssm.GetOpsItemInput {
	fake.getOpsItemMutex.RLock()
	defer fake.getOpsItemMutex.RUnlock()
	argsForCall := fake.getOpsItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetOpsItemReturns(result1 *ssm.GetOpsItemOutput, result2 error) {
	fake.getOpsItemMutex.Lock()
	defer fake.getOpsItemMutex.Unlock()
	fake.GetOpsItemStub = nil
	fake.getOpsItemReturns = struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsItemReturnsOnCall(i int, result1 *ssm.GetOpsItemOutput, result2 error) {
	fake.getOpsItemMutex.Lock()
	defer fake.getOpsItemMutex.Unlock()
	fake.GetOpsItemStub = nil
	if fake.getOpsItemReturnsOnCall == nil {
		fake.getOpsItemReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetOpsItemOutput
			result2 error
		})
	}
	fake.getOpsItemReturnsOnCall[i] = struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsItemRequest(arg1 *ssm.GetOpsItemInput) (*request.Request, *ssm.GetOpsItemOutput) {
	fake.getOpsItemRequestMutex.Lock()
	ret, specificReturn := fake.getOpsItemRequestReturnsOnCall[len(fake.getOpsItemRequestArgsForCall)]
	fake.getOpsItemRequestArgsForCall = append(fake.getOpsItemRequestArgsForCall, struct {
		arg1 *ssm.GetOpsItemInput
	}{arg1})
	stub := fake.GetOpsItemRequestStub
	fakeReturns := fake.getOpsItemRequestReturns
	fake.recordInvocation("GetOpsItemRequest", []interface{}{arg1})
	fake.getOpsItemRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsItemRequestCallCount() int {
	fake.getOpsItemRequestMutex.RLock()
	defer fake.getOpsItemRequestMutex.RUnlock()
	return len(fake.getOpsItemRequestArgsForCall)
}

func (fake *FakeSSMClient) GetOpsItemRequestCalls(stub func(*ssm.GetOpsItemInput) (*request.Request, *ssm.GetOpsItemOutput)) {
	fake.getOpsItemRequestMutex.Lock()
	defer fake.getOpsItemRequestMutex.Unlock()
	fake.GetOpsItemRequestStub = stub
}

func (fake *FakeSSMClient) GetOpsItemRequestArgsForCall(i int) *ssm.GetOpsItemInput {
	fake.getOpsItemRequestMutex.RLock()
	defer fake.getOpsItemRequestMutex.RUnlock()
	argsForCall := fake.getOpsItemRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetOpsItemRequestReturns(result1 *request.Request, result2 *ssm.GetOpsItemOutput) {
	fake.getOpsItemRequestMutex.Lock()
	defer fake.getOpsItemRequestMutex.Unlock()
	fake.GetOpsItemRequestStub = nil
	fake.getOpsItemRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetOpsItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsItemRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetOpsItemOutput) {
	fake.getOpsItemRequestMutex.Lock()
	defer fake.getOpsItemRequestMutex.Unlock()
	fake.GetOpsItemRequestStub = nil
	if fake.getOpsItemRequestReturnsOnCall == nil {
		fake.getOpsItemRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetOpsItemOutput
		})
	}
	fake.getOpsItemRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetOpsItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsItemWithContext(arg1 context.Context, arg2 *ssm.GetOpsItemInput, arg3 ...request.Option) (*ssm.GetOpsItemOutput, error) {
	fake.getOpsItemWithContextMutex.Lock()
	ret, specificReturn := fake.getOpsItemWithContextReturnsOnCall[len(fake.getOpsItemWithContextArgsForCall)]
	fake.getOpsItemWithContextArgsForCall = append(fake.getOpsItemWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetOpsItemInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetOpsItemWithContextStub
	fakeReturns := fake.getOpsItemWithContextReturns
	fake.recordInvocation("GetOpsItemWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOpsItemWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsItemWithContextCallCount() int {
	fake.getOpsItemWithContextMutex.RLock()
	defer fake.getOpsItemWithContextMutex.RUnlock()
	return len(fake.getOpsItemWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetOpsItemWithContextCalls(stub func(context.Context, *ssm.GetOpsItemInput, ...request.Option) (*ssm.GetOpsItemOutput, error)) {
	fake.getOpsItemWithContextMutex.Lock()
	defer fake.getOpsItemWithContextMutex.Unlock()
	fake.GetOpsItemWithContextStub = stub
}

func (fake *FakeSSMClient) GetOpsItemWithContextArgsForCall(i int) (context.Context, *ssm.GetOpsItemInput, []request.Option) {
	fake.getOpsItemWithContextMutex.RLock()
	defer fake.getOpsItemWithContextMutex.RUnlock()
	argsForCall := fake.getOpsItemWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetOpsItemWithContextReturns(result1 *ssm.GetOpsItemOutput, result2 error) {
	fake.getOpsItemWithContextMutex.Lock()
	defer fake.getOpsItemWithContextMutex.Unlock()
	fake.GetOpsItemWithContextStub = nil
	fake.getOpsItemWithContextReturns = struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsItemWithContextReturnsOnCall(i int, result1 *ssm.GetOpsItemOutput, result2 error) {
	fake.getOpsItemWithContextMutex.Lock()
	defer fake.getOpsItemWithContextMutex.Unlock()
	fake.GetOpsItemWithContextStub = nil
	if fake.getOpsItemWithContextReturnsOnCall == nil {
		fake.getOpsItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetOpsItemOutput
			result2 error
		})
	}
	fake.getOpsItemWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsMetadata(arg1 *ssm.GetOpsMetadataInput) (*ssm.GetOpsMetadataOutput, error) {
	fake.getOpsMetadataMutex.Lock()
	ret, specificReturn := fake.getOpsMetadataReturnsOnCall[len(fake.getOpsMetadataArgsForCall)]
	fake.getOpsMetadataArgsForCall = append(fake.getOpsMetadataArgsForCall, struct {
		arg1 *ssm.GetOpsMetadataInput
	}{arg1})
	stub := fake.GetOpsMetadataStub
	fakeReturns := fake.getOpsMetadataReturns
	fake.recordInvocation("GetOpsMetadata", []interface{}{arg1})
	fake.getOpsMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsMetadataCallCount() int {
	fake.getOpsMetadataMutex.RLock()
	defer fake.getOpsMetadataMutex.RUnlock()
	return len(fake.getOpsMetadataArgsForCall)
}

func (fake *FakeSSMClient) GetOpsMetadataCalls(stub func(*ssm.GetOpsMetadataInput) (*ssm.GetOpsMetadataOutput, error)) {
	fake.getOpsMetadataMutex.Lock()
	defer fake.getOpsMetadataMutex.Unlock()
	fake.GetOpsMetadataStub = stub
}

func (fake *FakeSSMClient) GetOpsMetadataArgsForCall(i int) *ssm.GetOpsMetadataInput {
	fake.getOpsMetadataMutex.RLock()
	defer fake.getOpsMetadataMutex.RUnlock()
	argsForCall := fake.getOpsMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetOpsMetadataReturns(result1 *ssm.GetOpsMetadataOutput, result2 error) {
	fake.getOpsMetadataMutex.Lock()
	defer fake.getOpsMetadataMutex.Unlock()
	fake.GetOpsMetadataStub = nil
	fake.getOpsMetadataReturns = struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsMetadataReturnsOnCall(i int, result1 *ssm.GetOpsMetadataOutput, result2 error) {
	fake.getOpsMetadataMutex.Lock()
	defer fake.getOpsMetadataMutex.Unlock()
	fake.GetOpsMetadataStub = nil
	if fake.getOpsMetadataReturnsOnCall == nil {
		fake.getOpsMetadataReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetOpsMetadataOutput
			result2 error
		})
	}
	fake.getOpsMetadataReturnsOnCall[i] = struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsMetadataRequest(arg1 *ssm.GetOpsMetadataInput) (*request.Request, *ssm.GetOpsMetadataOutput) {
	fake.getOpsMetadataRequestMutex.Lock()
	ret, specificReturn := fake.getOpsMetadataRequestReturnsOnCall[len(fake.getOpsMetadataRequestArgsForCall)]
	fake.getOpsMetadataRequestArgsForCall = append(fake.getOpsMetadataRequestArgsForCall, struct {
		arg1 *ssm.GetOpsMetadataInput
	}{arg1})
	stub := fake.GetOpsMetadataRequestStub
	fakeReturns := fake.getOpsMetadataRequestReturns
	fake.recordInvocation("GetOpsMetadataRequest", []interface{}{arg1})
	fake.getOpsMetadataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsMetadataRequestCallCount() int {
	fake.getOpsMetadataRequestMutex.RLock()
	defer fake.getOpsMetadataRequestMutex.RUnlock()
	return len(fake.getOpsMetadataRequestArgsForCall)
}

func (fake *FakeSSMClient) GetOpsMetadataRequestCalls(stub func(*ssm.GetOpsMetadataInput) (*request.Request, *ssm.GetOpsMetadataOutput)) {
	fake.getOpsMetadataRequestMutex.Lock()
	defer fake.getOpsMetadataRequestMutex.Unlock()
	fake.GetOpsMetadataRequestStub = stub
}

func (fake *FakeSSMClient) GetOpsMetadataRequestArgsForCall(i int) *ssm.GetOpsMetadataInput {
	fake.getOpsMetadataRequestMutex.RLock()
	defer fake.getOpsMetadataRequestMutex.RUnlock()
	argsForCall := fake.getOpsMetadataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetOpsMetadataRequestReturns(result1 *request.Request, result2 *ssm.GetOpsMetadataOutput) {
	fake.getOpsMetadataRequestMutex.Lock()
	defer fake.getOpsMetadataRequestMutex.Unlock()
	fake.GetOpsMetadataRequestStub = nil
	fake.getOpsMetadataRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsMetadataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetOpsMetadataOutput) {
	fake.getOpsMetadataRequestMutex.Lock()
	defer fake.getOpsMetadataRequestMutex.Unlock()
	fake.GetOpsMetadataRequestStub = nil
	if fake.getOpsMetadataRequestReturnsOnCall == nil {
		fake.getOpsMetadataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetOpsMetadataOutput
		})
	}
	fake.getOpsMetadataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsMetadataWithContext(arg1 context.Context, arg2 *ssm.GetOpsMetadataInput, arg3 ...request.Option) (*ssm.GetOpsMetadataOutput, error) {
	fake.getOpsMetadataWithContextMutex.Lock()
	ret, specificReturn := fake.getOpsMetadataWithContextReturnsOnCall[len(fake.getOpsMetadataWithContextArgsForCall)]
	fake.getOpsMetadataWithContextArgsForCall = append(fake.getOpsMetadataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetOpsMetadataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetOpsMetadataWithContextStub
	fakeReturns := fake.getOpsMetadataWithContextReturns
	fake.recordInvocation("GetOpsMetadataWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOpsMetadataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsMetadataWithContextCallCount() int {
	fake.getOpsMetadataWithContextMutex.RLock()
	defer fake.getOpsMetadataWithContextMutex.RUnlock()
	return len(fake.getOpsMetadataWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetOpsMetadataWithContextCalls(stub func(context.Context, *ssm.GetOpsMetadataInput, ...request.Option) (*ssm.GetOpsMetadataOutput, error)) {
	fake.getOpsMetadataWithContextMutex.Lock()
	defer fake.getOpsMetadataWithContextMutex.Unlock()
	fake.GetOpsMetadataWithContextStub = stub
}

func (fake *FakeSSMClient) GetOpsMetadataWithContextArgsForCall(i int) (context.Context, *ssm.GetOpsMetadataInput, []request.Option) {
	fake.getOpsMetadataWithContextMutex.RLock()
	defer fake.getOpsMetadataWithContextMutex.RUnlock()
	argsForCall := fake.getOpsMetadataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetOpsMetadataWithContextReturns(result1 *ssm.GetOpsMetadataOutput, result2 error) {
	fake.getOpsMetadataWithContextMutex.Lock()
	defer fake.getOpsMetadataWithContextMutex.Unlock()
	fake.GetOpsMetadataWithContextStub = nil
	fake.getOpsMetadataWithContextReturns = struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsMetadataWithContextReturnsOnCall(i int, result1 *ssm.GetOpsMetadataOutput, result2 error) {
	fake.getOpsMetadataWithContextMutex.Lock()
	defer fake.getOpsMetadataWithContextMutex.Unlock()
	fake.GetOpsMetadataWithContextStub = nil
	if fake.getOpsMetadataWithContextReturnsOnCall == nil {
		fake.getOpsMetadataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetOpsMetadataOutput
			result2 error
		})
	}
	fake.getOpsMetadataWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsSummary(arg1 *ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error) {
	fake.getOpsSummaryMutex.Lock()
	ret, specificReturn := fake.getOpsSummaryReturnsOnCall[len(fake.getOpsSummaryArgsForCall)]
	fake.getOpsSummaryArgsForCall = append(fake.getOpsSummaryArgsForCall, struct {
		arg1 *ssm.GetOpsSummaryInput
	}{arg1})
	stub := fake.GetOpsSummaryStub
	fakeReturns := fake.getOpsSummaryReturns
	fake.recordInvocation("GetOpsSummary", []interface{}{arg1})
	fake.getOpsSummaryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsSummaryCallCount() int {
	fake.getOpsSummaryMutex.RLock()
	defer fake.getOpsSummaryMutex.RUnlock()
	return len(fake.getOpsSummaryArgsForCall)
}

func (fake *FakeSSMClient) GetOpsSummaryCalls(stub func(*ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error)) {
	fake.getOpsSummaryMutex.Lock()
	defer fake.getOpsSummaryMutex.Unlock()
	fake.GetOpsSummaryStub = stub
}

func (fake *FakeSSMClient) GetOpsSummaryArgsForCall(i int) *ssm.GetOpsSummaryInput {
	fake.getOpsSummaryMutex.RLock()
	defer fake.getOpsSummaryMutex.RUnlock()
	argsForCall := fake.getOpsSummaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetOpsSummaryReturns(result1 *ssm.GetOpsSummaryOutput, result2 error) {
	fake.getOpsSummaryMutex.Lock()
	defer fake.getOpsSummaryMutex.Unlock()
	fake.GetOpsSummaryStub = nil
	fake.getOpsSummaryReturns = struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsSummaryReturnsOnCall(i int, result1 *ssm.GetOpsSummaryOutput, result2 error) {
	fake.getOpsSummaryMutex.Lock()
	defer fake.getOpsSummaryMutex.Unlock()
	fake.GetOpsSummaryStub = nil
	if fake.getOpsSummaryReturnsOnCall == nil {
		fake.getOpsSummaryReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetOpsSummaryOutput
			result2 error
		})
	}
	fake.getOpsSummaryReturnsOnCall[i] = struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsSummaryPages(arg1 *ssm.GetOpsSummaryInput, arg2 func(*ssm.GetOpsSummaryOutput, bool) bool) error {
	fake.getOpsSummaryPagesMutex.Lock()
	ret, specificReturn := fake.getOpsSummaryPagesReturnsOnCall[len(fake.getOpsSummaryPagesArgsForCall)]
	fake.getOpsSummaryPagesArgsForCall = append(fake.getOpsSummaryPagesArgsForCall, struct {
		arg1 *ssm.GetOpsSummaryInput
		arg2 func(*ssm.GetOpsSummaryOutput, bool) bool
	}{arg1, arg2})
	stub := fake.GetOpsSummaryPagesStub
	fakeReturns := fake.getOpsSummaryPagesReturns
	fake.recordInvocation("GetOpsSummaryPages", []interface{}{arg1, arg2})
	fake.getOpsSummaryPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetOpsSummaryPagesCallCount() int {
	fake.getOpsSummaryPagesMutex.RLock()
	defer fake.getOpsSummaryPagesMutex.RUnlock()
	return len(fake.getOpsSummaryPagesArgsForCall)
}

func (fake *FakeSSMClient) GetOpsSummaryPagesCalls(stub func(*ssm.GetOpsSummaryInput, func(*ssm.GetOpsSummaryOutput, bool) bool) error) {
	fake.getOpsSummaryPagesMutex.Lock()
	defer fake.getOpsSummaryPagesMutex.Unlock()
	fake.GetOpsSummaryPagesStub = stub
}

func (fake *FakeSSMClient) GetOpsSummaryPagesArgsForCall(i int) (*ssm.GetOpsSummaryInput, func(*ssm.GetOpsSummaryOutput, bool) bool) {
	fake.getOpsSummaryPagesMutex.RLock()
	defer fake.getOpsSummaryPagesMutex.RUnlock()
	argsForCall := fake.getOpsSummaryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) GetOpsSummaryPagesReturns(result1 error) {
	fake.getOpsSummaryPagesMutex.Lock()
	defer fake.getOpsSummaryPagesMutex.Unlock()
	fake.GetOpsSummaryPagesStub = nil
	fake.getOpsSummaryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetOpsSummaryPagesReturnsOnCall(i int, result1 error) {
	fake.getOpsSummaryPagesMutex.Lock()
	defer fake.getOpsSummaryPagesMutex.Unlock()
	fake.GetOpsSummaryPagesStub = nil
	if fake.getOpsSummaryPagesReturnsOnCall == nil {
		fake.getOpsSummaryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getOpsSummaryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetOpsSummaryPagesWithContext(arg1 context.Context, arg2 *ssm.GetOpsSummaryInput, arg3 func(*ssm.GetOpsSummaryOutput, bool) bool, arg4 ...request.Option) error {
	fake.getOpsSummaryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getOpsSummaryPagesWithContextReturnsOnCall[len(fake.getOpsSummaryPagesWithContextArgsForCall)]
	fake.getOpsSummaryPagesWithContextArgsForCall = append(fake.getOpsSummaryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetOpsSummaryInput
		arg3 func(*ssm.GetOpsSummaryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetOpsSummaryPagesWithContextStub
	fakeReturns := fake.getOpsSummaryPagesWithContextReturns
	fake.recordInvocation("GetOpsSummaryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getOpsSummaryPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetOpsSummaryPagesWithContextCallCount() int {
	fake.getOpsSummaryPagesWithContextMutex.RLock()
	defer fake.getOpsSummaryPagesWithContextMutex.RUnlock()
	return len(fake.getOpsSummaryPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetOpsSummaryPagesWithContextCalls(stub func(context.Context, *ssm.GetOpsSummaryInput, func(*ssm.GetOpsSummaryOutput, bool) bool, ...request.Option) error) {
	fake.getOpsSummaryPagesWithContextMutex.Lock()
	defer fake.getOpsSummaryPagesWithContextMutex.Unlock()
	fake.GetOpsSummaryPagesWithContextStub = stub
}

func (fake *FakeSSMClient) GetOpsSummaryPagesWithContextArgsForCall(i int) (context.Context, *ssm.GetOpsSummaryInput, func(*ssm.GetOpsSummaryOutput, bool) bool, []request.Option) {
	fake.getOpsSummaryPagesWithContextMutex.RLock()
	defer fake.getOpsSummaryPagesWithContextMutex.RUnlock()
	argsForCall := fake.getOpsSummaryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) GetOpsSummaryPagesWithContextReturns(result1 error) {
	fake.getOpsSummaryPagesWithContextMutex.Lock()
	defer fake.getOpsSummaryPagesWithContextMutex.Unlock()
	fake.GetOpsSummaryPagesWithContextStub = nil
	fake.getOpsSummaryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetOpsSummaryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getOpsSummaryPagesWithContextMutex.Lock()
	defer fake.getOpsSummaryPagesWithContextMutex.Unlock()
	fake.GetOpsSummaryPagesWithContextStub = nil
	if fake.getOpsSummaryPagesWithContextReturnsOnCall == nil {
		fake.getOpsSummaryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getOpsSummaryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetOpsSummaryRequest(arg1 *ssm.GetOpsSummaryInput) (*request.Request, *ssm.GetOpsSummaryOutput) {
	fake.getOpsSummaryRequestMutex.Lock()
	ret, specificReturn := fake.getOpsSummaryRequestReturnsOnCall[len(fake.getOpsSummaryRequestArgsForCall)]
	fake.getOpsSummaryRequestArgsForCall = append(fake.getOpsSummaryRequestArgsForCall, struct {
		arg1 *ssm.GetOpsSummaryInput
	}{arg1})
	stub := fake.GetOpsSummaryRequestStub
	fakeReturns := fake.getOpsSummaryRequestReturns
	fake.recordInvocation("GetOpsSummaryRequest", []interface{}{arg1})
	fake.getOpsSummaryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsSummaryRequestCallCount() int {
	fake.getOpsSummaryRequestMutex.RLock()
	defer fake.getOpsSummaryRequestMutex.RUnlock()
	return len(fake.getOpsSummaryRequestArgsForCall)
}

func (fake *FakeSSMClient) GetOpsSummaryRequestCalls(stub func(*ssm.GetOpsSummaryInput) (*request.Request, *ssm.GetOpsSummaryOutput)) {
	fake.getOpsSummaryRequestMutex.Lock()
	defer fake.getOpsSummaryRequestMutex.Unlock()
	fake.GetOpsSummaryRequestStub = stub
}

func (fake *FakeSSMClient) GetOpsSummaryRequestArgsForCall(i int) *ssm.GetOpsSummaryInput {
	fake.getOpsSummaryRequestMutex.RLock()
	defer fake.getOpsSummaryRequestMutex.RUnlock()
	argsForCall := fake.getOpsSummaryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetOpsSummaryRequestReturns(result1 *request.Request, result2 *ssm.GetOpsSummaryOutput) {
	fake.getOpsSummaryRequestMutex.Lock()
	defer fake.getOpsSummaryRequestMutex.Unlock()
	fake.GetOpsSummaryRequestStub = nil
	fake.getOpsSummaryRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetOpsSummaryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsSummaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetOpsSummaryOutput) {
	fake.getOpsSummaryRequestMutex.Lock()
	defer fake.getOpsSummaryRequestMutex.Unlock()
	fake.GetOpsSummaryRequestStub = nil
	if fake.getOpsSummaryRequestReturnsOnCall == nil {
		fake.getOpsSummaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetOpsSummaryOutput
		})
	}
	fake.getOpsSummaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetOpsSummaryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsSummaryWithContext(arg1 context.Context, arg2 *ssm.GetOpsSummaryInput, arg3 ...request.Option) (*ssm.GetOpsSummaryOutput, error) {
	fake.getOpsSummaryWithContextMutex.Lock()
	ret, specificReturn := fake.getOpsSummaryWithContextReturnsOnCall[len(fake.getOpsSummaryWithContextArgsForCall)]
	fake.getOpsSummaryWithContextArgsForCall = append(fake.getOpsSummaryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetOpsSummaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetOpsSummaryWithContextStub
	fakeReturns := fake.getOpsSummaryWithContextReturns
	fake.recordInvocation("GetOpsSummaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOpsSummaryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetOpsSummaryWithContextCallCount() int {
	fake.getOpsSummaryWithContextMutex.RLock()
	defer fake.getOpsSummaryWithContextMutex.RUnlock()
	return len(fake.getOpsSummaryWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetOpsSummaryWithContextCalls(stub func(context.Context, *ssm.GetOpsSummaryInput, ...request.Option) (*ssm.GetOpsSummaryOutput, error)) {
	fake.getOpsSummaryWithContextMutex.Lock()
	defer fake.getOpsSummaryWithContextMutex.Unlock()
	fake.GetOpsSummaryWithContextStub = stub
}

func (fake *FakeSSMClient) GetOpsSummaryWithContextArgsForCall(i int) (context.Context, *ssm.GetOpsSummaryInput, []request.Option) {
	fake.getOpsSummaryWithContextMutex.RLock()
	defer fake.getOpsSummaryWithContextMutex.RUnlock()
	argsForCall := fake.getOpsSummaryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetOpsSummaryWithContextReturns(result1 *ssm.GetOpsSummaryOutput, result2 error) {
	fake.getOpsSummaryWithContextMutex.Lock()
	defer fake.getOpsSummaryWithContextMutex.Unlock()
	fake.GetOpsSummaryWithContextStub = nil
	fake.getOpsSummaryWithContextReturns = struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetOpsSummaryWithContextReturnsOnCall(i int, result1 *ssm.GetOpsSummaryOutput, result2 error) {
	fake.getOpsSummaryWithContextMutex.Lock()
	defer fake.getOpsSummaryWithContextMutex.Unlock()
	fake.GetOpsSummaryWithContextStub = nil
	if fake.getOpsSummaryWithContextReturnsOnCall == nil {
		fake.getOpsSummaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetOpsSummaryOutput
			result2 error
		})
	}
	fake.getOpsSummaryWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetOpsSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameter(arg1 *ssm.GetParameterInput) (*ssm.GetParameterOutput, error) {
	fake.getParameterMutex.Lock()
	ret, specificReturn := fake.getParameterReturnsOnCall[len(fake.getParameterArgsForCall)]
	fake.getParameterArgsForCall = append(fake.getParameterArgsForCall, struct {
		arg1 *ssm.GetParameterInput
	}{arg1})
	stub := fake.GetParameterStub
	fakeReturns := fake.getParameterReturns
	fake.recordInvocation("GetParameter", []interface{}{arg1})
	fake.getParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParameterCallCount() int {
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	return len(fake.getParameterArgsForCall)
}

func (fake *FakeSSMClient) GetParameterCalls(stub func(*ssm.GetParameterInput) (*ssm.GetParameterOutput, error)) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = stub
}

func (fake *FakeSSMClient) GetParameterArgsForCall(i int) *ssm.GetParameterInput {
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	argsForCall := fake.getParameterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParameterReturns(result1 *ssm.GetParameterOutput, result2 error) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = nil
	fake.getParameterReturns = struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterReturnsOnCall(i int, result1 *ssm.GetParameterOutput, result2 error) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = nil
	if fake.getParameterReturnsOnCall == nil {
		fake.getParameterReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParameterOutput
			result2 error
		})
	}
	fake.getParameterReturnsOnCall[i] = struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterHistory(arg1 *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error) {
	fake.getParameterHistoryMutex.Lock()
	ret, specificReturn := fake.getParameterHistoryReturnsOnCall[len(fake.getParameterHistoryArgsForCall)]
	fake.getParameterHistoryArgsForCall = append(fake.getParameterHistoryArgsForCall, struct {
		arg1 *ssm.GetParameterHistoryInput
	}{arg1})
	stub := fake.GetParameterHistoryStub
	fakeReturns := fake.getParameterHistoryReturns
	fake.recordInvocation("GetParameterHistory", []interface{}{arg1})
	fake.getParameterHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParameterHistoryCallCount() int {
	fake.getParameterHistoryMutex.RLock()
	defer fake.getParameterHistoryMutex.RUnlock()
	return len(fake.getParameterHistoryArgsForCall)
}

func (fake *FakeSSMClient) GetParameterHistoryCalls(stub func(*ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error)) {
	fake.getParameterHistoryMutex.Lock()
	defer fake.getParameterHistoryMutex.Unlock()
	fake.GetParameterHistoryStub = stub
}

func (fake *FakeSSMClient) GetParameterHistoryArgsForCall(i int) *ssm.GetParameterHistoryInput {
	fake.getParameterHistoryMutex.RLock()
	defer fake.getParameterHistoryMutex.RUnlock()
	argsForCall := fake.getParameterHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParameterHistoryReturns(result1 *ssm.GetParameterHistoryOutput, result2 error) {
	fake.getParameterHistoryMutex.Lock()
	defer fake.getParameterHistoryMutex.Unlock()
	fake.GetParameterHistoryStub = nil
	fake.getParameterHistoryReturns = struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterHistoryReturnsOnCall(i int, result1 *ssm.GetParameterHistoryOutput, result2 error) {
	fake.getParameterHistoryMutex.Lock()
	defer fake.getParameterHistoryMutex.Unlock()
	fake.GetParameterHistoryStub = nil
	if fake.getParameterHistoryReturnsOnCall == nil {
		fake.getParameterHistoryReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParameterHistoryOutput
			result2 error
		})
	}
	fake.getParameterHistoryReturnsOnCall[i] = struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterHistoryPages(arg1 *ssm.GetParameterHistoryInput, arg2 func(*ssm.GetParameterHistoryOutput, bool) bool) error {
	fake.getParameterHistoryPagesMutex.Lock()
	ret, specificReturn := fake.getParameterHistoryPagesReturnsOnCall[len(fake.getParameterHistoryPagesArgsForCall)]
	fake.getParameterHistoryPagesArgsForCall = append(fake.getParameterHistoryPagesArgsForCall, struct {
		arg1 *ssm.GetParameterHistoryInput
		arg2 func(*ssm.GetParameterHistoryOutput, bool) bool
	}{arg1, arg2})
	stub := fake.GetParameterHistoryPagesStub
	fakeReturns := fake.getParameterHistoryPagesReturns
	fake.recordInvocation("GetParameterHistoryPages", []interface{}{arg1, arg2})
	fake.getParameterHistoryPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetParameterHistoryPagesCallCount() int {
	fake.getParameterHistoryPagesMutex.RLock()
	defer fake.getParameterHistoryPagesMutex.RUnlock()
	return len(fake.getParameterHistoryPagesArgsForCall)
}

func (fake *FakeSSMClient) GetParameterHistoryPagesCalls(stub func(*ssm.GetParameterHistoryInput, func(*ssm.GetParameterHistoryOutput, bool) bool) error) {
	fake.getParameterHistoryPagesMutex.Lock()
	defer fake.getParameterHistoryPagesMutex.Unlock()
	fake.GetParameterHistoryPagesStub = stub
}

func (fake *FakeSSMClient) GetParameterHistoryPagesArgsForCall(i int) (*ssm.GetParameterHistoryInput, func(*ssm.GetParameterHistoryOutput, bool) bool) {
	fake.getParameterHistoryPagesMutex.RLock()
	defer fake.getParameterHistoryPagesMutex.RUnlock()
	argsForCall := fake.getParameterHistoryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) GetParameterHistoryPagesReturns(result1 error) {
	fake.getParameterHistoryPagesMutex.Lock()
	defer fake.getParameterHistoryPagesMutex.Unlock()
	fake.GetParameterHistoryPagesStub = nil
	fake.getParameterHistoryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParameterHistoryPagesReturnsOnCall(i int, result1 error) {
	fake.getParameterHistoryPagesMutex.Lock()
	defer fake.getParameterHistoryPagesMutex.Unlock()
	fake.GetParameterHistoryPagesStub = nil
	if fake.getParameterHistoryPagesReturnsOnCall == nil {
		fake.getParameterHistoryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getParameterHistoryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParameterHistoryPagesWithContext(arg1 context.Context, arg2 *ssm.GetParameterHistoryInput, arg3 func(*ssm.GetParameterHistoryOutput, bool) bool, arg4 ...request.Option) error {
	fake.getParameterHistoryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getParameterHistoryPagesWithContextReturnsOnCall[len(fake.getParameterHistoryPagesWithContextArgsForCall)]
	fake.getParameterHistoryPagesWithContextArgsForCall = append(fake.getParameterHistoryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParameterHistoryInput
		arg3 func(*ssm.GetParameterHistoryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetParameterHistoryPagesWithContextStub
	fakeReturns := fake.getParameterHistoryPagesWithContextReturns
	fake.recordInvocation("GetParameterHistoryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getParameterHistoryPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetParameterHistoryPagesWithContextCallCount() int {
	fake.getParameterHistoryPagesWithContextMutex.RLock()
	defer fake.getParameterHistoryPagesWithContextMutex.RUnlock()
	return len(fake.getParameterHistoryPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetParameterHistoryPagesWithContextCalls(stub func(context.Context, *ssm.GetParameterHistoryInput, func(*ssm.GetParameterHistoryOutput, bool) bool, ...request.Option) error) {
	fake.getParameterHistoryPagesWithContextMutex.Lock()
	defer fake.getParameterHistoryPagesWithContextMutex.Unlock()
	fake.GetParameterHistoryPagesWithContextStub = stub
}

func (fake *FakeSSMClient) GetParameterHistoryPagesWithContextArgsForCall(i int) (context.Context, *ssm.GetParameterHistoryInput, func(*ssm.GetParameterHistoryOutput, bool) bool, []request.Option) {
	fake.getParameterHistoryPagesWithContextMutex.RLock()
	defer fake.getParameterHistoryPagesWithContextMutex.RUnlock()
	argsForCall := fake.getParameterHistoryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) GetParameterHistoryPagesWithContextReturns(result1 error) {
	fake.getParameterHistoryPagesWithContextMutex.Lock()
	defer fake.getParameterHistoryPagesWithContextMutex.Unlock()
	fake.GetParameterHistoryPagesWithContextStub = nil
	fake.getParameterHistoryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParameterHistoryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getParameterHistoryPagesWithContextMutex.Lock()
	defer fake.getParameterHistoryPagesWithContextMutex.Unlock()
	fake.GetParameterHistoryPagesWithContextStub = nil
	if fake.getParameterHistoryPagesWithContextReturnsOnCall == nil {
		fake.getParameterHistoryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getParameterHistoryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParameterHistoryRequest(arg1 *ssm.GetParameterHistoryInput) (*request.Request, *ssm.GetParameterHistoryOutput) {
	fake.getParameterHistoryRequestMutex.Lock()
	ret, specificReturn := fake.getParameterHistoryRequestReturnsOnCall[len(fake.getParameterHistoryRequestArgsForCall)]
	fake.getParameterHistoryRequestArgsForCall = append(fake.getParameterHistoryRequestArgsForCall, struct {
		arg1 *ssm.GetParameterHistoryInput
	}{arg1})
	stub := fake.GetParameterHistoryRequestStub
	fakeReturns := fake.getParameterHistoryRequestReturns
	fake.recordInvocation("GetParameterHistoryRequest", []interface{}{arg1})
	fake.getParameterHistoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParameterHistoryRequestCallCount() int {
	fake.getParameterHistoryRequestMutex.RLock()
	defer fake.getParameterHistoryRequestMutex.RUnlock()
	return len(fake.getParameterHistoryRequestArgsForCall)
}

func (fake *FakeSSMClient) GetParameterHistoryRequestCalls(stub func(*ssm.GetParameterHistoryInput) (*request.Request, *ssm.GetParameterHistoryOutput)) {
	fake.getParameterHistoryRequestMutex.Lock()
	defer fake.getParameterHistoryRequestMutex.Unlock()
	fake.GetParameterHistoryRequestStub = stub
}

func (fake *FakeSSMClient) GetParameterHistoryRequestArgsForCall(i int) *ssm.GetParameterHistoryInput {
	fake.getParameterHistoryRequestMutex.RLock()
	defer fake.getParameterHistoryRequestMutex.RUnlock()
	argsForCall := fake.getParameterHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParameterHistoryRequestReturns(result1 *request.Request, result2 *ssm.GetParameterHistoryOutput) {
	fake.getParameterHistoryRequestMutex.Lock()
	defer fake.getParameterHistoryRequestMutex.Unlock()
	fake.GetParameterHistoryRequestStub = nil
	fake.getParameterHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetParameterHistoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetParameterHistoryOutput) {
	fake.getParameterHistoryRequestMutex.Lock()
	defer fake.getParameterHistoryRequestMutex.Unlock()
	fake.GetParameterHistoryRequestStub = nil
	if fake.getParameterHistoryRequestReturnsOnCall == nil {
		fake.getParameterHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetParameterHistoryOutput
		})
	}
	fake.getParameterHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetParameterHistoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterHistoryWithContext(arg1 context.Context, arg2 *ssm.GetParameterHistoryInput, arg3 ...request.Option) (*ssm.GetParameterHistoryOutput, error) {
	fake.getParameterHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.getParameterHistoryWithContextReturnsOnCall[len(fake.getParameterHistoryWithContextArgsForCall)]
	fake.getParameterHistoryWithContextArgsForCall = append(fake.getParameterHistoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParameterHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetParameterHistoryWithContextStub
	fakeReturns := fake.getParameterHistoryWithContextReturns
	fake.recordInvocation("GetParameterHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.getParameterHistoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParameterHistoryWithContextCallCount() int {
	fake.getParameterHistoryWithContextMutex.RLock()
	defer fake.getParameterHistoryWithContextMutex.RUnlock()
	return len(fake.getParameterHistoryWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetParameterHistoryWithContextCalls(stub func(context.Context, *ssm.GetParameterHistoryInput, ...request.Option) (*ssm.GetParameterHistoryOutput, error)) {
	fake.getParameterHistoryWithContextMutex.Lock()
	defer fake.getParameterHistoryWithContextMutex.Unlock()
	fake.GetParameterHistoryWithContextStub = stub
}

func (fake *FakeSSMClient) GetParameterHistoryWithContextArgsForCall(i int) (context.Context, *ssm.GetParameterHistoryInput, []request.Option) {
	fake.getParameterHistoryWithContextMutex.RLock()
	defer fake.getParameterHistoryWithContextMutex.RUnlock()
	argsForCall := fake.getParameterHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetParameterHistoryWithContextReturns(result1 *ssm.GetParameterHistoryOutput, result2 error) {
	fake.getParameterHistoryWithContextMutex.Lock()
	defer fake.getParameterHistoryWithContextMutex.Unlock()
	fake.GetParameterHistoryWithContextStub = nil
	fake.getParameterHistoryWithContextReturns = struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterHistoryWithContextReturnsOnCall(i int, result1 *ssm.GetParameterHistoryOutput, result2 error) {
	fake.getParameterHistoryWithContextMutex.Lock()
	defer fake.getParameterHistoryWithContextMutex.Unlock()
	fake.GetParameterHistoryWithContextStub = nil
	if fake.getParameterHistoryWithContextReturnsOnCall == nil {
		fake.getParameterHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParameterHistoryOutput
			result2 error
		})
	}
	fake.getParameterHistoryWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetParameterHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterRequest(arg1 *ssm.GetParameterInput) (*request.Request, *ssm.GetParameterOutput) {
	fake.getParameterRequestMutex.Lock()
	ret, specificReturn := fake.getParameterRequestReturnsOnCall[len(fake.getParameterRequestArgsForCall)]
	fake.getParameterRequestArgsForCall = append(fake.getParameterRequestArgsForCall, struct {
		arg1 *ssm.GetParameterInput
	}{arg1})
	stub := fake.GetParameterRequestStub
	fakeReturns := fake.getParameterRequestReturns
	fake.recordInvocation("GetParameterRequest", []interface{}{arg1})
	fake.getParameterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParameterRequestCallCount() int {
	fake.getParameterRequestMutex.RLock()
	defer fake.getParameterRequestMutex.RUnlock()
	return len(fake.getParameterRequestArgsForCall)
}

func (fake *FakeSSMClient) GetParameterRequestCalls(stub func(*ssm.GetParameterInput) (*request.Request, *ssm.GetParameterOutput)) {
	fake.getParameterRequestMutex.Lock()
	defer fake.getParameterRequestMutex.Unlock()
	fake.GetParameterRequestStub = stub
}

func (fake *FakeSSMClient) GetParameterRequestArgsForCall(i int) *ssm.GetParameterInput {
	fake.getParameterRequestMutex.RLock()
	defer fake.getParameterRequestMutex.RUnlock()
	argsForCall := fake.getParameterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParameterRequestReturns(result1 *request.Request, result2 *ssm.GetParameterOutput) {
	fake.getParameterRequestMutex.Lock()
	defer fake.getParameterRequestMutex.Unlock()
	fake.GetParameterRequestStub = nil
	fake.getParameterRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetParameterOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetParameterOutput) {
	fake.getParameterRequestMutex.Lock()
	defer fake.getParameterRequestMutex.Unlock()
	fake.GetParameterRequestStub = nil
	if fake.getParameterRequestReturnsOnCall == nil {
		fake.getParameterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetParameterOutput
		})
	}
	fake.getParameterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetParameterOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterWithContext(arg1 context.Context, arg2 *ssm.GetParameterInput, arg3 ...request.Option) (*ssm.GetParameterOutput, error) {
	fake.getParameterWithContextMutex.Lock()
	ret, specificReturn := fake.getParameterWithContextReturnsOnCall[len(fake.getParameterWithContextArgsForCall)]
	fake.getParameterWithContextArgsForCall = append(fake.getParameterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParameterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetParameterWithContextStub
	fakeReturns := fake.getParameterWithContextReturns
	fake.recordInvocation("GetParameterWithContext", []interface{}{arg1, arg2, arg3})
	fake.getParameterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParameterWithContextCallCount() int {
	fake.getParameterWithContextMutex.RLock()
	defer fake.getParameterWithContextMutex.RUnlock()
	return len(fake.getParameterWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetParameterWithContextCalls(stub func(context.Context, *ssm.GetParameterInput, ...request.Option) (*ssm.GetParameterOutput, error)) {
	fake.getParameterWithContextMutex.Lock()
	defer fake.getParameterWithContextMutex.Unlock()
	fake.GetParameterWithContextStub = stub
}

func (fake *FakeSSMClient) GetParameterWithContextArgsForCall(i int) (context.Context, *ssm.GetParameterInput, []request.Option) {
	fake.getParameterWithContextMutex.RLock()
	defer fake.getParameterWithContextMutex.RUnlock()
	argsForCall := fake.getParameterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetParameterWithContextReturns(result1 *ssm.GetParameterOutput, result2 error) {
	fake.getParameterWithContextMutex.Lock()
	defer fake.getParameterWithContextMutex.Unlock()
	fake.GetParameterWithContextStub = nil
	fake.getParameterWithContextReturns = struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameterWithContextReturnsOnCall(i int, result1 *ssm.GetParameterOutput, result2 error) {
	fake.getParameterWithContextMutex.Lock()
	defer fake.getParameterWithContextMutex.Unlock()
	fake.GetParameterWithContextStub = nil
	if fake.getParameterWithContextReturnsOnCall == nil {
		fake.getParameterWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParameterOutput
			result2 error
		})
	}
	fake.getParameterWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParameters(arg1 *ssm.GetParametersInput) (*ssm.GetParametersOutput, error) {
	fake.getParametersMutex.Lock()
	ret, specificReturn := fake.getParametersReturnsOnCall[len(fake.getParametersArgsForCall)]
	fake.getParametersArgsForCall = append(fake.getParametersArgsForCall, struct {
		arg1 *ssm.GetParametersInput
	}{arg1})
	stub := fake.GetParametersStub
	fakeReturns := fake.getParametersReturns
	fake.recordInvocation("GetParameters", []interface{}{arg1})
	fake.getParametersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParametersCallCount() int {
	fake.getParametersMutex.RLock()
	defer fake.getParametersMutex.RUnlock()
	return len(fake.getParametersArgsForCall)
}

func (fake *FakeSSMClient) GetParametersCalls(stub func(*ssm.GetParametersInput) (*ssm.GetParametersOutput, error)) {
	fake.getParametersMutex.Lock()
	defer fake.getParametersMutex.Unlock()
	fake.GetParametersStub = stub
}

func (fake *FakeSSMClient) GetParametersArgsForCall(i int) *ssm.GetParametersInput {
	fake.getParametersMutex.RLock()
	defer fake.getParametersMutex.RUnlock()
	argsForCall := fake.getParametersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParametersReturns(result1 *ssm.GetParametersOutput, result2 error) {
	fake.getParametersMutex.Lock()
	defer fake.getParametersMutex.Unlock()
	fake.GetParametersStub = nil
	fake.getParametersReturns = struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersReturnsOnCall(i int, result1 *ssm.GetParametersOutput, result2 error) {
	fake.getParametersMutex.Lock()
	defer fake.getParametersMutex.Unlock()
	fake.GetParametersStub = nil
	if fake.getParametersReturnsOnCall == nil {
		fake.getParametersReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParametersOutput
			result2 error
		})
	}
	fake.getParametersReturnsOnCall[i] = struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersByPath(arg1 *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error) {
	fake.getParametersByPathMutex.Lock()
	ret, specificReturn := fake.getParametersByPathReturnsOnCall[len(fake.getParametersByPathArgsForCall)]
	fake.getParametersByPathArgsForCall = append(fake.getParametersByPathArgsForCall, struct {
		arg1 *ssm.GetParametersByPathInput
	}{arg1})
	stub := fake.GetParametersByPathStub
	fakeReturns := fake.getParametersByPathReturns
	fake.recordInvocation("GetParametersByPath", []interface{}{arg1})
	fake.getParametersByPathMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParametersByPathCallCount() int {
	fake.getParametersByPathMutex.RLock()
	defer fake.getParametersByPathMutex.RUnlock()
	return len(fake.getParametersByPathArgsForCall)
}

func (fake *FakeSSMClient) GetParametersByPathCalls(stub func(*ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error)) {
	fake.getParametersByPathMutex.Lock()
	defer fake.getParametersByPathMutex.Unlock()
	fake.GetParametersByPathStub = stub
}

func (fake *FakeSSMClient) GetParametersByPathArgsForCall(i int) *ssm.GetParametersByPathInput {
	fake.getParametersByPathMutex.RLock()
	defer fake.getParametersByPathMutex.RUnlock()
	argsForCall := fake.getParametersByPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParametersByPathReturns(result1 *ssm.GetParametersByPathOutput, result2 error) {
	fake.getParametersByPathMutex.Lock()
	defer fake.getParametersByPathMutex.Unlock()
	fake.GetParametersByPathStub = nil
	fake.getParametersByPathReturns = struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersByPathReturnsOnCall(i int, result1 *ssm.GetParametersByPathOutput, result2 error) {
	fake.getParametersByPathMutex.Lock()
	defer fake.getParametersByPathMutex.Unlock()
	fake.GetParametersByPathStub = nil
	if fake.getParametersByPathReturnsOnCall == nil {
		fake.getParametersByPathReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParametersByPathOutput
			result2 error
		})
	}
	fake.getParametersByPathReturnsOnCall[i] = struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersByPathPages(arg1 *ssm.GetParametersByPathInput, arg2 func(*ssm.GetParametersByPathOutput, bool) bool) error {
	fake.getParametersByPathPagesMutex.Lock()
	ret, specificReturn := fake.getParametersByPathPagesReturnsOnCall[len(fake.getParametersByPathPagesArgsForCall)]
	fake.getParametersByPathPagesArgsForCall = append(fake.getParametersByPathPagesArgsForCall, struct {
		arg1 *ssm.GetParametersByPathInput
		arg2 func(*ssm.GetParametersByPathOutput, bool) bool
	}{arg1, arg2})
	stub := fake.GetParametersByPathPagesStub
	fakeReturns := fake.getParametersByPathPagesReturns
	fake.recordInvocation("GetParametersByPathPages", []interface{}{arg1, arg2})
	fake.getParametersByPathPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetParametersByPathPagesCallCount() int {
	fake.getParametersByPathPagesMutex.RLock()
	defer fake.getParametersByPathPagesMutex.RUnlock()
	return len(fake.getParametersByPathPagesArgsForCall)
}

func (fake *FakeSSMClient) GetParametersByPathPagesCalls(stub func(*ssm.GetParametersByPathInput, func(*ssm.GetParametersByPathOutput, bool) bool) error) {
	fake.getParametersByPathPagesMutex.Lock()
	defer fake.getParametersByPathPagesMutex.Unlock()
	fake.GetParametersByPathPagesStub = stub
}

func (fake *FakeSSMClient) GetParametersByPathPagesArgsForCall(i int) (*ssm.GetParametersByPathInput, func(*ssm.GetParametersByPathOutput, bool) bool) {
	fake.getParametersByPathPagesMutex.RLock()
	defer fake.getParametersByPathPagesMutex.RUnlock()
	argsForCall := fake.getParametersByPathPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) GetParametersByPathPagesReturns(result1 error) {
	fake.getParametersByPathPagesMutex.Lock()
	defer fake.getParametersByPathPagesMutex.Unlock()
	fake.GetParametersByPathPagesStub = nil
	fake.getParametersByPathPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParametersByPathPagesReturnsOnCall(i int, result1 error) {
	fake.getParametersByPathPagesMutex.Lock()
	defer fake.getParametersByPathPagesMutex.Unlock()
	fake.GetParametersByPathPagesStub = nil
	if fake.getParametersByPathPagesReturnsOnCall == nil {
		fake.getParametersByPathPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getParametersByPathPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParametersByPathPagesWithContext(arg1 context.Context, arg2 *ssm.GetParametersByPathInput, arg3 func(*ssm.GetParametersByPathOutput, bool) bool, arg4 ...request.Option) error {
	fake.getParametersByPathPagesWithContextMutex.Lock()
	ret, specificReturn := fake.getParametersByPathPagesWithContextReturnsOnCall[len(fake.getParametersByPathPagesWithContextArgsForCall)]
	fake.getParametersByPathPagesWithContextArgsForCall = append(fake.getParametersByPathPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParametersByPathInput
		arg3 func(*ssm.GetParametersByPathOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetParametersByPathPagesWithContextStub
	fakeReturns := fake.getParametersByPathPagesWithContextReturns
	fake.recordInvocation("GetParametersByPathPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.getParametersByPathPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) GetParametersByPathPagesWithContextCallCount() int {
	fake.getParametersByPathPagesWithContextMutex.RLock()
	defer fake.getParametersByPathPagesWithContextMutex.RUnlock()
	return len(fake.getParametersByPathPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetParametersByPathPagesWithContextCalls(stub func(context.Context, *ssm.GetParametersByPathInput, func(*ssm.GetParametersByPathOutput, bool) bool, ...request.Option) error) {
	fake.getParametersByPathPagesWithContextMutex.Lock()
	defer fake.getParametersByPathPagesWithContextMutex.Unlock()
	fake.GetParametersByPathPagesWithContextStub = stub
}

func (fake *FakeSSMClient) GetParametersByPathPagesWithContextArgsForCall(i int) (context.Context, *ssm.GetParametersByPathInput, func(*ssm.GetParametersByPathOutput, bool) bool, []request.Option) {
	fake.getParametersByPathPagesWithContextMutex.RLock()
	defer fake.getParametersByPathPagesWithContextMutex.RUnlock()
	argsForCall := fake.getParametersByPathPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) GetParametersByPathPagesWithContextReturns(result1 error) {
	fake.getParametersByPathPagesWithContextMutex.Lock()
	defer fake.getParametersByPathPagesWithContextMutex.Unlock()
	fake.GetParametersByPathPagesWithContextStub = nil
	fake.getParametersByPathPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParametersByPathPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.getParametersByPathPagesWithContextMutex.Lock()
	defer fake.getParametersByPathPagesWithContextMutex.Unlock()
	fake.GetParametersByPathPagesWithContextStub = nil
	if fake.getParametersByPathPagesWithContextReturnsOnCall == nil {
		fake.getParametersByPathPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getParametersByPathPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) GetParametersByPathRequest(arg1 *ssm.GetParametersByPathInput) (*request.Request, *ssm.GetParametersByPathOutput) {
	fake.getParametersByPathRequestMutex.Lock()
	ret, specificReturn := fake.getParametersByPathRequestReturnsOnCall[len(fake.getParametersByPathRequestArgsForCall)]
	fake.getParametersByPathRequestArgsForCall = append(fake.getParametersByPathRequestArgsForCall, struct {
		arg1 *ssm.GetParametersByPathInput
	}{arg1})
	stub := fake.GetParametersByPathRequestStub
	fakeReturns := fake.getParametersByPathRequestReturns
	fake.recordInvocation("GetParametersByPathRequest", []interface{}{arg1})
	fake.getParametersByPathRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParametersByPathRequestCallCount() int {
	fake.getParametersByPathRequestMutex.RLock()
	defer fake.getParametersByPathRequestMutex.RUnlock()
	return len(fake.getParametersByPathRequestArgsForCall)
}

func (fake *FakeSSMClient) GetParametersByPathRequestCalls(stub func(*ssm.GetParametersByPathInput) (*request.Request, *ssm.GetParametersByPathOutput)) {
	fake.getParametersByPathRequestMutex.Lock()
	defer fake.getParametersByPathRequestMutex.Unlock()
	fake.GetParametersByPathRequestStub = stub
}

func (fake *FakeSSMClient) GetParametersByPathRequestArgsForCall(i int) *ssm.GetParametersByPathInput {
	fake.getParametersByPathRequestMutex.RLock()
	defer fake.getParametersByPathRequestMutex.RUnlock()
	argsForCall := fake.getParametersByPathRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParametersByPathRequestReturns(result1 *request.Request, result2 *ssm.GetParametersByPathOutput) {
	fake.getParametersByPathRequestMutex.Lock()
	defer fake.getParametersByPathRequestMutex.Unlock()
	fake.GetParametersByPathRequestStub = nil
	fake.getParametersByPathRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetParametersByPathOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersByPathRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetParametersByPathOutput) {
	fake.getParametersByPathRequestMutex.Lock()
	defer fake.getParametersByPathRequestMutex.Unlock()
	fake.GetParametersByPathRequestStub = nil
	if fake.getParametersByPathRequestReturnsOnCall == nil {
		fake.getParametersByPathRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetParametersByPathOutput
		})
	}
	fake.getParametersByPathRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetParametersByPathOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersByPathWithContext(arg1 context.Context, arg2 *ssm.GetParametersByPathInput, arg3 ...request.Option) (*ssm.GetParametersByPathOutput, error) {
	fake.getParametersByPathWithContextMutex.Lock()
	ret, specificReturn := fake.getParametersByPathWithContextReturnsOnCall[len(fake.getParametersByPathWithContextArgsForCall)]
	fake.getParametersByPathWithContextArgsForCall = append(fake.getParametersByPathWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParametersByPathInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetParametersByPathWithContextStub
	fakeReturns := fake.getParametersByPathWithContextReturns
	fake.recordInvocation("GetParametersByPathWithContext", []interface{}{arg1, arg2, arg3})
	fake.getParametersByPathWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParametersByPathWithContextCallCount() int {
	fake.getParametersByPathWithContextMutex.RLock()
	defer fake.getParametersByPathWithContextMutex.RUnlock()
	return len(fake.getParametersByPathWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetParametersByPathWithContextCalls(stub func(context.Context, *ssm.GetParametersByPathInput, ...request.Option) (*ssm.GetParametersByPathOutput, error)) {
	fake.getParametersByPathWithContextMutex.Lock()
	defer fake.getParametersByPathWithContextMutex.Unlock()
	fake.GetParametersByPathWithContextStub = stub
}

func (fake *FakeSSMClient) GetParametersByPathWithContextArgsForCall(i int) (context.Context, *ssm.GetParametersByPathInput, []request.Option) {
	fake.getParametersByPathWithContextMutex.RLock()
	defer fake.getParametersByPathWithContextMutex.RUnlock()
	argsForCall := fake.getParametersByPathWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetParametersByPathWithContextReturns(result1 *ssm.GetParametersByPathOutput, result2 error) {
	fake.getParametersByPathWithContextMutex.Lock()
	defer fake.getParametersByPathWithContextMutex.Unlock()
	fake.GetParametersByPathWithContextStub = nil
	fake.getParametersByPathWithContextReturns = struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersByPathWithContextReturnsOnCall(i int, result1 *ssm.GetParametersByPathOutput, result2 error) {
	fake.getParametersByPathWithContextMutex.Lock()
	defer fake.getParametersByPathWithContextMutex.Unlock()
	fake.GetParametersByPathWithContextStub = nil
	if fake.getParametersByPathWithContextReturnsOnCall == nil {
		fake.getParametersByPathWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParametersByPathOutput
			result2 error
		})
	}
	fake.getParametersByPathWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetParametersByPathOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersRequest(arg1 *ssm.GetParametersInput) (*request.Request, *ssm.GetParametersOutput) {
	fake.getParametersRequestMutex.Lock()
	ret, specificReturn := fake.getParametersRequestReturnsOnCall[len(fake.getParametersRequestArgsForCall)]
	fake.getParametersRequestArgsForCall = append(fake.getParametersRequestArgsForCall, struct {
		arg1 *ssm.GetParametersInput
	}{arg1})
	stub := fake.GetParametersRequestStub
	fakeReturns := fake.getParametersRequestReturns
	fake.recordInvocation("GetParametersRequest", []interface{}{arg1})
	fake.getParametersRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParametersRequestCallCount() int {
	fake.getParametersRequestMutex.RLock()
	defer fake.getParametersRequestMutex.RUnlock()
	return len(fake.getParametersRequestArgsForCall)
}

func (fake *FakeSSMClient) GetParametersRequestCalls(stub func(*ssm.GetParametersInput) (*request.Request, *ssm.GetParametersOutput)) {
	fake.getParametersRequestMutex.Lock()
	defer fake.getParametersRequestMutex.Unlock()
	fake.GetParametersRequestStub = stub
}

func (fake *FakeSSMClient) GetParametersRequestArgsForCall(i int) *ssm.GetParametersInput {
	fake.getParametersRequestMutex.RLock()
	defer fake.getParametersRequestMutex.RUnlock()
	argsForCall := fake.getParametersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetParametersRequestReturns(result1 *request.Request, result2 *ssm.GetParametersOutput) {
	fake.getParametersRequestMutex.Lock()
	defer fake.getParametersRequestMutex.Unlock()
	fake.GetParametersRequestStub = nil
	fake.getParametersRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetParametersOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetParametersOutput) {
	fake.getParametersRequestMutex.Lock()
	defer fake.getParametersRequestMutex.Unlock()
	fake.GetParametersRequestStub = nil
	if fake.getParametersRequestReturnsOnCall == nil {
		fake.getParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetParametersOutput
		})
	}
	fake.getParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetParametersOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersWithContext(arg1 context.Context, arg2 *ssm.GetParametersInput, arg3 ...request.Option) (*ssm.GetParametersOutput, error) {
	fake.getParametersWithContextMutex.Lock()
	ret, specificReturn := fake.getParametersWithContextReturnsOnCall[len(fake.getParametersWithContextArgsForCall)]
	fake.getParametersWithContextArgsForCall = append(fake.getParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetParametersWithContextStub
	fakeReturns := fake.getParametersWithContextReturns
	fake.recordInvocation("GetParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.getParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetParametersWithContextCallCount() int {
	fake.getParametersWithContextMutex.RLock()
	defer fake.getParametersWithContextMutex.RUnlock()
	return len(fake.getParametersWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetParametersWithContextCalls(stub func(context.Context, *ssm.GetParametersInput, ...request.Option) (*ssm.GetParametersOutput, error)) {
	fake.getParametersWithContextMutex.Lock()
	defer fake.getParametersWithContextMutex.Unlock()
	fake.GetParametersWithContextStub = stub
}

func (fake *FakeSSMClient) GetParametersWithContextArgsForCall(i int) (context.Context, *ssm.GetParametersInput, []request.Option) {
	fake.getParametersWithContextMutex.RLock()
	defer fake.getParametersWithContextMutex.RUnlock()
	argsForCall := fake.getParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetParametersWithContextReturns(result1 *ssm.GetParametersOutput, result2 error) {
	fake.getParametersWithContextMutex.Lock()
	defer fake.getParametersWithContextMutex.Unlock()
	fake.GetParametersWithContextStub = nil
	fake.getParametersWithContextReturns = struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetParametersWithContextReturnsOnCall(i int, result1 *ssm.GetParametersOutput, result2 error) {
	fake.getParametersWithContextMutex.Lock()
	defer fake.getParametersWithContextMutex.Unlock()
	fake.GetParametersWithContextStub = nil
	if fake.getParametersWithContextReturnsOnCall == nil {
		fake.getParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParametersOutput
			result2 error
		})
	}
	fake.getParametersWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaseline(arg1 *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error) {
	fake.getPatchBaselineMutex.Lock()
	ret, specificReturn := fake.getPatchBaselineReturnsOnCall[len(fake.getPatchBaselineArgsForCall)]
	fake.getPatchBaselineArgsForCall = append(fake.getPatchBaselineArgsForCall, struct {
		arg1 *ssm.GetPatchBaselineInput
	}{arg1})
	stub := fake.GetPatchBaselineStub
	fakeReturns := fake.getPatchBaselineReturns
	fake.recordInvocation("GetPatchBaseline", []interface{}{arg1})
	fake.getPatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetPatchBaselineCallCount() int {
	fake.getPatchBaselineMutex.RLock()
	defer fake.getPatchBaselineMutex.RUnlock()
	return len(fake.getPatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) GetPatchBaselineCalls(stub func(*ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error)) {
	fake.getPatchBaselineMutex.Lock()
	defer fake.getPatchBaselineMutex.Unlock()
	fake.GetPatchBaselineStub = stub
}

func (fake *FakeSSMClient) GetPatchBaselineArgsForCall(i int) *ssm.GetPatchBaselineInput {
	fake.getPatchBaselineMutex.RLock()
	defer fake.getPatchBaselineMutex.RUnlock()
	argsForCall := fake.getPatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetPatchBaselineReturns(result1 *ssm.GetPatchBaselineOutput, result2 error) {
	fake.getPatchBaselineMutex.Lock()
	defer fake.getPatchBaselineMutex.Unlock()
	fake.GetPatchBaselineStub = nil
	fake.getPatchBaselineReturns = struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineReturnsOnCall(i int, result1 *ssm.GetPatchBaselineOutput, result2 error) {
	fake.getPatchBaselineMutex.Lock()
	defer fake.getPatchBaselineMutex.Unlock()
	fake.GetPatchBaselineStub = nil
	if fake.getPatchBaselineReturnsOnCall == nil {
		fake.getPatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetPatchBaselineOutput
			result2 error
		})
	}
	fake.getPatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroup(arg1 *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	fake.getPatchBaselineForPatchGroupMutex.Lock()
	ret, specificReturn := fake.getPatchBaselineForPatchGroupReturnsOnCall[len(fake.getPatchBaselineForPatchGroupArgsForCall)]
	fake.getPatchBaselineForPatchGroupArgsForCall = append(fake.getPatchBaselineForPatchGroupArgsForCall, struct {
		arg1 *ssm.GetPatchBaselineForPatchGroupInput
	}{arg1})
	stub := fake.GetPatchBaselineForPatchGroupStub
	fakeReturns := fake.getPatchBaselineForPatchGroupReturns
	fake.recordInvocation("GetPatchBaselineForPatchGroup", []interface{}{arg1})
	fake.getPatchBaselineForPatchGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupCallCount() int {
	fake.getPatchBaselineForPatchGroupMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupMutex.RUnlock()
	return len(fake.getPatchBaselineForPatchGroupArgsForCall)
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupCalls(stub func(*ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error)) {
	fake.getPatchBaselineForPatchGroupMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupStub = stub
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupArgsForCall(i int) *ssm.GetPatchBaselineForPatchGroupInput {
	fake.getPatchBaselineForPatchGroupMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupMutex.RUnlock()
	argsForCall := fake.getPatchBaselineForPatchGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupReturns(result1 *ssm.GetPatchBaselineForPatchGroupOutput, result2 error) {
	fake.getPatchBaselineForPatchGroupMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupStub = nil
	fake.getPatchBaselineForPatchGroupReturns = struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupReturnsOnCall(i int, result1 *ssm.GetPatchBaselineForPatchGroupOutput, result2 error) {
	fake.getPatchBaselineForPatchGroupMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupStub = nil
	if fake.getPatchBaselineForPatchGroupReturnsOnCall == nil {
		fake.getPatchBaselineForPatchGroupReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetPatchBaselineForPatchGroupOutput
			result2 error
		})
	}
	fake.getPatchBaselineForPatchGroupReturnsOnCall[i] = struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupRequest(arg1 *ssm.GetPatchBaselineForPatchGroupInput) (*request.Request, *ssm.GetPatchBaselineForPatchGroupOutput) {
	fake.getPatchBaselineForPatchGroupRequestMutex.Lock()
	ret, specificReturn := fake.getPatchBaselineForPatchGroupRequestReturnsOnCall[len(fake.getPatchBaselineForPatchGroupRequestArgsForCall)]
	fake.getPatchBaselineForPatchGroupRequestArgsForCall = append(fake.getPatchBaselineForPatchGroupRequestArgsForCall, struct {
		arg1 *ssm.GetPatchBaselineForPatchGroupInput
	}{arg1})
	stub := fake.GetPatchBaselineForPatchGroupRequestStub
	fakeReturns := fake.getPatchBaselineForPatchGroupRequestReturns
	fake.recordInvocation("GetPatchBaselineForPatchGroupRequest", []interface{}{arg1})
	fake.getPatchBaselineForPatchGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupRequestCallCount() int {
	fake.getPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupRequestMutex.RUnlock()
	return len(fake.getPatchBaselineForPatchGroupRequestArgsForCall)
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupRequestCalls(stub func(*ssm.GetPatchBaselineForPatchGroupInput) (*request.Request, *ssm.GetPatchBaselineForPatchGroupOutput)) {
	fake.getPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupRequestStub = stub
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupRequestArgsForCall(i int) *ssm.GetPatchBaselineForPatchGroupInput {
	fake.getPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupRequestMutex.RUnlock()
	argsForCall := fake.getPatchBaselineForPatchGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupRequestReturns(result1 *request.Request, result2 *ssm.GetPatchBaselineForPatchGroupOutput) {
	fake.getPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupRequestStub = nil
	fake.getPatchBaselineForPatchGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetPatchBaselineForPatchGroupOutput) {
	fake.getPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupRequestStub = nil
	if fake.getPatchBaselineForPatchGroupRequestReturnsOnCall == nil {
		fake.getPatchBaselineForPatchGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetPatchBaselineForPatchGroupOutput
		})
	}
	fake.getPatchBaselineForPatchGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupWithContext(arg1 context.Context, arg2 *ssm.GetPatchBaselineForPatchGroupInput, arg3 ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	fake.getPatchBaselineForPatchGroupWithContextMutex.Lock()
	ret, specificReturn := fake.getPatchBaselineForPatchGroupWithContextReturnsOnCall[len(fake.getPatchBaselineForPatchGroupWithContextArgsForCall)]
	fake.getPatchBaselineForPatchGroupWithContextArgsForCall = append(fake.getPatchBaselineForPatchGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetPatchBaselineForPatchGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetPatchBaselineForPatchGroupWithContextStub
	fakeReturns := fake.getPatchBaselineForPatchGroupWithContextReturns
	fake.recordInvocation("GetPatchBaselineForPatchGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPatchBaselineForPatchGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupWithContextCallCount() int {
	fake.getPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	return len(fake.getPatchBaselineForPatchGroupWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupWithContextCalls(stub func(context.Context, *ssm.GetPatchBaselineForPatchGroupInput, ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error)) {
	fake.getPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupWithContextStub = stub
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupWithContextArgsForCall(i int) (context.Context, *ssm.GetPatchBaselineForPatchGroupInput, []request.Option) {
	fake.getPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	argsForCall := fake.getPatchBaselineForPatchGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupWithContextReturns(result1 *ssm.GetPatchBaselineForPatchGroupOutput, result2 error) {
	fake.getPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupWithContextStub = nil
	fake.getPatchBaselineForPatchGroupWithContextReturns = struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineForPatchGroupWithContextReturnsOnCall(i int, result1 *ssm.GetPatchBaselineForPatchGroupOutput, result2 error) {
	fake.getPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.getPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.GetPatchBaselineForPatchGroupWithContextStub = nil
	if fake.getPatchBaselineForPatchGroupWithContextReturnsOnCall == nil {
		fake.getPatchBaselineForPatchGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetPatchBaselineForPatchGroupOutput
			result2 error
		})
	}
	fake.getPatchBaselineForPatchGroupWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineRequest(arg1 *ssm.GetPatchBaselineInput) (*request.Request, *ssm.GetPatchBaselineOutput) {
	fake.getPatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.getPatchBaselineRequestReturnsOnCall[len(fake.getPatchBaselineRequestArgsForCall)]
	fake.getPatchBaselineRequestArgsForCall = append(fake.getPatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.GetPatchBaselineInput
	}{arg1})
	stub := fake.GetPatchBaselineRequestStub
	fakeReturns := fake.getPatchBaselineRequestReturns
	fake.recordInvocation("GetPatchBaselineRequest", []interface{}{arg1})
	fake.getPatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetPatchBaselineRequestCallCount() int {
	fake.getPatchBaselineRequestMutex.RLock()
	defer fake.getPatchBaselineRequestMutex.RUnlock()
	return len(fake.getPatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) GetPatchBaselineRequestCalls(stub func(*ssm.GetPatchBaselineInput) (*request.Request, *ssm.GetPatchBaselineOutput)) {
	fake.getPatchBaselineRequestMutex.Lock()
	defer fake.getPatchBaselineRequestMutex.Unlock()
	fake.GetPatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) GetPatchBaselineRequestArgsForCall(i int) *ssm.GetPatchBaselineInput {
	fake.getPatchBaselineRequestMutex.RLock()
	defer fake.getPatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.getPatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetPatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.GetPatchBaselineOutput) {
	fake.getPatchBaselineRequestMutex.Lock()
	defer fake.getPatchBaselineRequestMutex.Unlock()
	fake.GetPatchBaselineRequestStub = nil
	fake.getPatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetPatchBaselineOutput) {
	fake.getPatchBaselineRequestMutex.Lock()
	defer fake.getPatchBaselineRequestMutex.Unlock()
	fake.GetPatchBaselineRequestStub = nil
	if fake.getPatchBaselineRequestReturnsOnCall == nil {
		fake.getPatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetPatchBaselineOutput
		})
	}
	fake.getPatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineWithContext(arg1 context.Context, arg2 *ssm.GetPatchBaselineInput, arg3 ...request.Option) (*ssm.GetPatchBaselineOutput, error) {
	fake.getPatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.getPatchBaselineWithContextReturnsOnCall[len(fake.getPatchBaselineWithContextArgsForCall)]
	fake.getPatchBaselineWithContextArgsForCall = append(fake.getPatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetPatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetPatchBaselineWithContextStub
	fakeReturns := fake.getPatchBaselineWithContextReturns
	fake.recordInvocation("GetPatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetPatchBaselineWithContextCallCount() int {
	fake.getPatchBaselineWithContextMutex.RLock()
	defer fake.getPatchBaselineWithContextMutex.RUnlock()
	return len(fake.getPatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetPatchBaselineWithContextCalls(stub func(context.Context, *ssm.GetPatchBaselineInput, ...request.Option) (*ssm.GetPatchBaselineOutput, error)) {
	fake.getPatchBaselineWithContextMutex.Lock()
	defer fake.getPatchBaselineWithContextMutex.Unlock()
	fake.GetPatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) GetPatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.GetPatchBaselineInput, []request.Option) {
	fake.getPatchBaselineWithContextMutex.RLock()
	defer fake.getPatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.getPatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetPatchBaselineWithContextReturns(result1 *ssm.GetPatchBaselineOutput, result2 error) {
	fake.getPatchBaselineWithContextMutex.Lock()
	defer fake.getPatchBaselineWithContextMutex.Unlock()
	fake.GetPatchBaselineWithContextStub = nil
	fake.getPatchBaselineWithContextReturns = struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetPatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.GetPatchBaselineOutput, result2 error) {
	fake.getPatchBaselineWithContextMutex.Lock()
	defer fake.getPatchBaselineWithContextMutex.Unlock()
	fake.GetPatchBaselineWithContextStub = nil
	if fake.getPatchBaselineWithContextReturnsOnCall == nil {
		fake.getPatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetPatchBaselineOutput
			result2 error
		})
	}
	fake.getPatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetServiceSetting(arg1 *ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error) {
	fake.getServiceSettingMutex.Lock()
	ret, specificReturn := fake.getServiceSettingReturnsOnCall[len(fake.getServiceSettingArgsForCall)]
	fake.getServiceSettingArgsForCall = append(fake.getServiceSettingArgsForCall, struct {
		arg1 *ssm.GetServiceSettingInput
	}{arg1})
	stub := fake.GetServiceSettingStub
	fakeReturns := fake.getServiceSettingReturns
	fake.recordInvocation("GetServiceSetting", []interface{}{arg1})
	fake.getServiceSettingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetServiceSettingCallCount() int {
	fake.getServiceSettingMutex.RLock()
	defer fake.getServiceSettingMutex.RUnlock()
	return len(fake.getServiceSettingArgsForCall)
}

func (fake *FakeSSMClient) GetServiceSettingCalls(stub func(*ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error)) {
	fake.getServiceSettingMutex.Lock()
	defer fake.getServiceSettingMutex.Unlock()
	fake.GetServiceSettingStub = stub
}

func (fake *FakeSSMClient) GetServiceSettingArgsForCall(i int) *ssm.GetServiceSettingInput {
	fake.getServiceSettingMutex.RLock()
	defer fake.getServiceSettingMutex.RUnlock()
	argsForCall := fake.getServiceSettingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetServiceSettingReturns(result1 *ssm.GetServiceSettingOutput, result2 error) {
	fake.getServiceSettingMutex.Lock()
	defer fake.getServiceSettingMutex.Unlock()
	fake.GetServiceSettingStub = nil
	fake.getServiceSettingReturns = struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetServiceSettingReturnsOnCall(i int, result1 *ssm.GetServiceSettingOutput, result2 error) {
	fake.getServiceSettingMutex.Lock()
	defer fake.getServiceSettingMutex.Unlock()
	fake.GetServiceSettingStub = nil
	if fake.getServiceSettingReturnsOnCall == nil {
		fake.getServiceSettingReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetServiceSettingOutput
			result2 error
		})
	}
	fake.getServiceSettingReturnsOnCall[i] = struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetServiceSettingRequest(arg1 *ssm.GetServiceSettingInput) (*request.Request, *ssm.GetServiceSettingOutput) {
	fake.getServiceSettingRequestMutex.Lock()
	ret, specificReturn := fake.getServiceSettingRequestReturnsOnCall[len(fake.getServiceSettingRequestArgsForCall)]
	fake.getServiceSettingRequestArgsForCall = append(fake.getServiceSettingRequestArgsForCall, struct {
		arg1 *ssm.GetServiceSettingInput
	}{arg1})
	stub := fake.GetServiceSettingRequestStub
	fakeReturns := fake.getServiceSettingRequestReturns
	fake.recordInvocation("GetServiceSettingRequest", []interface{}{arg1})
	fake.getServiceSettingRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetServiceSettingRequestCallCount() int {
	fake.getServiceSettingRequestMutex.RLock()
	defer fake.getServiceSettingRequestMutex.RUnlock()
	return len(fake.getServiceSettingRequestArgsForCall)
}

func (fake *FakeSSMClient) GetServiceSettingRequestCalls(stub func(*ssm.GetServiceSettingInput) (*request.Request, *ssm.GetServiceSettingOutput)) {
	fake.getServiceSettingRequestMutex.Lock()
	defer fake.getServiceSettingRequestMutex.Unlock()
	fake.GetServiceSettingRequestStub = stub
}

func (fake *FakeSSMClient) GetServiceSettingRequestArgsForCall(i int) *ssm.GetServiceSettingInput {
	fake.getServiceSettingRequestMutex.RLock()
	defer fake.getServiceSettingRequestMutex.RUnlock()
	argsForCall := fake.getServiceSettingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) GetServiceSettingRequestReturns(result1 *request.Request, result2 *ssm.GetServiceSettingOutput) {
	fake.getServiceSettingRequestMutex.Lock()
	defer fake.getServiceSettingRequestMutex.Unlock()
	fake.GetServiceSettingRequestStub = nil
	fake.getServiceSettingRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.GetServiceSettingOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetServiceSettingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.GetServiceSettingOutput) {
	fake.getServiceSettingRequestMutex.Lock()
	defer fake.getServiceSettingRequestMutex.Unlock()
	fake.GetServiceSettingRequestStub = nil
	if fake.getServiceSettingRequestReturnsOnCall == nil {
		fake.getServiceSettingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.GetServiceSettingOutput
		})
	}
	fake.getServiceSettingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.GetServiceSettingOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) GetServiceSettingWithContext(arg1 context.Context, arg2 *ssm.GetServiceSettingInput, arg3 ...request.Option) (*ssm.GetServiceSettingOutput, error) {
	fake.getServiceSettingWithContextMutex.Lock()
	ret, specificReturn := fake.getServiceSettingWithContextReturnsOnCall[len(fake.getServiceSettingWithContextArgsForCall)]
	fake.getServiceSettingWithContextArgsForCall = append(fake.getServiceSettingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetServiceSettingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetServiceSettingWithContextStub
	fakeReturns := fake.getServiceSettingWithContextReturns
	fake.recordInvocation("GetServiceSettingWithContext", []interface{}{arg1, arg2, arg3})
	fake.getServiceSettingWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) GetServiceSettingWithContextCallCount() int {
	fake.getServiceSettingWithContextMutex.RLock()
	defer fake.getServiceSettingWithContextMutex.RUnlock()
	return len(fake.getServiceSettingWithContextArgsForCall)
}

func (fake *FakeSSMClient) GetServiceSettingWithContextCalls(stub func(context.Context, *ssm.GetServiceSettingInput, ...request.Option) (*ssm.GetServiceSettingOutput, error)) {
	fake.getServiceSettingWithContextMutex.Lock()
	defer fake.getServiceSettingWithContextMutex.Unlock()
	fake.GetServiceSettingWithContextStub = stub
}

func (fake *FakeSSMClient) GetServiceSettingWithContextArgsForCall(i int) (context.Context, *ssm.GetServiceSettingInput, []request.Option) {
	fake.getServiceSettingWithContextMutex.RLock()
	defer fake.getServiceSettingWithContextMutex.RUnlock()
	argsForCall := fake.getServiceSettingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) GetServiceSettingWithContextReturns(result1 *ssm.GetServiceSettingOutput, result2 error) {
	fake.getServiceSettingWithContextMutex.Lock()
	defer fake.getServiceSettingWithContextMutex.Unlock()
	fake.GetServiceSettingWithContextStub = nil
	fake.getServiceSettingWithContextReturns = struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) GetServiceSettingWithContextReturnsOnCall(i int, result1 *ssm.GetServiceSettingOutput, result2 error) {
	fake.getServiceSettingWithContextMutex.Lock()
	defer fake.getServiceSettingWithContextMutex.Unlock()
	fake.GetServiceSettingWithContextStub = nil
	if fake.getServiceSettingWithContextReturnsOnCall == nil {
		fake.getServiceSettingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetServiceSettingOutput
			result2 error
		})
	}
	fake.getServiceSettingWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) LabelParameterVersion(arg1 *ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error) {
	fake.labelParameterVersionMutex.Lock()
	ret, specificReturn := fake.labelParameterVersionReturnsOnCall[len(fake.labelParameterVersionArgsForCall)]
	fake.labelParameterVersionArgsForCall = append(fake.labelParameterVersionArgsForCall, struct {
		arg1 *ssm.LabelParameterVersionInput
	}{arg1})
	stub := fake.LabelParameterVersionStub
	fakeReturns := fake.labelParameterVersionReturns
	fake.recordInvocation("LabelParameterVersion", []interface{}{arg1})
	fake.labelParameterVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) LabelParameterVersionCallCount() int {
	fake.labelParameterVersionMutex.RLock()
	defer fake.labelParameterVersionMutex.RUnlock()
	return len(fake.labelParameterVersionArgsForCall)
}

func (fake *FakeSSMClient) LabelParameterVersionCalls(stub func(*ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error)) {
	fake.labelParameterVersionMutex.Lock()
	defer fake.labelParameterVersionMutex.Unlock()
	fake.LabelParameterVersionStub = stub
}

func (fake *FakeSSMClient) LabelParameterVersionArgsForCall(i int) *ssm.LabelParameterVersionInput {
	fake.labelParameterVersionMutex.RLock()
	defer fake.labelParameterVersionMutex.RUnlock()
	argsForCall := fake.labelParameterVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) LabelParameterVersionReturns(result1 *ssm.LabelParameterVersionOutput, result2 error) {
	fake.labelParameterVersionMutex.Lock()
	defer fake.labelParameterVersionMutex.Unlock()
	fake.LabelParameterVersionStub = nil
	fake.labelParameterVersionReturns = struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) LabelParameterVersionReturnsOnCall(i int, result1 *ssm.LabelParameterVersionOutput, result2 error) {
	fake.labelParameterVersionMutex.Lock()
	defer fake.labelParameterVersionMutex.Unlock()
	fake.LabelParameterVersionStub = nil
	if fake.labelParameterVersionReturnsOnCall == nil {
		fake.labelParameterVersionReturnsOnCall = make(map[int]struct {
			result1 *ssm.LabelParameterVersionOutput
			result2 error
		})
	}
	fake.labelParameterVersionReturnsOnCall[i] = struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) LabelParameterVersionRequest(arg1 *ssm.LabelParameterVersionInput) (*request.Request, *ssm.LabelParameterVersionOutput) {
	fake.labelParameterVersionRequestMutex.Lock()
	ret, specificReturn := fake.labelParameterVersionRequestReturnsOnCall[len(fake.labelParameterVersionRequestArgsForCall)]
	fake.labelParameterVersionRequestArgsForCall = append(fake.labelParameterVersionRequestArgsForCall, struct {
		arg1 *ssm.LabelParameterVersionInput
	}{arg1})
	stub := fake.LabelParameterVersionRequestStub
	fakeReturns := fake.labelParameterVersionRequestReturns
	fake.recordInvocation("LabelParameterVersionRequest", []interface{}{arg1})
	fake.labelParameterVersionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) LabelParameterVersionRequestCallCount() int {
	fake.labelParameterVersionRequestMutex.RLock()
	defer fake.labelParameterVersionRequestMutex.RUnlock()
	return len(fake.labelParameterVersionRequestArgsForCall)
}

func (fake *FakeSSMClient) LabelParameterVersionRequestCalls(stub func(*ssm.LabelParameterVersionInput) (*request.Request, *ssm.LabelParameterVersionOutput)) {
	fake.labelParameterVersionRequestMutex.Lock()
	defer fake.labelParameterVersionRequestMutex.Unlock()
	fake.LabelParameterVersionRequestStub = stub
}

func (fake *FakeSSMClient) LabelParameterVersionRequestArgsForCall(i int) *ssm.LabelParameterVersionInput {
	fake.labelParameterVersionRequestMutex.RLock()
	defer fake.labelParameterVersionRequestMutex.RUnlock()
	argsForCall := fake.labelParameterVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) LabelParameterVersionRequestReturns(result1 *request.Request, result2 *ssm.LabelParameterVersionOutput) {
	fake.labelParameterVersionRequestMutex.Lock()
	defer fake.labelParameterVersionRequestMutex.Unlock()
	fake.LabelParameterVersionRequestStub = nil
	fake.labelParameterVersionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.LabelParameterVersionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) LabelParameterVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.LabelParameterVersionOutput) {
	fake.labelParameterVersionRequestMutex.Lock()
	defer fake.labelParameterVersionRequestMutex.Unlock()
	fake.LabelParameterVersionRequestStub = nil
	if fake.labelParameterVersionRequestReturnsOnCall == nil {
		fake.labelParameterVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.LabelParameterVersionOutput
		})
	}
	fake.labelParameterVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.LabelParameterVersionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) LabelParameterVersionWithContext(arg1 context.Context, arg2 *ssm.LabelParameterVersionInput, arg3 ...request.Option) (*ssm.LabelParameterVersionOutput, error) {
	fake.labelParameterVersionWithContextMutex.Lock()
	ret, specificReturn := fake.labelParameterVersionWithContextReturnsOnCall[len(fake.labelParameterVersionWithContextArgsForCall)]
	fake.labelParameterVersionWithContextArgsForCall = append(fake.labelParameterVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.LabelParameterVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.LabelParameterVersionWithContextStub
	fakeReturns := fake.labelParameterVersionWithContextReturns
	fake.recordInvocation("LabelParameterVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.labelParameterVersionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) LabelParameterVersionWithContextCallCount() int {
	fake.labelParameterVersionWithContextMutex.RLock()
	defer fake.labelParameterVersionWithContextMutex.RUnlock()
	return len(fake.labelParameterVersionWithContextArgsForCall)
}

func (fake *FakeSSMClient) LabelParameterVersionWithContextCalls(stub func(context.Context, *ssm.LabelParameterVersionInput, ...request.Option) (*ssm.LabelParameterVersionOutput, error)) {
	fake.labelParameterVersionWithContextMutex.Lock()
	defer fake.labelParameterVersionWithContextMutex.Unlock()
	fake.LabelParameterVersionWithContextStub = stub
}

func (fake *FakeSSMClient) LabelParameterVersionWithContextArgsForCall(i int) (context.Context, *ssm.LabelParameterVersionInput, []request.Option) {
	fake.labelParameterVersionWithContextMutex.RLock()
	defer fake.labelParameterVersionWithContextMutex.RUnlock()
	argsForCall := fake.labelParameterVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) LabelParameterVersionWithContextReturns(result1 *ssm.LabelParameterVersionOutput, result2 error) {
	fake.labelParameterVersionWithContextMutex.Lock()
	defer fake.labelParameterVersionWithContextMutex.Unlock()
	fake.LabelParameterVersionWithContextStub = nil
	fake.labelParameterVersionWithContextReturns = struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) LabelParameterVersionWithContextReturnsOnCall(i int, result1 *ssm.LabelParameterVersionOutput, result2 error) {
	fake.labelParameterVersionWithContextMutex.Lock()
	defer fake.labelParameterVersionWithContextMutex.Unlock()
	fake.LabelParameterVersionWithContextStub = nil
	if fake.labelParameterVersionWithContextReturnsOnCall == nil {
		fake.labelParameterVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.LabelParameterVersionOutput
			result2 error
		})
	}
	fake.labelParameterVersionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.LabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationVersions(arg1 *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error) {
	fake.listAssociationVersionsMutex.Lock()
	ret, specificReturn := fake.listAssociationVersionsReturnsOnCall[len(fake.listAssociationVersionsArgsForCall)]
	fake.listAssociationVersionsArgsForCall = append(fake.listAssociationVersionsArgsForCall, struct {
		arg1 *ssm.ListAssociationVersionsInput
	}{arg1})
	stub := fake.ListAssociationVersionsStub
	fakeReturns := fake.listAssociationVersionsReturns
	fake.recordInvocation("ListAssociationVersions", []interface{}{arg1})
	fake.listAssociationVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListAssociationVersionsCallCount() int {
	fake.listAssociationVersionsMutex.RLock()
	defer fake.listAssociationVersionsMutex.RUnlock()
	return len(fake.listAssociationVersionsArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationVersionsCalls(stub func(*ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error)) {
	fake.listAssociationVersionsMutex.Lock()
	defer fake.listAssociationVersionsMutex.Unlock()
	fake.ListAssociationVersionsStub = stub
}

func (fake *FakeSSMClient) ListAssociationVersionsArgsForCall(i int) *ssm.ListAssociationVersionsInput {
	fake.listAssociationVersionsMutex.RLock()
	defer fake.listAssociationVersionsMutex.RUnlock()
	argsForCall := fake.listAssociationVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListAssociationVersionsReturns(result1 *ssm.ListAssociationVersionsOutput, result2 error) {
	fake.listAssociationVersionsMutex.Lock()
	defer fake.listAssociationVersionsMutex.Unlock()
	fake.ListAssociationVersionsStub = nil
	fake.listAssociationVersionsReturns = struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationVersionsReturnsOnCall(i int, result1 *ssm.ListAssociationVersionsOutput, result2 error) {
	fake.listAssociationVersionsMutex.Lock()
	defer fake.listAssociationVersionsMutex.Unlock()
	fake.ListAssociationVersionsStub = nil
	if fake.listAssociationVersionsReturnsOnCall == nil {
		fake.listAssociationVersionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListAssociationVersionsOutput
			result2 error
		})
	}
	fake.listAssociationVersionsReturnsOnCall[i] = struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationVersionsPages(arg1 *ssm.ListAssociationVersionsInput, arg2 func(*ssm.ListAssociationVersionsOutput, bool) bool) error {
	fake.listAssociationVersionsPagesMutex.Lock()
	ret, specificReturn := fake.listAssociationVersionsPagesReturnsOnCall[len(fake.listAssociationVersionsPagesArgsForCall)]
	fake.listAssociationVersionsPagesArgsForCall = append(fake.listAssociationVersionsPagesArgsForCall, struct {
		arg1 *ssm.ListAssociationVersionsInput
		arg2 func(*ssm.ListAssociationVersionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListAssociationVersionsPagesStub
	fakeReturns := fake.listAssociationVersionsPagesReturns
	fake.recordInvocation("ListAssociationVersionsPages", []interface{}{arg1, arg2})
	fake.listAssociationVersionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesCallCount() int {
	fake.listAssociationVersionsPagesMutex.RLock()
	defer fake.listAssociationVersionsPagesMutex.RUnlock()
	return len(fake.listAssociationVersionsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesCalls(stub func(*ssm.ListAssociationVersionsInput, func(*ssm.ListAssociationVersionsOutput, bool) bool) error) {
	fake.listAssociationVersionsPagesMutex.Lock()
	defer fake.listAssociationVersionsPagesMutex.Unlock()
	fake.ListAssociationVersionsPagesStub = stub
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesArgsForCall(i int) (*ssm.ListAssociationVersionsInput, func(*ssm.ListAssociationVersionsOutput, bool) bool) {
	fake.listAssociationVersionsPagesMutex.RLock()
	defer fake.listAssociationVersionsPagesMutex.RUnlock()
	argsForCall := fake.listAssociationVersionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesReturns(result1 error) {
	fake.listAssociationVersionsPagesMutex.Lock()
	defer fake.listAssociationVersionsPagesMutex.Unlock()
	fake.ListAssociationVersionsPagesStub = nil
	fake.listAssociationVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.listAssociationVersionsPagesMutex.Lock()
	defer fake.listAssociationVersionsPagesMutex.Unlock()
	fake.ListAssociationVersionsPagesStub = nil
	if fake.listAssociationVersionsPagesReturnsOnCall == nil {
		fake.listAssociationVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAssociationVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesWithContext(arg1 context.Context, arg2 *ssm.ListAssociationVersionsInput, arg3 func(*ssm.ListAssociationVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAssociationVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAssociationVersionsPagesWithContextReturnsOnCall[len(fake.listAssociationVersionsPagesWithContextArgsForCall)]
	fake.listAssociationVersionsPagesWithContextArgsForCall = append(fake.listAssociationVersionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationVersionsInput
		arg3 func(*ssm.ListAssociationVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListAssociationVersionsPagesWithContextStub
	fakeReturns := fake.listAssociationVersionsPagesWithContextReturns
	fake.recordInvocation("ListAssociationVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAssociationVersionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesWithContextCallCount() int {
	fake.listAssociationVersionsPagesWithContextMutex.RLock()
	defer fake.listAssociationVersionsPagesWithContextMutex.RUnlock()
	return len(fake.listAssociationVersionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesWithContextCalls(stub func(context.Context, *ssm.ListAssociationVersionsInput, func(*ssm.ListAssociationVersionsOutput, bool) bool, ...request.Option) error) {
	fake.listAssociationVersionsPagesWithContextMutex.Lock()
	defer fake.listAssociationVersionsPagesWithContextMutex.Unlock()
	fake.ListAssociationVersionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListAssociationVersionsInput, func(*ssm.ListAssociationVersionsOutput, bool) bool, []request.Option) {
	fake.listAssociationVersionsPagesWithContextMutex.RLock()
	defer fake.listAssociationVersionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAssociationVersionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesWithContextReturns(result1 error) {
	fake.listAssociationVersionsPagesWithContextMutex.Lock()
	defer fake.listAssociationVersionsPagesWithContextMutex.Unlock()
	fake.ListAssociationVersionsPagesWithContextStub = nil
	fake.listAssociationVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAssociationVersionsPagesWithContextMutex.Lock()
	defer fake.listAssociationVersionsPagesWithContextMutex.Unlock()
	fake.ListAssociationVersionsPagesWithContextStub = nil
	if fake.listAssociationVersionsPagesWithContextReturnsOnCall == nil {
		fake.listAssociationVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAssociationVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationVersionsRequest(arg1 *ssm.ListAssociationVersionsInput) (*request.Request, *ssm.ListAssociationVersionsOutput) {
	fake.listAssociationVersionsRequestMutex.Lock()
	ret, specificReturn := fake.listAssociationVersionsRequestReturnsOnCall[len(fake.listAssociationVersionsRequestArgsForCall)]
	fake.listAssociationVersionsRequestArgsForCall = append(fake.listAssociationVersionsRequestArgsForCall, struct {
		arg1 *ssm.ListAssociationVersionsInput
	}{arg1})
	stub := fake.ListAssociationVersionsRequestStub
	fakeReturns := fake.listAssociationVersionsRequestReturns
	fake.recordInvocation("ListAssociationVersionsRequest", []interface{}{arg1})
	fake.listAssociationVersionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListAssociationVersionsRequestCallCount() int {
	fake.listAssociationVersionsRequestMutex.RLock()
	defer fake.listAssociationVersionsRequestMutex.RUnlock()
	return len(fake.listAssociationVersionsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationVersionsRequestCalls(stub func(*ssm.ListAssociationVersionsInput) (*request.Request, *ssm.ListAssociationVersionsOutput)) {
	fake.listAssociationVersionsRequestMutex.Lock()
	defer fake.listAssociationVersionsRequestMutex.Unlock()
	fake.ListAssociationVersionsRequestStub = stub
}

func (fake *FakeSSMClient) ListAssociationVersionsRequestArgsForCall(i int) *ssm.ListAssociationVersionsInput {
	fake.listAssociationVersionsRequestMutex.RLock()
	defer fake.listAssociationVersionsRequestMutex.RUnlock()
	argsForCall := fake.listAssociationVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListAssociationVersionsRequestReturns(result1 *request.Request, result2 *ssm.ListAssociationVersionsOutput) {
	fake.listAssociationVersionsRequestMutex.Lock()
	defer fake.listAssociationVersionsRequestMutex.Unlock()
	fake.ListAssociationVersionsRequestStub = nil
	fake.listAssociationVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListAssociationVersionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListAssociationVersionsOutput) {
	fake.listAssociationVersionsRequestMutex.Lock()
	defer fake.listAssociationVersionsRequestMutex.Unlock()
	fake.ListAssociationVersionsRequestStub = nil
	if fake.listAssociationVersionsRequestReturnsOnCall == nil {
		fake.listAssociationVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListAssociationVersionsOutput
		})
	}
	fake.listAssociationVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListAssociationVersionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationVersionsWithContext(arg1 context.Context, arg2 *ssm.ListAssociationVersionsInput, arg3 ...request.Option) (*ssm.ListAssociationVersionsOutput, error) {
	fake.listAssociationVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.listAssociationVersionsWithContextReturnsOnCall[len(fake.listAssociationVersionsWithContextArgsForCall)]
	fake.listAssociationVersionsWithContextArgsForCall = append(fake.listAssociationVersionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListAssociationVersionsWithContextStub
	fakeReturns := fake.listAssociationVersionsWithContextReturns
	fake.recordInvocation("ListAssociationVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAssociationVersionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListAssociationVersionsWithContextCallCount() int {
	fake.listAssociationVersionsWithContextMutex.RLock()
	defer fake.listAssociationVersionsWithContextMutex.RUnlock()
	return len(fake.listAssociationVersionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationVersionsWithContextCalls(stub func(context.Context, *ssm.ListAssociationVersionsInput, ...request.Option) (*ssm.ListAssociationVersionsOutput, error)) {
	fake.listAssociationVersionsWithContextMutex.Lock()
	defer fake.listAssociationVersionsWithContextMutex.Unlock()
	fake.ListAssociationVersionsWithContextStub = stub
}

func (fake *FakeSSMClient) ListAssociationVersionsWithContextArgsForCall(i int) (context.Context, *ssm.ListAssociationVersionsInput, []request.Option) {
	fake.listAssociationVersionsWithContextMutex.RLock()
	defer fake.listAssociationVersionsWithContextMutex.RUnlock()
	argsForCall := fake.listAssociationVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListAssociationVersionsWithContextReturns(result1 *ssm.ListAssociationVersionsOutput, result2 error) {
	fake.listAssociationVersionsWithContextMutex.Lock()
	defer fake.listAssociationVersionsWithContextMutex.Unlock()
	fake.ListAssociationVersionsWithContextStub = nil
	fake.listAssociationVersionsWithContextReturns = struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationVersionsWithContextReturnsOnCall(i int, result1 *ssm.ListAssociationVersionsOutput, result2 error) {
	fake.listAssociationVersionsWithContextMutex.Lock()
	defer fake.listAssociationVersionsWithContextMutex.Unlock()
	fake.ListAssociationVersionsWithContextStub = nil
	if fake.listAssociationVersionsWithContextReturnsOnCall == nil {
		fake.listAssociationVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListAssociationVersionsOutput
			result2 error
		})
	}
	fake.listAssociationVersionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListAssociationVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociations(arg1 *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error) {
	fake.listAssociationsMutex.Lock()
	ret, specificReturn := fake.listAssociationsReturnsOnCall[len(fake.listAssociationsArgsForCall)]
	fake.listAssociationsArgsForCall = append(fake.listAssociationsArgsForCall, struct {
		arg1 *ssm.ListAssociationsInput
	}{arg1})
	stub := fake.ListAssociationsStub
	fakeReturns := fake.listAssociationsReturns
	fake.recordInvocation("ListAssociations", []interface{}{arg1})
	fake.listAssociationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListAssociationsCallCount() int {
	fake.listAssociationsMutex.RLock()
	defer fake.listAssociationsMutex.RUnlock()
	return len(fake.listAssociationsArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationsCalls(stub func(*ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error)) {
	fake.listAssociationsMutex.Lock()
	defer fake.listAssociationsMutex.Unlock()
	fake.ListAssociationsStub = stub
}

func (fake *FakeSSMClient) ListAssociationsArgsForCall(i int) *ssm.ListAssociationsInput {
	fake.listAssociationsMutex.RLock()
	defer fake.listAssociationsMutex.RUnlock()
	argsForCall := fake.listAssociationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListAssociationsReturns(result1 *ssm.ListAssociationsOutput, result2 error) {
	fake.listAssociationsMutex.Lock()
	defer fake.listAssociationsMutex.Unlock()
	fake.ListAssociationsStub = nil
	fake.listAssociationsReturns = struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationsReturnsOnCall(i int, result1 *ssm.ListAssociationsOutput, result2 error) {
	fake.listAssociationsMutex.Lock()
	defer fake.listAssociationsMutex.Unlock()
	fake.ListAssociationsStub = nil
	if fake.listAssociationsReturnsOnCall == nil {
		fake.listAssociationsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListAssociationsOutput
			result2 error
		})
	}
	fake.listAssociationsReturnsOnCall[i] = struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationsPages(arg1 *ssm.ListAssociationsInput, arg2 func(*ssm.ListAssociationsOutput, bool) bool) error {
	fake.listAssociationsPagesMutex.Lock()
	ret, specificReturn := fake.listAssociationsPagesReturnsOnCall[len(fake.listAssociationsPagesArgsForCall)]
	fake.listAssociationsPagesArgsForCall = append(fake.listAssociationsPagesArgsForCall, struct {
		arg1 *ssm.ListAssociationsInput
		arg2 func(*ssm.ListAssociationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListAssociationsPagesStub
	fakeReturns := fake.listAssociationsPagesReturns
	fake.recordInvocation("ListAssociationsPages", []interface{}{arg1, arg2})
	fake.listAssociationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListAssociationsPagesCallCount() int {
	fake.listAssociationsPagesMutex.RLock()
	defer fake.listAssociationsPagesMutex.RUnlock()
	return len(fake.listAssociationsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationsPagesCalls(stub func(*ssm.ListAssociationsInput, func(*ssm.ListAssociationsOutput, bool) bool) error) {
	fake.listAssociationsPagesMutex.Lock()
	defer fake.listAssociationsPagesMutex.Unlock()
	fake.ListAssociationsPagesStub = stub
}

func (fake *FakeSSMClient) ListAssociationsPagesArgsForCall(i int) (*ssm.ListAssociationsInput, func(*ssm.ListAssociationsOutput, bool) bool) {
	fake.listAssociationsPagesMutex.RLock()
	defer fake.listAssociationsPagesMutex.RUnlock()
	argsForCall := fake.listAssociationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListAssociationsPagesReturns(result1 error) {
	fake.listAssociationsPagesMutex.Lock()
	defer fake.listAssociationsPagesMutex.Unlock()
	fake.ListAssociationsPagesStub = nil
	fake.listAssociationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationsPagesReturnsOnCall(i int, result1 error) {
	fake.listAssociationsPagesMutex.Lock()
	defer fake.listAssociationsPagesMutex.Unlock()
	fake.ListAssociationsPagesStub = nil
	if fake.listAssociationsPagesReturnsOnCall == nil {
		fake.listAssociationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAssociationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationsPagesWithContext(arg1 context.Context, arg2 *ssm.ListAssociationsInput, arg3 func(*ssm.ListAssociationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAssociationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAssociationsPagesWithContextReturnsOnCall[len(fake.listAssociationsPagesWithContextArgsForCall)]
	fake.listAssociationsPagesWithContextArgsForCall = append(fake.listAssociationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationsInput
		arg3 func(*ssm.ListAssociationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListAssociationsPagesWithContextStub
	fakeReturns := fake.listAssociationsPagesWithContextReturns
	fake.recordInvocation("ListAssociationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAssociationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListAssociationsPagesWithContextCallCount() int {
	fake.listAssociationsPagesWithContextMutex.RLock()
	defer fake.listAssociationsPagesWithContextMutex.RUnlock()
	return len(fake.listAssociationsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationsPagesWithContextCalls(stub func(context.Context, *ssm.ListAssociationsInput, func(*ssm.ListAssociationsOutput, bool) bool, ...request.Option) error) {
	fake.listAssociationsPagesWithContextMutex.Lock()
	defer fake.listAssociationsPagesWithContextMutex.Unlock()
	fake.ListAssociationsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListAssociationsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListAssociationsInput, func(*ssm.ListAssociationsOutput, bool) bool, []request.Option) {
	fake.listAssociationsPagesWithContextMutex.RLock()
	defer fake.listAssociationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAssociationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListAssociationsPagesWithContextReturns(result1 error) {
	fake.listAssociationsPagesWithContextMutex.Lock()
	defer fake.listAssociationsPagesWithContextMutex.Unlock()
	fake.ListAssociationsPagesWithContextStub = nil
	fake.listAssociationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAssociationsPagesWithContextMutex.Lock()
	defer fake.listAssociationsPagesWithContextMutex.Unlock()
	fake.ListAssociationsPagesWithContextStub = nil
	if fake.listAssociationsPagesWithContextReturnsOnCall == nil {
		fake.listAssociationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAssociationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListAssociationsRequest(arg1 *ssm.ListAssociationsInput) (*request.Request, *ssm.ListAssociationsOutput) {
	fake.listAssociationsRequestMutex.Lock()
	ret, specificReturn := fake.listAssociationsRequestReturnsOnCall[len(fake.listAssociationsRequestArgsForCall)]
	fake.listAssociationsRequestArgsForCall = append(fake.listAssociationsRequestArgsForCall, struct {
		arg1 *ssm.ListAssociationsInput
	}{arg1})
	stub := fake.ListAssociationsRequestStub
	fakeReturns := fake.listAssociationsRequestReturns
	fake.recordInvocation("ListAssociationsRequest", []interface{}{arg1})
	fake.listAssociationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListAssociationsRequestCallCount() int {
	fake.listAssociationsRequestMutex.RLock()
	defer fake.listAssociationsRequestMutex.RUnlock()
	return len(fake.listAssociationsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationsRequestCalls(stub func(*ssm.ListAssociationsInput) (*request.Request, *ssm.ListAssociationsOutput)) {
	fake.listAssociationsRequestMutex.Lock()
	defer fake.listAssociationsRequestMutex.Unlock()
	fake.ListAssociationsRequestStub = stub
}

func (fake *FakeSSMClient) ListAssociationsRequestArgsForCall(i int) *ssm.ListAssociationsInput {
	fake.listAssociationsRequestMutex.RLock()
	defer fake.listAssociationsRequestMutex.RUnlock()
	argsForCall := fake.listAssociationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListAssociationsRequestReturns(result1 *request.Request, result2 *ssm.ListAssociationsOutput) {
	fake.listAssociationsRequestMutex.Lock()
	defer fake.listAssociationsRequestMutex.Unlock()
	fake.ListAssociationsRequestStub = nil
	fake.listAssociationsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListAssociationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListAssociationsOutput) {
	fake.listAssociationsRequestMutex.Lock()
	defer fake.listAssociationsRequestMutex.Unlock()
	fake.ListAssociationsRequestStub = nil
	if fake.listAssociationsRequestReturnsOnCall == nil {
		fake.listAssociationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListAssociationsOutput
		})
	}
	fake.listAssociationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListAssociationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationsWithContext(arg1 context.Context, arg2 *ssm.ListAssociationsInput, arg3 ...request.Option) (*ssm.ListAssociationsOutput, error) {
	fake.listAssociationsWithContextMutex.Lock()
	ret, specificReturn := fake.listAssociationsWithContextReturnsOnCall[len(fake.listAssociationsWithContextArgsForCall)]
	fake.listAssociationsWithContextArgsForCall = append(fake.listAssociationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListAssociationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListAssociationsWithContextStub
	fakeReturns := fake.listAssociationsWithContextReturns
	fake.recordInvocation("ListAssociationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAssociationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListAssociationsWithContextCallCount() int {
	fake.listAssociationsWithContextMutex.RLock()
	defer fake.listAssociationsWithContextMutex.RUnlock()
	return len(fake.listAssociationsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListAssociationsWithContextCalls(stub func(context.Context, *ssm.ListAssociationsInput, ...request.Option) (*ssm.ListAssociationsOutput, error)) {
	fake.listAssociationsWithContextMutex.Lock()
	defer fake.listAssociationsWithContextMutex.Unlock()
	fake.ListAssociationsWithContextStub = stub
}

func (fake *FakeSSMClient) ListAssociationsWithContextArgsForCall(i int) (context.Context, *ssm.ListAssociationsInput, []request.Option) {
	fake.listAssociationsWithContextMutex.RLock()
	defer fake.listAssociationsWithContextMutex.RUnlock()
	argsForCall := fake.listAssociationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListAssociationsWithContextReturns(result1 *ssm.ListAssociationsOutput, result2 error) {
	fake.listAssociationsWithContextMutex.Lock()
	defer fake.listAssociationsWithContextMutex.Unlock()
	fake.ListAssociationsWithContextStub = nil
	fake.listAssociationsWithContextReturns = struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListAssociationsWithContextReturnsOnCall(i int, result1 *ssm.ListAssociationsOutput, result2 error) {
	fake.listAssociationsWithContextMutex.Lock()
	defer fake.listAssociationsWithContextMutex.Unlock()
	fake.ListAssociationsWithContextStub = nil
	if fake.listAssociationsWithContextReturnsOnCall == nil {
		fake.listAssociationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListAssociationsOutput
			result2 error
		})
	}
	fake.listAssociationsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandInvocations(arg1 *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error) {
	fake.listCommandInvocationsMutex.Lock()
	ret, specificReturn := fake.listCommandInvocationsReturnsOnCall[len(fake.listCommandInvocationsArgsForCall)]
	fake.listCommandInvocationsArgsForCall = append(fake.listCommandInvocationsArgsForCall, struct {
		arg1 *ssm.ListCommandInvocationsInput
	}{arg1})
	stub := fake.ListCommandInvocationsStub
	fakeReturns := fake.listCommandInvocationsReturns
	fake.recordInvocation("ListCommandInvocations", []interface{}{arg1})
	fake.listCommandInvocationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListCommandInvocationsCallCount() int {
	fake.listCommandInvocationsMutex.RLock()
	defer fake.listCommandInvocationsMutex.RUnlock()
	return len(fake.listCommandInvocationsArgsForCall)
}

func (fake *FakeSSMClient) ListCommandInvocationsCalls(stub func(*ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error)) {
	fake.listCommandInvocationsMutex.Lock()
	defer fake.listCommandInvocationsMutex.Unlock()
	fake.ListCommandInvocationsStub = stub
}

func (fake *FakeSSMClient) ListCommandInvocationsArgsForCall(i int) *ssm.ListCommandInvocationsInput {
	fake.listCommandInvocationsMutex.RLock()
	defer fake.listCommandInvocationsMutex.RUnlock()
	argsForCall := fake.listCommandInvocationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListCommandInvocationsReturns(result1 *ssm.ListCommandInvocationsOutput, result2 error) {
	fake.listCommandInvocationsMutex.Lock()
	defer fake.listCommandInvocationsMutex.Unlock()
	fake.ListCommandInvocationsStub = nil
	fake.listCommandInvocationsReturns = struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandInvocationsReturnsOnCall(i int, result1 *ssm.ListCommandInvocationsOutput, result2 error) {
	fake.listCommandInvocationsMutex.Lock()
	defer fake.listCommandInvocationsMutex.Unlock()
	fake.ListCommandInvocationsStub = nil
	if fake.listCommandInvocationsReturnsOnCall == nil {
		fake.listCommandInvocationsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListCommandInvocationsOutput
			result2 error
		})
	}
	fake.listCommandInvocationsReturnsOnCall[i] = struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandInvocationsPages(arg1 *ssm.ListCommandInvocationsInput, arg2 func(*ssm.ListCommandInvocationsOutput, bool) bool) error {
	fake.listCommandInvocationsPagesMutex.Lock()
	ret, specificReturn := fake.listCommandInvocationsPagesReturnsOnCall[len(fake.listCommandInvocationsPagesArgsForCall)]
	fake.listCommandInvocationsPagesArgsForCall = append(fake.listCommandInvocationsPagesArgsForCall, struct {
		arg1 *ssm.ListCommandInvocationsInput
		arg2 func(*ssm.ListCommandInvocationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListCommandInvocationsPagesStub
	fakeReturns := fake.listCommandInvocationsPagesReturns
	fake.recordInvocation("ListCommandInvocationsPages", []interface{}{arg1, arg2})
	fake.listCommandInvocationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesCallCount() int {
	fake.listCommandInvocationsPagesMutex.RLock()
	defer fake.listCommandInvocationsPagesMutex.RUnlock()
	return len(fake.listCommandInvocationsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesCalls(stub func(*ssm.ListCommandInvocationsInput, func(*ssm.ListCommandInvocationsOutput, bool) bool) error) {
	fake.listCommandInvocationsPagesMutex.Lock()
	defer fake.listCommandInvocationsPagesMutex.Unlock()
	fake.ListCommandInvocationsPagesStub = stub
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesArgsForCall(i int) (*ssm.ListCommandInvocationsInput, func(*ssm.ListCommandInvocationsOutput, bool) bool) {
	fake.listCommandInvocationsPagesMutex.RLock()
	defer fake.listCommandInvocationsPagesMutex.RUnlock()
	argsForCall := fake.listCommandInvocationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesReturns(result1 error) {
	fake.listCommandInvocationsPagesMutex.Lock()
	defer fake.listCommandInvocationsPagesMutex.Unlock()
	fake.ListCommandInvocationsPagesStub = nil
	fake.listCommandInvocationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesReturnsOnCall(i int, result1 error) {
	fake.listCommandInvocationsPagesMutex.Lock()
	defer fake.listCommandInvocationsPagesMutex.Unlock()
	fake.ListCommandInvocationsPagesStub = nil
	if fake.listCommandInvocationsPagesReturnsOnCall == nil {
		fake.listCommandInvocationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCommandInvocationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesWithContext(arg1 context.Context, arg2 *ssm.ListCommandInvocationsInput, arg3 func(*ssm.ListCommandInvocationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listCommandInvocationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listCommandInvocationsPagesWithContextReturnsOnCall[len(fake.listCommandInvocationsPagesWithContextArgsForCall)]
	fake.listCommandInvocationsPagesWithContextArgsForCall = append(fake.listCommandInvocationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListCommandInvocationsInput
		arg3 func(*ssm.ListCommandInvocationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListCommandInvocationsPagesWithContextStub
	fakeReturns := fake.listCommandInvocationsPagesWithContextReturns
	fake.recordInvocation("ListCommandInvocationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listCommandInvocationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesWithContextCallCount() int {
	fake.listCommandInvocationsPagesWithContextMutex.RLock()
	defer fake.listCommandInvocationsPagesWithContextMutex.RUnlock()
	return len(fake.listCommandInvocationsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesWithContextCalls(stub func(context.Context, *ssm.ListCommandInvocationsInput, func(*ssm.ListCommandInvocationsOutput, bool) bool, ...request.Option) error) {
	fake.listCommandInvocationsPagesWithContextMutex.Lock()
	defer fake.listCommandInvocationsPagesWithContextMutex.Unlock()
	fake.ListCommandInvocationsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListCommandInvocationsInput, func(*ssm.ListCommandInvocationsOutput, bool) bool, []request.Option) {
	fake.listCommandInvocationsPagesWithContextMutex.RLock()
	defer fake.listCommandInvocationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listCommandInvocationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesWithContextReturns(result1 error) {
	fake.listCommandInvocationsPagesWithContextMutex.Lock()
	defer fake.listCommandInvocationsPagesWithContextMutex.Unlock()
	fake.ListCommandInvocationsPagesWithContextStub = nil
	fake.listCommandInvocationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandInvocationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listCommandInvocationsPagesWithContextMutex.Lock()
	defer fake.listCommandInvocationsPagesWithContextMutex.Unlock()
	fake.ListCommandInvocationsPagesWithContextStub = nil
	if fake.listCommandInvocationsPagesWithContextReturnsOnCall == nil {
		fake.listCommandInvocationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCommandInvocationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandInvocationsRequest(arg1 *ssm.ListCommandInvocationsInput) (*request.Request, *ssm.ListCommandInvocationsOutput) {
	fake.listCommandInvocationsRequestMutex.Lock()
	ret, specificReturn := fake.listCommandInvocationsRequestReturnsOnCall[len(fake.listCommandInvocationsRequestArgsForCall)]
	fake.listCommandInvocationsRequestArgsForCall = append(fake.listCommandInvocationsRequestArgsForCall, struct {
		arg1 *ssm.ListCommandInvocationsInput
	}{arg1})
	stub := fake.ListCommandInvocationsRequestStub
	fakeReturns := fake.listCommandInvocationsRequestReturns
	fake.recordInvocation("ListCommandInvocationsRequest", []interface{}{arg1})
	fake.listCommandInvocationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListCommandInvocationsRequestCallCount() int {
	fake.listCommandInvocationsRequestMutex.RLock()
	defer fake.listCommandInvocationsRequestMutex.RUnlock()
	return len(fake.listCommandInvocationsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListCommandInvocationsRequestCalls(stub func(*ssm.ListCommandInvocationsInput) (*request.Request, *ssm.ListCommandInvocationsOutput)) {
	fake.listCommandInvocationsRequestMutex.Lock()
	defer fake.listCommandInvocationsRequestMutex.Unlock()
	fake.ListCommandInvocationsRequestStub = stub
}

func (fake *FakeSSMClient) ListCommandInvocationsRequestArgsForCall(i int) *ssm.ListCommandInvocationsInput {
	fake.listCommandInvocationsRequestMutex.RLock()
	defer fake.listCommandInvocationsRequestMutex.RUnlock()
	argsForCall := fake.listCommandInvocationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListCommandInvocationsRequestReturns(result1 *request.Request, result2 *ssm.ListCommandInvocationsOutput) {
	fake.listCommandInvocationsRequestMutex.Lock()
	defer fake.listCommandInvocationsRequestMutex.Unlock()
	fake.ListCommandInvocationsRequestStub = nil
	fake.listCommandInvocationsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListCommandInvocationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandInvocationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListCommandInvocationsOutput) {
	fake.listCommandInvocationsRequestMutex.Lock()
	defer fake.listCommandInvocationsRequestMutex.Unlock()
	fake.ListCommandInvocationsRequestStub = nil
	if fake.listCommandInvocationsRequestReturnsOnCall == nil {
		fake.listCommandInvocationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListCommandInvocationsOutput
		})
	}
	fake.listCommandInvocationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListCommandInvocationsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandInvocationsWithContext(arg1 context.Context, arg2 *ssm.ListCommandInvocationsInput, arg3 ...request.Option) (*ssm.ListCommandInvocationsOutput, error) {
	fake.listCommandInvocationsWithContextMutex.Lock()
	ret, specificReturn := fake.listCommandInvocationsWithContextReturnsOnCall[len(fake.listCommandInvocationsWithContextArgsForCall)]
	fake.listCommandInvocationsWithContextArgsForCall = append(fake.listCommandInvocationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListCommandInvocationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListCommandInvocationsWithContextStub
	fakeReturns := fake.listCommandInvocationsWithContextReturns
	fake.recordInvocation("ListCommandInvocationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listCommandInvocationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListCommandInvocationsWithContextCallCount() int {
	fake.listCommandInvocationsWithContextMutex.RLock()
	defer fake.listCommandInvocationsWithContextMutex.RUnlock()
	return len(fake.listCommandInvocationsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListCommandInvocationsWithContextCalls(stub func(context.Context, *ssm.ListCommandInvocationsInput, ...request.Option) (*ssm.ListCommandInvocationsOutput, error)) {
	fake.listCommandInvocationsWithContextMutex.Lock()
	defer fake.listCommandInvocationsWithContextMutex.Unlock()
	fake.ListCommandInvocationsWithContextStub = stub
}

func (fake *FakeSSMClient) ListCommandInvocationsWithContextArgsForCall(i int) (context.Context, *ssm.ListCommandInvocationsInput, []request.Option) {
	fake.listCommandInvocationsWithContextMutex.RLock()
	defer fake.listCommandInvocationsWithContextMutex.RUnlock()
	argsForCall := fake.listCommandInvocationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListCommandInvocationsWithContextReturns(result1 *ssm.ListCommandInvocationsOutput, result2 error) {
	fake.listCommandInvocationsWithContextMutex.Lock()
	defer fake.listCommandInvocationsWithContextMutex.Unlock()
	fake.ListCommandInvocationsWithContextStub = nil
	fake.listCommandInvocationsWithContextReturns = struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandInvocationsWithContextReturnsOnCall(i int, result1 *ssm.ListCommandInvocationsOutput, result2 error) {
	fake.listCommandInvocationsWithContextMutex.Lock()
	defer fake.listCommandInvocationsWithContextMutex.Unlock()
	fake.ListCommandInvocationsWithContextStub = nil
	if fake.listCommandInvocationsWithContextReturnsOnCall == nil {
		fake.listCommandInvocationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListCommandInvocationsOutput
			result2 error
		})
	}
	fake.listCommandInvocationsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListCommandInvocationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommands(arg1 *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error) {
	fake.listCommandsMutex.Lock()
	ret, specificReturn := fake.listCommandsReturnsOnCall[len(fake.listCommandsArgsForCall)]
	fake.listCommandsArgsForCall = append(fake.listCommandsArgsForCall, struct {
		arg1 *ssm.ListCommandsInput
	}{arg1})
	stub := fake.ListCommandsStub
	fakeReturns := fake.listCommandsReturns
	fake.recordInvocation("ListCommands", []interface{}{arg1})
	fake.listCommandsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListCommandsCallCount() int {
	fake.listCommandsMutex.RLock()
	defer fake.listCommandsMutex.RUnlock()
	return len(fake.listCommandsArgsForCall)
}

func (fake *FakeSSMClient) ListCommandsCalls(stub func(*ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error)) {
	fake.listCommandsMutex.Lock()
	defer fake.listCommandsMutex.Unlock()
	fake.ListCommandsStub = stub
}

func (fake *FakeSSMClient) ListCommandsArgsForCall(i int) *ssm.ListCommandsInput {
	fake.listCommandsMutex.RLock()
	defer fake.listCommandsMutex.RUnlock()
	argsForCall := fake.listCommandsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListCommandsReturns(result1 *ssm.ListCommandsOutput, result2 error) {
	fake.listCommandsMutex.Lock()
	defer fake.listCommandsMutex.Unlock()
	fake.ListCommandsStub = nil
	fake.listCommandsReturns = struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandsReturnsOnCall(i int, result1 *ssm.ListCommandsOutput, result2 error) {
	fake.listCommandsMutex.Lock()
	defer fake.listCommandsMutex.Unlock()
	fake.ListCommandsStub = nil
	if fake.listCommandsReturnsOnCall == nil {
		fake.listCommandsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListCommandsOutput
			result2 error
		})
	}
	fake.listCommandsReturnsOnCall[i] = struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandsPages(arg1 *ssm.ListCommandsInput, arg2 func(*ssm.ListCommandsOutput, bool) bool) error {
	fake.listCommandsPagesMutex.Lock()
	ret, specificReturn := fake.listCommandsPagesReturnsOnCall[len(fake.listCommandsPagesArgsForCall)]
	fake.listCommandsPagesArgsForCall = append(fake.listCommandsPagesArgsForCall, struct {
		arg1 *ssm.ListCommandsInput
		arg2 func(*ssm.ListCommandsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListCommandsPagesStub
	fakeReturns := fake.listCommandsPagesReturns
	fake.recordInvocation("ListCommandsPages", []interface{}{arg1, arg2})
	fake.listCommandsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListCommandsPagesCallCount() int {
	fake.listCommandsPagesMutex.RLock()
	defer fake.listCommandsPagesMutex.RUnlock()
	return len(fake.listCommandsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListCommandsPagesCalls(stub func(*ssm.ListCommandsInput, func(*ssm.ListCommandsOutput, bool) bool) error) {
	fake.listCommandsPagesMutex.Lock()
	defer fake.listCommandsPagesMutex.Unlock()
	fake.ListCommandsPagesStub = stub
}

func (fake *FakeSSMClient) ListCommandsPagesArgsForCall(i int) (*ssm.ListCommandsInput, func(*ssm.ListCommandsOutput, bool) bool) {
	fake.listCommandsPagesMutex.RLock()
	defer fake.listCommandsPagesMutex.RUnlock()
	argsForCall := fake.listCommandsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListCommandsPagesReturns(result1 error) {
	fake.listCommandsPagesMutex.Lock()
	defer fake.listCommandsPagesMutex.Unlock()
	fake.ListCommandsPagesStub = nil
	fake.listCommandsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandsPagesReturnsOnCall(i int, result1 error) {
	fake.listCommandsPagesMutex.Lock()
	defer fake.listCommandsPagesMutex.Unlock()
	fake.ListCommandsPagesStub = nil
	if fake.listCommandsPagesReturnsOnCall == nil {
		fake.listCommandsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCommandsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandsPagesWithContext(arg1 context.Context, arg2 *ssm.ListCommandsInput, arg3 func(*ssm.ListCommandsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listCommandsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listCommandsPagesWithContextReturnsOnCall[len(fake.listCommandsPagesWithContextArgsForCall)]
	fake.listCommandsPagesWithContextArgsForCall = append(fake.listCommandsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListCommandsInput
		arg3 func(*ssm.ListCommandsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListCommandsPagesWithContextStub
	fakeReturns := fake.listCommandsPagesWithContextReturns
	fake.recordInvocation("ListCommandsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listCommandsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListCommandsPagesWithContextCallCount() int {
	fake.listCommandsPagesWithContextMutex.RLock()
	defer fake.listCommandsPagesWithContextMutex.RUnlock()
	return len(fake.listCommandsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListCommandsPagesWithContextCalls(stub func(context.Context, *ssm.ListCommandsInput, func(*ssm.ListCommandsOutput, bool) bool, ...request.Option) error) {
	fake.listCommandsPagesWithContextMutex.Lock()
	defer fake.listCommandsPagesWithContextMutex.Unlock()
	fake.ListCommandsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListCommandsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListCommandsInput, func(*ssm.ListCommandsOutput, bool) bool, []request.Option) {
	fake.listCommandsPagesWithContextMutex.RLock()
	defer fake.listCommandsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listCommandsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListCommandsPagesWithContextReturns(result1 error) {
	fake.listCommandsPagesWithContextMutex.Lock()
	defer fake.listCommandsPagesWithContextMutex.Unlock()
	fake.ListCommandsPagesWithContextStub = nil
	fake.listCommandsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listCommandsPagesWithContextMutex.Lock()
	defer fake.listCommandsPagesWithContextMutex.Unlock()
	fake.ListCommandsPagesWithContextStub = nil
	if fake.listCommandsPagesWithContextReturnsOnCall == nil {
		fake.listCommandsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCommandsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListCommandsRequest(arg1 *ssm.ListCommandsInput) (*request.Request, *ssm.ListCommandsOutput) {
	fake.listCommandsRequestMutex.Lock()
	ret, specificReturn := fake.listCommandsRequestReturnsOnCall[len(fake.listCommandsRequestArgsForCall)]
	fake.listCommandsRequestArgsForCall = append(fake.listCommandsRequestArgsForCall, struct {
		arg1 *ssm.ListCommandsInput
	}{arg1})
	stub := fake.ListCommandsRequestStub
	fakeReturns := fake.listCommandsRequestReturns
	fake.recordInvocation("ListCommandsRequest", []interface{}{arg1})
	fake.listCommandsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListCommandsRequestCallCount() int {
	fake.listCommandsRequestMutex.RLock()
	defer fake.listCommandsRequestMutex.RUnlock()
	return len(fake.listCommandsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListCommandsRequestCalls(stub func(*ssm.ListCommandsInput) (*request.Request, *ssm.ListCommandsOutput)) {
	fake.listCommandsRequestMutex.Lock()
	defer fake.listCommandsRequestMutex.Unlock()
	fake.ListCommandsRequestStub = stub
}

func (fake *FakeSSMClient) ListCommandsRequestArgsForCall(i int) *ssm.ListCommandsInput {
	fake.listCommandsRequestMutex.RLock()
	defer fake.listCommandsRequestMutex.RUnlock()
	argsForCall := fake.listCommandsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListCommandsRequestReturns(result1 *request.Request, result2 *ssm.ListCommandsOutput) {
	fake.listCommandsRequestMutex.Lock()
	defer fake.listCommandsRequestMutex.Unlock()
	fake.ListCommandsRequestStub = nil
	fake.listCommandsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListCommandsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListCommandsOutput) {
	fake.listCommandsRequestMutex.Lock()
	defer fake.listCommandsRequestMutex.Unlock()
	fake.ListCommandsRequestStub = nil
	if fake.listCommandsRequestReturnsOnCall == nil {
		fake.listCommandsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListCommandsOutput
		})
	}
	fake.listCommandsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListCommandsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandsWithContext(arg1 context.Context, arg2 *ssm.ListCommandsInput, arg3 ...request.Option) (*ssm.ListCommandsOutput, error) {
	fake.listCommandsWithContextMutex.Lock()
	ret, specificReturn := fake.listCommandsWithContextReturnsOnCall[len(fake.listCommandsWithContextArgsForCall)]
	fake.listCommandsWithContextArgsForCall = append(fake.listCommandsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListCommandsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListCommandsWithContextStub
	fakeReturns := fake.listCommandsWithContextReturns
	fake.recordInvocation("ListCommandsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listCommandsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListCommandsWithContextCallCount() int {
	fake.listCommandsWithContextMutex.RLock()
	defer fake.listCommandsWithContextMutex.RUnlock()
	return len(fake.listCommandsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListCommandsWithContextCalls(stub func(context.Context, *ssm.ListCommandsInput, ...request.Option) (*ssm.ListCommandsOutput, error)) {
	fake.listCommandsWithContextMutex.Lock()
	defer fake.listCommandsWithContextMutex.Unlock()
	fake.ListCommandsWithContextStub = stub
}

func (fake *FakeSSMClient) ListCommandsWithContextArgsForCall(i int) (context.Context, *ssm.ListCommandsInput, []request.Option) {
	fake.listCommandsWithContextMutex.RLock()
	defer fake.listCommandsWithContextMutex.RUnlock()
	argsForCall := fake.listCommandsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListCommandsWithContextReturns(result1 *ssm.ListCommandsOutput, result2 error) {
	fake.listCommandsWithContextMutex.Lock()
	defer fake.listCommandsWithContextMutex.Unlock()
	fake.ListCommandsWithContextStub = nil
	fake.listCommandsWithContextReturns = struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListCommandsWithContextReturnsOnCall(i int, result1 *ssm.ListCommandsOutput, result2 error) {
	fake.listCommandsWithContextMutex.Lock()
	defer fake.listCommandsWithContextMutex.Unlock()
	fake.ListCommandsWithContextStub = nil
	if fake.listCommandsWithContextReturnsOnCall == nil {
		fake.listCommandsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListCommandsOutput
			result2 error
		})
	}
	fake.listCommandsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListCommandsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceItems(arg1 *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error) {
	fake.listComplianceItemsMutex.Lock()
	ret, specificReturn := fake.listComplianceItemsReturnsOnCall[len(fake.listComplianceItemsArgsForCall)]
	fake.listComplianceItemsArgsForCall = append(fake.listComplianceItemsArgsForCall, struct {
		arg1 *ssm.ListComplianceItemsInput
	}{arg1})
	stub := fake.ListComplianceItemsStub
	fakeReturns := fake.listComplianceItemsReturns
	fake.recordInvocation("ListComplianceItems", []interface{}{arg1})
	fake.listComplianceItemsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListComplianceItemsCallCount() int {
	fake.listComplianceItemsMutex.RLock()
	defer fake.listComplianceItemsMutex.RUnlock()
	return len(fake.listComplianceItemsArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceItemsCalls(stub func(*ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error)) {
	fake.listComplianceItemsMutex.Lock()
	defer fake.listComplianceItemsMutex.Unlock()
	fake.ListComplianceItemsStub = stub
}

func (fake *FakeSSMClient) ListComplianceItemsArgsForCall(i int) *ssm.ListComplianceItemsInput {
	fake.listComplianceItemsMutex.RLock()
	defer fake.listComplianceItemsMutex.RUnlock()
	argsForCall := fake.listComplianceItemsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListComplianceItemsReturns(result1 *ssm.ListComplianceItemsOutput, result2 error) {
	fake.listComplianceItemsMutex.Lock()
	defer fake.listComplianceItemsMutex.Unlock()
	fake.ListComplianceItemsStub = nil
	fake.listComplianceItemsReturns = struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceItemsReturnsOnCall(i int, result1 *ssm.ListComplianceItemsOutput, result2 error) {
	fake.listComplianceItemsMutex.Lock()
	defer fake.listComplianceItemsMutex.Unlock()
	fake.ListComplianceItemsStub = nil
	if fake.listComplianceItemsReturnsOnCall == nil {
		fake.listComplianceItemsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListComplianceItemsOutput
			result2 error
		})
	}
	fake.listComplianceItemsReturnsOnCall[i] = struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceItemsPages(arg1 *ssm.ListComplianceItemsInput, arg2 func(*ssm.ListComplianceItemsOutput, bool) bool) error {
	fake.listComplianceItemsPagesMutex.Lock()
	ret, specificReturn := fake.listComplianceItemsPagesReturnsOnCall[len(fake.listComplianceItemsPagesArgsForCall)]
	fake.listComplianceItemsPagesArgsForCall = append(fake.listComplianceItemsPagesArgsForCall, struct {
		arg1 *ssm.ListComplianceItemsInput
		arg2 func(*ssm.ListComplianceItemsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListComplianceItemsPagesStub
	fakeReturns := fake.listComplianceItemsPagesReturns
	fake.recordInvocation("ListComplianceItemsPages", []interface{}{arg1, arg2})
	fake.listComplianceItemsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListComplianceItemsPagesCallCount() int {
	fake.listComplianceItemsPagesMutex.RLock()
	defer fake.listComplianceItemsPagesMutex.RUnlock()
	return len(fake.listComplianceItemsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceItemsPagesCalls(stub func(*ssm.ListComplianceItemsInput, func(*ssm.ListComplianceItemsOutput, bool) bool) error) {
	fake.listComplianceItemsPagesMutex.Lock()
	defer fake.listComplianceItemsPagesMutex.Unlock()
	fake.ListComplianceItemsPagesStub = stub
}

func (fake *FakeSSMClient) ListComplianceItemsPagesArgsForCall(i int) (*ssm.ListComplianceItemsInput, func(*ssm.ListComplianceItemsOutput, bool) bool) {
	fake.listComplianceItemsPagesMutex.RLock()
	defer fake.listComplianceItemsPagesMutex.RUnlock()
	argsForCall := fake.listComplianceItemsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListComplianceItemsPagesReturns(result1 error) {
	fake.listComplianceItemsPagesMutex.Lock()
	defer fake.listComplianceItemsPagesMutex.Unlock()
	fake.ListComplianceItemsPagesStub = nil
	fake.listComplianceItemsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceItemsPagesReturnsOnCall(i int, result1 error) {
	fake.listComplianceItemsPagesMutex.Lock()
	defer fake.listComplianceItemsPagesMutex.Unlock()
	fake.ListComplianceItemsPagesStub = nil
	if fake.listComplianceItemsPagesReturnsOnCall == nil {
		fake.listComplianceItemsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listComplianceItemsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceItemsPagesWithContext(arg1 context.Context, arg2 *ssm.ListComplianceItemsInput, arg3 func(*ssm.ListComplianceItemsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listComplianceItemsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listComplianceItemsPagesWithContextReturnsOnCall[len(fake.listComplianceItemsPagesWithContextArgsForCall)]
	fake.listComplianceItemsPagesWithContextArgsForCall = append(fake.listComplianceItemsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceItemsInput
		arg3 func(*ssm.ListComplianceItemsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListComplianceItemsPagesWithContextStub
	fakeReturns := fake.listComplianceItemsPagesWithContextReturns
	fake.recordInvocation("ListComplianceItemsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listComplianceItemsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListComplianceItemsPagesWithContextCallCount() int {
	fake.listComplianceItemsPagesWithContextMutex.RLock()
	defer fake.listComplianceItemsPagesWithContextMutex.RUnlock()
	return len(fake.listComplianceItemsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceItemsPagesWithContextCalls(stub func(context.Context, *ssm.ListComplianceItemsInput, func(*ssm.ListComplianceItemsOutput, bool) bool, ...request.Option) error) {
	fake.listComplianceItemsPagesWithContextMutex.Lock()
	defer fake.listComplianceItemsPagesWithContextMutex.Unlock()
	fake.ListComplianceItemsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListComplianceItemsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListComplianceItemsInput, func(*ssm.ListComplianceItemsOutput, bool) bool, []request.Option) {
	fake.listComplianceItemsPagesWithContextMutex.RLock()
	defer fake.listComplianceItemsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listComplianceItemsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListComplianceItemsPagesWithContextReturns(result1 error) {
	fake.listComplianceItemsPagesWithContextMutex.Lock()
	defer fake.listComplianceItemsPagesWithContextMutex.Unlock()
	fake.ListComplianceItemsPagesWithContextStub = nil
	fake.listComplianceItemsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceItemsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listComplianceItemsPagesWithContextMutex.Lock()
	defer fake.listComplianceItemsPagesWithContextMutex.Unlock()
	fake.ListComplianceItemsPagesWithContextStub = nil
	if fake.listComplianceItemsPagesWithContextReturnsOnCall == nil {
		fake.listComplianceItemsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listComplianceItemsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceItemsRequest(arg1 *ssm.ListComplianceItemsInput) (*request.Request, *ssm.ListComplianceItemsOutput) {
	fake.listComplianceItemsRequestMutex.Lock()
	ret, specificReturn := fake.listComplianceItemsRequestReturnsOnCall[len(fake.listComplianceItemsRequestArgsForCall)]
	fake.listComplianceItemsRequestArgsForCall = append(fake.listComplianceItemsRequestArgsForCall, struct {
		arg1 *ssm.ListComplianceItemsInput
	}{arg1})
	stub := fake.ListComplianceItemsRequestStub
	fakeReturns := fake.listComplianceItemsRequestReturns
	fake.recordInvocation("ListComplianceItemsRequest", []interface{}{arg1})
	fake.listComplianceItemsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListComplianceItemsRequestCallCount() int {
	fake.listComplianceItemsRequestMutex.RLock()
	defer fake.listComplianceItemsRequestMutex.RUnlock()
	return len(fake.listComplianceItemsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceItemsRequestCalls(stub func(*ssm.ListComplianceItemsInput) (*request.Request, *ssm.ListComplianceItemsOutput)) {
	fake.listComplianceItemsRequestMutex.Lock()
	defer fake.listComplianceItemsRequestMutex.Unlock()
	fake.ListComplianceItemsRequestStub = stub
}

func (fake *FakeSSMClient) ListComplianceItemsRequestArgsForCall(i int) *ssm.ListComplianceItemsInput {
	fake.listComplianceItemsRequestMutex.RLock()
	defer fake.listComplianceItemsRequestMutex.RUnlock()
	argsForCall := fake.listComplianceItemsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListComplianceItemsRequestReturns(result1 *request.Request, result2 *ssm.ListComplianceItemsOutput) {
	fake.listComplianceItemsRequestMutex.Lock()
	defer fake.listComplianceItemsRequestMutex.Unlock()
	fake.ListComplianceItemsRequestStub = nil
	fake.listComplianceItemsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListComplianceItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceItemsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListComplianceItemsOutput) {
	fake.listComplianceItemsRequestMutex.Lock()
	defer fake.listComplianceItemsRequestMutex.Unlock()
	fake.ListComplianceItemsRequestStub = nil
	if fake.listComplianceItemsRequestReturnsOnCall == nil {
		fake.listComplianceItemsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListComplianceItemsOutput
		})
	}
	fake.listComplianceItemsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListComplianceItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceItemsWithContext(arg1 context.Context, arg2 *ssm.ListComplianceItemsInput, arg3 ...request.Option) (*ssm.ListComplianceItemsOutput, error) {
	fake.listComplianceItemsWithContextMutex.Lock()
	ret, specificReturn := fake.listComplianceItemsWithContextReturnsOnCall[len(fake.listComplianceItemsWithContextArgsForCall)]
	fake.listComplianceItemsWithContextArgsForCall = append(fake.listComplianceItemsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceItemsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListComplianceItemsWithContextStub
	fakeReturns := fake.listComplianceItemsWithContextReturns
	fake.recordInvocation("ListComplianceItemsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listComplianceItemsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListComplianceItemsWithContextCallCount() int {
	fake.listComplianceItemsWithContextMutex.RLock()
	defer fake.listComplianceItemsWithContextMutex.RUnlock()
	return len(fake.listComplianceItemsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceItemsWithContextCalls(stub func(context.Context, *ssm.ListComplianceItemsInput, ...request.Option) (*ssm.ListComplianceItemsOutput, error)) {
	fake.listComplianceItemsWithContextMutex.Lock()
	defer fake.listComplianceItemsWithContextMutex.Unlock()
	fake.ListComplianceItemsWithContextStub = stub
}

func (fake *FakeSSMClient) ListComplianceItemsWithContextArgsForCall(i int) (context.Context, *ssm.ListComplianceItemsInput, []request.Option) {
	fake.listComplianceItemsWithContextMutex.RLock()
	defer fake.listComplianceItemsWithContextMutex.RUnlock()
	argsForCall := fake.listComplianceItemsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListComplianceItemsWithContextReturns(result1 *ssm.ListComplianceItemsOutput, result2 error) {
	fake.listComplianceItemsWithContextMutex.Lock()
	defer fake.listComplianceItemsWithContextMutex.Unlock()
	fake.ListComplianceItemsWithContextStub = nil
	fake.listComplianceItemsWithContextReturns = struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceItemsWithContextReturnsOnCall(i int, result1 *ssm.ListComplianceItemsOutput, result2 error) {
	fake.listComplianceItemsWithContextMutex.Lock()
	defer fake.listComplianceItemsWithContextMutex.Unlock()
	fake.ListComplianceItemsWithContextStub = nil
	if fake.listComplianceItemsWithContextReturnsOnCall == nil {
		fake.listComplianceItemsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListComplianceItemsOutput
			result2 error
		})
	}
	fake.listComplianceItemsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceSummaries(arg1 *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error) {
	fake.listComplianceSummariesMutex.Lock()
	ret, specificReturn := fake.listComplianceSummariesReturnsOnCall[len(fake.listComplianceSummariesArgsForCall)]
	fake.listComplianceSummariesArgsForCall = append(fake.listComplianceSummariesArgsForCall, struct {
		arg1 *ssm.ListComplianceSummariesInput
	}{arg1})
	stub := fake.ListComplianceSummariesStub
	fakeReturns := fake.listComplianceSummariesReturns
	fake.recordInvocation("ListComplianceSummaries", []interface{}{arg1})
	fake.listComplianceSummariesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListComplianceSummariesCallCount() int {
	fake.listComplianceSummariesMutex.RLock()
	defer fake.listComplianceSummariesMutex.RUnlock()
	return len(fake.listComplianceSummariesArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceSummariesCalls(stub func(*ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error)) {
	fake.listComplianceSummariesMutex.Lock()
	defer fake.listComplianceSummariesMutex.Unlock()
	fake.ListComplianceSummariesStub = stub
}

func (fake *FakeSSMClient) ListComplianceSummariesArgsForCall(i int) *ssm.ListComplianceSummariesInput {
	fake.listComplianceSummariesMutex.RLock()
	defer fake.listComplianceSummariesMutex.RUnlock()
	argsForCall := fake.listComplianceSummariesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListComplianceSummariesReturns(result1 *ssm.ListComplianceSummariesOutput, result2 error) {
	fake.listComplianceSummariesMutex.Lock()
	defer fake.listComplianceSummariesMutex.Unlock()
	fake.ListComplianceSummariesStub = nil
	fake.listComplianceSummariesReturns = struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceSummariesReturnsOnCall(i int, result1 *ssm.ListComplianceSummariesOutput, result2 error) {
	fake.listComplianceSummariesMutex.Lock()
	defer fake.listComplianceSummariesMutex.Unlock()
	fake.ListComplianceSummariesStub = nil
	if fake.listComplianceSummariesReturnsOnCall == nil {
		fake.listComplianceSummariesReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListComplianceSummariesOutput
			result2 error
		})
	}
	fake.listComplianceSummariesReturnsOnCall[i] = struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceSummariesPages(arg1 *ssm.ListComplianceSummariesInput, arg2 func(*ssm.ListComplianceSummariesOutput, bool) bool) error {
	fake.listComplianceSummariesPagesMutex.Lock()
	ret, specificReturn := fake.listComplianceSummariesPagesReturnsOnCall[len(fake.listComplianceSummariesPagesArgsForCall)]
	fake.listComplianceSummariesPagesArgsForCall = append(fake.listComplianceSummariesPagesArgsForCall, struct {
		arg1 *ssm.ListComplianceSummariesInput
		arg2 func(*ssm.ListComplianceSummariesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListComplianceSummariesPagesStub
	fakeReturns := fake.listComplianceSummariesPagesReturns
	fake.recordInvocation("ListComplianceSummariesPages", []interface{}{arg1, arg2})
	fake.listComplianceSummariesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesCallCount() int {
	fake.listComplianceSummariesPagesMutex.RLock()
	defer fake.listComplianceSummariesPagesMutex.RUnlock()
	return len(fake.listComplianceSummariesPagesArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesCalls(stub func(*ssm.ListComplianceSummariesInput, func(*ssm.ListComplianceSummariesOutput, bool) bool) error) {
	fake.listComplianceSummariesPagesMutex.Lock()
	defer fake.listComplianceSummariesPagesMutex.Unlock()
	fake.ListComplianceSummariesPagesStub = stub
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesArgsForCall(i int) (*ssm.ListComplianceSummariesInput, func(*ssm.ListComplianceSummariesOutput, bool) bool) {
	fake.listComplianceSummariesPagesMutex.RLock()
	defer fake.listComplianceSummariesPagesMutex.RUnlock()
	argsForCall := fake.listComplianceSummariesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesReturns(result1 error) {
	fake.listComplianceSummariesPagesMutex.Lock()
	defer fake.listComplianceSummariesPagesMutex.Unlock()
	fake.ListComplianceSummariesPagesStub = nil
	fake.listComplianceSummariesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesReturnsOnCall(i int, result1 error) {
	fake.listComplianceSummariesPagesMutex.Lock()
	defer fake.listComplianceSummariesPagesMutex.Unlock()
	fake.ListComplianceSummariesPagesStub = nil
	if fake.listComplianceSummariesPagesReturnsOnCall == nil {
		fake.listComplianceSummariesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listComplianceSummariesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesWithContext(arg1 context.Context, arg2 *ssm.ListComplianceSummariesInput, arg3 func(*ssm.ListComplianceSummariesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listComplianceSummariesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listComplianceSummariesPagesWithContextReturnsOnCall[len(fake.listComplianceSummariesPagesWithContextArgsForCall)]
	fake.listComplianceSummariesPagesWithContextArgsForCall = append(fake.listComplianceSummariesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceSummariesInput
		arg3 func(*ssm.ListComplianceSummariesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListComplianceSummariesPagesWithContextStub
	fakeReturns := fake.listComplianceSummariesPagesWithContextReturns
	fake.recordInvocation("ListComplianceSummariesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listComplianceSummariesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesWithContextCallCount() int {
	fake.listComplianceSummariesPagesWithContextMutex.RLock()
	defer fake.listComplianceSummariesPagesWithContextMutex.RUnlock()
	return len(fake.listComplianceSummariesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesWithContextCalls(stub func(context.Context, *ssm.ListComplianceSummariesInput, func(*ssm.ListComplianceSummariesOutput, bool) bool, ...request.Option) error) {
	fake.listComplianceSummariesPagesWithContextMutex.Lock()
	defer fake.listComplianceSummariesPagesWithContextMutex.Unlock()
	fake.ListComplianceSummariesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListComplianceSummariesInput, func(*ssm.ListComplianceSummariesOutput, bool) bool, []request.Option) {
	fake.listComplianceSummariesPagesWithContextMutex.RLock()
	defer fake.listComplianceSummariesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listComplianceSummariesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesWithContextReturns(result1 error) {
	fake.listComplianceSummariesPagesWithContextMutex.Lock()
	defer fake.listComplianceSummariesPagesWithContextMutex.Unlock()
	fake.ListComplianceSummariesPagesWithContextStub = nil
	fake.listComplianceSummariesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceSummariesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listComplianceSummariesPagesWithContextMutex.Lock()
	defer fake.listComplianceSummariesPagesWithContextMutex.Unlock()
	fake.ListComplianceSummariesPagesWithContextStub = nil
	if fake.listComplianceSummariesPagesWithContextReturnsOnCall == nil {
		fake.listComplianceSummariesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listComplianceSummariesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListComplianceSummariesRequest(arg1 *ssm.ListComplianceSummariesInput) (*request.Request, *ssm.ListComplianceSummariesOutput) {
	fake.listComplianceSummariesRequestMutex.Lock()
	ret, specificReturn := fake.listComplianceSummariesRequestReturnsOnCall[len(fake.listComplianceSummariesRequestArgsForCall)]
	fake.listComplianceSummariesRequestArgsForCall = append(fake.listComplianceSummariesRequestArgsForCall, struct {
		arg1 *ssm.ListComplianceSummariesInput
	}{arg1})
	stub := fake.ListComplianceSummariesRequestStub
	fakeReturns := fake.listComplianceSummariesRequestReturns
	fake.recordInvocation("ListComplianceSummariesRequest", []interface{}{arg1})
	fake.listComplianceSummariesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListComplianceSummariesRequestCallCount() int {
	fake.listComplianceSummariesRequestMutex.RLock()
	defer fake.listComplianceSummariesRequestMutex.RUnlock()
	return len(fake.listComplianceSummariesRequestArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceSummariesRequestCalls(stub func(*ssm.ListComplianceSummariesInput) (*request.Request, *ssm.ListComplianceSummariesOutput)) {
	fake.listComplianceSummariesRequestMutex.Lock()
	defer fake.listComplianceSummariesRequestMutex.Unlock()
	fake.ListComplianceSummariesRequestStub = stub
}

func (fake *FakeSSMClient) ListComplianceSummariesRequestArgsForCall(i int) *ssm.ListComplianceSummariesInput {
	fake.listComplianceSummariesRequestMutex.RLock()
	defer fake.listComplianceSummariesRequestMutex.RUnlock()
	argsForCall := fake.listComplianceSummariesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListComplianceSummariesRequestReturns(result1 *request.Request, result2 *ssm.ListComplianceSummariesOutput) {
	fake.listComplianceSummariesRequestMutex.Lock()
	defer fake.listComplianceSummariesRequestMutex.Unlock()
	fake.ListComplianceSummariesRequestStub = nil
	fake.listComplianceSummariesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListComplianceSummariesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceSummariesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListComplianceSummariesOutput) {
	fake.listComplianceSummariesRequestMutex.Lock()
	defer fake.listComplianceSummariesRequestMutex.Unlock()
	fake.ListComplianceSummariesRequestStub = nil
	if fake.listComplianceSummariesRequestReturnsOnCall == nil {
		fake.listComplianceSummariesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListComplianceSummariesOutput
		})
	}
	fake.listComplianceSummariesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListComplianceSummariesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceSummariesWithContext(arg1 context.Context, arg2 *ssm.ListComplianceSummariesInput, arg3 ...request.Option) (*ssm.ListComplianceSummariesOutput, error) {
	fake.listComplianceSummariesWithContextMutex.Lock()
	ret, specificReturn := fake.listComplianceSummariesWithContextReturnsOnCall[len(fake.listComplianceSummariesWithContextArgsForCall)]
	fake.listComplianceSummariesWithContextArgsForCall = append(fake.listComplianceSummariesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListComplianceSummariesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListComplianceSummariesWithContextStub
	fakeReturns := fake.listComplianceSummariesWithContextReturns
	fake.recordInvocation("ListComplianceSummariesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listComplianceSummariesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListComplianceSummariesWithContextCallCount() int {
	fake.listComplianceSummariesWithContextMutex.RLock()
	defer fake.listComplianceSummariesWithContextMutex.RUnlock()
	return len(fake.listComplianceSummariesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListComplianceSummariesWithContextCalls(stub func(context.Context, *ssm.ListComplianceSummariesInput, ...request.Option) (*ssm.ListComplianceSummariesOutput, error)) {
	fake.listComplianceSummariesWithContextMutex.Lock()
	defer fake.listComplianceSummariesWithContextMutex.Unlock()
	fake.ListComplianceSummariesWithContextStub = stub
}

func (fake *FakeSSMClient) ListComplianceSummariesWithContextArgsForCall(i int) (context.Context, *ssm.ListComplianceSummariesInput, []request.Option) {
	fake.listComplianceSummariesWithContextMutex.RLock()
	defer fake.listComplianceSummariesWithContextMutex.RUnlock()
	argsForCall := fake.listComplianceSummariesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListComplianceSummariesWithContextReturns(result1 *ssm.ListComplianceSummariesOutput, result2 error) {
	fake.listComplianceSummariesWithContextMutex.Lock()
	defer fake.listComplianceSummariesWithContextMutex.Unlock()
	fake.ListComplianceSummariesWithContextStub = nil
	fake.listComplianceSummariesWithContextReturns = struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListComplianceSummariesWithContextReturnsOnCall(i int, result1 *ssm.ListComplianceSummariesOutput, result2 error) {
	fake.listComplianceSummariesWithContextMutex.Lock()
	defer fake.listComplianceSummariesWithContextMutex.Unlock()
	fake.ListComplianceSummariesWithContextStub = nil
	if fake.listComplianceSummariesWithContextReturnsOnCall == nil {
		fake.listComplianceSummariesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListComplianceSummariesOutput
			result2 error
		})
	}
	fake.listComplianceSummariesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentMetadataHistory(arg1 *ssm.ListDocumentMetadataHistoryInput) (*ssm.ListDocumentMetadataHistoryOutput, error) {
	fake.listDocumentMetadataHistoryMutex.Lock()
	ret, specificReturn := fake.listDocumentMetadataHistoryReturnsOnCall[len(fake.listDocumentMetadataHistoryArgsForCall)]
	fake.listDocumentMetadataHistoryArgsForCall = append(fake.listDocumentMetadataHistoryArgsForCall, struct {
		arg1 *ssm.ListDocumentMetadataHistoryInput
	}{arg1})
	stub := fake.ListDocumentMetadataHistoryStub
	fakeReturns := fake.listDocumentMetadataHistoryReturns
	fake.recordInvocation("ListDocumentMetadataHistory", []interface{}{arg1})
	fake.listDocumentMetadataHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryCallCount() int {
	fake.listDocumentMetadataHistoryMutex.RLock()
	defer fake.listDocumentMetadataHistoryMutex.RUnlock()
	return len(fake.listDocumentMetadataHistoryArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryCalls(stub func(*ssm.ListDocumentMetadataHistoryInput) (*ssm.ListDocumentMetadataHistoryOutput, error)) {
	fake.listDocumentMetadataHistoryMutex.Lock()
	defer fake.listDocumentMetadataHistoryMutex.Unlock()
	fake.ListDocumentMetadataHistoryStub = stub
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryArgsForCall(i int) *ssm.ListDocumentMetadataHistoryInput {
	fake.listDocumentMetadataHistoryMutex.RLock()
	defer fake.listDocumentMetadataHistoryMutex.RUnlock()
	argsForCall := fake.listDocumentMetadataHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryReturns(result1 *ssm.ListDocumentMetadataHistoryOutput, result2 error) {
	fake.listDocumentMetadataHistoryMutex.Lock()
	defer fake.listDocumentMetadataHistoryMutex.Unlock()
	fake.ListDocumentMetadataHistoryStub = nil
	fake.listDocumentMetadataHistoryReturns = struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryReturnsOnCall(i int, result1 *ssm.ListDocumentMetadataHistoryOutput, result2 error) {
	fake.listDocumentMetadataHistoryMutex.Lock()
	defer fake.listDocumentMetadataHistoryMutex.Unlock()
	fake.ListDocumentMetadataHistoryStub = nil
	if fake.listDocumentMetadataHistoryReturnsOnCall == nil {
		fake.listDocumentMetadataHistoryReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListDocumentMetadataHistoryOutput
			result2 error
		})
	}
	fake.listDocumentMetadataHistoryReturnsOnCall[i] = struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryRequest(arg1 *ssm.ListDocumentMetadataHistoryInput) (*request.Request, *ssm.ListDocumentMetadataHistoryOutput) {
	fake.listDocumentMetadataHistoryRequestMutex.Lock()
	ret, specificReturn := fake.listDocumentMetadataHistoryRequestReturnsOnCall[len(fake.listDocumentMetadataHistoryRequestArgsForCall)]
	fake.listDocumentMetadataHistoryRequestArgsForCall = append(fake.listDocumentMetadataHistoryRequestArgsForCall, struct {
		arg1 *ssm.ListDocumentMetadataHistoryInput
	}{arg1})
	stub := fake.ListDocumentMetadataHistoryRequestStub
	fakeReturns := fake.listDocumentMetadataHistoryRequestReturns
	fake.recordInvocation("ListDocumentMetadataHistoryRequest", []interface{}{arg1})
	fake.listDocumentMetadataHistoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryRequestCallCount() int {
	fake.listDocumentMetadataHistoryRequestMutex.RLock()
	defer fake.listDocumentMetadataHistoryRequestMutex.RUnlock()
	return len(fake.listDocumentMetadataHistoryRequestArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryRequestCalls(stub func(*ssm.ListDocumentMetadataHistoryInput) (*request.Request, *ssm.ListDocumentMetadataHistoryOutput)) {
	fake.listDocumentMetadataHistoryRequestMutex.Lock()
	defer fake.listDocumentMetadataHistoryRequestMutex.Unlock()
	fake.ListDocumentMetadataHistoryRequestStub = stub
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryRequestArgsForCall(i int) *ssm.ListDocumentMetadataHistoryInput {
	fake.listDocumentMetadataHistoryRequestMutex.RLock()
	defer fake.listDocumentMetadataHistoryRequestMutex.RUnlock()
	argsForCall := fake.listDocumentMetadataHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryRequestReturns(result1 *request.Request, result2 *ssm.ListDocumentMetadataHistoryOutput) {
	fake.listDocumentMetadataHistoryRequestMutex.Lock()
	defer fake.listDocumentMetadataHistoryRequestMutex.Unlock()
	fake.ListDocumentMetadataHistoryRequestStub = nil
	fake.listDocumentMetadataHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListDocumentMetadataHistoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListDocumentMetadataHistoryOutput) {
	fake.listDocumentMetadataHistoryRequestMutex.Lock()
	defer fake.listDocumentMetadataHistoryRequestMutex.Unlock()
	fake.ListDocumentMetadataHistoryRequestStub = nil
	if fake.listDocumentMetadataHistoryRequestReturnsOnCall == nil {
		fake.listDocumentMetadataHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListDocumentMetadataHistoryOutput
		})
	}
	fake.listDocumentMetadataHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListDocumentMetadataHistoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryWithContext(arg1 context.Context, arg2 *ssm.ListDocumentMetadataHistoryInput, arg3 ...request.Option) (*ssm.ListDocumentMetadataHistoryOutput, error) {
	fake.listDocumentMetadataHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.listDocumentMetadataHistoryWithContextReturnsOnCall[len(fake.listDocumentMetadataHistoryWithContextArgsForCall)]
	fake.listDocumentMetadataHistoryWithContextArgsForCall = append(fake.listDocumentMetadataHistoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentMetadataHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDocumentMetadataHistoryWithContextStub
	fakeReturns := fake.listDocumentMetadataHistoryWithContextReturns
	fake.recordInvocation("ListDocumentMetadataHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDocumentMetadataHistoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryWithContextCallCount() int {
	fake.listDocumentMetadataHistoryWithContextMutex.RLock()
	defer fake.listDocumentMetadataHistoryWithContextMutex.RUnlock()
	return len(fake.listDocumentMetadataHistoryWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryWithContextCalls(stub func(context.Context, *ssm.ListDocumentMetadataHistoryInput, ...request.Option) (*ssm.ListDocumentMetadataHistoryOutput, error)) {
	fake.listDocumentMetadataHistoryWithContextMutex.Lock()
	defer fake.listDocumentMetadataHistoryWithContextMutex.Unlock()
	fake.ListDocumentMetadataHistoryWithContextStub = stub
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryWithContextArgsForCall(i int) (context.Context, *ssm.ListDocumentMetadataHistoryInput, []request.Option) {
	fake.listDocumentMetadataHistoryWithContextMutex.RLock()
	defer fake.listDocumentMetadataHistoryWithContextMutex.RUnlock()
	argsForCall := fake.listDocumentMetadataHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryWithContextReturns(result1 *ssm.ListDocumentMetadataHistoryOutput, result2 error) {
	fake.listDocumentMetadataHistoryWithContextMutex.Lock()
	defer fake.listDocumentMetadataHistoryWithContextMutex.Unlock()
	fake.ListDocumentMetadataHistoryWithContextStub = nil
	fake.listDocumentMetadataHistoryWithContextReturns = struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentMetadataHistoryWithContextReturnsOnCall(i int, result1 *ssm.ListDocumentMetadataHistoryOutput, result2 error) {
	fake.listDocumentMetadataHistoryWithContextMutex.Lock()
	defer fake.listDocumentMetadataHistoryWithContextMutex.Unlock()
	fake.ListDocumentMetadataHistoryWithContextStub = nil
	if fake.listDocumentMetadataHistoryWithContextReturnsOnCall == nil {
		fake.listDocumentMetadataHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListDocumentMetadataHistoryOutput
			result2 error
		})
	}
	fake.listDocumentMetadataHistoryWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListDocumentMetadataHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentVersions(arg1 *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error) {
	fake.listDocumentVersionsMutex.Lock()
	ret, specificReturn := fake.listDocumentVersionsReturnsOnCall[len(fake.listDocumentVersionsArgsForCall)]
	fake.listDocumentVersionsArgsForCall = append(fake.listDocumentVersionsArgsForCall, struct {
		arg1 *ssm.ListDocumentVersionsInput
	}{arg1})
	stub := fake.ListDocumentVersionsStub
	fakeReturns := fake.listDocumentVersionsReturns
	fake.recordInvocation("ListDocumentVersions", []interface{}{arg1})
	fake.listDocumentVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentVersionsCallCount() int {
	fake.listDocumentVersionsMutex.RLock()
	defer fake.listDocumentVersionsMutex.RUnlock()
	return len(fake.listDocumentVersionsArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentVersionsCalls(stub func(*ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error)) {
	fake.listDocumentVersionsMutex.Lock()
	defer fake.listDocumentVersionsMutex.Unlock()
	fake.ListDocumentVersionsStub = stub
}

func (fake *FakeSSMClient) ListDocumentVersionsArgsForCall(i int) *ssm.ListDocumentVersionsInput {
	fake.listDocumentVersionsMutex.RLock()
	defer fake.listDocumentVersionsMutex.RUnlock()
	argsForCall := fake.listDocumentVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListDocumentVersionsReturns(result1 *ssm.ListDocumentVersionsOutput, result2 error) {
	fake.listDocumentVersionsMutex.Lock()
	defer fake.listDocumentVersionsMutex.Unlock()
	fake.ListDocumentVersionsStub = nil
	fake.listDocumentVersionsReturns = struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentVersionsReturnsOnCall(i int, result1 *ssm.ListDocumentVersionsOutput, result2 error) {
	fake.listDocumentVersionsMutex.Lock()
	defer fake.listDocumentVersionsMutex.Unlock()
	fake.ListDocumentVersionsStub = nil
	if fake.listDocumentVersionsReturnsOnCall == nil {
		fake.listDocumentVersionsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListDocumentVersionsOutput
			result2 error
		})
	}
	fake.listDocumentVersionsReturnsOnCall[i] = struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentVersionsPages(arg1 *ssm.ListDocumentVersionsInput, arg2 func(*ssm.ListDocumentVersionsOutput, bool) bool) error {
	fake.listDocumentVersionsPagesMutex.Lock()
	ret, specificReturn := fake.listDocumentVersionsPagesReturnsOnCall[len(fake.listDocumentVersionsPagesArgsForCall)]
	fake.listDocumentVersionsPagesArgsForCall = append(fake.listDocumentVersionsPagesArgsForCall, struct {
		arg1 *ssm.ListDocumentVersionsInput
		arg2 func(*ssm.ListDocumentVersionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListDocumentVersionsPagesStub
	fakeReturns := fake.listDocumentVersionsPagesReturns
	fake.recordInvocation("ListDocumentVersionsPages", []interface{}{arg1, arg2})
	fake.listDocumentVersionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesCallCount() int {
	fake.listDocumentVersionsPagesMutex.RLock()
	defer fake.listDocumentVersionsPagesMutex.RUnlock()
	return len(fake.listDocumentVersionsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesCalls(stub func(*ssm.ListDocumentVersionsInput, func(*ssm.ListDocumentVersionsOutput, bool) bool) error) {
	fake.listDocumentVersionsPagesMutex.Lock()
	defer fake.listDocumentVersionsPagesMutex.Unlock()
	fake.ListDocumentVersionsPagesStub = stub
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesArgsForCall(i int) (*ssm.ListDocumentVersionsInput, func(*ssm.ListDocumentVersionsOutput, bool) bool) {
	fake.listDocumentVersionsPagesMutex.RLock()
	defer fake.listDocumentVersionsPagesMutex.RUnlock()
	argsForCall := fake.listDocumentVersionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesReturns(result1 error) {
	fake.listDocumentVersionsPagesMutex.Lock()
	defer fake.listDocumentVersionsPagesMutex.Unlock()
	fake.ListDocumentVersionsPagesStub = nil
	fake.listDocumentVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.listDocumentVersionsPagesMutex.Lock()
	defer fake.listDocumentVersionsPagesMutex.Unlock()
	fake.ListDocumentVersionsPagesStub = nil
	if fake.listDocumentVersionsPagesReturnsOnCall == nil {
		fake.listDocumentVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDocumentVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesWithContext(arg1 context.Context, arg2 *ssm.ListDocumentVersionsInput, arg3 func(*ssm.ListDocumentVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listDocumentVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listDocumentVersionsPagesWithContextReturnsOnCall[len(fake.listDocumentVersionsPagesWithContextArgsForCall)]
	fake.listDocumentVersionsPagesWithContextArgsForCall = append(fake.listDocumentVersionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentVersionsInput
		arg3 func(*ssm.ListDocumentVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListDocumentVersionsPagesWithContextStub
	fakeReturns := fake.listDocumentVersionsPagesWithContextReturns
	fake.recordInvocation("ListDocumentVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listDocumentVersionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesWithContextCallCount() int {
	fake.listDocumentVersionsPagesWithContextMutex.RLock()
	defer fake.listDocumentVersionsPagesWithContextMutex.RUnlock()
	return len(fake.listDocumentVersionsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesWithContextCalls(stub func(context.Context, *ssm.ListDocumentVersionsInput, func(*ssm.ListDocumentVersionsOutput, bool) bool, ...request.Option) error) {
	fake.listDocumentVersionsPagesWithContextMutex.Lock()
	defer fake.listDocumentVersionsPagesWithContextMutex.Unlock()
	fake.ListDocumentVersionsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListDocumentVersionsInput, func(*ssm.ListDocumentVersionsOutput, bool) bool, []request.Option) {
	fake.listDocumentVersionsPagesWithContextMutex.RLock()
	defer fake.listDocumentVersionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listDocumentVersionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesWithContextReturns(result1 error) {
	fake.listDocumentVersionsPagesWithContextMutex.Lock()
	defer fake.listDocumentVersionsPagesWithContextMutex.Unlock()
	fake.ListDocumentVersionsPagesWithContextStub = nil
	fake.listDocumentVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listDocumentVersionsPagesWithContextMutex.Lock()
	defer fake.listDocumentVersionsPagesWithContextMutex.Unlock()
	fake.ListDocumentVersionsPagesWithContextStub = nil
	if fake.listDocumentVersionsPagesWithContextReturnsOnCall == nil {
		fake.listDocumentVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDocumentVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentVersionsRequest(arg1 *ssm.ListDocumentVersionsInput) (*request.Request, *ssm.ListDocumentVersionsOutput) {
	fake.listDocumentVersionsRequestMutex.Lock()
	ret, specificReturn := fake.listDocumentVersionsRequestReturnsOnCall[len(fake.listDocumentVersionsRequestArgsForCall)]
	fake.listDocumentVersionsRequestArgsForCall = append(fake.listDocumentVersionsRequestArgsForCall, struct {
		arg1 *ssm.ListDocumentVersionsInput
	}{arg1})
	stub := fake.ListDocumentVersionsRequestStub
	fakeReturns := fake.listDocumentVersionsRequestReturns
	fake.recordInvocation("ListDocumentVersionsRequest", []interface{}{arg1})
	fake.listDocumentVersionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentVersionsRequestCallCount() int {
	fake.listDocumentVersionsRequestMutex.RLock()
	defer fake.listDocumentVersionsRequestMutex.RUnlock()
	return len(fake.listDocumentVersionsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentVersionsRequestCalls(stub func(*ssm.ListDocumentVersionsInput) (*request.Request, *ssm.ListDocumentVersionsOutput)) {
	fake.listDocumentVersionsRequestMutex.Lock()
	defer fake.listDocumentVersionsRequestMutex.Unlock()
	fake.ListDocumentVersionsRequestStub = stub
}

func (fake *FakeSSMClient) ListDocumentVersionsRequestArgsForCall(i int) *ssm.ListDocumentVersionsInput {
	fake.listDocumentVersionsRequestMutex.RLock()
	defer fake.listDocumentVersionsRequestMutex.RUnlock()
	argsForCall := fake.listDocumentVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListDocumentVersionsRequestReturns(result1 *request.Request, result2 *ssm.ListDocumentVersionsOutput) {
	fake.listDocumentVersionsRequestMutex.Lock()
	defer fake.listDocumentVersionsRequestMutex.Unlock()
	fake.ListDocumentVersionsRequestStub = nil
	fake.listDocumentVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListDocumentVersionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListDocumentVersionsOutput) {
	fake.listDocumentVersionsRequestMutex.Lock()
	defer fake.listDocumentVersionsRequestMutex.Unlock()
	fake.ListDocumentVersionsRequestStub = nil
	if fake.listDocumentVersionsRequestReturnsOnCall == nil {
		fake.listDocumentVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListDocumentVersionsOutput
		})
	}
	fake.listDocumentVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListDocumentVersionsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentVersionsWithContext(arg1 context.Context, arg2 *ssm.ListDocumentVersionsInput, arg3 ...request.Option) (*ssm.ListDocumentVersionsOutput, error) {
	fake.listDocumentVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.listDocumentVersionsWithContextReturnsOnCall[len(fake.listDocumentVersionsWithContextArgsForCall)]
	fake.listDocumentVersionsWithContextArgsForCall = append(fake.listDocumentVersionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDocumentVersionsWithContextStub
	fakeReturns := fake.listDocumentVersionsWithContextReturns
	fake.recordInvocation("ListDocumentVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDocumentVersionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentVersionsWithContextCallCount() int {
	fake.listDocumentVersionsWithContextMutex.RLock()
	defer fake.listDocumentVersionsWithContextMutex.RUnlock()
	return len(fake.listDocumentVersionsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentVersionsWithContextCalls(stub func(context.Context, *ssm.ListDocumentVersionsInput, ...request.Option) (*ssm.ListDocumentVersionsOutput, error)) {
	fake.listDocumentVersionsWithContextMutex.Lock()
	defer fake.listDocumentVersionsWithContextMutex.Unlock()
	fake.ListDocumentVersionsWithContextStub = stub
}

func (fake *FakeSSMClient) ListDocumentVersionsWithContextArgsForCall(i int) (context.Context, *ssm.ListDocumentVersionsInput, []request.Option) {
	fake.listDocumentVersionsWithContextMutex.RLock()
	defer fake.listDocumentVersionsWithContextMutex.RUnlock()
	argsForCall := fake.listDocumentVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListDocumentVersionsWithContextReturns(result1 *ssm.ListDocumentVersionsOutput, result2 error) {
	fake.listDocumentVersionsWithContextMutex.Lock()
	defer fake.listDocumentVersionsWithContextMutex.Unlock()
	fake.ListDocumentVersionsWithContextStub = nil
	fake.listDocumentVersionsWithContextReturns = struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentVersionsWithContextReturnsOnCall(i int, result1 *ssm.ListDocumentVersionsOutput, result2 error) {
	fake.listDocumentVersionsWithContextMutex.Lock()
	defer fake.listDocumentVersionsWithContextMutex.Unlock()
	fake.ListDocumentVersionsWithContextStub = nil
	if fake.listDocumentVersionsWithContextReturnsOnCall == nil {
		fake.listDocumentVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListDocumentVersionsOutput
			result2 error
		})
	}
	fake.listDocumentVersionsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListDocumentVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocuments(arg1 *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error) {
	fake.listDocumentsMutex.Lock()
	ret, specificReturn := fake.listDocumentsReturnsOnCall[len(fake.listDocumentsArgsForCall)]
	fake.listDocumentsArgsForCall = append(fake.listDocumentsArgsForCall, struct {
		arg1 *ssm.ListDocumentsInput
	}{arg1})
	stub := fake.ListDocumentsStub
	fakeReturns := fake.listDocumentsReturns
	fake.recordInvocation("ListDocuments", []interface{}{arg1})
	fake.listDocumentsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentsCallCount() int {
	fake.listDocumentsMutex.RLock()
	defer fake.listDocumentsMutex.RUnlock()
	return len(fake.listDocumentsArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentsCalls(stub func(*ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error)) {
	fake.listDocumentsMutex.Lock()
	defer fake.listDocumentsMutex.Unlock()
	fake.ListDocumentsStub = stub
}

func (fake *FakeSSMClient) ListDocumentsArgsForCall(i int) *ssm.ListDocumentsInput {
	fake.listDocumentsMutex.RLock()
	defer fake.listDocumentsMutex.RUnlock()
	argsForCall := fake.listDocumentsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListDocumentsReturns(result1 *ssm.ListDocumentsOutput, result2 error) {
	fake.listDocumentsMutex.Lock()
	defer fake.listDocumentsMutex.Unlock()
	fake.ListDocumentsStub = nil
	fake.listDocumentsReturns = struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentsReturnsOnCall(i int, result1 *ssm.ListDocumentsOutput, result2 error) {
	fake.listDocumentsMutex.Lock()
	defer fake.listDocumentsMutex.Unlock()
	fake.ListDocumentsStub = nil
	if fake.listDocumentsReturnsOnCall == nil {
		fake.listDocumentsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListDocumentsOutput
			result2 error
		})
	}
	fake.listDocumentsReturnsOnCall[i] = struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentsPages(arg1 *ssm.ListDocumentsInput, arg2 func(*ssm.ListDocumentsOutput, bool) bool) error {
	fake.listDocumentsPagesMutex.Lock()
	ret, specificReturn := fake.listDocumentsPagesReturnsOnCall[len(fake.listDocumentsPagesArgsForCall)]
	fake.listDocumentsPagesArgsForCall = append(fake.listDocumentsPagesArgsForCall, struct {
		arg1 *ssm.ListDocumentsInput
		arg2 func(*ssm.ListDocumentsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListDocumentsPagesStub
	fakeReturns := fake.listDocumentsPagesReturns
	fake.recordInvocation("ListDocumentsPages", []interface{}{arg1, arg2})
	fake.listDocumentsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListDocumentsPagesCallCount() int {
	fake.listDocumentsPagesMutex.RLock()
	defer fake.listDocumentsPagesMutex.RUnlock()
	return len(fake.listDocumentsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentsPagesCalls(stub func(*ssm.ListDocumentsInput, func(*ssm.ListDocumentsOutput, bool) bool) error) {
	fake.listDocumentsPagesMutex.Lock()
	defer fake.listDocumentsPagesMutex.Unlock()
	fake.ListDocumentsPagesStub = stub
}

func (fake *FakeSSMClient) ListDocumentsPagesArgsForCall(i int) (*ssm.ListDocumentsInput, func(*ssm.ListDocumentsOutput, bool) bool) {
	fake.listDocumentsPagesMutex.RLock()
	defer fake.listDocumentsPagesMutex.RUnlock()
	argsForCall := fake.listDocumentsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListDocumentsPagesReturns(result1 error) {
	fake.listDocumentsPagesMutex.Lock()
	defer fake.listDocumentsPagesMutex.Unlock()
	fake.ListDocumentsPagesStub = nil
	fake.listDocumentsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentsPagesReturnsOnCall(i int, result1 error) {
	fake.listDocumentsPagesMutex.Lock()
	defer fake.listDocumentsPagesMutex.Unlock()
	fake.ListDocumentsPagesStub = nil
	if fake.listDocumentsPagesReturnsOnCall == nil {
		fake.listDocumentsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDocumentsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentsPagesWithContext(arg1 context.Context, arg2 *ssm.ListDocumentsInput, arg3 func(*ssm.ListDocumentsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listDocumentsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listDocumentsPagesWithContextReturnsOnCall[len(fake.listDocumentsPagesWithContextArgsForCall)]
	fake.listDocumentsPagesWithContextArgsForCall = append(fake.listDocumentsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentsInput
		arg3 func(*ssm.ListDocumentsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListDocumentsPagesWithContextStub
	fakeReturns := fake.listDocumentsPagesWithContextReturns
	fake.recordInvocation("ListDocumentsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listDocumentsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListDocumentsPagesWithContextCallCount() int {
	fake.listDocumentsPagesWithContextMutex.RLock()
	defer fake.listDocumentsPagesWithContextMutex.RUnlock()
	return len(fake.listDocumentsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentsPagesWithContextCalls(stub func(context.Context, *ssm.ListDocumentsInput, func(*ssm.ListDocumentsOutput, bool) bool, ...request.Option) error) {
	fake.listDocumentsPagesWithContextMutex.Lock()
	defer fake.listDocumentsPagesWithContextMutex.Unlock()
	fake.ListDocumentsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListDocumentsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListDocumentsInput, func(*ssm.ListDocumentsOutput, bool) bool, []request.Option) {
	fake.listDocumentsPagesWithContextMutex.RLock()
	defer fake.listDocumentsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listDocumentsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListDocumentsPagesWithContextReturns(result1 error) {
	fake.listDocumentsPagesWithContextMutex.Lock()
	defer fake.listDocumentsPagesWithContextMutex.Unlock()
	fake.ListDocumentsPagesWithContextStub = nil
	fake.listDocumentsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listDocumentsPagesWithContextMutex.Lock()
	defer fake.listDocumentsPagesWithContextMutex.Unlock()
	fake.ListDocumentsPagesWithContextStub = nil
	if fake.listDocumentsPagesWithContextReturnsOnCall == nil {
		fake.listDocumentsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDocumentsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListDocumentsRequest(arg1 *ssm.ListDocumentsInput) (*request.Request, *ssm.ListDocumentsOutput) {
	fake.listDocumentsRequestMutex.Lock()
	ret, specificReturn := fake.listDocumentsRequestReturnsOnCall[len(fake.listDocumentsRequestArgsForCall)]
	fake.listDocumentsRequestArgsForCall = append(fake.listDocumentsRequestArgsForCall, struct {
		arg1 *ssm.ListDocumentsInput
	}{arg1})
	stub := fake.ListDocumentsRequestStub
	fakeReturns := fake.listDocumentsRequestReturns
	fake.recordInvocation("ListDocumentsRequest", []interface{}{arg1})
	fake.listDocumentsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentsRequestCallCount() int {
	fake.listDocumentsRequestMutex.RLock()
	defer fake.listDocumentsRequestMutex.RUnlock()
	return len(fake.listDocumentsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentsRequestCalls(stub func(*ssm.ListDocumentsInput) (*request.Request, *ssm.ListDocumentsOutput)) {
	fake.listDocumentsRequestMutex.Lock()
	defer fake.listDocumentsRequestMutex.Unlock()
	fake.ListDocumentsRequestStub = stub
}

func (fake *FakeSSMClient) ListDocumentsRequestArgsForCall(i int) *ssm.ListDocumentsInput {
	fake.listDocumentsRequestMutex.RLock()
	defer fake.listDocumentsRequestMutex.RUnlock()
	argsForCall := fake.listDocumentsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListDocumentsRequestReturns(result1 *request.Request, result2 *ssm.ListDocumentsOutput) {
	fake.listDocumentsRequestMutex.Lock()
	defer fake.listDocumentsRequestMutex.Unlock()
	fake.ListDocumentsRequestStub = nil
	fake.listDocumentsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListDocumentsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListDocumentsOutput) {
	fake.listDocumentsRequestMutex.Lock()
	defer fake.listDocumentsRequestMutex.Unlock()
	fake.ListDocumentsRequestStub = nil
	if fake.listDocumentsRequestReturnsOnCall == nil {
		fake.listDocumentsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListDocumentsOutput
		})
	}
	fake.listDocumentsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListDocumentsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentsWithContext(arg1 context.Context, arg2 *ssm.ListDocumentsInput, arg3 ...request.Option) (*ssm.ListDocumentsOutput, error) {
	fake.listDocumentsWithContextMutex.Lock()
	ret, specificReturn := fake.listDocumentsWithContextReturnsOnCall[len(fake.listDocumentsWithContextArgsForCall)]
	fake.listDocumentsWithContextArgsForCall = append(fake.listDocumentsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListDocumentsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDocumentsWithContextStub
	fakeReturns := fake.listDocumentsWithContextReturns
	fake.recordInvocation("ListDocumentsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDocumentsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListDocumentsWithContextCallCount() int {
	fake.listDocumentsWithContextMutex.RLock()
	defer fake.listDocumentsWithContextMutex.RUnlock()
	return len(fake.listDocumentsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListDocumentsWithContextCalls(stub func(context.Context, *ssm.ListDocumentsInput, ...request.Option) (*ssm.ListDocumentsOutput, error)) {
	fake.listDocumentsWithContextMutex.Lock()
	defer fake.listDocumentsWithContextMutex.Unlock()
	fake.ListDocumentsWithContextStub = stub
}

func (fake *FakeSSMClient) ListDocumentsWithContextArgsForCall(i int) (context.Context, *ssm.ListDocumentsInput, []request.Option) {
	fake.listDocumentsWithContextMutex.RLock()
	defer fake.listDocumentsWithContextMutex.RUnlock()
	argsForCall := fake.listDocumentsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListDocumentsWithContextReturns(result1 *ssm.ListDocumentsOutput, result2 error) {
	fake.listDocumentsWithContextMutex.Lock()
	defer fake.listDocumentsWithContextMutex.Unlock()
	fake.ListDocumentsWithContextStub = nil
	fake.listDocumentsWithContextReturns = struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListDocumentsWithContextReturnsOnCall(i int, result1 *ssm.ListDocumentsOutput, result2 error) {
	fake.listDocumentsWithContextMutex.Lock()
	defer fake.listDocumentsWithContextMutex.Unlock()
	fake.ListDocumentsWithContextStub = nil
	if fake.listDocumentsWithContextReturnsOnCall == nil {
		fake.listDocumentsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListDocumentsOutput
			result2 error
		})
	}
	fake.listDocumentsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListDocumentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListInventoryEntries(arg1 *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error) {
	fake.listInventoryEntriesMutex.Lock()
	ret, specificReturn := fake.listInventoryEntriesReturnsOnCall[len(fake.listInventoryEntriesArgsForCall)]
	fake.listInventoryEntriesArgsForCall = append(fake.listInventoryEntriesArgsForCall, struct {
		arg1 *ssm.ListInventoryEntriesInput
	}{arg1})
	stub := fake.ListInventoryEntriesStub
	fakeReturns := fake.listInventoryEntriesReturns
	fake.recordInvocation("ListInventoryEntries", []interface{}{arg1})
	fake.listInventoryEntriesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListInventoryEntriesCallCount() int {
	fake.listInventoryEntriesMutex.RLock()
	defer fake.listInventoryEntriesMutex.RUnlock()
	return len(fake.listInventoryEntriesArgsForCall)
}

func (fake *FakeSSMClient) ListInventoryEntriesCalls(stub func(*ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error)) {
	fake.listInventoryEntriesMutex.Lock()
	defer fake.listInventoryEntriesMutex.Unlock()
	fake.ListInventoryEntriesStub = stub
}

func (fake *FakeSSMClient) ListInventoryEntriesArgsForCall(i int) *ssm.ListInventoryEntriesInput {
	fake.listInventoryEntriesMutex.RLock()
	defer fake.listInventoryEntriesMutex.RUnlock()
	argsForCall := fake.listInventoryEntriesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListInventoryEntriesReturns(result1 *ssm.ListInventoryEntriesOutput, result2 error) {
	fake.listInventoryEntriesMutex.Lock()
	defer fake.listInventoryEntriesMutex.Unlock()
	fake.ListInventoryEntriesStub = nil
	fake.listInventoryEntriesReturns = struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListInventoryEntriesReturnsOnCall(i int, result1 *ssm.ListInventoryEntriesOutput, result2 error) {
	fake.listInventoryEntriesMutex.Lock()
	defer fake.listInventoryEntriesMutex.Unlock()
	fake.ListInventoryEntriesStub = nil
	if fake.listInventoryEntriesReturnsOnCall == nil {
		fake.listInventoryEntriesReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListInventoryEntriesOutput
			result2 error
		})
	}
	fake.listInventoryEntriesReturnsOnCall[i] = struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListInventoryEntriesRequest(arg1 *ssm.ListInventoryEntriesInput) (*request.Request, *ssm.ListInventoryEntriesOutput) {
	fake.listInventoryEntriesRequestMutex.Lock()
	ret, specificReturn := fake.listInventoryEntriesRequestReturnsOnCall[len(fake.listInventoryEntriesRequestArgsForCall)]
	fake.listInventoryEntriesRequestArgsForCall = append(fake.listInventoryEntriesRequestArgsForCall, struct {
		arg1 *ssm.ListInventoryEntriesInput
	}{arg1})
	stub := fake.ListInventoryEntriesRequestStub
	fakeReturns := fake.listInventoryEntriesRequestReturns
	fake.recordInvocation("ListInventoryEntriesRequest", []interface{}{arg1})
	fake.listInventoryEntriesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListInventoryEntriesRequestCallCount() int {
	fake.listInventoryEntriesRequestMutex.RLock()
	defer fake.listInventoryEntriesRequestMutex.RUnlock()
	return len(fake.listInventoryEntriesRequestArgsForCall)
}

func (fake *FakeSSMClient) ListInventoryEntriesRequestCalls(stub func(*ssm.ListInventoryEntriesInput) (*request.Request, *ssm.ListInventoryEntriesOutput)) {
	fake.listInventoryEntriesRequestMutex.Lock()
	defer fake.listInventoryEntriesRequestMutex.Unlock()
	fake.ListInventoryEntriesRequestStub = stub
}

func (fake *FakeSSMClient) ListInventoryEntriesRequestArgsForCall(i int) *ssm.ListInventoryEntriesInput {
	fake.listInventoryEntriesRequestMutex.RLock()
	defer fake.listInventoryEntriesRequestMutex.RUnlock()
	argsForCall := fake.listInventoryEntriesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListInventoryEntriesRequestReturns(result1 *request.Request, result2 *ssm.ListInventoryEntriesOutput) {
	fake.listInventoryEntriesRequestMutex.Lock()
	defer fake.listInventoryEntriesRequestMutex.Unlock()
	fake.ListInventoryEntriesRequestStub = nil
	fake.listInventoryEntriesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListInventoryEntriesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListInventoryEntriesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListInventoryEntriesOutput) {
	fake.listInventoryEntriesRequestMutex.Lock()
	defer fake.listInventoryEntriesRequestMutex.Unlock()
	fake.ListInventoryEntriesRequestStub = nil
	if fake.listInventoryEntriesRequestReturnsOnCall == nil {
		fake.listInventoryEntriesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListInventoryEntriesOutput
		})
	}
	fake.listInventoryEntriesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListInventoryEntriesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListInventoryEntriesWithContext(arg1 context.Context, arg2 *ssm.ListInventoryEntriesInput, arg3 ...request.Option) (*ssm.ListInventoryEntriesOutput, error) {
	fake.listInventoryEntriesWithContextMutex.Lock()
	ret, specificReturn := fake.listInventoryEntriesWithContextReturnsOnCall[len(fake.listInventoryEntriesWithContextArgsForCall)]
	fake.listInventoryEntriesWithContextArgsForCall = append(fake.listInventoryEntriesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListInventoryEntriesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListInventoryEntriesWithContextStub
	fakeReturns := fake.listInventoryEntriesWithContextReturns
	fake.recordInvocation("ListInventoryEntriesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listInventoryEntriesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListInventoryEntriesWithContextCallCount() int {
	fake.listInventoryEntriesWithContextMutex.RLock()
	defer fake.listInventoryEntriesWithContextMutex.RUnlock()
	return len(fake.listInventoryEntriesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListInventoryEntriesWithContextCalls(stub func(context.Context, *ssm.ListInventoryEntriesInput, ...request.Option) (*ssm.ListInventoryEntriesOutput, error)) {
	fake.listInventoryEntriesWithContextMutex.Lock()
	defer fake.listInventoryEntriesWithContextMutex.Unlock()
	fake.ListInventoryEntriesWithContextStub = stub
}

func (fake *FakeSSMClient) ListInventoryEntriesWithContextArgsForCall(i int) (context.Context, *ssm.ListInventoryEntriesInput, []request.Option) {
	fake.listInventoryEntriesWithContextMutex.RLock()
	defer fake.listInventoryEntriesWithContextMutex.RUnlock()
	argsForCall := fake.listInventoryEntriesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListInventoryEntriesWithContextReturns(result1 *ssm.ListInventoryEntriesOutput, result2 error) {
	fake.listInventoryEntriesWithContextMutex.Lock()
	defer fake.listInventoryEntriesWithContextMutex.Unlock()
	fake.ListInventoryEntriesWithContextStub = nil
	fake.listInventoryEntriesWithContextReturns = struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListInventoryEntriesWithContextReturnsOnCall(i int, result1 *ssm.ListInventoryEntriesOutput, result2 error) {
	fake.listInventoryEntriesWithContextMutex.Lock()
	defer fake.listInventoryEntriesWithContextMutex.Unlock()
	fake.ListInventoryEntriesWithContextStub = nil
	if fake.listInventoryEntriesWithContextReturnsOnCall == nil {
		fake.listInventoryEntriesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListInventoryEntriesOutput
			result2 error
		})
	}
	fake.listInventoryEntriesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListInventoryEntriesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemEvents(arg1 *ssm.ListOpsItemEventsInput) (*ssm.ListOpsItemEventsOutput, error) {
	fake.listOpsItemEventsMutex.Lock()
	ret, specificReturn := fake.listOpsItemEventsReturnsOnCall[len(fake.listOpsItemEventsArgsForCall)]
	fake.listOpsItemEventsArgsForCall = append(fake.listOpsItemEventsArgsForCall, struct {
		arg1 *ssm.ListOpsItemEventsInput
	}{arg1})
	stub := fake.ListOpsItemEventsStub
	fakeReturns := fake.listOpsItemEventsReturns
	fake.recordInvocation("ListOpsItemEvents", []interface{}{arg1})
	fake.listOpsItemEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsItemEventsCallCount() int {
	fake.listOpsItemEventsMutex.RLock()
	defer fake.listOpsItemEventsMutex.RUnlock()
	return len(fake.listOpsItemEventsArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemEventsCalls(stub func(*ssm.ListOpsItemEventsInput) (*ssm.ListOpsItemEventsOutput, error)) {
	fake.listOpsItemEventsMutex.Lock()
	defer fake.listOpsItemEventsMutex.Unlock()
	fake.ListOpsItemEventsStub = stub
}

func (fake *FakeSSMClient) ListOpsItemEventsArgsForCall(i int) *ssm.ListOpsItemEventsInput {
	fake.listOpsItemEventsMutex.RLock()
	defer fake.listOpsItemEventsMutex.RUnlock()
	argsForCall := fake.listOpsItemEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListOpsItemEventsReturns(result1 *ssm.ListOpsItemEventsOutput, result2 error) {
	fake.listOpsItemEventsMutex.Lock()
	defer fake.listOpsItemEventsMutex.Unlock()
	fake.ListOpsItemEventsStub = nil
	fake.listOpsItemEventsReturns = struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemEventsReturnsOnCall(i int, result1 *ssm.ListOpsItemEventsOutput, result2 error) {
	fake.listOpsItemEventsMutex.Lock()
	defer fake.listOpsItemEventsMutex.Unlock()
	fake.ListOpsItemEventsStub = nil
	if fake.listOpsItemEventsReturnsOnCall == nil {
		fake.listOpsItemEventsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListOpsItemEventsOutput
			result2 error
		})
	}
	fake.listOpsItemEventsReturnsOnCall[i] = struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemEventsPages(arg1 *ssm.ListOpsItemEventsInput, arg2 func(*ssm.ListOpsItemEventsOutput, bool) bool) error {
	fake.listOpsItemEventsPagesMutex.Lock()
	ret, specificReturn := fake.listOpsItemEventsPagesReturnsOnCall[len(fake.listOpsItemEventsPagesArgsForCall)]
	fake.listOpsItemEventsPagesArgsForCall = append(fake.listOpsItemEventsPagesArgsForCall, struct {
		arg1 *ssm.ListOpsItemEventsInput
		arg2 func(*ssm.ListOpsItemEventsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListOpsItemEventsPagesStub
	fakeReturns := fake.listOpsItemEventsPagesReturns
	fake.recordInvocation("ListOpsItemEventsPages", []interface{}{arg1, arg2})
	fake.listOpsItemEventsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesCallCount() int {
	fake.listOpsItemEventsPagesMutex.RLock()
	defer fake.listOpsItemEventsPagesMutex.RUnlock()
	return len(fake.listOpsItemEventsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesCalls(stub func(*ssm.ListOpsItemEventsInput, func(*ssm.ListOpsItemEventsOutput, bool) bool) error) {
	fake.listOpsItemEventsPagesMutex.Lock()
	defer fake.listOpsItemEventsPagesMutex.Unlock()
	fake.ListOpsItemEventsPagesStub = stub
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesArgsForCall(i int) (*ssm.ListOpsItemEventsInput, func(*ssm.ListOpsItemEventsOutput, bool) bool) {
	fake.listOpsItemEventsPagesMutex.RLock()
	defer fake.listOpsItemEventsPagesMutex.RUnlock()
	argsForCall := fake.listOpsItemEventsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesReturns(result1 error) {
	fake.listOpsItemEventsPagesMutex.Lock()
	defer fake.listOpsItemEventsPagesMutex.Unlock()
	fake.ListOpsItemEventsPagesStub = nil
	fake.listOpsItemEventsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesReturnsOnCall(i int, result1 error) {
	fake.listOpsItemEventsPagesMutex.Lock()
	defer fake.listOpsItemEventsPagesMutex.Unlock()
	fake.ListOpsItemEventsPagesStub = nil
	if fake.listOpsItemEventsPagesReturnsOnCall == nil {
		fake.listOpsItemEventsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listOpsItemEventsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesWithContext(arg1 context.Context, arg2 *ssm.ListOpsItemEventsInput, arg3 func(*ssm.ListOpsItemEventsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listOpsItemEventsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listOpsItemEventsPagesWithContextReturnsOnCall[len(fake.listOpsItemEventsPagesWithContextArgsForCall)]
	fake.listOpsItemEventsPagesWithContextArgsForCall = append(fake.listOpsItemEventsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemEventsInput
		arg3 func(*ssm.ListOpsItemEventsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListOpsItemEventsPagesWithContextStub
	fakeReturns := fake.listOpsItemEventsPagesWithContextReturns
	fake.recordInvocation("ListOpsItemEventsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listOpsItemEventsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesWithContextCallCount() int {
	fake.listOpsItemEventsPagesWithContextMutex.RLock()
	defer fake.listOpsItemEventsPagesWithContextMutex.RUnlock()
	return len(fake.listOpsItemEventsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesWithContextCalls(stub func(context.Context, *ssm.ListOpsItemEventsInput, func(*ssm.ListOpsItemEventsOutput, bool) bool, ...request.Option) error) {
	fake.listOpsItemEventsPagesWithContextMutex.Lock()
	defer fake.listOpsItemEventsPagesWithContextMutex.Unlock()
	fake.ListOpsItemEventsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListOpsItemEventsInput, func(*ssm.ListOpsItemEventsOutput, bool) bool, []request.Option) {
	fake.listOpsItemEventsPagesWithContextMutex.RLock()
	defer fake.listOpsItemEventsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listOpsItemEventsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesWithContextReturns(result1 error) {
	fake.listOpsItemEventsPagesWithContextMutex.Lock()
	defer fake.listOpsItemEventsPagesWithContextMutex.Unlock()
	fake.ListOpsItemEventsPagesWithContextStub = nil
	fake.listOpsItemEventsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemEventsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listOpsItemEventsPagesWithContextMutex.Lock()
	defer fake.listOpsItemEventsPagesWithContextMutex.Unlock()
	fake.ListOpsItemEventsPagesWithContextStub = nil
	if fake.listOpsItemEventsPagesWithContextReturnsOnCall == nil {
		fake.listOpsItemEventsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listOpsItemEventsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemEventsRequest(arg1 *ssm.ListOpsItemEventsInput) (*request.Request, *ssm.ListOpsItemEventsOutput) {
	fake.listOpsItemEventsRequestMutex.Lock()
	ret, specificReturn := fake.listOpsItemEventsRequestReturnsOnCall[len(fake.listOpsItemEventsRequestArgsForCall)]
	fake.listOpsItemEventsRequestArgsForCall = append(fake.listOpsItemEventsRequestArgsForCall, struct {
		arg1 *ssm.ListOpsItemEventsInput
	}{arg1})
	stub := fake.ListOpsItemEventsRequestStub
	fakeReturns := fake.listOpsItemEventsRequestReturns
	fake.recordInvocation("ListOpsItemEventsRequest", []interface{}{arg1})
	fake.listOpsItemEventsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsItemEventsRequestCallCount() int {
	fake.listOpsItemEventsRequestMutex.RLock()
	defer fake.listOpsItemEventsRequestMutex.RUnlock()
	return len(fake.listOpsItemEventsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemEventsRequestCalls(stub func(*ssm.ListOpsItemEventsInput) (*request.Request, *ssm.ListOpsItemEventsOutput)) {
	fake.listOpsItemEventsRequestMutex.Lock()
	defer fake.listOpsItemEventsRequestMutex.Unlock()
	fake.ListOpsItemEventsRequestStub = stub
}

func (fake *FakeSSMClient) ListOpsItemEventsRequestArgsForCall(i int) *ssm.ListOpsItemEventsInput {
	fake.listOpsItemEventsRequestMutex.RLock()
	defer fake.listOpsItemEventsRequestMutex.RUnlock()
	argsForCall := fake.listOpsItemEventsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListOpsItemEventsRequestReturns(result1 *request.Request, result2 *ssm.ListOpsItemEventsOutput) {
	fake.listOpsItemEventsRequestMutex.Lock()
	defer fake.listOpsItemEventsRequestMutex.Unlock()
	fake.ListOpsItemEventsRequestStub = nil
	fake.listOpsItemEventsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemEventsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemEventsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListOpsItemEventsOutput) {
	fake.listOpsItemEventsRequestMutex.Lock()
	defer fake.listOpsItemEventsRequestMutex.Unlock()
	fake.ListOpsItemEventsRequestStub = nil
	if fake.listOpsItemEventsRequestReturnsOnCall == nil {
		fake.listOpsItemEventsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListOpsItemEventsOutput
		})
	}
	fake.listOpsItemEventsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemEventsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemEventsWithContext(arg1 context.Context, arg2 *ssm.ListOpsItemEventsInput, arg3 ...request.Option) (*ssm.ListOpsItemEventsOutput, error) {
	fake.listOpsItemEventsWithContextMutex.Lock()
	ret, specificReturn := fake.listOpsItemEventsWithContextReturnsOnCall[len(fake.listOpsItemEventsWithContextArgsForCall)]
	fake.listOpsItemEventsWithContextArgsForCall = append(fake.listOpsItemEventsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemEventsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListOpsItemEventsWithContextStub
	fakeReturns := fake.listOpsItemEventsWithContextReturns
	fake.recordInvocation("ListOpsItemEventsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listOpsItemEventsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsItemEventsWithContextCallCount() int {
	fake.listOpsItemEventsWithContextMutex.RLock()
	defer fake.listOpsItemEventsWithContextMutex.RUnlock()
	return len(fake.listOpsItemEventsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemEventsWithContextCalls(stub func(context.Context, *ssm.ListOpsItemEventsInput, ...request.Option) (*ssm.ListOpsItemEventsOutput, error)) {
	fake.listOpsItemEventsWithContextMutex.Lock()
	defer fake.listOpsItemEventsWithContextMutex.Unlock()
	fake.ListOpsItemEventsWithContextStub = stub
}

func (fake *FakeSSMClient) ListOpsItemEventsWithContextArgsForCall(i int) (context.Context, *ssm.ListOpsItemEventsInput, []request.Option) {
	fake.listOpsItemEventsWithContextMutex.RLock()
	defer fake.listOpsItemEventsWithContextMutex.RUnlock()
	argsForCall := fake.listOpsItemEventsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListOpsItemEventsWithContextReturns(result1 *ssm.ListOpsItemEventsOutput, result2 error) {
	fake.listOpsItemEventsWithContextMutex.Lock()
	defer fake.listOpsItemEventsWithContextMutex.Unlock()
	fake.ListOpsItemEventsWithContextStub = nil
	fake.listOpsItemEventsWithContextReturns = struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemEventsWithContextReturnsOnCall(i int, result1 *ssm.ListOpsItemEventsOutput, result2 error) {
	fake.listOpsItemEventsWithContextMutex.Lock()
	defer fake.listOpsItemEventsWithContextMutex.Unlock()
	fake.ListOpsItemEventsWithContextStub = nil
	if fake.listOpsItemEventsWithContextReturnsOnCall == nil {
		fake.listOpsItemEventsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListOpsItemEventsOutput
			result2 error
		})
	}
	fake.listOpsItemEventsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListOpsItemEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItems(arg1 *ssm.ListOpsItemRelatedItemsInput) (*ssm.ListOpsItemRelatedItemsOutput, error) {
	fake.listOpsItemRelatedItemsMutex.Lock()
	ret, specificReturn := fake.listOpsItemRelatedItemsReturnsOnCall[len(fake.listOpsItemRelatedItemsArgsForCall)]
	fake.listOpsItemRelatedItemsArgsForCall = append(fake.listOpsItemRelatedItemsArgsForCall, struct {
		arg1 *ssm.ListOpsItemRelatedItemsInput
	}{arg1})
	stub := fake.ListOpsItemRelatedItemsStub
	fakeReturns := fake.listOpsItemRelatedItemsReturns
	fake.recordInvocation("ListOpsItemRelatedItems", []interface{}{arg1})
	fake.listOpsItemRelatedItemsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsCallCount() int {
	fake.listOpsItemRelatedItemsMutex.RLock()
	defer fake.listOpsItemRelatedItemsMutex.RUnlock()
	return len(fake.listOpsItemRelatedItemsArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsCalls(stub func(*ssm.ListOpsItemRelatedItemsInput) (*ssm.ListOpsItemRelatedItemsOutput, error)) {
	fake.listOpsItemRelatedItemsMutex.Lock()
	defer fake.listOpsItemRelatedItemsMutex.Unlock()
	fake.ListOpsItemRelatedItemsStub = stub
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsArgsForCall(i int) *ssm.ListOpsItemRelatedItemsInput {
	fake.listOpsItemRelatedItemsMutex.RLock()
	defer fake.listOpsItemRelatedItemsMutex.RUnlock()
	argsForCall := fake.listOpsItemRelatedItemsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsReturns(result1 *ssm.ListOpsItemRelatedItemsOutput, result2 error) {
	fake.listOpsItemRelatedItemsMutex.Lock()
	defer fake.listOpsItemRelatedItemsMutex.Unlock()
	fake.ListOpsItemRelatedItemsStub = nil
	fake.listOpsItemRelatedItemsReturns = struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsReturnsOnCall(i int, result1 *ssm.ListOpsItemRelatedItemsOutput, result2 error) {
	fake.listOpsItemRelatedItemsMutex.Lock()
	defer fake.listOpsItemRelatedItemsMutex.Unlock()
	fake.ListOpsItemRelatedItemsStub = nil
	if fake.listOpsItemRelatedItemsReturnsOnCall == nil {
		fake.listOpsItemRelatedItemsReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListOpsItemRelatedItemsOutput
			result2 error
		})
	}
	fake.listOpsItemRelatedItemsReturnsOnCall[i] = struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPages(arg1 *ssm.ListOpsItemRelatedItemsInput, arg2 func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool) error {
	fake.listOpsItemRelatedItemsPagesMutex.Lock()
	ret, specificReturn := fake.listOpsItemRelatedItemsPagesReturnsOnCall[len(fake.listOpsItemRelatedItemsPagesArgsForCall)]
	fake.listOpsItemRelatedItemsPagesArgsForCall = append(fake.listOpsItemRelatedItemsPagesArgsForCall, struct {
		arg1 *ssm.ListOpsItemRelatedItemsInput
		arg2 func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListOpsItemRelatedItemsPagesStub
	fakeReturns := fake.listOpsItemRelatedItemsPagesReturns
	fake.recordInvocation("ListOpsItemRelatedItemsPages", []interface{}{arg1, arg2})
	fake.listOpsItemRelatedItemsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesCallCount() int {
	fake.listOpsItemRelatedItemsPagesMutex.RLock()
	defer fake.listOpsItemRelatedItemsPagesMutex.RUnlock()
	return len(fake.listOpsItemRelatedItemsPagesArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesCalls(stub func(*ssm.ListOpsItemRelatedItemsInput, func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool) error) {
	fake.listOpsItemRelatedItemsPagesMutex.Lock()
	defer fake.listOpsItemRelatedItemsPagesMutex.Unlock()
	fake.ListOpsItemRelatedItemsPagesStub = stub
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesArgsForCall(i int) (*ssm.ListOpsItemRelatedItemsInput, func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool) {
	fake.listOpsItemRelatedItemsPagesMutex.RLock()
	defer fake.listOpsItemRelatedItemsPagesMutex.RUnlock()
	argsForCall := fake.listOpsItemRelatedItemsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesReturns(result1 error) {
	fake.listOpsItemRelatedItemsPagesMutex.Lock()
	defer fake.listOpsItemRelatedItemsPagesMutex.Unlock()
	fake.ListOpsItemRelatedItemsPagesStub = nil
	fake.listOpsItemRelatedItemsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesReturnsOnCall(i int, result1 error) {
	fake.listOpsItemRelatedItemsPagesMutex.Lock()
	defer fake.listOpsItemRelatedItemsPagesMutex.Unlock()
	fake.ListOpsItemRelatedItemsPagesStub = nil
	if fake.listOpsItemRelatedItemsPagesReturnsOnCall == nil {
		fake.listOpsItemRelatedItemsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listOpsItemRelatedItemsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesWithContext(arg1 context.Context, arg2 *ssm.ListOpsItemRelatedItemsInput, arg3 func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listOpsItemRelatedItemsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listOpsItemRelatedItemsPagesWithContextReturnsOnCall[len(fake.listOpsItemRelatedItemsPagesWithContextArgsForCall)]
	fake.listOpsItemRelatedItemsPagesWithContextArgsForCall = append(fake.listOpsItemRelatedItemsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemRelatedItemsInput
		arg3 func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListOpsItemRelatedItemsPagesWithContextStub
	fakeReturns := fake.listOpsItemRelatedItemsPagesWithContextReturns
	fake.recordInvocation("ListOpsItemRelatedItemsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listOpsItemRelatedItemsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesWithContextCallCount() int {
	fake.listOpsItemRelatedItemsPagesWithContextMutex.RLock()
	defer fake.listOpsItemRelatedItemsPagesWithContextMutex.RUnlock()
	return len(fake.listOpsItemRelatedItemsPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesWithContextCalls(stub func(context.Context, *ssm.ListOpsItemRelatedItemsInput, func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool, ...request.Option) error) {
	fake.listOpsItemRelatedItemsPagesWithContextMutex.Lock()
	defer fake.listOpsItemRelatedItemsPagesWithContextMutex.Unlock()
	fake.ListOpsItemRelatedItemsPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListOpsItemRelatedItemsInput, func(*ssm.ListOpsItemRelatedItemsOutput, bool) bool, []request.Option) {
	fake.listOpsItemRelatedItemsPagesWithContextMutex.RLock()
	defer fake.listOpsItemRelatedItemsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listOpsItemRelatedItemsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesWithContextReturns(result1 error) {
	fake.listOpsItemRelatedItemsPagesWithContextMutex.Lock()
	defer fake.listOpsItemRelatedItemsPagesWithContextMutex.Unlock()
	fake.ListOpsItemRelatedItemsPagesWithContextStub = nil
	fake.listOpsItemRelatedItemsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listOpsItemRelatedItemsPagesWithContextMutex.Lock()
	defer fake.listOpsItemRelatedItemsPagesWithContextMutex.Unlock()
	fake.ListOpsItemRelatedItemsPagesWithContextStub = nil
	if fake.listOpsItemRelatedItemsPagesWithContextReturnsOnCall == nil {
		fake.listOpsItemRelatedItemsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listOpsItemRelatedItemsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsRequest(arg1 *ssm.ListOpsItemRelatedItemsInput) (*request.Request, *ssm.ListOpsItemRelatedItemsOutput) {
	fake.listOpsItemRelatedItemsRequestMutex.Lock()
	ret, specificReturn := fake.listOpsItemRelatedItemsRequestReturnsOnCall[len(fake.listOpsItemRelatedItemsRequestArgsForCall)]
	fake.listOpsItemRelatedItemsRequestArgsForCall = append(fake.listOpsItemRelatedItemsRequestArgsForCall, struct {
		arg1 *ssm.ListOpsItemRelatedItemsInput
	}{arg1})
	stub := fake.ListOpsItemRelatedItemsRequestStub
	fakeReturns := fake.listOpsItemRelatedItemsRequestReturns
	fake.recordInvocation("ListOpsItemRelatedItemsRequest", []interface{}{arg1})
	fake.listOpsItemRelatedItemsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsRequestCallCount() int {
	fake.listOpsItemRelatedItemsRequestMutex.RLock()
	defer fake.listOpsItemRelatedItemsRequestMutex.RUnlock()
	return len(fake.listOpsItemRelatedItemsRequestArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsRequestCalls(stub func(*ssm.ListOpsItemRelatedItemsInput) (*request.Request, *ssm.ListOpsItemRelatedItemsOutput)) {
	fake.listOpsItemRelatedItemsRequestMutex.Lock()
	defer fake.listOpsItemRelatedItemsRequestMutex.Unlock()
	fake.ListOpsItemRelatedItemsRequestStub = stub
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsRequestArgsForCall(i int) *ssm.ListOpsItemRelatedItemsInput {
	fake.listOpsItemRelatedItemsRequestMutex.RLock()
	defer fake.listOpsItemRelatedItemsRequestMutex.RUnlock()
	argsForCall := fake.listOpsItemRelatedItemsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsRequestReturns(result1 *request.Request, result2 *ssm.ListOpsItemRelatedItemsOutput) {
	fake.listOpsItemRelatedItemsRequestMutex.Lock()
	defer fake.listOpsItemRelatedItemsRequestMutex.Unlock()
	fake.ListOpsItemRelatedItemsRequestStub = nil
	fake.listOpsItemRelatedItemsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemRelatedItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListOpsItemRelatedItemsOutput) {
	fake.listOpsItemRelatedItemsRequestMutex.Lock()
	defer fake.listOpsItemRelatedItemsRequestMutex.Unlock()
	fake.ListOpsItemRelatedItemsRequestStub = nil
	if fake.listOpsItemRelatedItemsRequestReturnsOnCall == nil {
		fake.listOpsItemRelatedItemsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListOpsItemRelatedItemsOutput
		})
	}
	fake.listOpsItemRelatedItemsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListOpsItemRelatedItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsWithContext(arg1 context.Context, arg2 *ssm.ListOpsItemRelatedItemsInput, arg3 ...request.Option) (*ssm.ListOpsItemRelatedItemsOutput, error) {
	fake.listOpsItemRelatedItemsWithContextMutex.Lock()
	ret, specificReturn := fake.listOpsItemRelatedItemsWithContextReturnsOnCall[len(fake.listOpsItemRelatedItemsWithContextArgsForCall)]
	fake.listOpsItemRelatedItemsWithContextArgsForCall = append(fake.listOpsItemRelatedItemsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListOpsItemRelatedItemsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListOpsItemRelatedItemsWithContextStub
	fakeReturns := fake.listOpsItemRelatedItemsWithContextReturns
	fake.recordInvocation("ListOpsItemRelatedItemsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listOpsItemRelatedItemsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsWithContextCallCount() int {
	fake.listOpsItemRelatedItemsWithContextMutex.RLock()
	defer fake.listOpsItemRelatedItemsWithContextMutex.RUnlock()
	return len(fake.listOpsItemRelatedItemsWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsWithContextCalls(stub func(context.Context, *ssm.ListOpsItemRelatedItemsInput, ...request.Option) (*ssm.ListOpsItemRelatedItemsOutput, error)) {
	fake.listOpsItemRelatedItemsWithContextMutex.Lock()
	defer fake.listOpsItemRelatedItemsWithContextMutex.Unlock()
	fake.ListOpsItemRelatedItemsWithContextStub = stub
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsWithContextArgsForCall(i int) (context.Context, *ssm.ListOpsItemRelatedItemsInput, []request.Option) {
	fake.listOpsItemRelatedItemsWithContextMutex.RLock()
	defer fake.listOpsItemRelatedItemsWithContextMutex.RUnlock()
	argsForCall := fake.listOpsItemRelatedItemsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsWithContextReturns(result1 *ssm.ListOpsItemRelatedItemsOutput, result2 error) {
	fake.listOpsItemRelatedItemsWithContextMutex.Lock()
	defer fake.listOpsItemRelatedItemsWithContextMutex.Unlock()
	fake.ListOpsItemRelatedItemsWithContextStub = nil
	fake.listOpsItemRelatedItemsWithContextReturns = struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsItemRelatedItemsWithContextReturnsOnCall(i int, result1 *ssm.ListOpsItemRelatedItemsOutput, result2 error) {
	fake.listOpsItemRelatedItemsWithContextMutex.Lock()
	defer fake.listOpsItemRelatedItemsWithContextMutex.Unlock()
	fake.ListOpsItemRelatedItemsWithContextStub = nil
	if fake.listOpsItemRelatedItemsWithContextReturnsOnCall == nil {
		fake.listOpsItemRelatedItemsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListOpsItemRelatedItemsOutput
			result2 error
		})
	}
	fake.listOpsItemRelatedItemsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListOpsItemRelatedItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsMetadata(arg1 *ssm.ListOpsMetadataInput) (*ssm.ListOpsMetadataOutput, error) {
	fake.listOpsMetadataMutex.Lock()
	ret, specificReturn := fake.listOpsMetadataReturnsOnCall[len(fake.listOpsMetadataArgsForCall)]
	fake.listOpsMetadataArgsForCall = append(fake.listOpsMetadataArgsForCall, struct {
		arg1 *ssm.ListOpsMetadataInput
	}{arg1})
	stub := fake.ListOpsMetadataStub
	fakeReturns := fake.listOpsMetadataReturns
	fake.recordInvocation("ListOpsMetadata", []interface{}{arg1})
	fake.listOpsMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsMetadataCallCount() int {
	fake.listOpsMetadataMutex.RLock()
	defer fake.listOpsMetadataMutex.RUnlock()
	return len(fake.listOpsMetadataArgsForCall)
}

func (fake *FakeSSMClient) ListOpsMetadataCalls(stub func(*ssm.ListOpsMetadataInput) (*ssm.ListOpsMetadataOutput, error)) {
	fake.listOpsMetadataMutex.Lock()
	defer fake.listOpsMetadataMutex.Unlock()
	fake.ListOpsMetadataStub = stub
}

func (fake *FakeSSMClient) ListOpsMetadataArgsForCall(i int) *ssm.ListOpsMetadataInput {
	fake.listOpsMetadataMutex.RLock()
	defer fake.listOpsMetadataMutex.RUnlock()
	argsForCall := fake.listOpsMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListOpsMetadataReturns(result1 *ssm.ListOpsMetadataOutput, result2 error) {
	fake.listOpsMetadataMutex.Lock()
	defer fake.listOpsMetadataMutex.Unlock()
	fake.ListOpsMetadataStub = nil
	fake.listOpsMetadataReturns = struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsMetadataReturnsOnCall(i int, result1 *ssm.ListOpsMetadataOutput, result2 error) {
	fake.listOpsMetadataMutex.Lock()
	defer fake.listOpsMetadataMutex.Unlock()
	fake.ListOpsMetadataStub = nil
	if fake.listOpsMetadataReturnsOnCall == nil {
		fake.listOpsMetadataReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListOpsMetadataOutput
			result2 error
		})
	}
	fake.listOpsMetadataReturnsOnCall[i] = struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsMetadataPages(arg1 *ssm.ListOpsMetadataInput, arg2 func(*ssm.ListOpsMetadataOutput, bool) bool) error {
	fake.listOpsMetadataPagesMutex.Lock()
	ret, specificReturn := fake.listOpsMetadataPagesReturnsOnCall[len(fake.listOpsMetadataPagesArgsForCall)]
	fake.listOpsMetadataPagesArgsForCall = append(fake.listOpsMetadataPagesArgsForCall, struct {
		arg1 *ssm.ListOpsMetadataInput
		arg2 func(*ssm.ListOpsMetadataOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListOpsMetadataPagesStub
	fakeReturns := fake.listOpsMetadataPagesReturns
	fake.recordInvocation("ListOpsMetadataPages", []interface{}{arg1, arg2})
	fake.listOpsMetadataPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListOpsMetadataPagesCallCount() int {
	fake.listOpsMetadataPagesMutex.RLock()
	defer fake.listOpsMetadataPagesMutex.RUnlock()
	return len(fake.listOpsMetadataPagesArgsForCall)
}

func (fake *FakeSSMClient) ListOpsMetadataPagesCalls(stub func(*ssm.ListOpsMetadataInput, func(*ssm.ListOpsMetadataOutput, bool) bool) error) {
	fake.listOpsMetadataPagesMutex.Lock()
	defer fake.listOpsMetadataPagesMutex.Unlock()
	fake.ListOpsMetadataPagesStub = stub
}

func (fake *FakeSSMClient) ListOpsMetadataPagesArgsForCall(i int) (*ssm.ListOpsMetadataInput, func(*ssm.ListOpsMetadataOutput, bool) bool) {
	fake.listOpsMetadataPagesMutex.RLock()
	defer fake.listOpsMetadataPagesMutex.RUnlock()
	argsForCall := fake.listOpsMetadataPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListOpsMetadataPagesReturns(result1 error) {
	fake.listOpsMetadataPagesMutex.Lock()
	defer fake.listOpsMetadataPagesMutex.Unlock()
	fake.ListOpsMetadataPagesStub = nil
	fake.listOpsMetadataPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsMetadataPagesReturnsOnCall(i int, result1 error) {
	fake.listOpsMetadataPagesMutex.Lock()
	defer fake.listOpsMetadataPagesMutex.Unlock()
	fake.ListOpsMetadataPagesStub = nil
	if fake.listOpsMetadataPagesReturnsOnCall == nil {
		fake.listOpsMetadataPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listOpsMetadataPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsMetadataPagesWithContext(arg1 context.Context, arg2 *ssm.ListOpsMetadataInput, arg3 func(*ssm.ListOpsMetadataOutput, bool) bool, arg4 ...request.Option) error {
	fake.listOpsMetadataPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listOpsMetadataPagesWithContextReturnsOnCall[len(fake.listOpsMetadataPagesWithContextArgsForCall)]
	fake.listOpsMetadataPagesWithContextArgsForCall = append(fake.listOpsMetadataPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListOpsMetadataInput
		arg3 func(*ssm.ListOpsMetadataOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListOpsMetadataPagesWithContextStub
	fakeReturns := fake.listOpsMetadataPagesWithContextReturns
	fake.recordInvocation("ListOpsMetadataPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listOpsMetadataPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListOpsMetadataPagesWithContextCallCount() int {
	fake.listOpsMetadataPagesWithContextMutex.RLock()
	defer fake.listOpsMetadataPagesWithContextMutex.RUnlock()
	return len(fake.listOpsMetadataPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListOpsMetadataPagesWithContextCalls(stub func(context.Context, *ssm.ListOpsMetadataInput, func(*ssm.ListOpsMetadataOutput, bool) bool, ...request.Option) error) {
	fake.listOpsMetadataPagesWithContextMutex.Lock()
	defer fake.listOpsMetadataPagesWithContextMutex.Unlock()
	fake.ListOpsMetadataPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListOpsMetadataPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListOpsMetadataInput, func(*ssm.ListOpsMetadataOutput, bool) bool, []request.Option) {
	fake.listOpsMetadataPagesWithContextMutex.RLock()
	defer fake.listOpsMetadataPagesWithContextMutex.RUnlock()
	argsForCall := fake.listOpsMetadataPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListOpsMetadataPagesWithContextReturns(result1 error) {
	fake.listOpsMetadataPagesWithContextMutex.Lock()
	defer fake.listOpsMetadataPagesWithContextMutex.Unlock()
	fake.ListOpsMetadataPagesWithContextStub = nil
	fake.listOpsMetadataPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsMetadataPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listOpsMetadataPagesWithContextMutex.Lock()
	defer fake.listOpsMetadataPagesWithContextMutex.Unlock()
	fake.ListOpsMetadataPagesWithContextStub = nil
	if fake.listOpsMetadataPagesWithContextReturnsOnCall == nil {
		fake.listOpsMetadataPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listOpsMetadataPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListOpsMetadataRequest(arg1 *ssm.ListOpsMetadataInput) (*request.Request, *ssm.ListOpsMetadataOutput) {
	fake.listOpsMetadataRequestMutex.Lock()
	ret, specificReturn := fake.listOpsMetadataRequestReturnsOnCall[len(fake.listOpsMetadataRequestArgsForCall)]
	fake.listOpsMetadataRequestArgsForCall = append(fake.listOpsMetadataRequestArgsForCall, struct {
		arg1 *ssm.ListOpsMetadataInput
	}{arg1})
	stub := fake.ListOpsMetadataRequestStub
	fakeReturns := fake.listOpsMetadataRequestReturns
	fake.recordInvocation("ListOpsMetadataRequest", []interface{}{arg1})
	fake.listOpsMetadataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsMetadataRequestCallCount() int {
	fake.listOpsMetadataRequestMutex.RLock()
	defer fake.listOpsMetadataRequestMutex.RUnlock()
	return len(fake.listOpsMetadataRequestArgsForCall)
}

func (fake *FakeSSMClient) ListOpsMetadataRequestCalls(stub func(*ssm.ListOpsMetadataInput) (*request.Request, *ssm.ListOpsMetadataOutput)) {
	fake.listOpsMetadataRequestMutex.Lock()
	defer fake.listOpsMetadataRequestMutex.Unlock()
	fake.ListOpsMetadataRequestStub = stub
}

func (fake *FakeSSMClient) ListOpsMetadataRequestArgsForCall(i int) *ssm.ListOpsMetadataInput {
	fake.listOpsMetadataRequestMutex.RLock()
	defer fake.listOpsMetadataRequestMutex.RUnlock()
	argsForCall := fake.listOpsMetadataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListOpsMetadataRequestReturns(result1 *request.Request, result2 *ssm.ListOpsMetadataOutput) {
	fake.listOpsMetadataRequestMutex.Lock()
	defer fake.listOpsMetadataRequestMutex.Unlock()
	fake.ListOpsMetadataRequestStub = nil
	fake.listOpsMetadataRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsMetadataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListOpsMetadataOutput) {
	fake.listOpsMetadataRequestMutex.Lock()
	defer fake.listOpsMetadataRequestMutex.Unlock()
	fake.ListOpsMetadataRequestStub = nil
	if fake.listOpsMetadataRequestReturnsOnCall == nil {
		fake.listOpsMetadataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListOpsMetadataOutput
		})
	}
	fake.listOpsMetadataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsMetadataWithContext(arg1 context.Context, arg2 *ssm.ListOpsMetadataInput, arg3 ...request.Option) (*ssm.ListOpsMetadataOutput, error) {
	fake.listOpsMetadataWithContextMutex.Lock()
	ret, specificReturn := fake.listOpsMetadataWithContextReturnsOnCall[len(fake.listOpsMetadataWithContextArgsForCall)]
	fake.listOpsMetadataWithContextArgsForCall = append(fake.listOpsMetadataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListOpsMetadataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListOpsMetadataWithContextStub
	fakeReturns := fake.listOpsMetadataWithContextReturns
	fake.recordInvocation("ListOpsMetadataWithContext", []interface{}{arg1, arg2, arg3})
	fake.listOpsMetadataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListOpsMetadataWithContextCallCount() int {
	fake.listOpsMetadataWithContextMutex.RLock()
	defer fake.listOpsMetadataWithContextMutex.RUnlock()
	return len(fake.listOpsMetadataWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListOpsMetadataWithContextCalls(stub func(context.Context, *ssm.ListOpsMetadataInput, ...request.Option) (*ssm.ListOpsMetadataOutput, error)) {
	fake.listOpsMetadataWithContextMutex.Lock()
	defer fake.listOpsMetadataWithContextMutex.Unlock()
	fake.ListOpsMetadataWithContextStub = stub
}

func (fake *FakeSSMClient) ListOpsMetadataWithContextArgsForCall(i int) (context.Context, *ssm.ListOpsMetadataInput, []request.Option) {
	fake.listOpsMetadataWithContextMutex.RLock()
	defer fake.listOpsMetadataWithContextMutex.RUnlock()
	argsForCall := fake.listOpsMetadataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListOpsMetadataWithContextReturns(result1 *ssm.ListOpsMetadataOutput, result2 error) {
	fake.listOpsMetadataWithContextMutex.Lock()
	defer fake.listOpsMetadataWithContextMutex.Unlock()
	fake.ListOpsMetadataWithContextStub = nil
	fake.listOpsMetadataWithContextReturns = struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListOpsMetadataWithContextReturnsOnCall(i int, result1 *ssm.ListOpsMetadataOutput, result2 error) {
	fake.listOpsMetadataWithContextMutex.Lock()
	defer fake.listOpsMetadataWithContextMutex.Unlock()
	fake.ListOpsMetadataWithContextStub = nil
	if fake.listOpsMetadataWithContextReturnsOnCall == nil {
		fake.listOpsMetadataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListOpsMetadataOutput
			result2 error
		})
	}
	fake.listOpsMetadataWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceComplianceSummaries(arg1 *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error) {
	fake.listResourceComplianceSummariesMutex.Lock()
	ret, specificReturn := fake.listResourceComplianceSummariesReturnsOnCall[len(fake.listResourceComplianceSummariesArgsForCall)]
	fake.listResourceComplianceSummariesArgsForCall = append(fake.listResourceComplianceSummariesArgsForCall, struct {
		arg1 *ssm.ListResourceComplianceSummariesInput
	}{arg1})
	stub := fake.ListResourceComplianceSummariesStub
	fakeReturns := fake.listResourceComplianceSummariesReturns
	fake.recordInvocation("ListResourceComplianceSummaries", []interface{}{arg1})
	fake.listResourceComplianceSummariesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesCallCount() int {
	fake.listResourceComplianceSummariesMutex.RLock()
	defer fake.listResourceComplianceSummariesMutex.RUnlock()
	return len(fake.listResourceComplianceSummariesArgsForCall)
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesCalls(stub func(*ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error)) {
	fake.listResourceComplianceSummariesMutex.Lock()
	defer fake.listResourceComplianceSummariesMutex.Unlock()
	fake.ListResourceComplianceSummariesStub = stub
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesArgsForCall(i int) *ssm.ListResourceComplianceSummariesInput {
	fake.listResourceComplianceSummariesMutex.RLock()
	defer fake.listResourceComplianceSummariesMutex.RUnlock()
	argsForCall := fake.listResourceComplianceSummariesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesReturns(result1 *ssm.ListResourceComplianceSummariesOutput, result2 error) {
	fake.listResourceComplianceSummariesMutex.Lock()
	defer fake.listResourceComplianceSummariesMutex.Unlock()
	fake.ListResourceComplianceSummariesStub = nil
	fake.listResourceComplianceSummariesReturns = struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesReturnsOnCall(i int, result1 *ssm.ListResourceComplianceSummariesOutput, result2 error) {
	fake.listResourceComplianceSummariesMutex.Lock()
	defer fake.listResourceComplianceSummariesMutex.Unlock()
	fake.ListResourceComplianceSummariesStub = nil
	if fake.listResourceComplianceSummariesReturnsOnCall == nil {
		fake.listResourceComplianceSummariesReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListResourceComplianceSummariesOutput
			result2 error
		})
	}
	fake.listResourceComplianceSummariesReturnsOnCall[i] = struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPages(arg1 *ssm.ListResourceComplianceSummariesInput, arg2 func(*ssm.ListResourceComplianceSummariesOutput, bool) bool) error {
	fake.listResourceComplianceSummariesPagesMutex.Lock()
	ret, specificReturn := fake.listResourceComplianceSummariesPagesReturnsOnCall[len(fake.listResourceComplianceSummariesPagesArgsForCall)]
	fake.listResourceComplianceSummariesPagesArgsForCall = append(fake.listResourceComplianceSummariesPagesArgsForCall, struct {
		arg1 *ssm.ListResourceComplianceSummariesInput
		arg2 func(*ssm.ListResourceComplianceSummariesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListResourceComplianceSummariesPagesStub
	fakeReturns := fake.listResourceComplianceSummariesPagesReturns
	fake.recordInvocation("ListResourceComplianceSummariesPages", []interface{}{arg1, arg2})
	fake.listResourceComplianceSummariesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesCallCount() int {
	fake.listResourceComplianceSummariesPagesMutex.RLock()
	defer fake.listResourceComplianceSummariesPagesMutex.RUnlock()
	return len(fake.listResourceComplianceSummariesPagesArgsForCall)
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesCalls(stub func(*ssm.ListResourceComplianceSummariesInput, func(*ssm.ListResourceComplianceSummariesOutput, bool) bool) error) {
	fake.listResourceComplianceSummariesPagesMutex.Lock()
	defer fake.listResourceComplianceSummariesPagesMutex.Unlock()
	fake.ListResourceComplianceSummariesPagesStub = stub
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesArgsForCall(i int) (*ssm.ListResourceComplianceSummariesInput, func(*ssm.ListResourceComplianceSummariesOutput, bool) bool) {
	fake.listResourceComplianceSummariesPagesMutex.RLock()
	defer fake.listResourceComplianceSummariesPagesMutex.RUnlock()
	argsForCall := fake.listResourceComplianceSummariesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesReturns(result1 error) {
	fake.listResourceComplianceSummariesPagesMutex.Lock()
	defer fake.listResourceComplianceSummariesPagesMutex.Unlock()
	fake.ListResourceComplianceSummariesPagesStub = nil
	fake.listResourceComplianceSummariesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesReturnsOnCall(i int, result1 error) {
	fake.listResourceComplianceSummariesPagesMutex.Lock()
	defer fake.listResourceComplianceSummariesPagesMutex.Unlock()
	fake.ListResourceComplianceSummariesPagesStub = nil
	if fake.listResourceComplianceSummariesPagesReturnsOnCall == nil {
		fake.listResourceComplianceSummariesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listResourceComplianceSummariesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesWithContext(arg1 context.Context, arg2 *ssm.ListResourceComplianceSummariesInput, arg3 func(*ssm.ListResourceComplianceSummariesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listResourceComplianceSummariesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listResourceComplianceSummariesPagesWithContextReturnsOnCall[len(fake.listResourceComplianceSummariesPagesWithContextArgsForCall)]
	fake.listResourceComplianceSummariesPagesWithContextArgsForCall = append(fake.listResourceComplianceSummariesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListResourceComplianceSummariesInput
		arg3 func(*ssm.ListResourceComplianceSummariesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListResourceComplianceSummariesPagesWithContextStub
	fakeReturns := fake.listResourceComplianceSummariesPagesWithContextReturns
	fake.recordInvocation("ListResourceComplianceSummariesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listResourceComplianceSummariesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesWithContextCallCount() int {
	fake.listResourceComplianceSummariesPagesWithContextMutex.RLock()
	defer fake.listResourceComplianceSummariesPagesWithContextMutex.RUnlock()
	return len(fake.listResourceComplianceSummariesPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesWithContextCalls(stub func(context.Context, *ssm.ListResourceComplianceSummariesInput, func(*ssm.ListResourceComplianceSummariesOutput, bool) bool, ...request.Option) error) {
	fake.listResourceComplianceSummariesPagesWithContextMutex.Lock()
	defer fake.listResourceComplianceSummariesPagesWithContextMutex.Unlock()
	fake.ListResourceComplianceSummariesPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListResourceComplianceSummariesInput, func(*ssm.ListResourceComplianceSummariesOutput, bool) bool, []request.Option) {
	fake.listResourceComplianceSummariesPagesWithContextMutex.RLock()
	defer fake.listResourceComplianceSummariesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listResourceComplianceSummariesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesWithContextReturns(result1 error) {
	fake.listResourceComplianceSummariesPagesWithContextMutex.Lock()
	defer fake.listResourceComplianceSummariesPagesWithContextMutex.Unlock()
	fake.ListResourceComplianceSummariesPagesWithContextStub = nil
	fake.listResourceComplianceSummariesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listResourceComplianceSummariesPagesWithContextMutex.Lock()
	defer fake.listResourceComplianceSummariesPagesWithContextMutex.Unlock()
	fake.ListResourceComplianceSummariesPagesWithContextStub = nil
	if fake.listResourceComplianceSummariesPagesWithContextReturnsOnCall == nil {
		fake.listResourceComplianceSummariesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listResourceComplianceSummariesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesRequest(arg1 *ssm.ListResourceComplianceSummariesInput) (*request.Request, *ssm.ListResourceComplianceSummariesOutput) {
	fake.listResourceComplianceSummariesRequestMutex.Lock()
	ret, specificReturn := fake.listResourceComplianceSummariesRequestReturnsOnCall[len(fake.listResourceComplianceSummariesRequestArgsForCall)]
	fake.listResourceComplianceSummariesRequestArgsForCall = append(fake.listResourceComplianceSummariesRequestArgsForCall, struct {
		arg1 *ssm.ListResourceComplianceSummariesInput
	}{arg1})
	stub := fake.ListResourceComplianceSummariesRequestStub
	fakeReturns := fake.listResourceComplianceSummariesRequestReturns
	fake.recordInvocation("ListResourceComplianceSummariesRequest", []interface{}{arg1})
	fake.listResourceComplianceSummariesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesRequestCallCount() int {
	fake.listResourceComplianceSummariesRequestMutex.RLock()
	defer fake.listResourceComplianceSummariesRequestMutex.RUnlock()
	return len(fake.listResourceComplianceSummariesRequestArgsForCall)
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesRequestCalls(stub func(*ssm.ListResourceComplianceSummariesInput) (*request.Request, *ssm.ListResourceComplianceSummariesOutput)) {
	fake.listResourceComplianceSummariesRequestMutex.Lock()
	defer fake.listResourceComplianceSummariesRequestMutex.Unlock()
	fake.ListResourceComplianceSummariesRequestStub = stub
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesRequestArgsForCall(i int) *ssm.ListResourceComplianceSummariesInput {
	fake.listResourceComplianceSummariesRequestMutex.RLock()
	defer fake.listResourceComplianceSummariesRequestMutex.RUnlock()
	argsForCall := fake.listResourceComplianceSummariesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesRequestReturns(result1 *request.Request, result2 *ssm.ListResourceComplianceSummariesOutput) {
	fake.listResourceComplianceSummariesRequestMutex.Lock()
	defer fake.listResourceComplianceSummariesRequestMutex.Unlock()
	fake.ListResourceComplianceSummariesRequestStub = nil
	fake.listResourceComplianceSummariesRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListResourceComplianceSummariesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListResourceComplianceSummariesOutput) {
	fake.listResourceComplianceSummariesRequestMutex.Lock()
	defer fake.listResourceComplianceSummariesRequestMutex.Unlock()
	fake.ListResourceComplianceSummariesRequestStub = nil
	if fake.listResourceComplianceSummariesRequestReturnsOnCall == nil {
		fake.listResourceComplianceSummariesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListResourceComplianceSummariesOutput
		})
	}
	fake.listResourceComplianceSummariesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListResourceComplianceSummariesOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesWithContext(arg1 context.Context, arg2 *ssm.ListResourceComplianceSummariesInput, arg3 ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error) {
	fake.listResourceComplianceSummariesWithContextMutex.Lock()
	ret, specificReturn := fake.listResourceComplianceSummariesWithContextReturnsOnCall[len(fake.listResourceComplianceSummariesWithContextArgsForCall)]
	fake.listResourceComplianceSummariesWithContextArgsForCall = append(fake.listResourceComplianceSummariesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListResourceComplianceSummariesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListResourceComplianceSummariesWithContextStub
	fakeReturns := fake.listResourceComplianceSummariesWithContextReturns
	fake.recordInvocation("ListResourceComplianceSummariesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listResourceComplianceSummariesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesWithContextCallCount() int {
	fake.listResourceComplianceSummariesWithContextMutex.RLock()
	defer fake.listResourceComplianceSummariesWithContextMutex.RUnlock()
	return len(fake.listResourceComplianceSummariesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesWithContextCalls(stub func(context.Context, *ssm.ListResourceComplianceSummariesInput, ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error)) {
	fake.listResourceComplianceSummariesWithContextMutex.Lock()
	defer fake.listResourceComplianceSummariesWithContextMutex.Unlock()
	fake.ListResourceComplianceSummariesWithContextStub = stub
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesWithContextArgsForCall(i int) (context.Context, *ssm.ListResourceComplianceSummariesInput, []request.Option) {
	fake.listResourceComplianceSummariesWithContextMutex.RLock()
	defer fake.listResourceComplianceSummariesWithContextMutex.RUnlock()
	argsForCall := fake.listResourceComplianceSummariesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesWithContextReturns(result1 *ssm.ListResourceComplianceSummariesOutput, result2 error) {
	fake.listResourceComplianceSummariesWithContextMutex.Lock()
	defer fake.listResourceComplianceSummariesWithContextMutex.Unlock()
	fake.ListResourceComplianceSummariesWithContextStub = nil
	fake.listResourceComplianceSummariesWithContextReturns = struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceComplianceSummariesWithContextReturnsOnCall(i int, result1 *ssm.ListResourceComplianceSummariesOutput, result2 error) {
	fake.listResourceComplianceSummariesWithContextMutex.Lock()
	defer fake.listResourceComplianceSummariesWithContextMutex.Unlock()
	fake.ListResourceComplianceSummariesWithContextStub = nil
	if fake.listResourceComplianceSummariesWithContextReturnsOnCall == nil {
		fake.listResourceComplianceSummariesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListResourceComplianceSummariesOutput
			result2 error
		})
	}
	fake.listResourceComplianceSummariesWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListResourceComplianceSummariesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceDataSync(arg1 *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error) {
	fake.listResourceDataSyncMutex.Lock()
	ret, specificReturn := fake.listResourceDataSyncReturnsOnCall[len(fake.listResourceDataSyncArgsForCall)]
	fake.listResourceDataSyncArgsForCall = append(fake.listResourceDataSyncArgsForCall, struct {
		arg1 *ssm.ListResourceDataSyncInput
	}{arg1})
	stub := fake.ListResourceDataSyncStub
	fakeReturns := fake.listResourceDataSyncReturns
	fake.recordInvocation("ListResourceDataSync", []interface{}{arg1})
	fake.listResourceDataSyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListResourceDataSyncCallCount() int {
	fake.listResourceDataSyncMutex.RLock()
	defer fake.listResourceDataSyncMutex.RUnlock()
	return len(fake.listResourceDataSyncArgsForCall)
}

func (fake *FakeSSMClient) ListResourceDataSyncCalls(stub func(*ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error)) {
	fake.listResourceDataSyncMutex.Lock()
	defer fake.listResourceDataSyncMutex.Unlock()
	fake.ListResourceDataSyncStub = stub
}

func (fake *FakeSSMClient) ListResourceDataSyncArgsForCall(i int) *ssm.ListResourceDataSyncInput {
	fake.listResourceDataSyncMutex.RLock()
	defer fake.listResourceDataSyncMutex.RUnlock()
	argsForCall := fake.listResourceDataSyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListResourceDataSyncReturns(result1 *ssm.ListResourceDataSyncOutput, result2 error) {
	fake.listResourceDataSyncMutex.Lock()
	defer fake.listResourceDataSyncMutex.Unlock()
	fake.ListResourceDataSyncStub = nil
	fake.listResourceDataSyncReturns = struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceDataSyncReturnsOnCall(i int, result1 *ssm.ListResourceDataSyncOutput, result2 error) {
	fake.listResourceDataSyncMutex.Lock()
	defer fake.listResourceDataSyncMutex.Unlock()
	fake.ListResourceDataSyncStub = nil
	if fake.listResourceDataSyncReturnsOnCall == nil {
		fake.listResourceDataSyncReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListResourceDataSyncOutput
			result2 error
		})
	}
	fake.listResourceDataSyncReturnsOnCall[i] = struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceDataSyncPages(arg1 *ssm.ListResourceDataSyncInput, arg2 func(*ssm.ListResourceDataSyncOutput, bool) bool) error {
	fake.listResourceDataSyncPagesMutex.Lock()
	ret, specificReturn := fake.listResourceDataSyncPagesReturnsOnCall[len(fake.listResourceDataSyncPagesArgsForCall)]
	fake.listResourceDataSyncPagesArgsForCall = append(fake.listResourceDataSyncPagesArgsForCall, struct {
		arg1 *ssm.ListResourceDataSyncInput
		arg2 func(*ssm.ListResourceDataSyncOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListResourceDataSyncPagesStub
	fakeReturns := fake.listResourceDataSyncPagesReturns
	fake.recordInvocation("ListResourceDataSyncPages", []interface{}{arg1, arg2})
	fake.listResourceDataSyncPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesCallCount() int {
	fake.listResourceDataSyncPagesMutex.RLock()
	defer fake.listResourceDataSyncPagesMutex.RUnlock()
	return len(fake.listResourceDataSyncPagesArgsForCall)
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesCalls(stub func(*ssm.ListResourceDataSyncInput, func(*ssm.ListResourceDataSyncOutput, bool) bool) error) {
	fake.listResourceDataSyncPagesMutex.Lock()
	defer fake.listResourceDataSyncPagesMutex.Unlock()
	fake.ListResourceDataSyncPagesStub = stub
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesArgsForCall(i int) (*ssm.ListResourceDataSyncInput, func(*ssm.ListResourceDataSyncOutput, bool) bool) {
	fake.listResourceDataSyncPagesMutex.RLock()
	defer fake.listResourceDataSyncPagesMutex.RUnlock()
	argsForCall := fake.listResourceDataSyncPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesReturns(result1 error) {
	fake.listResourceDataSyncPagesMutex.Lock()
	defer fake.listResourceDataSyncPagesMutex.Unlock()
	fake.ListResourceDataSyncPagesStub = nil
	fake.listResourceDataSyncPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesReturnsOnCall(i int, result1 error) {
	fake.listResourceDataSyncPagesMutex.Lock()
	defer fake.listResourceDataSyncPagesMutex.Unlock()
	fake.ListResourceDataSyncPagesStub = nil
	if fake.listResourceDataSyncPagesReturnsOnCall == nil {
		fake.listResourceDataSyncPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listResourceDataSyncPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesWithContext(arg1 context.Context, arg2 *ssm.ListResourceDataSyncInput, arg3 func(*ssm.ListResourceDataSyncOutput, bool) bool, arg4 ...request.Option) error {
	fake.listResourceDataSyncPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listResourceDataSyncPagesWithContextReturnsOnCall[len(fake.listResourceDataSyncPagesWithContextArgsForCall)]
	fake.listResourceDataSyncPagesWithContextArgsForCall = append(fake.listResourceDataSyncPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListResourceDataSyncInput
		arg3 func(*ssm.ListResourceDataSyncOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListResourceDataSyncPagesWithContextStub
	fakeReturns := fake.listResourceDataSyncPagesWithContextReturns
	fake.recordInvocation("ListResourceDataSyncPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listResourceDataSyncPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesWithContextCallCount() int {
	fake.listResourceDataSyncPagesWithContextMutex.RLock()
	defer fake.listResourceDataSyncPagesWithContextMutex.RUnlock()
	return len(fake.listResourceDataSyncPagesWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesWithContextCalls(stub func(context.Context, *ssm.ListResourceDataSyncInput, func(*ssm.ListResourceDataSyncOutput, bool) bool, ...request.Option) error) {
	fake.listResourceDataSyncPagesWithContextMutex.Lock()
	defer fake.listResourceDataSyncPagesWithContextMutex.Unlock()
	fake.ListResourceDataSyncPagesWithContextStub = stub
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesWithContextArgsForCall(i int) (context.Context, *ssm.ListResourceDataSyncInput, func(*ssm.ListResourceDataSyncOutput, bool) bool, []request.Option) {
	fake.listResourceDataSyncPagesWithContextMutex.RLock()
	defer fake.listResourceDataSyncPagesWithContextMutex.RUnlock()
	argsForCall := fake.listResourceDataSyncPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesWithContextReturns(result1 error) {
	fake.listResourceDataSyncPagesWithContextMutex.Lock()
	defer fake.listResourceDataSyncPagesWithContextMutex.Unlock()
	fake.ListResourceDataSyncPagesWithContextStub = nil
	fake.listResourceDataSyncPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceDataSyncPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listResourceDataSyncPagesWithContextMutex.Lock()
	defer fake.listResourceDataSyncPagesWithContextMutex.Unlock()
	fake.ListResourceDataSyncPagesWithContextStub = nil
	if fake.listResourceDataSyncPagesWithContextReturnsOnCall == nil {
		fake.listResourceDataSyncPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listResourceDataSyncPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) ListResourceDataSyncRequest(arg1 *ssm.ListResourceDataSyncInput) (*request.Request, *ssm.ListResourceDataSyncOutput) {
	fake.listResourceDataSyncRequestMutex.Lock()
	ret, specificReturn := fake.listResourceDataSyncRequestReturnsOnCall[len(fake.listResourceDataSyncRequestArgsForCall)]
	fake.listResourceDataSyncRequestArgsForCall = append(fake.listResourceDataSyncRequestArgsForCall, struct {
		arg1 *ssm.ListResourceDataSyncInput
	}{arg1})
	stub := fake.ListResourceDataSyncRequestStub
	fakeReturns := fake.listResourceDataSyncRequestReturns
	fake.recordInvocation("ListResourceDataSyncRequest", []interface{}{arg1})
	fake.listResourceDataSyncRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListResourceDataSyncRequestCallCount() int {
	fake.listResourceDataSyncRequestMutex.RLock()
	defer fake.listResourceDataSyncRequestMutex.RUnlock()
	return len(fake.listResourceDataSyncRequestArgsForCall)
}

func (fake *FakeSSMClient) ListResourceDataSyncRequestCalls(stub func(*ssm.ListResourceDataSyncInput) (*request.Request, *ssm.ListResourceDataSyncOutput)) {
	fake.listResourceDataSyncRequestMutex.Lock()
	defer fake.listResourceDataSyncRequestMutex.Unlock()
	fake.ListResourceDataSyncRequestStub = stub
}

func (fake *FakeSSMClient) ListResourceDataSyncRequestArgsForCall(i int) *ssm.ListResourceDataSyncInput {
	fake.listResourceDataSyncRequestMutex.RLock()
	defer fake.listResourceDataSyncRequestMutex.RUnlock()
	argsForCall := fake.listResourceDataSyncRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListResourceDataSyncRequestReturns(result1 *request.Request, result2 *ssm.ListResourceDataSyncOutput) {
	fake.listResourceDataSyncRequestMutex.Lock()
	defer fake.listResourceDataSyncRequestMutex.Unlock()
	fake.ListResourceDataSyncRequestStub = nil
	fake.listResourceDataSyncRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceDataSyncRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListResourceDataSyncOutput) {
	fake.listResourceDataSyncRequestMutex.Lock()
	defer fake.listResourceDataSyncRequestMutex.Unlock()
	fake.ListResourceDataSyncRequestStub = nil
	if fake.listResourceDataSyncRequestReturnsOnCall == nil {
		fake.listResourceDataSyncRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListResourceDataSyncOutput
		})
	}
	fake.listResourceDataSyncRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceDataSyncWithContext(arg1 context.Context, arg2 *ssm.ListResourceDataSyncInput, arg3 ...request.Option) (*ssm.ListResourceDataSyncOutput, error) {
	fake.listResourceDataSyncWithContextMutex.Lock()
	ret, specificReturn := fake.listResourceDataSyncWithContextReturnsOnCall[len(fake.listResourceDataSyncWithContextArgsForCall)]
	fake.listResourceDataSyncWithContextArgsForCall = append(fake.listResourceDataSyncWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListResourceDataSyncInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListResourceDataSyncWithContextStub
	fakeReturns := fake.listResourceDataSyncWithContextReturns
	fake.recordInvocation("ListResourceDataSyncWithContext", []interface{}{arg1, arg2, arg3})
	fake.listResourceDataSyncWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListResourceDataSyncWithContextCallCount() int {
	fake.listResourceDataSyncWithContextMutex.RLock()
	defer fake.listResourceDataSyncWithContextMutex.RUnlock()
	return len(fake.listResourceDataSyncWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListResourceDataSyncWithContextCalls(stub func(context.Context, *ssm.ListResourceDataSyncInput, ...request.Option) (*ssm.ListResourceDataSyncOutput, error)) {
	fake.listResourceDataSyncWithContextMutex.Lock()
	defer fake.listResourceDataSyncWithContextMutex.Unlock()
	fake.ListResourceDataSyncWithContextStub = stub
}

func (fake *FakeSSMClient) ListResourceDataSyncWithContextArgsForCall(i int) (context.Context, *ssm.ListResourceDataSyncInput, []request.Option) {
	fake.listResourceDataSyncWithContextMutex.RLock()
	defer fake.listResourceDataSyncWithContextMutex.RUnlock()
	argsForCall := fake.listResourceDataSyncWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListResourceDataSyncWithContextReturns(result1 *ssm.ListResourceDataSyncOutput, result2 error) {
	fake.listResourceDataSyncWithContextMutex.Lock()
	defer fake.listResourceDataSyncWithContextMutex.Unlock()
	fake.ListResourceDataSyncWithContextStub = nil
	fake.listResourceDataSyncWithContextReturns = struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListResourceDataSyncWithContextReturnsOnCall(i int, result1 *ssm.ListResourceDataSyncOutput, result2 error) {
	fake.listResourceDataSyncWithContextMutex.Lock()
	defer fake.listResourceDataSyncWithContextMutex.Unlock()
	fake.ListResourceDataSyncWithContextStub = nil
	if fake.listResourceDataSyncWithContextReturnsOnCall == nil {
		fake.listResourceDataSyncWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListResourceDataSyncOutput
			result2 error
		})
	}
	fake.listResourceDataSyncWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListTagsForResource(arg1 *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *ssm.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceStub
	fakeReturns := fake.listTagsForResourceReturns
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeSSMClient) ListTagsForResourceCalls(stub func(*ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeSSMClient) ListTagsForResourceArgsForCall(i int) *ssm.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListTagsForResourceReturns(result1 *ssm.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListTagsForResourceReturnsOnCall(i int, result1 *ssm.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListTagsForResourceRequest(arg1 *ssm.ListTagsForResourceInput) (*request.Request, *ssm.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *ssm.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceRequestStub
	fakeReturns := fake.listTagsForResourceRequestReturns
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeSSMClient) ListTagsForResourceRequestCalls(stub func(*ssm.ListTagsForResourceInput) (*request.Request, *ssm.ListTagsForResourceOutput)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeSSMClient) ListTagsForResourceRequestArgsForCall(i int) *ssm.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *ssm.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ListTagsForResourceWithContext(arg1 context.Context, arg2 *ssm.ListTagsForResourceInput, arg3 ...request.Option) (*ssm.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeSSMClient) ListTagsForResourceWithContextCalls(stub func(context.Context, *ssm.ListTagsForResourceInput, ...request.Option) (*ssm.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeSSMClient) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *ssm.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ListTagsForResourceWithContextReturns(result1 *ssm.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *ssm.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ModifyDocumentPermission(arg1 *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error) {
	fake.modifyDocumentPermissionMutex.Lock()
	ret, specificReturn := fake.modifyDocumentPermissionReturnsOnCall[len(fake.modifyDocumentPermissionArgsForCall)]
	fake.modifyDocumentPermissionArgsForCall = append(fake.modifyDocumentPermissionArgsForCall, struct {
		arg1 *ssm.ModifyDocumentPermissionInput
	}{arg1})
	stub := fake.ModifyDocumentPermissionStub
	fakeReturns := fake.modifyDocumentPermissionReturns
	fake.recordInvocation("ModifyDocumentPermission", []interface{}{arg1})
	fake.modifyDocumentPermissionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ModifyDocumentPermissionCallCount() int {
	fake.modifyDocumentPermissionMutex.RLock()
	defer fake.modifyDocumentPermissionMutex.RUnlock()
	return len(fake.modifyDocumentPermissionArgsForCall)
}

func (fake *FakeSSMClient) ModifyDocumentPermissionCalls(stub func(*ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error)) {
	fake.modifyDocumentPermissionMutex.Lock()
	defer fake.modifyDocumentPermissionMutex.Unlock()
	fake.ModifyDocumentPermissionStub = stub
}

func (fake *FakeSSMClient) ModifyDocumentPermissionArgsForCall(i int) *ssm.ModifyDocumentPermissionInput {
	fake.modifyDocumentPermissionMutex.RLock()
	defer fake.modifyDocumentPermissionMutex.RUnlock()
	argsForCall := fake.modifyDocumentPermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ModifyDocumentPermissionReturns(result1 *ssm.ModifyDocumentPermissionOutput, result2 error) {
	fake.modifyDocumentPermissionMutex.Lock()
	defer fake.modifyDocumentPermissionMutex.Unlock()
	fake.ModifyDocumentPermissionStub = nil
	fake.modifyDocumentPermissionReturns = struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ModifyDocumentPermissionReturnsOnCall(i int, result1 *ssm.ModifyDocumentPermissionOutput, result2 error) {
	fake.modifyDocumentPermissionMutex.Lock()
	defer fake.modifyDocumentPermissionMutex.Unlock()
	fake.ModifyDocumentPermissionStub = nil
	if fake.modifyDocumentPermissionReturnsOnCall == nil {
		fake.modifyDocumentPermissionReturnsOnCall = make(map[int]struct {
			result1 *ssm.ModifyDocumentPermissionOutput
			result2 error
		})
	}
	fake.modifyDocumentPermissionReturnsOnCall[i] = struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ModifyDocumentPermissionRequest(arg1 *ssm.ModifyDocumentPermissionInput) (*request.Request, *ssm.ModifyDocumentPermissionOutput) {
	fake.modifyDocumentPermissionRequestMutex.Lock()
	ret, specificReturn := fake.modifyDocumentPermissionRequestReturnsOnCall[len(fake.modifyDocumentPermissionRequestArgsForCall)]
	fake.modifyDocumentPermissionRequestArgsForCall = append(fake.modifyDocumentPermissionRequestArgsForCall, struct {
		arg1 *ssm.ModifyDocumentPermissionInput
	}{arg1})
	stub := fake.ModifyDocumentPermissionRequestStub
	fakeReturns := fake.modifyDocumentPermissionRequestReturns
	fake.recordInvocation("ModifyDocumentPermissionRequest", []interface{}{arg1})
	fake.modifyDocumentPermissionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ModifyDocumentPermissionRequestCallCount() int {
	fake.modifyDocumentPermissionRequestMutex.RLock()
	defer fake.modifyDocumentPermissionRequestMutex.RUnlock()
	return len(fake.modifyDocumentPermissionRequestArgsForCall)
}

func (fake *FakeSSMClient) ModifyDocumentPermissionRequestCalls(stub func(*ssm.ModifyDocumentPermissionInput) (*request.Request, *ssm.ModifyDocumentPermissionOutput)) {
	fake.modifyDocumentPermissionRequestMutex.Lock()
	defer fake.modifyDocumentPermissionRequestMutex.Unlock()
	fake.ModifyDocumentPermissionRequestStub = stub
}

func (fake *FakeSSMClient) ModifyDocumentPermissionRequestArgsForCall(i int) *ssm.ModifyDocumentPermissionInput {
	fake.modifyDocumentPermissionRequestMutex.RLock()
	defer fake.modifyDocumentPermissionRequestMutex.RUnlock()
	argsForCall := fake.modifyDocumentPermissionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ModifyDocumentPermissionRequestReturns(result1 *request.Request, result2 *ssm.ModifyDocumentPermissionOutput) {
	fake.modifyDocumentPermissionRequestMutex.Lock()
	defer fake.modifyDocumentPermissionRequestMutex.Unlock()
	fake.ModifyDocumentPermissionRequestStub = nil
	fake.modifyDocumentPermissionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ModifyDocumentPermissionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ModifyDocumentPermissionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ModifyDocumentPermissionOutput) {
	fake.modifyDocumentPermissionRequestMutex.Lock()
	defer fake.modifyDocumentPermissionRequestMutex.Unlock()
	fake.ModifyDocumentPermissionRequestStub = nil
	if fake.modifyDocumentPermissionRequestReturnsOnCall == nil {
		fake.modifyDocumentPermissionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ModifyDocumentPermissionOutput
		})
	}
	fake.modifyDocumentPermissionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ModifyDocumentPermissionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ModifyDocumentPermissionWithContext(arg1 context.Context, arg2 *ssm.ModifyDocumentPermissionInput, arg3 ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error) {
	fake.modifyDocumentPermissionWithContextMutex.Lock()
	ret, specificReturn := fake.modifyDocumentPermissionWithContextReturnsOnCall[len(fake.modifyDocumentPermissionWithContextArgsForCall)]
	fake.modifyDocumentPermissionWithContextArgsForCall = append(fake.modifyDocumentPermissionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ModifyDocumentPermissionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyDocumentPermissionWithContextStub
	fakeReturns := fake.modifyDocumentPermissionWithContextReturns
	fake.recordInvocation("ModifyDocumentPermissionWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyDocumentPermissionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ModifyDocumentPermissionWithContextCallCount() int {
	fake.modifyDocumentPermissionWithContextMutex.RLock()
	defer fake.modifyDocumentPermissionWithContextMutex.RUnlock()
	return len(fake.modifyDocumentPermissionWithContextArgsForCall)
}

func (fake *FakeSSMClient) ModifyDocumentPermissionWithContextCalls(stub func(context.Context, *ssm.ModifyDocumentPermissionInput, ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error)) {
	fake.modifyDocumentPermissionWithContextMutex.Lock()
	defer fake.modifyDocumentPermissionWithContextMutex.Unlock()
	fake.ModifyDocumentPermissionWithContextStub = stub
}

func (fake *FakeSSMClient) ModifyDocumentPermissionWithContextArgsForCall(i int) (context.Context, *ssm.ModifyDocumentPermissionInput, []request.Option) {
	fake.modifyDocumentPermissionWithContextMutex.RLock()
	defer fake.modifyDocumentPermissionWithContextMutex.RUnlock()
	argsForCall := fake.modifyDocumentPermissionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ModifyDocumentPermissionWithContextReturns(result1 *ssm.ModifyDocumentPermissionOutput, result2 error) {
	fake.modifyDocumentPermissionWithContextMutex.Lock()
	defer fake.modifyDocumentPermissionWithContextMutex.Unlock()
	fake.ModifyDocumentPermissionWithContextStub = nil
	fake.modifyDocumentPermissionWithContextReturns = struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ModifyDocumentPermissionWithContextReturnsOnCall(i int, result1 *ssm.ModifyDocumentPermissionOutput, result2 error) {
	fake.modifyDocumentPermissionWithContextMutex.Lock()
	defer fake.modifyDocumentPermissionWithContextMutex.Unlock()
	fake.ModifyDocumentPermissionWithContextStub = nil
	if fake.modifyDocumentPermissionWithContextReturnsOnCall == nil {
		fake.modifyDocumentPermissionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ModifyDocumentPermissionOutput
			result2 error
		})
	}
	fake.modifyDocumentPermissionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ModifyDocumentPermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutComplianceItems(arg1 *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error) {
	fake.putComplianceItemsMutex.Lock()
	ret, specificReturn := fake.putComplianceItemsReturnsOnCall[len(fake.putComplianceItemsArgsForCall)]
	fake.putComplianceItemsArgsForCall = append(fake.putComplianceItemsArgsForCall, struct {
		arg1 *ssm.PutComplianceItemsInput
	}{arg1})
	stub := fake.PutComplianceItemsStub
	fakeReturns := fake.putComplianceItemsReturns
	fake.recordInvocation("PutComplianceItems", []interface{}{arg1})
	fake.putComplianceItemsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutComplianceItemsCallCount() int {
	fake.putComplianceItemsMutex.RLock()
	defer fake.putComplianceItemsMutex.RUnlock()
	return len(fake.putComplianceItemsArgsForCall)
}

func (fake *FakeSSMClient) PutComplianceItemsCalls(stub func(*ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error)) {
	fake.putComplianceItemsMutex.Lock()
	defer fake.putComplianceItemsMutex.Unlock()
	fake.PutComplianceItemsStub = stub
}

func (fake *FakeSSMClient) PutComplianceItemsArgsForCall(i int) *ssm.PutComplianceItemsInput {
	fake.putComplianceItemsMutex.RLock()
	defer fake.putComplianceItemsMutex.RUnlock()
	argsForCall := fake.putComplianceItemsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) PutComplianceItemsReturns(result1 *ssm.PutComplianceItemsOutput, result2 error) {
	fake.putComplianceItemsMutex.Lock()
	defer fake.putComplianceItemsMutex.Unlock()
	fake.PutComplianceItemsStub = nil
	fake.putComplianceItemsReturns = struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutComplianceItemsReturnsOnCall(i int, result1 *ssm.PutComplianceItemsOutput, result2 error) {
	fake.putComplianceItemsMutex.Lock()
	defer fake.putComplianceItemsMutex.Unlock()
	fake.PutComplianceItemsStub = nil
	if fake.putComplianceItemsReturnsOnCall == nil {
		fake.putComplianceItemsReturnsOnCall = make(map[int]struct {
			result1 *ssm.PutComplianceItemsOutput
			result2 error
		})
	}
	fake.putComplianceItemsReturnsOnCall[i] = struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutComplianceItemsRequest(arg1 *ssm.PutComplianceItemsInput) (*request.Request, *ssm.PutComplianceItemsOutput) {
	fake.putComplianceItemsRequestMutex.Lock()
	ret, specificReturn := fake.putComplianceItemsRequestReturnsOnCall[len(fake.putComplianceItemsRequestArgsForCall)]
	fake.putComplianceItemsRequestArgsForCall = append(fake.putComplianceItemsRequestArgsForCall, struct {
		arg1 *ssm.PutComplianceItemsInput
	}{arg1})
	stub := fake.PutComplianceItemsRequestStub
	fakeReturns := fake.putComplianceItemsRequestReturns
	fake.recordInvocation("PutComplianceItemsRequest", []interface{}{arg1})
	fake.putComplianceItemsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutComplianceItemsRequestCallCount() int {
	fake.putComplianceItemsRequestMutex.RLock()
	defer fake.putComplianceItemsRequestMutex.RUnlock()
	return len(fake.putComplianceItemsRequestArgsForCall)
}

func (fake *FakeSSMClient) PutComplianceItemsRequestCalls(stub func(*ssm.PutComplianceItemsInput) (*request.Request, *ssm.PutComplianceItemsOutput)) {
	fake.putComplianceItemsRequestMutex.Lock()
	defer fake.putComplianceItemsRequestMutex.Unlock()
	fake.PutComplianceItemsRequestStub = stub
}

func (fake *FakeSSMClient) PutComplianceItemsRequestArgsForCall(i int) *ssm.PutComplianceItemsInput {
	fake.putComplianceItemsRequestMutex.RLock()
	defer fake.putComplianceItemsRequestMutex.RUnlock()
	argsForCall := fake.putComplianceItemsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) PutComplianceItemsRequestReturns(result1 *request.Request, result2 *ssm.PutComplianceItemsOutput) {
	fake.putComplianceItemsRequestMutex.Lock()
	defer fake.putComplianceItemsRequestMutex.Unlock()
	fake.PutComplianceItemsRequestStub = nil
	fake.putComplianceItemsRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.PutComplianceItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) PutComplianceItemsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.PutComplianceItemsOutput) {
	fake.putComplianceItemsRequestMutex.Lock()
	defer fake.putComplianceItemsRequestMutex.Unlock()
	fake.PutComplianceItemsRequestStub = nil
	if fake.putComplianceItemsRequestReturnsOnCall == nil {
		fake.putComplianceItemsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.PutComplianceItemsOutput
		})
	}
	fake.putComplianceItemsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.PutComplianceItemsOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) PutComplianceItemsWithContext(arg1 context.Context, arg2 *ssm.PutComplianceItemsInput, arg3 ...request.Option) (*ssm.PutComplianceItemsOutput, error) {
	fake.putComplianceItemsWithContextMutex.Lock()
	ret, specificReturn := fake.putComplianceItemsWithContextReturnsOnCall[len(fake.putComplianceItemsWithContextArgsForCall)]
	fake.putComplianceItemsWithContextArgsForCall = append(fake.putComplianceItemsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.PutComplianceItemsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutComplianceItemsWithContextStub
	fakeReturns := fake.putComplianceItemsWithContextReturns
	fake.recordInvocation("PutComplianceItemsWithContext", []interface{}{arg1, arg2, arg3})
	fake.putComplianceItemsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutComplianceItemsWithContextCallCount() int {
	fake.putComplianceItemsWithContextMutex.RLock()
	defer fake.putComplianceItemsWithContextMutex.RUnlock()
	return len(fake.putComplianceItemsWithContextArgsForCall)
}

func (fake *FakeSSMClient) PutComplianceItemsWithContextCalls(stub func(context.Context, *ssm.PutComplianceItemsInput, ...request.Option) (*ssm.PutComplianceItemsOutput, error)) {
	fake.putComplianceItemsWithContextMutex.Lock()
	defer fake.putComplianceItemsWithContextMutex.Unlock()
	fake.PutComplianceItemsWithContextStub = stub
}

func (fake *FakeSSMClient) PutComplianceItemsWithContextArgsForCall(i int) (context.Context, *ssm.PutComplianceItemsInput, []request.Option) {
	fake.putComplianceItemsWithContextMutex.RLock()
	defer fake.putComplianceItemsWithContextMutex.RUnlock()
	argsForCall := fake.putComplianceItemsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) PutComplianceItemsWithContextReturns(result1 *ssm.PutComplianceItemsOutput, result2 error) {
	fake.putComplianceItemsWithContextMutex.Lock()
	defer fake.putComplianceItemsWithContextMutex.Unlock()
	fake.PutComplianceItemsWithContextStub = nil
	fake.putComplianceItemsWithContextReturns = struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutComplianceItemsWithContextReturnsOnCall(i int, result1 *ssm.PutComplianceItemsOutput, result2 error) {
	fake.putComplianceItemsWithContextMutex.Lock()
	defer fake.putComplianceItemsWithContextMutex.Unlock()
	fake.PutComplianceItemsWithContextStub = nil
	if fake.putComplianceItemsWithContextReturnsOnCall == nil {
		fake.putComplianceItemsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.PutComplianceItemsOutput
			result2 error
		})
	}
	fake.putComplianceItemsWithContextReturnsOnCall[i] = struct {
		result1 *ssm.PutComplianceItemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutInventory(arg1 *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error) {
	fake.putInventoryMutex.Lock()
	ret, specificReturn := fake.putInventoryReturnsOnCall[len(fake.putInventoryArgsForCall)]
	fake.putInventoryArgsForCall = append(fake.putInventoryArgsForCall, struct {
		arg1 *ssm.PutInventoryInput
	}{arg1})
	stub := fake.PutInventoryStub
	fakeReturns := fake.putInventoryReturns
	fake.recordInvocation("PutInventory", []interface{}{arg1})
	fake.putInventoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutInventoryCallCount() int {
	fake.putInventoryMutex.RLock()
	defer fake.putInventoryMutex.RUnlock()
	return len(fake.putInventoryArgsForCall)
}

func (fake *FakeSSMClient) PutInventoryCalls(stub func(*ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error)) {
	fake.putInventoryMutex.Lock()
	defer fake.putInventoryMutex.Unlock()
	fake.PutInventoryStub = stub
}

func (fake *FakeSSMClient) PutInventoryArgsForCall(i int) *ssm.PutInventoryInput {
	fake.putInventoryMutex.RLock()
	defer fake.putInventoryMutex.RUnlock()
	argsForCall := fake.putInventoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) PutInventoryReturns(result1 *ssm.PutInventoryOutput, result2 error) {
	fake.putInventoryMutex.Lock()
	defer fake.putInventoryMutex.Unlock()
	fake.PutInventoryStub = nil
	fake.putInventoryReturns = struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutInventoryReturnsOnCall(i int, result1 *ssm.PutInventoryOutput, result2 error) {
	fake.putInventoryMutex.Lock()
	defer fake.putInventoryMutex.Unlock()
	fake.PutInventoryStub = nil
	if fake.putInventoryReturnsOnCall == nil {
		fake.putInventoryReturnsOnCall = make(map[int]struct {
			result1 *ssm.PutInventoryOutput
			result2 error
		})
	}
	fake.putInventoryReturnsOnCall[i] = struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutInventoryRequest(arg1 *ssm.PutInventoryInput) (*request.Request, *ssm.PutInventoryOutput) {
	fake.putInventoryRequestMutex.Lock()
	ret, specificReturn := fake.putInventoryRequestReturnsOnCall[len(fake.putInventoryRequestArgsForCall)]
	fake.putInventoryRequestArgsForCall = append(fake.putInventoryRequestArgsForCall, struct {
		arg1 *ssm.PutInventoryInput
	}{arg1})
	stub := fake.PutInventoryRequestStub
	fakeReturns := fake.putInventoryRequestReturns
	fake.recordInvocation("PutInventoryRequest", []interface{}{arg1})
	fake.putInventoryRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutInventoryRequestCallCount() int {
	fake.putInventoryRequestMutex.RLock()
	defer fake.putInventoryRequestMutex.RUnlock()
	return len(fake.putInventoryRequestArgsForCall)
}

func (fake *FakeSSMClient) PutInventoryRequestCalls(stub func(*ssm.PutInventoryInput) (*request.Request, *ssm.PutInventoryOutput)) {
	fake.putInventoryRequestMutex.Lock()
	defer fake.putInventoryRequestMutex.Unlock()
	fake.PutInventoryRequestStub = stub
}

func (fake *FakeSSMClient) PutInventoryRequestArgsForCall(i int) *ssm.PutInventoryInput {
	fake.putInventoryRequestMutex.RLock()
	defer fake.putInventoryRequestMutex.RUnlock()
	argsForCall := fake.putInventoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) PutInventoryRequestReturns(result1 *request.Request, result2 *ssm.PutInventoryOutput) {
	fake.putInventoryRequestMutex.Lock()
	defer fake.putInventoryRequestMutex.Unlock()
	fake.PutInventoryRequestStub = nil
	fake.putInventoryRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.PutInventoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) PutInventoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.PutInventoryOutput) {
	fake.putInventoryRequestMutex.Lock()
	defer fake.putInventoryRequestMutex.Unlock()
	fake.PutInventoryRequestStub = nil
	if fake.putInventoryRequestReturnsOnCall == nil {
		fake.putInventoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.PutInventoryOutput
		})
	}
	fake.putInventoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.PutInventoryOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) PutInventoryWithContext(arg1 context.Context, arg2 *ssm.PutInventoryInput, arg3 ...request.Option) (*ssm.PutInventoryOutput, error) {
	fake.putInventoryWithContextMutex.Lock()
	ret, specificReturn := fake.putInventoryWithContextReturnsOnCall[len(fake.putInventoryWithContextArgsForCall)]
	fake.putInventoryWithContextArgsForCall = append(fake.putInventoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.PutInventoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutInventoryWithContextStub
	fakeReturns := fake.putInventoryWithContextReturns
	fake.recordInvocation("PutInventoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.putInventoryWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutInventoryWithContextCallCount() int {
	fake.putInventoryWithContextMutex.RLock()
	defer fake.putInventoryWithContextMutex.RUnlock()
	return len(fake.putInventoryWithContextArgsForCall)
}

func (fake *FakeSSMClient) PutInventoryWithContextCalls(stub func(context.Context, *ssm.PutInventoryInput, ...request.Option) (*ssm.PutInventoryOutput, error)) {
	fake.putInventoryWithContextMutex.Lock()
	defer fake.putInventoryWithContextMutex.Unlock()
	fake.PutInventoryWithContextStub = stub
}

func (fake *FakeSSMClient) PutInventoryWithContextArgsForCall(i int) (context.Context, *ssm.PutInventoryInput, []request.Option) {
	fake.putInventoryWithContextMutex.RLock()
	defer fake.putInventoryWithContextMutex.RUnlock()
	argsForCall := fake.putInventoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) PutInventoryWithContextReturns(result1 *ssm.PutInventoryOutput, result2 error) {
	fake.putInventoryWithContextMutex.Lock()
	defer fake.putInventoryWithContextMutex.Unlock()
	fake.PutInventoryWithContextStub = nil
	fake.putInventoryWithContextReturns = struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutInventoryWithContextReturnsOnCall(i int, result1 *ssm.PutInventoryOutput, result2 error) {
	fake.putInventoryWithContextMutex.Lock()
	defer fake.putInventoryWithContextMutex.Unlock()
	fake.PutInventoryWithContextStub = nil
	if fake.putInventoryWithContextReturnsOnCall == nil {
		fake.putInventoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.PutInventoryOutput
			result2 error
		})
	}
	fake.putInventoryWithContextReturnsOnCall[i] = struct {
		result1 *ssm.PutInventoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutParameter(arg1 *ssm.PutParameterInput) (*ssm.PutParameterOutput, error) {
	fake.putParameterMutex.Lock()
	ret, specificReturn := fake.putParameterReturnsOnCall[len(fake.putParameterArgsForCall)]
	fake.putParameterArgsForCall = append(fake.putParameterArgsForCall, struct {
		arg1 *ssm.PutParameterInput
	}{arg1})
	stub := fake.PutParameterStub
	fakeReturns := fake.putParameterReturns
	fake.recordInvocation("PutParameter", []interface{}{arg1})
	fake.putParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutParameterCallCount() int {
	fake.putParameterMutex.RLock()
	defer fake.putParameterMutex.RUnlock()
	return len(fake.putParameterArgsForCall)
}

func (fake *FakeSSMClient) PutParameterCalls(stub func(*ssm.PutParameterInput) (*ssm.PutParameterOutput, error)) {
	fake.putParameterMutex.Lock()
	defer fake.putParameterMutex.Unlock()
	fake.PutParameterStub = stub
}

func (fake *FakeSSMClient) PutParameterArgsForCall(i int) *ssm.PutParameterInput {
	fake.putParameterMutex.RLock()
	defer fake.putParameterMutex.RUnlock()
	argsForCall := fake.putParameterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) PutParameterReturns(result1 *ssm.PutParameterOutput, result2 error) {
	fake.putParameterMutex.Lock()
	defer fake.putParameterMutex.Unlock()
	fake.PutParameterStub = nil
	fake.putParameterReturns = struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutParameterReturnsOnCall(i int, result1 *ssm.PutParameterOutput, result2 error) {
	fake.putParameterMutex.Lock()
	defer fake.putParameterMutex.Unlock()
	fake.PutParameterStub = nil
	if fake.putParameterReturnsOnCall == nil {
		fake.putParameterReturnsOnCall = make(map[int]struct {
			result1 *ssm.PutParameterOutput
			result2 error
		})
	}
	fake.putParameterReturnsOnCall[i] = struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutParameterRequest(arg1 *ssm.PutParameterInput) (*request.Request, *ssm.PutParameterOutput) {
	fake.putParameterRequestMutex.Lock()
	ret, specificReturn := fake.putParameterRequestReturnsOnCall[len(fake.putParameterRequestArgsForCall)]
	fake.putParameterRequestArgsForCall = append(fake.putParameterRequestArgsForCall, struct {
		arg1 *ssm.PutParameterInput
	}{arg1})
	stub := fake.PutParameterRequestStub
	fakeReturns := fake.putParameterRequestReturns
	fake.recordInvocation("PutParameterRequest", []interface{}{arg1})
	fake.putParameterRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutParameterRequestCallCount() int {
	fake.putParameterRequestMutex.RLock()
	defer fake.putParameterRequestMutex.RUnlock()
	return len(fake.putParameterRequestArgsForCall)
}

func (fake *FakeSSMClient) PutParameterRequestCalls(stub func(*ssm.PutParameterInput) (*request.Request, *ssm.PutParameterOutput)) {
	fake.putParameterRequestMutex.Lock()
	defer fake.putParameterRequestMutex.Unlock()
	fake.PutParameterRequestStub = stub
}

func (fake *FakeSSMClient) PutParameterRequestArgsForCall(i int) *ssm.PutParameterInput {
	fake.putParameterRequestMutex.RLock()
	defer fake.putParameterRequestMutex.RUnlock()
	argsForCall := fake.putParameterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) PutParameterRequestReturns(result1 *request.Request, result2 *ssm.PutParameterOutput) {
	fake.putParameterRequestMutex.Lock()
	defer fake.putParameterRequestMutex.Unlock()
	fake.PutParameterRequestStub = nil
	fake.putParameterRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.PutParameterOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) PutParameterRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.PutParameterOutput) {
	fake.putParameterRequestMutex.Lock()
	defer fake.putParameterRequestMutex.Unlock()
	fake.PutParameterRequestStub = nil
	if fake.putParameterRequestReturnsOnCall == nil {
		fake.putParameterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.PutParameterOutput
		})
	}
	fake.putParameterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.PutParameterOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) PutParameterWithContext(arg1 context.Context, arg2 *ssm.PutParameterInput, arg3 ...request.Option) (*ssm.PutParameterOutput, error) {
	fake.putParameterWithContextMutex.Lock()
	ret, specificReturn := fake.putParameterWithContextReturnsOnCall[len(fake.putParameterWithContextArgsForCall)]
	fake.putParameterWithContextArgsForCall = append(fake.putParameterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.PutParameterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutParameterWithContextStub
	fakeReturns := fake.putParameterWithContextReturns
	fake.recordInvocation("PutParameterWithContext", []interface{}{arg1, arg2, arg3})
	fake.putParameterWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) PutParameterWithContextCallCount() int {
	fake.putParameterWithContextMutex.RLock()
	defer fake.putParameterWithContextMutex.RUnlock()
	return len(fake.putParameterWithContextArgsForCall)
}

func (fake *FakeSSMClient) PutParameterWithContextCalls(stub func(context.Context, *ssm.PutParameterInput, ...request.Option) (*ssm.PutParameterOutput, error)) {
	fake.putParameterWithContextMutex.Lock()
	defer fake.putParameterWithContextMutex.Unlock()
	fake.PutParameterWithContextStub = stub
}

func (fake *FakeSSMClient) PutParameterWithContextArgsForCall(i int) (context.Context, *ssm.PutParameterInput, []request.Option) {
	fake.putParameterWithContextMutex.RLock()
	defer fake.putParameterWithContextMutex.RUnlock()
	argsForCall := fake.putParameterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) PutParameterWithContextReturns(result1 *ssm.PutParameterOutput, result2 error) {
	fake.putParameterWithContextMutex.Lock()
	defer fake.putParameterWithContextMutex.Unlock()
	fake.PutParameterWithContextStub = nil
	fake.putParameterWithContextReturns = struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) PutParameterWithContextReturnsOnCall(i int, result1 *ssm.PutParameterOutput, result2 error) {
	fake.putParameterWithContextMutex.Lock()
	defer fake.putParameterWithContextMutex.Unlock()
	fake.PutParameterWithContextStub = nil
	if fake.putParameterWithContextReturnsOnCall == nil {
		fake.putParameterWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.PutParameterOutput
			result2 error
		})
	}
	fake.putParameterWithContextReturnsOnCall[i] = struct {
		result1 *ssm.PutParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaseline(arg1 *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	fake.registerDefaultPatchBaselineMutex.Lock()
	ret, specificReturn := fake.registerDefaultPatchBaselineReturnsOnCall[len(fake.registerDefaultPatchBaselineArgsForCall)]
	fake.registerDefaultPatchBaselineArgsForCall = append(fake.registerDefaultPatchBaselineArgsForCall, struct {
		arg1 *ssm.RegisterDefaultPatchBaselineInput
	}{arg1})
	stub := fake.RegisterDefaultPatchBaselineStub
	fakeReturns := fake.registerDefaultPatchBaselineReturns
	fake.recordInvocation("RegisterDefaultPatchBaseline", []interface{}{arg1})
	fake.registerDefaultPatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineCallCount() int {
	fake.registerDefaultPatchBaselineMutex.RLock()
	defer fake.registerDefaultPatchBaselineMutex.RUnlock()
	return len(fake.registerDefaultPatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineCalls(stub func(*ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error)) {
	fake.registerDefaultPatchBaselineMutex.Lock()
	defer fake.registerDefaultPatchBaselineMutex.Unlock()
	fake.RegisterDefaultPatchBaselineStub = stub
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineArgsForCall(i int) *ssm.RegisterDefaultPatchBaselineInput {
	fake.registerDefaultPatchBaselineMutex.RLock()
	defer fake.registerDefaultPatchBaselineMutex.RUnlock()
	argsForCall := fake.registerDefaultPatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineReturns(result1 *ssm.RegisterDefaultPatchBaselineOutput, result2 error) {
	fake.registerDefaultPatchBaselineMutex.Lock()
	defer fake.registerDefaultPatchBaselineMutex.Unlock()
	fake.RegisterDefaultPatchBaselineStub = nil
	fake.registerDefaultPatchBaselineReturns = struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineReturnsOnCall(i int, result1 *ssm.RegisterDefaultPatchBaselineOutput, result2 error) {
	fake.registerDefaultPatchBaselineMutex.Lock()
	defer fake.registerDefaultPatchBaselineMutex.Unlock()
	fake.RegisterDefaultPatchBaselineStub = nil
	if fake.registerDefaultPatchBaselineReturnsOnCall == nil {
		fake.registerDefaultPatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterDefaultPatchBaselineOutput
			result2 error
		})
	}
	fake.registerDefaultPatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineRequest(arg1 *ssm.RegisterDefaultPatchBaselineInput) (*request.Request, *ssm.RegisterDefaultPatchBaselineOutput) {
	fake.registerDefaultPatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.registerDefaultPatchBaselineRequestReturnsOnCall[len(fake.registerDefaultPatchBaselineRequestArgsForCall)]
	fake.registerDefaultPatchBaselineRequestArgsForCall = append(fake.registerDefaultPatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.RegisterDefaultPatchBaselineInput
	}{arg1})
	stub := fake.RegisterDefaultPatchBaselineRequestStub
	fakeReturns := fake.registerDefaultPatchBaselineRequestReturns
	fake.recordInvocation("RegisterDefaultPatchBaselineRequest", []interface{}{arg1})
	fake.registerDefaultPatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineRequestCallCount() int {
	fake.registerDefaultPatchBaselineRequestMutex.RLock()
	defer fake.registerDefaultPatchBaselineRequestMutex.RUnlock()
	return len(fake.registerDefaultPatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineRequestCalls(stub func(*ssm.RegisterDefaultPatchBaselineInput) (*request.Request, *ssm.RegisterDefaultPatchBaselineOutput)) {
	fake.registerDefaultPatchBaselineRequestMutex.Lock()
	defer fake.registerDefaultPatchBaselineRequestMutex.Unlock()
	fake.RegisterDefaultPatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineRequestArgsForCall(i int) *ssm.RegisterDefaultPatchBaselineInput {
	fake.registerDefaultPatchBaselineRequestMutex.RLock()
	defer fake.registerDefaultPatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.registerDefaultPatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.RegisterDefaultPatchBaselineOutput) {
	fake.registerDefaultPatchBaselineRequestMutex.Lock()
	defer fake.registerDefaultPatchBaselineRequestMutex.Unlock()
	fake.RegisterDefaultPatchBaselineRequestStub = nil
	fake.registerDefaultPatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.RegisterDefaultPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.RegisterDefaultPatchBaselineOutput) {
	fake.registerDefaultPatchBaselineRequestMutex.Lock()
	defer fake.registerDefaultPatchBaselineRequestMutex.Unlock()
	fake.RegisterDefaultPatchBaselineRequestStub = nil
	if fake.registerDefaultPatchBaselineRequestReturnsOnCall == nil {
		fake.registerDefaultPatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.RegisterDefaultPatchBaselineOutput
		})
	}
	fake.registerDefaultPatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.RegisterDefaultPatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineWithContext(arg1 context.Context, arg2 *ssm.RegisterDefaultPatchBaselineInput, arg3 ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	fake.registerDefaultPatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.registerDefaultPatchBaselineWithContextReturnsOnCall[len(fake.registerDefaultPatchBaselineWithContextArgsForCall)]
	fake.registerDefaultPatchBaselineWithContextArgsForCall = append(fake.registerDefaultPatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.RegisterDefaultPatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RegisterDefaultPatchBaselineWithContextStub
	fakeReturns := fake.registerDefaultPatchBaselineWithContextReturns
	fake.recordInvocation("RegisterDefaultPatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerDefaultPatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineWithContextCallCount() int {
	fake.registerDefaultPatchBaselineWithContextMutex.RLock()
	defer fake.registerDefaultPatchBaselineWithContextMutex.RUnlock()
	return len(fake.registerDefaultPatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineWithContextCalls(stub func(context.Context, *ssm.RegisterDefaultPatchBaselineInput, ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error)) {
	fake.registerDefaultPatchBaselineWithContextMutex.Lock()
	defer fake.registerDefaultPatchBaselineWithContextMutex.Unlock()
	fake.RegisterDefaultPatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.RegisterDefaultPatchBaselineInput, []request.Option) {
	fake.registerDefaultPatchBaselineWithContextMutex.RLock()
	defer fake.registerDefaultPatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.registerDefaultPatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineWithContextReturns(result1 *ssm.RegisterDefaultPatchBaselineOutput, result2 error) {
	fake.registerDefaultPatchBaselineWithContextMutex.Lock()
	defer fake.registerDefaultPatchBaselineWithContextMutex.Unlock()
	fake.RegisterDefaultPatchBaselineWithContextStub = nil
	fake.registerDefaultPatchBaselineWithContextReturns = struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterDefaultPatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.RegisterDefaultPatchBaselineOutput, result2 error) {
	fake.registerDefaultPatchBaselineWithContextMutex.Lock()
	defer fake.registerDefaultPatchBaselineWithContextMutex.Unlock()
	fake.RegisterDefaultPatchBaselineWithContextStub = nil
	if fake.registerDefaultPatchBaselineWithContextReturnsOnCall == nil {
		fake.registerDefaultPatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterDefaultPatchBaselineOutput
			result2 error
		})
	}
	fake.registerDefaultPatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.RegisterDefaultPatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroup(arg1 *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	fake.registerPatchBaselineForPatchGroupMutex.Lock()
	ret, specificReturn := fake.registerPatchBaselineForPatchGroupReturnsOnCall[len(fake.registerPatchBaselineForPatchGroupArgsForCall)]
	fake.registerPatchBaselineForPatchGroupArgsForCall = append(fake.registerPatchBaselineForPatchGroupArgsForCall, struct {
		arg1 *ssm.RegisterPatchBaselineForPatchGroupInput
	}{arg1})
	stub := fake.RegisterPatchBaselineForPatchGroupStub
	fakeReturns := fake.registerPatchBaselineForPatchGroupReturns
	fake.recordInvocation("RegisterPatchBaselineForPatchGroup", []interface{}{arg1})
	fake.registerPatchBaselineForPatchGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupCallCount() int {
	fake.registerPatchBaselineForPatchGroupMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupMutex.RUnlock()
	return len(fake.registerPatchBaselineForPatchGroupArgsForCall)
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupCalls(stub func(*ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)) {
	fake.registerPatchBaselineForPatchGroupMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupStub = stub
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupArgsForCall(i int) *ssm.RegisterPatchBaselineForPatchGroupInput {
	fake.registerPatchBaselineForPatchGroupMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupMutex.RUnlock()
	argsForCall := fake.registerPatchBaselineForPatchGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupReturns(result1 *ssm.RegisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.registerPatchBaselineForPatchGroupMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupStub = nil
	fake.registerPatchBaselineForPatchGroupReturns = struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupReturnsOnCall(i int, result1 *ssm.RegisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.registerPatchBaselineForPatchGroupMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupStub = nil
	if fake.registerPatchBaselineForPatchGroupReturnsOnCall == nil {
		fake.registerPatchBaselineForPatchGroupReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
			result2 error
		})
	}
	fake.registerPatchBaselineForPatchGroupReturnsOnCall[i] = struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupRequest(arg1 *ssm.RegisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.RegisterPatchBaselineForPatchGroupOutput) {
	fake.registerPatchBaselineForPatchGroupRequestMutex.Lock()
	ret, specificReturn := fake.registerPatchBaselineForPatchGroupRequestReturnsOnCall[len(fake.registerPatchBaselineForPatchGroupRequestArgsForCall)]
	fake.registerPatchBaselineForPatchGroupRequestArgsForCall = append(fake.registerPatchBaselineForPatchGroupRequestArgsForCall, struct {
		arg1 *ssm.RegisterPatchBaselineForPatchGroupInput
	}{arg1})
	stub := fake.RegisterPatchBaselineForPatchGroupRequestStub
	fakeReturns := fake.registerPatchBaselineForPatchGroupRequestReturns
	fake.recordInvocation("RegisterPatchBaselineForPatchGroupRequest", []interface{}{arg1})
	fake.registerPatchBaselineForPatchGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupRequestCallCount() int {
	fake.registerPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupRequestMutex.RUnlock()
	return len(fake.registerPatchBaselineForPatchGroupRequestArgsForCall)
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupRequestCalls(stub func(*ssm.RegisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.RegisterPatchBaselineForPatchGroupOutput)) {
	fake.registerPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupRequestStub = stub
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupRequestArgsForCall(i int) *ssm.RegisterPatchBaselineForPatchGroupInput {
	fake.registerPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupRequestMutex.RUnlock()
	argsForCall := fake.registerPatchBaselineForPatchGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupRequestReturns(result1 *request.Request, result2 *ssm.RegisterPatchBaselineForPatchGroupOutput) {
	fake.registerPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupRequestStub = nil
	fake.registerPatchBaselineForPatchGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.RegisterPatchBaselineForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.RegisterPatchBaselineForPatchGroupOutput) {
	fake.registerPatchBaselineForPatchGroupRequestMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupRequestMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupRequestStub = nil
	if fake.registerPatchBaselineForPatchGroupRequestReturnsOnCall == nil {
		fake.registerPatchBaselineForPatchGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.RegisterPatchBaselineForPatchGroupOutput
		})
	}
	fake.registerPatchBaselineForPatchGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.RegisterPatchBaselineForPatchGroupOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupWithContext(arg1 context.Context, arg2 *ssm.RegisterPatchBaselineForPatchGroupInput, arg3 ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	fake.registerPatchBaselineForPatchGroupWithContextMutex.Lock()
	ret, specificReturn := fake.registerPatchBaselineForPatchGroupWithContextReturnsOnCall[len(fake.registerPatchBaselineForPatchGroupWithContextArgsForCall)]
	fake.registerPatchBaselineForPatchGroupWithContextArgsForCall = append(fake.registerPatchBaselineForPatchGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.RegisterPatchBaselineForPatchGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RegisterPatchBaselineForPatchGroupWithContextStub
	fakeReturns := fake.registerPatchBaselineForPatchGroupWithContextReturns
	fake.recordInvocation("RegisterPatchBaselineForPatchGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerPatchBaselineForPatchGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupWithContextCallCount() int {
	fake.registerPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	return len(fake.registerPatchBaselineForPatchGroupWithContextArgsForCall)
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupWithContextCalls(stub func(context.Context, *ssm.RegisterPatchBaselineForPatchGroupInput, ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error)) {
	fake.registerPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupWithContextStub = stub
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupWithContextArgsForCall(i int) (context.Context, *ssm.RegisterPatchBaselineForPatchGroupInput, []request.Option) {
	fake.registerPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	argsForCall := fake.registerPatchBaselineForPatchGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupWithContextReturns(result1 *ssm.RegisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.registerPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupWithContextStub = nil
	fake.registerPatchBaselineForPatchGroupWithContextReturns = struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterPatchBaselineForPatchGroupWithContextReturnsOnCall(i int, result1 *ssm.RegisterPatchBaselineForPatchGroupOutput, result2 error) {
	fake.registerPatchBaselineForPatchGroupWithContextMutex.Lock()
	defer fake.registerPatchBaselineForPatchGroupWithContextMutex.Unlock()
	fake.RegisterPatchBaselineForPatchGroupWithContextStub = nil
	if fake.registerPatchBaselineForPatchGroupWithContextReturnsOnCall == nil {
		fake.registerPatchBaselineForPatchGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
			result2 error
		})
	}
	fake.registerPatchBaselineForPatchGroupWithContextReturnsOnCall[i] = struct {
		result1 *ssm.RegisterPatchBaselineForPatchGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindow(arg1 *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	fake.registerTargetWithMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.registerTargetWithMaintenanceWindowReturnsOnCall[len(fake.registerTargetWithMaintenanceWindowArgsForCall)]
	fake.registerTargetWithMaintenanceWindowArgsForCall = append(fake.registerTargetWithMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.RegisterTargetWithMaintenanceWindowInput
	}{arg1})
	stub := fake.RegisterTargetWithMaintenanceWindowStub
	fakeReturns := fake.registerTargetWithMaintenanceWindowReturns
	fake.recordInvocation("RegisterTargetWithMaintenanceWindow", []interface{}{arg1})
	fake.registerTargetWithMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowCallCount() int {
	fake.registerTargetWithMaintenanceWindowMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowMutex.RUnlock()
	return len(fake.registerTargetWithMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowCalls(stub func(*ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)) {
	fake.registerTargetWithMaintenanceWindowMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowArgsForCall(i int) *ssm.RegisterTargetWithMaintenanceWindowInput {
	fake.registerTargetWithMaintenanceWindowMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.registerTargetWithMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowReturns(result1 *ssm.RegisterTargetWithMaintenanceWindowOutput, result2 error) {
	fake.registerTargetWithMaintenanceWindowMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowStub = nil
	fake.registerTargetWithMaintenanceWindowReturns = struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowReturnsOnCall(i int, result1 *ssm.RegisterTargetWithMaintenanceWindowOutput, result2 error) {
	fake.registerTargetWithMaintenanceWindowMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowStub = nil
	if fake.registerTargetWithMaintenanceWindowReturnsOnCall == nil {
		fake.registerTargetWithMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
			result2 error
		})
	}
	fake.registerTargetWithMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowRequest(arg1 *ssm.RegisterTargetWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTargetWithMaintenanceWindowOutput) {
	fake.registerTargetWithMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.registerTargetWithMaintenanceWindowRequestReturnsOnCall[len(fake.registerTargetWithMaintenanceWindowRequestArgsForCall)]
	fake.registerTargetWithMaintenanceWindowRequestArgsForCall = append(fake.registerTargetWithMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.RegisterTargetWithMaintenanceWindowInput
	}{arg1})
	stub := fake.RegisterTargetWithMaintenanceWindowRequestStub
	fakeReturns := fake.registerTargetWithMaintenanceWindowRequestReturns
	fake.recordInvocation("RegisterTargetWithMaintenanceWindowRequest", []interface{}{arg1})
	fake.registerTargetWithMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowRequestCallCount() int {
	fake.registerTargetWithMaintenanceWindowRequestMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.registerTargetWithMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowRequestCalls(stub func(*ssm.RegisterTargetWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTargetWithMaintenanceWindowOutput)) {
	fake.registerTargetWithMaintenanceWindowRequestMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowRequestMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowRequestArgsForCall(i int) *ssm.RegisterTargetWithMaintenanceWindowInput {
	fake.registerTargetWithMaintenanceWindowRequestMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.registerTargetWithMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.RegisterTargetWithMaintenanceWindowOutput) {
	fake.registerTargetWithMaintenanceWindowRequestMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowRequestMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowRequestStub = nil
	fake.registerTargetWithMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.RegisterTargetWithMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.RegisterTargetWithMaintenanceWindowOutput) {
	fake.registerTargetWithMaintenanceWindowRequestMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowRequestMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowRequestStub = nil
	if fake.registerTargetWithMaintenanceWindowRequestReturnsOnCall == nil {
		fake.registerTargetWithMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.RegisterTargetWithMaintenanceWindowOutput
		})
	}
	fake.registerTargetWithMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.RegisterTargetWithMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.RegisterTargetWithMaintenanceWindowInput, arg3 ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	fake.registerTargetWithMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.registerTargetWithMaintenanceWindowWithContextReturnsOnCall[len(fake.registerTargetWithMaintenanceWindowWithContextArgsForCall)]
	fake.registerTargetWithMaintenanceWindowWithContextArgsForCall = append(fake.registerTargetWithMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.RegisterTargetWithMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RegisterTargetWithMaintenanceWindowWithContextStub
	fakeReturns := fake.registerTargetWithMaintenanceWindowWithContextReturns
	fake.recordInvocation("RegisterTargetWithMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerTargetWithMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowWithContextCallCount() int {
	fake.registerTargetWithMaintenanceWindowWithContextMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.registerTargetWithMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.RegisterTargetWithMaintenanceWindowInput, ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error)) {
	fake.registerTargetWithMaintenanceWindowWithContextMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowWithContextMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.RegisterTargetWithMaintenanceWindowInput, []request.Option) {
	fake.registerTargetWithMaintenanceWindowWithContextMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.registerTargetWithMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowWithContextReturns(result1 *ssm.RegisterTargetWithMaintenanceWindowOutput, result2 error) {
	fake.registerTargetWithMaintenanceWindowWithContextMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowWithContextMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowWithContextStub = nil
	fake.registerTargetWithMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTargetWithMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.RegisterTargetWithMaintenanceWindowOutput, result2 error) {
	fake.registerTargetWithMaintenanceWindowWithContextMutex.Lock()
	defer fake.registerTargetWithMaintenanceWindowWithContextMutex.Unlock()
	fake.RegisterTargetWithMaintenanceWindowWithContextStub = nil
	if fake.registerTargetWithMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.registerTargetWithMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
			result2 error
		})
	}
	fake.registerTargetWithMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.RegisterTargetWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindow(arg1 *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	fake.registerTaskWithMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.registerTaskWithMaintenanceWindowReturnsOnCall[len(fake.registerTaskWithMaintenanceWindowArgsForCall)]
	fake.registerTaskWithMaintenanceWindowArgsForCall = append(fake.registerTaskWithMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.RegisterTaskWithMaintenanceWindowInput
	}{arg1})
	stub := fake.RegisterTaskWithMaintenanceWindowStub
	fakeReturns := fake.registerTaskWithMaintenanceWindowReturns
	fake.recordInvocation("RegisterTaskWithMaintenanceWindow", []interface{}{arg1})
	fake.registerTaskWithMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowCallCount() int {
	fake.registerTaskWithMaintenanceWindowMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowMutex.RUnlock()
	return len(fake.registerTaskWithMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowCalls(stub func(*ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)) {
	fake.registerTaskWithMaintenanceWindowMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowArgsForCall(i int) *ssm.RegisterTaskWithMaintenanceWindowInput {
	fake.registerTaskWithMaintenanceWindowMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.registerTaskWithMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowReturns(result1 *ssm.RegisterTaskWithMaintenanceWindowOutput, result2 error) {
	fake.registerTaskWithMaintenanceWindowMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowStub = nil
	fake.registerTaskWithMaintenanceWindowReturns = struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowReturnsOnCall(i int, result1 *ssm.RegisterTaskWithMaintenanceWindowOutput, result2 error) {
	fake.registerTaskWithMaintenanceWindowMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowStub = nil
	if fake.registerTaskWithMaintenanceWindowReturnsOnCall == nil {
		fake.registerTaskWithMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
			result2 error
		})
	}
	fake.registerTaskWithMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowRequest(arg1 *ssm.RegisterTaskWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTaskWithMaintenanceWindowOutput) {
	fake.registerTaskWithMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.registerTaskWithMaintenanceWindowRequestReturnsOnCall[len(fake.registerTaskWithMaintenanceWindowRequestArgsForCall)]
	fake.registerTaskWithMaintenanceWindowRequestArgsForCall = append(fake.registerTaskWithMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.RegisterTaskWithMaintenanceWindowInput
	}{arg1})
	stub := fake.RegisterTaskWithMaintenanceWindowRequestStub
	fakeReturns := fake.registerTaskWithMaintenanceWindowRequestReturns
	fake.recordInvocation("RegisterTaskWithMaintenanceWindowRequest", []interface{}{arg1})
	fake.registerTaskWithMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowRequestCallCount() int {
	fake.registerTaskWithMaintenanceWindowRequestMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.registerTaskWithMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowRequestCalls(stub func(*ssm.RegisterTaskWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTaskWithMaintenanceWindowOutput)) {
	fake.registerTaskWithMaintenanceWindowRequestMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowRequestMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowRequestArgsForCall(i int) *ssm.RegisterTaskWithMaintenanceWindowInput {
	fake.registerTaskWithMaintenanceWindowRequestMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.registerTaskWithMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.RegisterTaskWithMaintenanceWindowOutput) {
	fake.registerTaskWithMaintenanceWindowRequestMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowRequestMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowRequestStub = nil
	fake.registerTaskWithMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.RegisterTaskWithMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.RegisterTaskWithMaintenanceWindowOutput) {
	fake.registerTaskWithMaintenanceWindowRequestMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowRequestMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowRequestStub = nil
	if fake.registerTaskWithMaintenanceWindowRequestReturnsOnCall == nil {
		fake.registerTaskWithMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.RegisterTaskWithMaintenanceWindowOutput
		})
	}
	fake.registerTaskWithMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.RegisterTaskWithMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.RegisterTaskWithMaintenanceWindowInput, arg3 ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	fake.registerTaskWithMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.registerTaskWithMaintenanceWindowWithContextReturnsOnCall[len(fake.registerTaskWithMaintenanceWindowWithContextArgsForCall)]
	fake.registerTaskWithMaintenanceWindowWithContextArgsForCall = append(fake.registerTaskWithMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.RegisterTaskWithMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RegisterTaskWithMaintenanceWindowWithContextStub
	fakeReturns := fake.registerTaskWithMaintenanceWindowWithContextReturns
	fake.recordInvocation("RegisterTaskWithMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerTaskWithMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowWithContextCallCount() int {
	fake.registerTaskWithMaintenanceWindowWithContextMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.registerTaskWithMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.RegisterTaskWithMaintenanceWindowInput, ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error)) {
	fake.registerTaskWithMaintenanceWindowWithContextMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowWithContextMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.RegisterTaskWithMaintenanceWindowInput, []request.Option) {
	fake.registerTaskWithMaintenanceWindowWithContextMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.registerTaskWithMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowWithContextReturns(result1 *ssm.RegisterTaskWithMaintenanceWindowOutput, result2 error) {
	fake.registerTaskWithMaintenanceWindowWithContextMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowWithContextMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowWithContextStub = nil
	fake.registerTaskWithMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RegisterTaskWithMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.RegisterTaskWithMaintenanceWindowOutput, result2 error) {
	fake.registerTaskWithMaintenanceWindowWithContextMutex.Lock()
	defer fake.registerTaskWithMaintenanceWindowWithContextMutex.Unlock()
	fake.RegisterTaskWithMaintenanceWindowWithContextStub = nil
	if fake.registerTaskWithMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.registerTaskWithMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
			result2 error
		})
	}
	fake.registerTaskWithMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.RegisterTaskWithMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RemoveTagsFromResource(arg1 *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error) {
	fake.removeTagsFromResourceMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceReturnsOnCall[len(fake.removeTagsFromResourceArgsForCall)]
	fake.removeTagsFromResourceArgsForCall = append(fake.removeTagsFromResourceArgsForCall, struct {
		arg1 *ssm.RemoveTagsFromResourceInput
	}{arg1})
	stub := fake.RemoveTagsFromResourceStub
	fakeReturns := fake.removeTagsFromResourceReturns
	fake.recordInvocation("RemoveTagsFromResource", []interface{}{arg1})
	fake.removeTagsFromResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RemoveTagsFromResourceCallCount() int {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	return len(fake.removeTagsFromResourceArgsForCall)
}

func (fake *FakeSSMClient) RemoveTagsFromResourceCalls(stub func(*ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error)) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = stub
}

func (fake *FakeSSMClient) RemoveTagsFromResourceArgsForCall(i int) *ssm.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RemoveTagsFromResourceReturns(result1 *ssm.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = nil
	fake.removeTagsFromResourceReturns = struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RemoveTagsFromResourceReturnsOnCall(i int, result1 *ssm.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceMutex.Lock()
	defer fake.removeTagsFromResourceMutex.Unlock()
	fake.RemoveTagsFromResourceStub = nil
	if fake.removeTagsFromResourceReturnsOnCall == nil {
		fake.removeTagsFromResourceReturnsOnCall = make(map[int]struct {
			result1 *ssm.RemoveTagsFromResourceOutput
			result2 error
		})
	}
	fake.removeTagsFromResourceReturnsOnCall[i] = struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RemoveTagsFromResourceRequest(arg1 *ssm.RemoveTagsFromResourceInput) (*request.Request, *ssm.RemoveTagsFromResourceOutput) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceRequestReturnsOnCall[len(fake.removeTagsFromResourceRequestArgsForCall)]
	fake.removeTagsFromResourceRequestArgsForCall = append(fake.removeTagsFromResourceRequestArgsForCall, struct {
		arg1 *ssm.RemoveTagsFromResourceInput
	}{arg1})
	stub := fake.RemoveTagsFromResourceRequestStub
	fakeReturns := fake.removeTagsFromResourceRequestReturns
	fake.recordInvocation("RemoveTagsFromResourceRequest", []interface{}{arg1})
	fake.removeTagsFromResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RemoveTagsFromResourceRequestCallCount() int {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	return len(fake.removeTagsFromResourceRequestArgsForCall)
}

func (fake *FakeSSMClient) RemoveTagsFromResourceRequestCalls(stub func(*ssm.RemoveTagsFromResourceInput) (*request.Request, *ssm.RemoveTagsFromResourceOutput)) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = stub
}

func (fake *FakeSSMClient) RemoveTagsFromResourceRequestArgsForCall(i int) *ssm.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) RemoveTagsFromResourceRequestReturns(result1 *request.Request, result2 *ssm.RemoveTagsFromResourceOutput) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = nil
	fake.removeTagsFromResourceRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.RemoveTagsFromResourceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RemoveTagsFromResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.RemoveTagsFromResourceOutput) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	defer fake.removeTagsFromResourceRequestMutex.Unlock()
	fake.RemoveTagsFromResourceRequestStub = nil
	if fake.removeTagsFromResourceRequestReturnsOnCall == nil {
		fake.removeTagsFromResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.RemoveTagsFromResourceOutput
		})
	}
	fake.removeTagsFromResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.RemoveTagsFromResourceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) RemoveTagsFromResourceWithContext(arg1 context.Context, arg2 *ssm.RemoveTagsFromResourceInput, arg3 ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceWithContextReturnsOnCall[len(fake.removeTagsFromResourceWithContextArgsForCall)]
	fake.removeTagsFromResourceWithContextArgsForCall = append(fake.removeTagsFromResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.RemoveTagsFromResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveTagsFromResourceWithContextStub
	fakeReturns := fake.removeTagsFromResourceWithContextReturns
	fake.recordInvocation("RemoveTagsFromResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeTagsFromResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) RemoveTagsFromResourceWithContextCallCount() int {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	return len(fake.removeTagsFromResourceWithContextArgsForCall)
}

func (fake *FakeSSMClient) RemoveTagsFromResourceWithContextCalls(stub func(context.Context, *ssm.RemoveTagsFromResourceInput, ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error)) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = stub
}

func (fake *FakeSSMClient) RemoveTagsFromResourceWithContextArgsForCall(i int) (context.Context, *ssm.RemoveTagsFromResourceInput, []request.Option) {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) RemoveTagsFromResourceWithContextReturns(result1 *ssm.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	fake.removeTagsFromResourceWithContextReturns = struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) RemoveTagsFromResourceWithContextReturnsOnCall(i int, result1 *ssm.RemoveTagsFromResourceOutput, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	if fake.removeTagsFromResourceWithContextReturnsOnCall == nil {
		fake.removeTagsFromResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.RemoveTagsFromResourceOutput
			result2 error
		})
	}
	fake.removeTagsFromResourceWithContextReturnsOnCall[i] = struct {
		result1 *ssm.RemoveTagsFromResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResetServiceSetting(arg1 *ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error) {
	fake.resetServiceSettingMutex.Lock()
	ret, specificReturn := fake.resetServiceSettingReturnsOnCall[len(fake.resetServiceSettingArgsForCall)]
	fake.resetServiceSettingArgsForCall = append(fake.resetServiceSettingArgsForCall, struct {
		arg1 *ssm.ResetServiceSettingInput
	}{arg1})
	stub := fake.ResetServiceSettingStub
	fakeReturns := fake.resetServiceSettingReturns
	fake.recordInvocation("ResetServiceSetting", []interface{}{arg1})
	fake.resetServiceSettingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ResetServiceSettingCallCount() int {
	fake.resetServiceSettingMutex.RLock()
	defer fake.resetServiceSettingMutex.RUnlock()
	return len(fake.resetServiceSettingArgsForCall)
}

func (fake *FakeSSMClient) ResetServiceSettingCalls(stub func(*ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error)) {
	fake.resetServiceSettingMutex.Lock()
	defer fake.resetServiceSettingMutex.Unlock()
	fake.ResetServiceSettingStub = stub
}

func (fake *FakeSSMClient) ResetServiceSettingArgsForCall(i int) *ssm.ResetServiceSettingInput {
	fake.resetServiceSettingMutex.RLock()
	defer fake.resetServiceSettingMutex.RUnlock()
	argsForCall := fake.resetServiceSettingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ResetServiceSettingReturns(result1 *ssm.ResetServiceSettingOutput, result2 error) {
	fake.resetServiceSettingMutex.Lock()
	defer fake.resetServiceSettingMutex.Unlock()
	fake.ResetServiceSettingStub = nil
	fake.resetServiceSettingReturns = struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResetServiceSettingReturnsOnCall(i int, result1 *ssm.ResetServiceSettingOutput, result2 error) {
	fake.resetServiceSettingMutex.Lock()
	defer fake.resetServiceSettingMutex.Unlock()
	fake.ResetServiceSettingStub = nil
	if fake.resetServiceSettingReturnsOnCall == nil {
		fake.resetServiceSettingReturnsOnCall = make(map[int]struct {
			result1 *ssm.ResetServiceSettingOutput
			result2 error
		})
	}
	fake.resetServiceSettingReturnsOnCall[i] = struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResetServiceSettingRequest(arg1 *ssm.ResetServiceSettingInput) (*request.Request, *ssm.ResetServiceSettingOutput) {
	fake.resetServiceSettingRequestMutex.Lock()
	ret, specificReturn := fake.resetServiceSettingRequestReturnsOnCall[len(fake.resetServiceSettingRequestArgsForCall)]
	fake.resetServiceSettingRequestArgsForCall = append(fake.resetServiceSettingRequestArgsForCall, struct {
		arg1 *ssm.ResetServiceSettingInput
	}{arg1})
	stub := fake.ResetServiceSettingRequestStub
	fakeReturns := fake.resetServiceSettingRequestReturns
	fake.recordInvocation("ResetServiceSettingRequest", []interface{}{arg1})
	fake.resetServiceSettingRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ResetServiceSettingRequestCallCount() int {
	fake.resetServiceSettingRequestMutex.RLock()
	defer fake.resetServiceSettingRequestMutex.RUnlock()
	return len(fake.resetServiceSettingRequestArgsForCall)
}

func (fake *FakeSSMClient) ResetServiceSettingRequestCalls(stub func(*ssm.ResetServiceSettingInput) (*request.Request, *ssm.ResetServiceSettingOutput)) {
	fake.resetServiceSettingRequestMutex.Lock()
	defer fake.resetServiceSettingRequestMutex.Unlock()
	fake.ResetServiceSettingRequestStub = stub
}

func (fake *FakeSSMClient) ResetServiceSettingRequestArgsForCall(i int) *ssm.ResetServiceSettingInput {
	fake.resetServiceSettingRequestMutex.RLock()
	defer fake.resetServiceSettingRequestMutex.RUnlock()
	argsForCall := fake.resetServiceSettingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ResetServiceSettingRequestReturns(result1 *request.Request, result2 *ssm.ResetServiceSettingOutput) {
	fake.resetServiceSettingRequestMutex.Lock()
	defer fake.resetServiceSettingRequestMutex.Unlock()
	fake.ResetServiceSettingRequestStub = nil
	fake.resetServiceSettingRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ResetServiceSettingOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ResetServiceSettingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ResetServiceSettingOutput) {
	fake.resetServiceSettingRequestMutex.Lock()
	defer fake.resetServiceSettingRequestMutex.Unlock()
	fake.ResetServiceSettingRequestStub = nil
	if fake.resetServiceSettingRequestReturnsOnCall == nil {
		fake.resetServiceSettingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ResetServiceSettingOutput
		})
	}
	fake.resetServiceSettingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ResetServiceSettingOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ResetServiceSettingWithContext(arg1 context.Context, arg2 *ssm.ResetServiceSettingInput, arg3 ...request.Option) (*ssm.ResetServiceSettingOutput, error) {
	fake.resetServiceSettingWithContextMutex.Lock()
	ret, specificReturn := fake.resetServiceSettingWithContextReturnsOnCall[len(fake.resetServiceSettingWithContextArgsForCall)]
	fake.resetServiceSettingWithContextArgsForCall = append(fake.resetServiceSettingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ResetServiceSettingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ResetServiceSettingWithContextStub
	fakeReturns := fake.resetServiceSettingWithContextReturns
	fake.recordInvocation("ResetServiceSettingWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetServiceSettingWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ResetServiceSettingWithContextCallCount() int {
	fake.resetServiceSettingWithContextMutex.RLock()
	defer fake.resetServiceSettingWithContextMutex.RUnlock()
	return len(fake.resetServiceSettingWithContextArgsForCall)
}

func (fake *FakeSSMClient) ResetServiceSettingWithContextCalls(stub func(context.Context, *ssm.ResetServiceSettingInput, ...request.Option) (*ssm.ResetServiceSettingOutput, error)) {
	fake.resetServiceSettingWithContextMutex.Lock()
	defer fake.resetServiceSettingWithContextMutex.Unlock()
	fake.ResetServiceSettingWithContextStub = stub
}

func (fake *FakeSSMClient) ResetServiceSettingWithContextArgsForCall(i int) (context.Context, *ssm.ResetServiceSettingInput, []request.Option) {
	fake.resetServiceSettingWithContextMutex.RLock()
	defer fake.resetServiceSettingWithContextMutex.RUnlock()
	argsForCall := fake.resetServiceSettingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ResetServiceSettingWithContextReturns(result1 *ssm.ResetServiceSettingOutput, result2 error) {
	fake.resetServiceSettingWithContextMutex.Lock()
	defer fake.resetServiceSettingWithContextMutex.Unlock()
	fake.ResetServiceSettingWithContextStub = nil
	fake.resetServiceSettingWithContextReturns = struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResetServiceSettingWithContextReturnsOnCall(i int, result1 *ssm.ResetServiceSettingOutput, result2 error) {
	fake.resetServiceSettingWithContextMutex.Lock()
	defer fake.resetServiceSettingWithContextMutex.Unlock()
	fake.ResetServiceSettingWithContextStub = nil
	if fake.resetServiceSettingWithContextReturnsOnCall == nil {
		fake.resetServiceSettingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ResetServiceSettingOutput
			result2 error
		})
	}
	fake.resetServiceSettingWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ResetServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResumeSession(arg1 *ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error) {
	fake.resumeSessionMutex.Lock()
	ret, specificReturn := fake.resumeSessionReturnsOnCall[len(fake.resumeSessionArgsForCall)]
	fake.resumeSessionArgsForCall = append(fake.resumeSessionArgsForCall, struct {
		arg1 *ssm.ResumeSessionInput
	}{arg1})
	stub := fake.ResumeSessionStub
	fakeReturns := fake.resumeSessionReturns
	fake.recordInvocation("ResumeSession", []interface{}{arg1})
	fake.resumeSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ResumeSessionCallCount() int {
	fake.resumeSessionMutex.RLock()
	defer fake.resumeSessionMutex.RUnlock()
	return len(fake.resumeSessionArgsForCall)
}

func (fake *FakeSSMClient) ResumeSessionCalls(stub func(*ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error)) {
	fake.resumeSessionMutex.Lock()
	defer fake.resumeSessionMutex.Unlock()
	fake.ResumeSessionStub = stub
}

func (fake *FakeSSMClient) ResumeSessionArgsForCall(i int) *ssm.ResumeSessionInput {
	fake.resumeSessionMutex.RLock()
	defer fake.resumeSessionMutex.RUnlock()
	argsForCall := fake.resumeSessionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ResumeSessionReturns(result1 *ssm.ResumeSessionOutput, result2 error) {
	fake.resumeSessionMutex.Lock()
	defer fake.resumeSessionMutex.Unlock()
	fake.ResumeSessionStub = nil
	fake.resumeSessionReturns = struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResumeSessionReturnsOnCall(i int, result1 *ssm.ResumeSessionOutput, result2 error) {
	fake.resumeSessionMutex.Lock()
	defer fake.resumeSessionMutex.Unlock()
	fake.ResumeSessionStub = nil
	if fake.resumeSessionReturnsOnCall == nil {
		fake.resumeSessionReturnsOnCall = make(map[int]struct {
			result1 *ssm.ResumeSessionOutput
			result2 error
		})
	}
	fake.resumeSessionReturnsOnCall[i] = struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResumeSessionRequest(arg1 *ssm.ResumeSessionInput) (*request.Request, *ssm.ResumeSessionOutput) {
	fake.resumeSessionRequestMutex.Lock()
	ret, specificReturn := fake.resumeSessionRequestReturnsOnCall[len(fake.resumeSessionRequestArgsForCall)]
	fake.resumeSessionRequestArgsForCall = append(fake.resumeSessionRequestArgsForCall, struct {
		arg1 *ssm.ResumeSessionInput
	}{arg1})
	stub := fake.ResumeSessionRequestStub
	fakeReturns := fake.resumeSessionRequestReturns
	fake.recordInvocation("ResumeSessionRequest", []interface{}{arg1})
	fake.resumeSessionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ResumeSessionRequestCallCount() int {
	fake.resumeSessionRequestMutex.RLock()
	defer fake.resumeSessionRequestMutex.RUnlock()
	return len(fake.resumeSessionRequestArgsForCall)
}

func (fake *FakeSSMClient) ResumeSessionRequestCalls(stub func(*ssm.ResumeSessionInput) (*request.Request, *ssm.ResumeSessionOutput)) {
	fake.resumeSessionRequestMutex.Lock()
	defer fake.resumeSessionRequestMutex.Unlock()
	fake.ResumeSessionRequestStub = stub
}

func (fake *FakeSSMClient) ResumeSessionRequestArgsForCall(i int) *ssm.ResumeSessionInput {
	fake.resumeSessionRequestMutex.RLock()
	defer fake.resumeSessionRequestMutex.RUnlock()
	argsForCall := fake.resumeSessionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) ResumeSessionRequestReturns(result1 *request.Request, result2 *ssm.ResumeSessionOutput) {
	fake.resumeSessionRequestMutex.Lock()
	defer fake.resumeSessionRequestMutex.Unlock()
	fake.ResumeSessionRequestStub = nil
	fake.resumeSessionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.ResumeSessionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ResumeSessionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.ResumeSessionOutput) {
	fake.resumeSessionRequestMutex.Lock()
	defer fake.resumeSessionRequestMutex.Unlock()
	fake.ResumeSessionRequestStub = nil
	if fake.resumeSessionRequestReturnsOnCall == nil {
		fake.resumeSessionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.ResumeSessionOutput
		})
	}
	fake.resumeSessionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.ResumeSessionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) ResumeSessionWithContext(arg1 context.Context, arg2 *ssm.ResumeSessionInput, arg3 ...request.Option) (*ssm.ResumeSessionOutput, error) {
	fake.resumeSessionWithContextMutex.Lock()
	ret, specificReturn := fake.resumeSessionWithContextReturnsOnCall[len(fake.resumeSessionWithContextArgsForCall)]
	fake.resumeSessionWithContextArgsForCall = append(fake.resumeSessionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.ResumeSessionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ResumeSessionWithContextStub
	fakeReturns := fake.resumeSessionWithContextReturns
	fake.recordInvocation("ResumeSessionWithContext", []interface{}{arg1, arg2, arg3})
	fake.resumeSessionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) ResumeSessionWithContextCallCount() int {
	fake.resumeSessionWithContextMutex.RLock()
	defer fake.resumeSessionWithContextMutex.RUnlock()
	return len(fake.resumeSessionWithContextArgsForCall)
}

func (fake *FakeSSMClient) ResumeSessionWithContextCalls(stub func(context.Context, *ssm.ResumeSessionInput, ...request.Option) (*ssm.ResumeSessionOutput, error)) {
	fake.resumeSessionWithContextMutex.Lock()
	defer fake.resumeSessionWithContextMutex.Unlock()
	fake.ResumeSessionWithContextStub = stub
}

func (fake *FakeSSMClient) ResumeSessionWithContextArgsForCall(i int) (context.Context, *ssm.ResumeSessionInput, []request.Option) {
	fake.resumeSessionWithContextMutex.RLock()
	defer fake.resumeSessionWithContextMutex.RUnlock()
	argsForCall := fake.resumeSessionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) ResumeSessionWithContextReturns(result1 *ssm.ResumeSessionOutput, result2 error) {
	fake.resumeSessionWithContextMutex.Lock()
	defer fake.resumeSessionWithContextMutex.Unlock()
	fake.ResumeSessionWithContextStub = nil
	fake.resumeSessionWithContextReturns = struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) ResumeSessionWithContextReturnsOnCall(i int, result1 *ssm.ResumeSessionOutput, result2 error) {
	fake.resumeSessionWithContextMutex.Lock()
	defer fake.resumeSessionWithContextMutex.Unlock()
	fake.ResumeSessionWithContextStub = nil
	if fake.resumeSessionWithContextReturnsOnCall == nil {
		fake.resumeSessionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.ResumeSessionOutput
			result2 error
		})
	}
	fake.resumeSessionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.ResumeSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendAutomationSignal(arg1 *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error) {
	fake.sendAutomationSignalMutex.Lock()
	ret, specificReturn := fake.sendAutomationSignalReturnsOnCall[len(fake.sendAutomationSignalArgsForCall)]
	fake.sendAutomationSignalArgsForCall = append(fake.sendAutomationSignalArgsForCall, struct {
		arg1 *ssm.SendAutomationSignalInput
	}{arg1})
	stub := fake.SendAutomationSignalStub
	fakeReturns := fake.sendAutomationSignalReturns
	fake.recordInvocation("SendAutomationSignal", []interface{}{arg1})
	fake.sendAutomationSignalMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) SendAutomationSignalCallCount() int {
	fake.sendAutomationSignalMutex.RLock()
	defer fake.sendAutomationSignalMutex.RUnlock()
	return len(fake.sendAutomationSignalArgsForCall)
}

func (fake *FakeSSMClient) SendAutomationSignalCalls(stub func(*ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error)) {
	fake.sendAutomationSignalMutex.Lock()
	defer fake.sendAutomationSignalMutex.Unlock()
	fake.SendAutomationSignalStub = stub
}

func (fake *FakeSSMClient) SendAutomationSignalArgsForCall(i int) *ssm.SendAutomationSignalInput {
	fake.sendAutomationSignalMutex.RLock()
	defer fake.sendAutomationSignalMutex.RUnlock()
	argsForCall := fake.sendAutomationSignalArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) SendAutomationSignalReturns(result1 *ssm.SendAutomationSignalOutput, result2 error) {
	fake.sendAutomationSignalMutex.Lock()
	defer fake.sendAutomationSignalMutex.Unlock()
	fake.SendAutomationSignalStub = nil
	fake.sendAutomationSignalReturns = struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendAutomationSignalReturnsOnCall(i int, result1 *ssm.SendAutomationSignalOutput, result2 error) {
	fake.sendAutomationSignalMutex.Lock()
	defer fake.sendAutomationSignalMutex.Unlock()
	fake.SendAutomationSignalStub = nil
	if fake.sendAutomationSignalReturnsOnCall == nil {
		fake.sendAutomationSignalReturnsOnCall = make(map[int]struct {
			result1 *ssm.SendAutomationSignalOutput
			result2 error
		})
	}
	fake.sendAutomationSignalReturnsOnCall[i] = struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendAutomationSignalRequest(arg1 *ssm.SendAutomationSignalInput) (*request.Request, *ssm.SendAutomationSignalOutput) {
	fake.sendAutomationSignalRequestMutex.Lock()
	ret, specificReturn := fake.sendAutomationSignalRequestReturnsOnCall[len(fake.sendAutomationSignalRequestArgsForCall)]
	fake.sendAutomationSignalRequestArgsForCall = append(fake.sendAutomationSignalRequestArgsForCall, struct {
		arg1 *ssm.SendAutomationSignalInput
	}{arg1})
	stub := fake.SendAutomationSignalRequestStub
	fakeReturns := fake.sendAutomationSignalRequestReturns
	fake.recordInvocation("SendAutomationSignalRequest", []interface{}{arg1})
	fake.sendAutomationSignalRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) SendAutomationSignalRequestCallCount() int {
	fake.sendAutomationSignalRequestMutex.RLock()
	defer fake.sendAutomationSignalRequestMutex.RUnlock()
	return len(fake.sendAutomationSignalRequestArgsForCall)
}

func (fake *FakeSSMClient) SendAutomationSignalRequestCalls(stub func(*ssm.SendAutomationSignalInput) (*request.Request, *ssm.SendAutomationSignalOutput)) {
	fake.sendAutomationSignalRequestMutex.Lock()
	defer fake.sendAutomationSignalRequestMutex.Unlock()
	fake.SendAutomationSignalRequestStub = stub
}

func (fake *FakeSSMClient) SendAutomationSignalRequestArgsForCall(i int) *ssm.SendAutomationSignalInput {
	fake.sendAutomationSignalRequestMutex.RLock()
	defer fake.sendAutomationSignalRequestMutex.RUnlock()
	argsForCall := fake.sendAutomationSignalRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) SendAutomationSignalRequestReturns(result1 *request.Request, result2 *ssm.SendAutomationSignalOutput) {
	fake.sendAutomationSignalRequestMutex.Lock()
	defer fake.sendAutomationSignalRequestMutex.Unlock()
	fake.SendAutomationSignalRequestStub = nil
	fake.sendAutomationSignalRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.SendAutomationSignalOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) SendAutomationSignalRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.SendAutomationSignalOutput) {
	fake.sendAutomationSignalRequestMutex.Lock()
	defer fake.sendAutomationSignalRequestMutex.Unlock()
	fake.SendAutomationSignalRequestStub = nil
	if fake.sendAutomationSignalRequestReturnsOnCall == nil {
		fake.sendAutomationSignalRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.SendAutomationSignalOutput
		})
	}
	fake.sendAutomationSignalRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.SendAutomationSignalOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) SendAutomationSignalWithContext(arg1 context.Context, arg2 *ssm.SendAutomationSignalInput, arg3 ...request.Option) (*ssm.SendAutomationSignalOutput, error) {
	fake.sendAutomationSignalWithContextMutex.Lock()
	ret, specificReturn := fake.sendAutomationSignalWithContextReturnsOnCall[len(fake.sendAutomationSignalWithContextArgsForCall)]
	fake.sendAutomationSignalWithContextArgsForCall = append(fake.sendAutomationSignalWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.SendAutomationSignalInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SendAutomationSignalWithContextStub
	fakeReturns := fake.sendAutomationSignalWithContextReturns
	fake.recordInvocation("SendAutomationSignalWithContext", []interface{}{arg1, arg2, arg3})
	fake.sendAutomationSignalWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) SendAutomationSignalWithContextCallCount() int {
	fake.sendAutomationSignalWithContextMutex.RLock()
	defer fake.sendAutomationSignalWithContextMutex.RUnlock()
	return len(fake.sendAutomationSignalWithContextArgsForCall)
}

func (fake *FakeSSMClient) SendAutomationSignalWithContextCalls(stub func(context.Context, *ssm.SendAutomationSignalInput, ...request.Option) (*ssm.SendAutomationSignalOutput, error)) {
	fake.sendAutomationSignalWithContextMutex.Lock()
	defer fake.sendAutomationSignalWithContextMutex.Unlock()
	fake.SendAutomationSignalWithContextStub = stub
}

func (fake *FakeSSMClient) SendAutomationSignalWithContextArgsForCall(i int) (context.Context, *ssm.SendAutomationSignalInput, []request.Option) {
	fake.sendAutomationSignalWithContextMutex.RLock()
	defer fake.sendAutomationSignalWithContextMutex.RUnlock()
	argsForCall := fake.sendAutomationSignalWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) SendAutomationSignalWithContextReturns(result1 *ssm.SendAutomationSignalOutput, result2 error) {
	fake.sendAutomationSignalWithContextMutex.Lock()
	defer fake.sendAutomationSignalWithContextMutex.Unlock()
	fake.SendAutomationSignalWithContextStub = nil
	fake.sendAutomationSignalWithContextReturns = struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendAutomationSignalWithContextReturnsOnCall(i int, result1 *ssm.SendAutomationSignalOutput, result2 error) {
	fake.sendAutomationSignalWithContextMutex.Lock()
	defer fake.sendAutomationSignalWithContextMutex.Unlock()
	fake.SendAutomationSignalWithContextStub = nil
	if fake.sendAutomationSignalWithContextReturnsOnCall == nil {
		fake.sendAutomationSignalWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.SendAutomationSignalOutput
			result2 error
		})
	}
	fake.sendAutomationSignalWithContextReturnsOnCall[i] = struct {
		result1 *ssm.SendAutomationSignalOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendCommand(arg1 *ssm.SendCommandInput) (*ssm.SendCommandOutput, error) {
	fake.sendCommandMutex.Lock()
	ret, specificReturn := fake.sendCommandReturnsOnCall[len(fake.sendCommandArgsForCall)]
	fake.sendCommandArgsForCall = append(fake.sendCommandArgsForCall, struct {
		arg1 *ssm.SendCommandInput
	}{arg1})
	stub := fake.SendCommandStub
	fakeReturns := fake.sendCommandReturns
	fake.recordInvocation("SendCommand", []interface{}{arg1})
	fake.sendCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) SendCommandCallCount() int {
	fake.sendCommandMutex.RLock()
	defer fake.sendCommandMutex.RUnlock()
	return len(fake.sendCommandArgsForCall)
}

func (fake *FakeSSMClient) SendCommandCalls(stub func(*ssm.SendCommandInput) (*ssm.SendCommandOutput, error)) {
	fake.sendCommandMutex.Lock()
	defer fake.sendCommandMutex.Unlock()
	fake.SendCommandStub = stub
}

func (fake *FakeSSMClient) SendCommandArgsForCall(i int) *ssm.SendCommandInput {
	fake.sendCommandMutex.RLock()
	defer fake.sendCommandMutex.RUnlock()
	argsForCall := fake.sendCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) SendCommandReturns(result1 *ssm.SendCommandOutput, result2 error) {
	fake.sendCommandMutex.Lock()
	defer fake.sendCommandMutex.Unlock()
	fake.SendCommandStub = nil
	fake.sendCommandReturns = struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendCommandReturnsOnCall(i int, result1 *ssm.SendCommandOutput, result2 error) {
	fake.sendCommandMutex.Lock()
	defer fake.sendCommandMutex.Unlock()
	fake.SendCommandStub = nil
	if fake.sendCommandReturnsOnCall == nil {
		fake.sendCommandReturnsOnCall = make(map[int]struct {
			result1 *ssm.SendCommandOutput
			result2 error
		})
	}
	fake.sendCommandReturnsOnCall[i] = struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendCommandRequest(arg1 *ssm.SendCommandInput) (*request.Request, *ssm.SendCommandOutput) {
	fake.sendCommandRequestMutex.Lock()
	ret, specificReturn := fake.sendCommandRequestReturnsOnCall[len(fake.sendCommandRequestArgsForCall)]
	fake.sendCommandRequestArgsForCall = append(fake.sendCommandRequestArgsForCall, struct {
		arg1 *ssm.SendCommandInput
	}{arg1})
	stub := fake.SendCommandRequestStub
	fakeReturns := fake.sendCommandRequestReturns
	fake.recordInvocation("SendCommandRequest", []interface{}{arg1})
	fake.sendCommandRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) SendCommandRequestCallCount() int {
	fake.sendCommandRequestMutex.RLock()
	defer fake.sendCommandRequestMutex.RUnlock()
	return len(fake.sendCommandRequestArgsForCall)
}

func (fake *FakeSSMClient) SendCommandRequestCalls(stub func(*ssm.SendCommandInput) (*request.Request, *ssm.SendCommandOutput)) {
	fake.sendCommandRequestMutex.Lock()
	defer fake.sendCommandRequestMutex.Unlock()
	fake.SendCommandRequestStub = stub
}

func (fake *FakeSSMClient) SendCommandRequestArgsForCall(i int) *ssm.SendCommandInput {
	fake.sendCommandRequestMutex.RLock()
	defer fake.sendCommandRequestMutex.RUnlock()
	argsForCall := fake.sendCommandRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) SendCommandRequestReturns(result1 *request.Request, result2 *ssm.SendCommandOutput) {
	fake.sendCommandRequestMutex.Lock()
	defer fake.sendCommandRequestMutex.Unlock()
	fake.SendCommandRequestStub = nil
	fake.sendCommandRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.SendCommandOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) SendCommandRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.SendCommandOutput) {
	fake.sendCommandRequestMutex.Lock()
	defer fake.sendCommandRequestMutex.Unlock()
	fake.SendCommandRequestStub = nil
	if fake.sendCommandRequestReturnsOnCall == nil {
		fake.sendCommandRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.SendCommandOutput
		})
	}
	fake.sendCommandRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.SendCommandOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) SendCommandWithContext(arg1 context.Context, arg2 *ssm.SendCommandInput, arg3 ...request.Option) (*ssm.SendCommandOutput, error) {
	fake.sendCommandWithContextMutex.Lock()
	ret, specificReturn := fake.sendCommandWithContextReturnsOnCall[len(fake.sendCommandWithContextArgsForCall)]
	fake.sendCommandWithContextArgsForCall = append(fake.sendCommandWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.SendCommandInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.SendCommandWithContextStub
	fakeReturns := fake.sendCommandWithContextReturns
	fake.recordInvocation("SendCommandWithContext", []interface{}{arg1, arg2, arg3})
	fake.sendCommandWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) SendCommandWithContextCallCount() int {
	fake.sendCommandWithContextMutex.RLock()
	defer fake.sendCommandWithContextMutex.RUnlock()
	return len(fake.sendCommandWithContextArgsForCall)
}

func (fake *FakeSSMClient) SendCommandWithContextCalls(stub func(context.Context, *ssm.SendCommandInput, ...request.Option) (*ssm.SendCommandOutput, error)) {
	fake.sendCommandWithContextMutex.Lock()
	defer fake.sendCommandWithContextMutex.Unlock()
	fake.SendCommandWithContextStub = stub
}

func (fake *FakeSSMClient) SendCommandWithContextArgsForCall(i int) (context.Context, *ssm.SendCommandInput, []request.Option) {
	fake.sendCommandWithContextMutex.RLock()
	defer fake.sendCommandWithContextMutex.RUnlock()
	argsForCall := fake.sendCommandWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) SendCommandWithContextReturns(result1 *ssm.SendCommandOutput, result2 error) {
	fake.sendCommandWithContextMutex.Lock()
	defer fake.sendCommandWithContextMutex.Unlock()
	fake.SendCommandWithContextStub = nil
	fake.sendCommandWithContextReturns = struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) SendCommandWithContextReturnsOnCall(i int, result1 *ssm.SendCommandOutput, result2 error) {
	fake.sendCommandWithContextMutex.Lock()
	defer fake.sendCommandWithContextMutex.Unlock()
	fake.SendCommandWithContextStub = nil
	if fake.sendCommandWithContextReturnsOnCall == nil {
		fake.sendCommandWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.SendCommandOutput
			result2 error
		})
	}
	fake.sendCommandWithContextReturnsOnCall[i] = struct {
		result1 *ssm.SendCommandOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAssociationsOnce(arg1 *ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error) {
	fake.startAssociationsOnceMutex.Lock()
	ret, specificReturn := fake.startAssociationsOnceReturnsOnCall[len(fake.startAssociationsOnceArgsForCall)]
	fake.startAssociationsOnceArgsForCall = append(fake.startAssociationsOnceArgsForCall, struct {
		arg1 *ssm.StartAssociationsOnceInput
	}{arg1})
	stub := fake.StartAssociationsOnceStub
	fakeReturns := fake.startAssociationsOnceReturns
	fake.recordInvocation("StartAssociationsOnce", []interface{}{arg1})
	fake.startAssociationsOnceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartAssociationsOnceCallCount() int {
	fake.startAssociationsOnceMutex.RLock()
	defer fake.startAssociationsOnceMutex.RUnlock()
	return len(fake.startAssociationsOnceArgsForCall)
}

func (fake *FakeSSMClient) StartAssociationsOnceCalls(stub func(*ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error)) {
	fake.startAssociationsOnceMutex.Lock()
	defer fake.startAssociationsOnceMutex.Unlock()
	fake.StartAssociationsOnceStub = stub
}

func (fake *FakeSSMClient) StartAssociationsOnceArgsForCall(i int) *ssm.StartAssociationsOnceInput {
	fake.startAssociationsOnceMutex.RLock()
	defer fake.startAssociationsOnceMutex.RUnlock()
	argsForCall := fake.startAssociationsOnceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartAssociationsOnceReturns(result1 *ssm.StartAssociationsOnceOutput, result2 error) {
	fake.startAssociationsOnceMutex.Lock()
	defer fake.startAssociationsOnceMutex.Unlock()
	fake.StartAssociationsOnceStub = nil
	fake.startAssociationsOnceReturns = struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAssociationsOnceReturnsOnCall(i int, result1 *ssm.StartAssociationsOnceOutput, result2 error) {
	fake.startAssociationsOnceMutex.Lock()
	defer fake.startAssociationsOnceMutex.Unlock()
	fake.StartAssociationsOnceStub = nil
	if fake.startAssociationsOnceReturnsOnCall == nil {
		fake.startAssociationsOnceReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartAssociationsOnceOutput
			result2 error
		})
	}
	fake.startAssociationsOnceReturnsOnCall[i] = struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAssociationsOnceRequest(arg1 *ssm.StartAssociationsOnceInput) (*request.Request, *ssm.StartAssociationsOnceOutput) {
	fake.startAssociationsOnceRequestMutex.Lock()
	ret, specificReturn := fake.startAssociationsOnceRequestReturnsOnCall[len(fake.startAssociationsOnceRequestArgsForCall)]
	fake.startAssociationsOnceRequestArgsForCall = append(fake.startAssociationsOnceRequestArgsForCall, struct {
		arg1 *ssm.StartAssociationsOnceInput
	}{arg1})
	stub := fake.StartAssociationsOnceRequestStub
	fakeReturns := fake.startAssociationsOnceRequestReturns
	fake.recordInvocation("StartAssociationsOnceRequest", []interface{}{arg1})
	fake.startAssociationsOnceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartAssociationsOnceRequestCallCount() int {
	fake.startAssociationsOnceRequestMutex.RLock()
	defer fake.startAssociationsOnceRequestMutex.RUnlock()
	return len(fake.startAssociationsOnceRequestArgsForCall)
}

func (fake *FakeSSMClient) StartAssociationsOnceRequestCalls(stub func(*ssm.StartAssociationsOnceInput) (*request.Request, *ssm.StartAssociationsOnceOutput)) {
	fake.startAssociationsOnceRequestMutex.Lock()
	defer fake.startAssociationsOnceRequestMutex.Unlock()
	fake.StartAssociationsOnceRequestStub = stub
}

func (fake *FakeSSMClient) StartAssociationsOnceRequestArgsForCall(i int) *ssm.StartAssociationsOnceInput {
	fake.startAssociationsOnceRequestMutex.RLock()
	defer fake.startAssociationsOnceRequestMutex.RUnlock()
	argsForCall := fake.startAssociationsOnceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartAssociationsOnceRequestReturns(result1 *request.Request, result2 *ssm.StartAssociationsOnceOutput) {
	fake.startAssociationsOnceRequestMutex.Lock()
	defer fake.startAssociationsOnceRequestMutex.Unlock()
	fake.StartAssociationsOnceRequestStub = nil
	fake.startAssociationsOnceRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.StartAssociationsOnceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAssociationsOnceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.StartAssociationsOnceOutput) {
	fake.startAssociationsOnceRequestMutex.Lock()
	defer fake.startAssociationsOnceRequestMutex.Unlock()
	fake.StartAssociationsOnceRequestStub = nil
	if fake.startAssociationsOnceRequestReturnsOnCall == nil {
		fake.startAssociationsOnceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.StartAssociationsOnceOutput
		})
	}
	fake.startAssociationsOnceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.StartAssociationsOnceOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAssociationsOnceWithContext(arg1 context.Context, arg2 *ssm.StartAssociationsOnceInput, arg3 ...request.Option) (*ssm.StartAssociationsOnceOutput, error) {
	fake.startAssociationsOnceWithContextMutex.Lock()
	ret, specificReturn := fake.startAssociationsOnceWithContextReturnsOnCall[len(fake.startAssociationsOnceWithContextArgsForCall)]
	fake.startAssociationsOnceWithContextArgsForCall = append(fake.startAssociationsOnceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.StartAssociationsOnceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartAssociationsOnceWithContextStub
	fakeReturns := fake.startAssociationsOnceWithContextReturns
	fake.recordInvocation("StartAssociationsOnceWithContext", []interface{}{arg1, arg2, arg3})
	fake.startAssociationsOnceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartAssociationsOnceWithContextCallCount() int {
	fake.startAssociationsOnceWithContextMutex.RLock()
	defer fake.startAssociationsOnceWithContextMutex.RUnlock()
	return len(fake.startAssociationsOnceWithContextArgsForCall)
}

func (fake *FakeSSMClient) StartAssociationsOnceWithContextCalls(stub func(context.Context, *ssm.StartAssociationsOnceInput, ...request.Option) (*ssm.StartAssociationsOnceOutput, error)) {
	fake.startAssociationsOnceWithContextMutex.Lock()
	defer fake.startAssociationsOnceWithContextMutex.Unlock()
	fake.StartAssociationsOnceWithContextStub = stub
}

func (fake *FakeSSMClient) StartAssociationsOnceWithContextArgsForCall(i int) (context.Context, *ssm.StartAssociationsOnceInput, []request.Option) {
	fake.startAssociationsOnceWithContextMutex.RLock()
	defer fake.startAssociationsOnceWithContextMutex.RUnlock()
	argsForCall := fake.startAssociationsOnceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) StartAssociationsOnceWithContextReturns(result1 *ssm.StartAssociationsOnceOutput, result2 error) {
	fake.startAssociationsOnceWithContextMutex.Lock()
	defer fake.startAssociationsOnceWithContextMutex.Unlock()
	fake.StartAssociationsOnceWithContextStub = nil
	fake.startAssociationsOnceWithContextReturns = struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAssociationsOnceWithContextReturnsOnCall(i int, result1 *ssm.StartAssociationsOnceOutput, result2 error) {
	fake.startAssociationsOnceWithContextMutex.Lock()
	defer fake.startAssociationsOnceWithContextMutex.Unlock()
	fake.StartAssociationsOnceWithContextStub = nil
	if fake.startAssociationsOnceWithContextReturnsOnCall == nil {
		fake.startAssociationsOnceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartAssociationsOnceOutput
			result2 error
		})
	}
	fake.startAssociationsOnceWithContextReturnsOnCall[i] = struct {
		result1 *ssm.StartAssociationsOnceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAutomationExecution(arg1 *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error) {
	fake.startAutomationExecutionMutex.Lock()
	ret, specificReturn := fake.startAutomationExecutionReturnsOnCall[len(fake.startAutomationExecutionArgsForCall)]
	fake.startAutomationExecutionArgsForCall = append(fake.startAutomationExecutionArgsForCall, struct {
		arg1 *ssm.StartAutomationExecutionInput
	}{arg1})
	stub := fake.StartAutomationExecutionStub
	fakeReturns := fake.startAutomationExecutionReturns
	fake.recordInvocation("StartAutomationExecution", []interface{}{arg1})
	fake.startAutomationExecutionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartAutomationExecutionCallCount() int {
	fake.startAutomationExecutionMutex.RLock()
	defer fake.startAutomationExecutionMutex.RUnlock()
	return len(fake.startAutomationExecutionArgsForCall)
}

func (fake *FakeSSMClient) StartAutomationExecutionCalls(stub func(*ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error)) {
	fake.startAutomationExecutionMutex.Lock()
	defer fake.startAutomationExecutionMutex.Unlock()
	fake.StartAutomationExecutionStub = stub
}

func (fake *FakeSSMClient) StartAutomationExecutionArgsForCall(i int) *ssm.StartAutomationExecutionInput {
	fake.startAutomationExecutionMutex.RLock()
	defer fake.startAutomationExecutionMutex.RUnlock()
	argsForCall := fake.startAutomationExecutionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartAutomationExecutionReturns(result1 *ssm.StartAutomationExecutionOutput, result2 error) {
	fake.startAutomationExecutionMutex.Lock()
	defer fake.startAutomationExecutionMutex.Unlock()
	fake.StartAutomationExecutionStub = nil
	fake.startAutomationExecutionReturns = struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAutomationExecutionReturnsOnCall(i int, result1 *ssm.StartAutomationExecutionOutput, result2 error) {
	fake.startAutomationExecutionMutex.Lock()
	defer fake.startAutomationExecutionMutex.Unlock()
	fake.StartAutomationExecutionStub = nil
	if fake.startAutomationExecutionReturnsOnCall == nil {
		fake.startAutomationExecutionReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartAutomationExecutionOutput
			result2 error
		})
	}
	fake.startAutomationExecutionReturnsOnCall[i] = struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAutomationExecutionRequest(arg1 *ssm.StartAutomationExecutionInput) (*request.Request, *ssm.StartAutomationExecutionOutput) {
	fake.startAutomationExecutionRequestMutex.Lock()
	ret, specificReturn := fake.startAutomationExecutionRequestReturnsOnCall[len(fake.startAutomationExecutionRequestArgsForCall)]
	fake.startAutomationExecutionRequestArgsForCall = append(fake.startAutomationExecutionRequestArgsForCall, struct {
		arg1 *ssm.StartAutomationExecutionInput
	}{arg1})
	stub := fake.StartAutomationExecutionRequestStub
	fakeReturns := fake.startAutomationExecutionRequestReturns
	fake.recordInvocation("StartAutomationExecutionRequest", []interface{}{arg1})
	fake.startAutomationExecutionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartAutomationExecutionRequestCallCount() int {
	fake.startAutomationExecutionRequestMutex.RLock()
	defer fake.startAutomationExecutionRequestMutex.RUnlock()
	return len(fake.startAutomationExecutionRequestArgsForCall)
}

func (fake *FakeSSMClient) StartAutomationExecutionRequestCalls(stub func(*ssm.StartAutomationExecutionInput) (*request.Request, *ssm.StartAutomationExecutionOutput)) {
	fake.startAutomationExecutionRequestMutex.Lock()
	defer fake.startAutomationExecutionRequestMutex.Unlock()
	fake.StartAutomationExecutionRequestStub = stub
}

func (fake *FakeSSMClient) StartAutomationExecutionRequestArgsForCall(i int) *ssm.StartAutomationExecutionInput {
	fake.startAutomationExecutionRequestMutex.RLock()
	defer fake.startAutomationExecutionRequestMutex.RUnlock()
	argsForCall := fake.startAutomationExecutionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartAutomationExecutionRequestReturns(result1 *request.Request, result2 *ssm.StartAutomationExecutionOutput) {
	fake.startAutomationExecutionRequestMutex.Lock()
	defer fake.startAutomationExecutionRequestMutex.Unlock()
	fake.StartAutomationExecutionRequestStub = nil
	fake.startAutomationExecutionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.StartAutomationExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAutomationExecutionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.StartAutomationExecutionOutput) {
	fake.startAutomationExecutionRequestMutex.Lock()
	defer fake.startAutomationExecutionRequestMutex.Unlock()
	fake.StartAutomationExecutionRequestStub = nil
	if fake.startAutomationExecutionRequestReturnsOnCall == nil {
		fake.startAutomationExecutionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.StartAutomationExecutionOutput
		})
	}
	fake.startAutomationExecutionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.StartAutomationExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAutomationExecutionWithContext(arg1 context.Context, arg2 *ssm.StartAutomationExecutionInput, arg3 ...request.Option) (*ssm.StartAutomationExecutionOutput, error) {
	fake.startAutomationExecutionWithContextMutex.Lock()
	ret, specificReturn := fake.startAutomationExecutionWithContextReturnsOnCall[len(fake.startAutomationExecutionWithContextArgsForCall)]
	fake.startAutomationExecutionWithContextArgsForCall = append(fake.startAutomationExecutionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.StartAutomationExecutionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartAutomationExecutionWithContextStub
	fakeReturns := fake.startAutomationExecutionWithContextReturns
	fake.recordInvocation("StartAutomationExecutionWithContext", []interface{}{arg1, arg2, arg3})
	fake.startAutomationExecutionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartAutomationExecutionWithContextCallCount() int {
	fake.startAutomationExecutionWithContextMutex.RLock()
	defer fake.startAutomationExecutionWithContextMutex.RUnlock()
	return len(fake.startAutomationExecutionWithContextArgsForCall)
}

func (fake *FakeSSMClient) StartAutomationExecutionWithContextCalls(stub func(context.Context, *ssm.StartAutomationExecutionInput, ...request.Option) (*ssm.StartAutomationExecutionOutput, error)) {
	fake.startAutomationExecutionWithContextMutex.Lock()
	defer fake.startAutomationExecutionWithContextMutex.Unlock()
	fake.StartAutomationExecutionWithContextStub = stub
}

func (fake *FakeSSMClient) StartAutomationExecutionWithContextArgsForCall(i int) (context.Context, *ssm.StartAutomationExecutionInput, []request.Option) {
	fake.startAutomationExecutionWithContextMutex.RLock()
	defer fake.startAutomationExecutionWithContextMutex.RUnlock()
	argsForCall := fake.startAutomationExecutionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) StartAutomationExecutionWithContextReturns(result1 *ssm.StartAutomationExecutionOutput, result2 error) {
	fake.startAutomationExecutionWithContextMutex.Lock()
	defer fake.startAutomationExecutionWithContextMutex.Unlock()
	fake.StartAutomationExecutionWithContextStub = nil
	fake.startAutomationExecutionWithContextReturns = struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartAutomationExecutionWithContextReturnsOnCall(i int, result1 *ssm.StartAutomationExecutionOutput, result2 error) {
	fake.startAutomationExecutionWithContextMutex.Lock()
	defer fake.startAutomationExecutionWithContextMutex.Unlock()
	fake.StartAutomationExecutionWithContextStub = nil
	if fake.startAutomationExecutionWithContextReturnsOnCall == nil {
		fake.startAutomationExecutionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartAutomationExecutionOutput
			result2 error
		})
	}
	fake.startAutomationExecutionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.StartAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartChangeRequestExecution(arg1 *ssm.StartChangeRequestExecutionInput) (*ssm.StartChangeRequestExecutionOutput, error) {
	fake.startChangeRequestExecutionMutex.Lock()
	ret, specificReturn := fake.startChangeRequestExecutionReturnsOnCall[len(fake.startChangeRequestExecutionArgsForCall)]
	fake.startChangeRequestExecutionArgsForCall = append(fake.startChangeRequestExecutionArgsForCall, struct {
		arg1 *ssm.StartChangeRequestExecutionInput
	}{arg1})
	stub := fake.StartChangeRequestExecutionStub
	fakeReturns := fake.startChangeRequestExecutionReturns
	fake.recordInvocation("StartChangeRequestExecution", []interface{}{arg1})
	fake.startChangeRequestExecutionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartChangeRequestExecutionCallCount() int {
	fake.startChangeRequestExecutionMutex.RLock()
	defer fake.startChangeRequestExecutionMutex.RUnlock()
	return len(fake.startChangeRequestExecutionArgsForCall)
}

func (fake *FakeSSMClient) StartChangeRequestExecutionCalls(stub func(*ssm.StartChangeRequestExecutionInput) (*ssm.StartChangeRequestExecutionOutput, error)) {
	fake.startChangeRequestExecutionMutex.Lock()
	defer fake.startChangeRequestExecutionMutex.Unlock()
	fake.StartChangeRequestExecutionStub = stub
}

func (fake *FakeSSMClient) StartChangeRequestExecutionArgsForCall(i int) *ssm.StartChangeRequestExecutionInput {
	fake.startChangeRequestExecutionMutex.RLock()
	defer fake.startChangeRequestExecutionMutex.RUnlock()
	argsForCall := fake.startChangeRequestExecutionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartChangeRequestExecutionReturns(result1 *ssm.StartChangeRequestExecutionOutput, result2 error) {
	fake.startChangeRequestExecutionMutex.Lock()
	defer fake.startChangeRequestExecutionMutex.Unlock()
	fake.StartChangeRequestExecutionStub = nil
	fake.startChangeRequestExecutionReturns = struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartChangeRequestExecutionReturnsOnCall(i int, result1 *ssm.StartChangeRequestExecutionOutput, result2 error) {
	fake.startChangeRequestExecutionMutex.Lock()
	defer fake.startChangeRequestExecutionMutex.Unlock()
	fake.StartChangeRequestExecutionStub = nil
	if fake.startChangeRequestExecutionReturnsOnCall == nil {
		fake.startChangeRequestExecutionReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartChangeRequestExecutionOutput
			result2 error
		})
	}
	fake.startChangeRequestExecutionReturnsOnCall[i] = struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartChangeRequestExecutionRequest(arg1 *ssm.StartChangeRequestExecutionInput) (*request.Request, *ssm.StartChangeRequestExecutionOutput) {
	fake.startChangeRequestExecutionRequestMutex.Lock()
	ret, specificReturn := fake.startChangeRequestExecutionRequestReturnsOnCall[len(fake.startChangeRequestExecutionRequestArgsForCall)]
	fake.startChangeRequestExecutionRequestArgsForCall = append(fake.startChangeRequestExecutionRequestArgsForCall, struct {
		arg1 *ssm.StartChangeRequestExecutionInput
	}{arg1})
	stub := fake.StartChangeRequestExecutionRequestStub
	fakeReturns := fake.startChangeRequestExecutionRequestReturns
	fake.recordInvocation("StartChangeRequestExecutionRequest", []interface{}{arg1})
	fake.startChangeRequestExecutionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartChangeRequestExecutionRequestCallCount() int {
	fake.startChangeRequestExecutionRequestMutex.RLock()
	defer fake.startChangeRequestExecutionRequestMutex.RUnlock()
	return len(fake.startChangeRequestExecutionRequestArgsForCall)
}

func (fake *FakeSSMClient) StartChangeRequestExecutionRequestCalls(stub func(*ssm.StartChangeRequestExecutionInput) (*request.Request, *ssm.StartChangeRequestExecutionOutput)) {
	fake.startChangeRequestExecutionRequestMutex.Lock()
	defer fake.startChangeRequestExecutionRequestMutex.Unlock()
	fake.StartChangeRequestExecutionRequestStub = stub
}

func (fake *FakeSSMClient) StartChangeRequestExecutionRequestArgsForCall(i int) *ssm.StartChangeRequestExecutionInput {
	fake.startChangeRequestExecutionRequestMutex.RLock()
	defer fake.startChangeRequestExecutionRequestMutex.RUnlock()
	argsForCall := fake.startChangeRequestExecutionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartChangeRequestExecutionRequestReturns(result1 *request.Request, result2 *ssm.StartChangeRequestExecutionOutput) {
	fake.startChangeRequestExecutionRequestMutex.Lock()
	defer fake.startChangeRequestExecutionRequestMutex.Unlock()
	fake.StartChangeRequestExecutionRequestStub = nil
	fake.startChangeRequestExecutionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.StartChangeRequestExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartChangeRequestExecutionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.StartChangeRequestExecutionOutput) {
	fake.startChangeRequestExecutionRequestMutex.Lock()
	defer fake.startChangeRequestExecutionRequestMutex.Unlock()
	fake.StartChangeRequestExecutionRequestStub = nil
	if fake.startChangeRequestExecutionRequestReturnsOnCall == nil {
		fake.startChangeRequestExecutionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.StartChangeRequestExecutionOutput
		})
	}
	fake.startChangeRequestExecutionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.StartChangeRequestExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartChangeRequestExecutionWithContext(arg1 context.Context, arg2 *ssm.StartChangeRequestExecutionInput, arg3 ...request.Option) (*ssm.StartChangeRequestExecutionOutput, error) {
	fake.startChangeRequestExecutionWithContextMutex.Lock()
	ret, specificReturn := fake.startChangeRequestExecutionWithContextReturnsOnCall[len(fake.startChangeRequestExecutionWithContextArgsForCall)]
	fake.startChangeRequestExecutionWithContextArgsForCall = append(fake.startChangeRequestExecutionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.StartChangeRequestExecutionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartChangeRequestExecutionWithContextStub
	fakeReturns := fake.startChangeRequestExecutionWithContextReturns
	fake.recordInvocation("StartChangeRequestExecutionWithContext", []interface{}{arg1, arg2, arg3})
	fake.startChangeRequestExecutionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartChangeRequestExecutionWithContextCallCount() int {
	fake.startChangeRequestExecutionWithContextMutex.RLock()
	defer fake.startChangeRequestExecutionWithContextMutex.RUnlock()
	return len(fake.startChangeRequestExecutionWithContextArgsForCall)
}

func (fake *FakeSSMClient) StartChangeRequestExecutionWithContextCalls(stub func(context.Context, *ssm.StartChangeRequestExecutionInput, ...request.Option) (*ssm.StartChangeRequestExecutionOutput, error)) {
	fake.startChangeRequestExecutionWithContextMutex.Lock()
	defer fake.startChangeRequestExecutionWithContextMutex.Unlock()
	fake.StartChangeRequestExecutionWithContextStub = stub
}

func (fake *FakeSSMClient) StartChangeRequestExecutionWithContextArgsForCall(i int) (context.Context, *ssm.StartChangeRequestExecutionInput, []request.Option) {
	fake.startChangeRequestExecutionWithContextMutex.RLock()
	defer fake.startChangeRequestExecutionWithContextMutex.RUnlock()
	argsForCall := fake.startChangeRequestExecutionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) StartChangeRequestExecutionWithContextReturns(result1 *ssm.StartChangeRequestExecutionOutput, result2 error) {
	fake.startChangeRequestExecutionWithContextMutex.Lock()
	defer fake.startChangeRequestExecutionWithContextMutex.Unlock()
	fake.StartChangeRequestExecutionWithContextStub = nil
	fake.startChangeRequestExecutionWithContextReturns = struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartChangeRequestExecutionWithContextReturnsOnCall(i int, result1 *ssm.StartChangeRequestExecutionOutput, result2 error) {
	fake.startChangeRequestExecutionWithContextMutex.Lock()
	defer fake.startChangeRequestExecutionWithContextMutex.Unlock()
	fake.StartChangeRequestExecutionWithContextStub = nil
	if fake.startChangeRequestExecutionWithContextReturnsOnCall == nil {
		fake.startChangeRequestExecutionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartChangeRequestExecutionOutput
			result2 error
		})
	}
	fake.startChangeRequestExecutionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.StartChangeRequestExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartSession(arg1 *ssm.StartSessionInput) (*ssm.StartSessionOutput, error) {
	fake.startSessionMutex.Lock()
	ret, specificReturn := fake.startSessionReturnsOnCall[len(fake.startSessionArgsForCall)]
	fake.startSessionArgsForCall = append(fake.startSessionArgsForCall, struct {
		arg1 *ssm.StartSessionInput
	}{arg1})
	stub := fake.StartSessionStub
	fakeReturns := fake.startSessionReturns
	fake.recordInvocation("StartSession", []interface{}{arg1})
	fake.startSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartSessionCallCount() int {
	fake.startSessionMutex.RLock()
	defer fake.startSessionMutex.RUnlock()
	return len(fake.startSessionArgsForCall)
}

func (fake *FakeSSMClient) StartSessionCalls(stub func(*ssm.StartSessionInput) (*ssm.StartSessionOutput, error)) {
	fake.startSessionMutex.Lock()
	defer fake.startSessionMutex.Unlock()
	fake.StartSessionStub = stub
}

func (fake *FakeSSMClient) StartSessionArgsForCall(i int) *ssm.StartSessionInput {
	fake.startSessionMutex.RLock()
	defer fake.startSessionMutex.RUnlock()
	argsForCall := fake.startSessionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartSessionReturns(result1 *ssm.StartSessionOutput, result2 error) {
	fake.startSessionMutex.Lock()
	defer fake.startSessionMutex.Unlock()
	fake.StartSessionStub = nil
	fake.startSessionReturns = struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartSessionReturnsOnCall(i int, result1 *ssm.StartSessionOutput, result2 error) {
	fake.startSessionMutex.Lock()
	defer fake.startSessionMutex.Unlock()
	fake.StartSessionStub = nil
	if fake.startSessionReturnsOnCall == nil {
		fake.startSessionReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartSessionOutput
			result2 error
		})
	}
	fake.startSessionReturnsOnCall[i] = struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartSessionRequest(arg1 *ssm.StartSessionInput) (*request.Request, *ssm.StartSessionOutput) {
	fake.startSessionRequestMutex.Lock()
	ret, specificReturn := fake.startSessionRequestReturnsOnCall[len(fake.startSessionRequestArgsForCall)]
	fake.startSessionRequestArgsForCall = append(fake.startSessionRequestArgsForCall, struct {
		arg1 *ssm.StartSessionInput
	}{arg1})
	stub := fake.StartSessionRequestStub
	fakeReturns := fake.startSessionRequestReturns
	fake.recordInvocation("StartSessionRequest", []interface{}{arg1})
	fake.startSessionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartSessionRequestCallCount() int {
	fake.startSessionRequestMutex.RLock()
	defer fake.startSessionRequestMutex.RUnlock()
	return len(fake.startSessionRequestArgsForCall)
}

func (fake *FakeSSMClient) StartSessionRequestCalls(stub func(*ssm.StartSessionInput) (*request.Request, *ssm.StartSessionOutput)) {
	fake.startSessionRequestMutex.Lock()
	defer fake.startSessionRequestMutex.Unlock()
	fake.StartSessionRequestStub = stub
}

func (fake *FakeSSMClient) StartSessionRequestArgsForCall(i int) *ssm.StartSessionInput {
	fake.startSessionRequestMutex.RLock()
	defer fake.startSessionRequestMutex.RUnlock()
	argsForCall := fake.startSessionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StartSessionRequestReturns(result1 *request.Request, result2 *ssm.StartSessionOutput) {
	fake.startSessionRequestMutex.Lock()
	defer fake.startSessionRequestMutex.Unlock()
	fake.StartSessionRequestStub = nil
	fake.startSessionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.StartSessionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartSessionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.StartSessionOutput) {
	fake.startSessionRequestMutex.Lock()
	defer fake.startSessionRequestMutex.Unlock()
	fake.StartSessionRequestStub = nil
	if fake.startSessionRequestReturnsOnCall == nil {
		fake.startSessionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.StartSessionOutput
		})
	}
	fake.startSessionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.StartSessionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StartSessionWithContext(arg1 context.Context, arg2 *ssm.StartSessionInput, arg3 ...request.Option) (*ssm.StartSessionOutput, error) {
	fake.startSessionWithContextMutex.Lock()
	ret, specificReturn := fake.startSessionWithContextReturnsOnCall[len(fake.startSessionWithContextArgsForCall)]
	fake.startSessionWithContextArgsForCall = append(fake.startSessionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.StartSessionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StartSessionWithContextStub
	fakeReturns := fake.startSessionWithContextReturns
	fake.recordInvocation("StartSessionWithContext", []interface{}{arg1, arg2, arg3})
	fake.startSessionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StartSessionWithContextCallCount() int {
	fake.startSessionWithContextMutex.RLock()
	defer fake.startSessionWithContextMutex.RUnlock()
	return len(fake.startSessionWithContextArgsForCall)
}

func (fake *FakeSSMClient) StartSessionWithContextCalls(stub func(context.Context, *ssm.StartSessionInput, ...request.Option) (*ssm.StartSessionOutput, error)) {
	fake.startSessionWithContextMutex.Lock()
	defer fake.startSessionWithContextMutex.Unlock()
	fake.StartSessionWithContextStub = stub
}

func (fake *FakeSSMClient) StartSessionWithContextArgsForCall(i int) (context.Context, *ssm.StartSessionInput, []request.Option) {
	fake.startSessionWithContextMutex.RLock()
	defer fake.startSessionWithContextMutex.RUnlock()
	argsForCall := fake.startSessionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) StartSessionWithContextReturns(result1 *ssm.StartSessionOutput, result2 error) {
	fake.startSessionWithContextMutex.Lock()
	defer fake.startSessionWithContextMutex.Unlock()
	fake.StartSessionWithContextStub = nil
	fake.startSessionWithContextReturns = struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StartSessionWithContextReturnsOnCall(i int, result1 *ssm.StartSessionOutput, result2 error) {
	fake.startSessionWithContextMutex.Lock()
	defer fake.startSessionWithContextMutex.Unlock()
	fake.StartSessionWithContextStub = nil
	if fake.startSessionWithContextReturnsOnCall == nil {
		fake.startSessionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.StartSessionOutput
			result2 error
		})
	}
	fake.startSessionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.StartSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StopAutomationExecution(arg1 *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error) {
	fake.stopAutomationExecutionMutex.Lock()
	ret, specificReturn := fake.stopAutomationExecutionReturnsOnCall[len(fake.stopAutomationExecutionArgsForCall)]
	fake.stopAutomationExecutionArgsForCall = append(fake.stopAutomationExecutionArgsForCall, struct {
		arg1 *ssm.StopAutomationExecutionInput
	}{arg1})
	stub := fake.StopAutomationExecutionStub
	fakeReturns := fake.stopAutomationExecutionReturns
	fake.recordInvocation("StopAutomationExecution", []interface{}{arg1})
	fake.stopAutomationExecutionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StopAutomationExecutionCallCount() int {
	fake.stopAutomationExecutionMutex.RLock()
	defer fake.stopAutomationExecutionMutex.RUnlock()
	return len(fake.stopAutomationExecutionArgsForCall)
}

func (fake *FakeSSMClient) StopAutomationExecutionCalls(stub func(*ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error)) {
	fake.stopAutomationExecutionMutex.Lock()
	defer fake.stopAutomationExecutionMutex.Unlock()
	fake.StopAutomationExecutionStub = stub
}

func (fake *FakeSSMClient) StopAutomationExecutionArgsForCall(i int) *ssm.StopAutomationExecutionInput {
	fake.stopAutomationExecutionMutex.RLock()
	defer fake.stopAutomationExecutionMutex.RUnlock()
	argsForCall := fake.stopAutomationExecutionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StopAutomationExecutionReturns(result1 *ssm.StopAutomationExecutionOutput, result2 error) {
	fake.stopAutomationExecutionMutex.Lock()
	defer fake.stopAutomationExecutionMutex.Unlock()
	fake.StopAutomationExecutionStub = nil
	fake.stopAutomationExecutionReturns = struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StopAutomationExecutionReturnsOnCall(i int, result1 *ssm.StopAutomationExecutionOutput, result2 error) {
	fake.stopAutomationExecutionMutex.Lock()
	defer fake.stopAutomationExecutionMutex.Unlock()
	fake.StopAutomationExecutionStub = nil
	if fake.stopAutomationExecutionReturnsOnCall == nil {
		fake.stopAutomationExecutionReturnsOnCall = make(map[int]struct {
			result1 *ssm.StopAutomationExecutionOutput
			result2 error
		})
	}
	fake.stopAutomationExecutionReturnsOnCall[i] = struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StopAutomationExecutionRequest(arg1 *ssm.StopAutomationExecutionInput) (*request.Request, *ssm.StopAutomationExecutionOutput) {
	fake.stopAutomationExecutionRequestMutex.Lock()
	ret, specificReturn := fake.stopAutomationExecutionRequestReturnsOnCall[len(fake.stopAutomationExecutionRequestArgsForCall)]
	fake.stopAutomationExecutionRequestArgsForCall = append(fake.stopAutomationExecutionRequestArgsForCall, struct {
		arg1 *ssm.StopAutomationExecutionInput
	}{arg1})
	stub := fake.StopAutomationExecutionRequestStub
	fakeReturns := fake.stopAutomationExecutionRequestReturns
	fake.recordInvocation("StopAutomationExecutionRequest", []interface{}{arg1})
	fake.stopAutomationExecutionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StopAutomationExecutionRequestCallCount() int {
	fake.stopAutomationExecutionRequestMutex.RLock()
	defer fake.stopAutomationExecutionRequestMutex.RUnlock()
	return len(fake.stopAutomationExecutionRequestArgsForCall)
}

func (fake *FakeSSMClient) StopAutomationExecutionRequestCalls(stub func(*ssm.StopAutomationExecutionInput) (*request.Request, *ssm.StopAutomationExecutionOutput)) {
	fake.stopAutomationExecutionRequestMutex.Lock()
	defer fake.stopAutomationExecutionRequestMutex.Unlock()
	fake.StopAutomationExecutionRequestStub = stub
}

func (fake *FakeSSMClient) StopAutomationExecutionRequestArgsForCall(i int) *ssm.StopAutomationExecutionInput {
	fake.stopAutomationExecutionRequestMutex.RLock()
	defer fake.stopAutomationExecutionRequestMutex.RUnlock()
	argsForCall := fake.stopAutomationExecutionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) StopAutomationExecutionRequestReturns(result1 *request.Request, result2 *ssm.StopAutomationExecutionOutput) {
	fake.stopAutomationExecutionRequestMutex.Lock()
	defer fake.stopAutomationExecutionRequestMutex.Unlock()
	fake.StopAutomationExecutionRequestStub = nil
	fake.stopAutomationExecutionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.StopAutomationExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StopAutomationExecutionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.StopAutomationExecutionOutput) {
	fake.stopAutomationExecutionRequestMutex.Lock()
	defer fake.stopAutomationExecutionRequestMutex.Unlock()
	fake.StopAutomationExecutionRequestStub = nil
	if fake.stopAutomationExecutionRequestReturnsOnCall == nil {
		fake.stopAutomationExecutionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.StopAutomationExecutionOutput
		})
	}
	fake.stopAutomationExecutionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.StopAutomationExecutionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) StopAutomationExecutionWithContext(arg1 context.Context, arg2 *ssm.StopAutomationExecutionInput, arg3 ...request.Option) (*ssm.StopAutomationExecutionOutput, error) {
	fake.stopAutomationExecutionWithContextMutex.Lock()
	ret, specificReturn := fake.stopAutomationExecutionWithContextReturnsOnCall[len(fake.stopAutomationExecutionWithContextArgsForCall)]
	fake.stopAutomationExecutionWithContextArgsForCall = append(fake.stopAutomationExecutionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.StopAutomationExecutionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StopAutomationExecutionWithContextStub
	fakeReturns := fake.stopAutomationExecutionWithContextReturns
	fake.recordInvocation("StopAutomationExecutionWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopAutomationExecutionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) StopAutomationExecutionWithContextCallCount() int {
	fake.stopAutomationExecutionWithContextMutex.RLock()
	defer fake.stopAutomationExecutionWithContextMutex.RUnlock()
	return len(fake.stopAutomationExecutionWithContextArgsForCall)
}

func (fake *FakeSSMClient) StopAutomationExecutionWithContextCalls(stub func(context.Context, *ssm.StopAutomationExecutionInput, ...request.Option) (*ssm.StopAutomationExecutionOutput, error)) {
	fake.stopAutomationExecutionWithContextMutex.Lock()
	defer fake.stopAutomationExecutionWithContextMutex.Unlock()
	fake.StopAutomationExecutionWithContextStub = stub
}

func (fake *FakeSSMClient) StopAutomationExecutionWithContextArgsForCall(i int) (context.Context, *ssm.StopAutomationExecutionInput, []request.Option) {
	fake.stopAutomationExecutionWithContextMutex.RLock()
	defer fake.stopAutomationExecutionWithContextMutex.RUnlock()
	argsForCall := fake.stopAutomationExecutionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) StopAutomationExecutionWithContextReturns(result1 *ssm.StopAutomationExecutionOutput, result2 error) {
	fake.stopAutomationExecutionWithContextMutex.Lock()
	defer fake.stopAutomationExecutionWithContextMutex.Unlock()
	fake.StopAutomationExecutionWithContextStub = nil
	fake.stopAutomationExecutionWithContextReturns = struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) StopAutomationExecutionWithContextReturnsOnCall(i int, result1 *ssm.StopAutomationExecutionOutput, result2 error) {
	fake.stopAutomationExecutionWithContextMutex.Lock()
	defer fake.stopAutomationExecutionWithContextMutex.Unlock()
	fake.StopAutomationExecutionWithContextStub = nil
	if fake.stopAutomationExecutionWithContextReturnsOnCall == nil {
		fake.stopAutomationExecutionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.StopAutomationExecutionOutput
			result2 error
		})
	}
	fake.stopAutomationExecutionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.StopAutomationExecutionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) TerminateSession(arg1 *ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error) {
	fake.terminateSessionMutex.Lock()
	ret, specificReturn := fake.terminateSessionReturnsOnCall[len(fake.terminateSessionArgsForCall)]
	fake.terminateSessionArgsForCall = append(fake.terminateSessionArgsForCall, struct {
		arg1 *ssm.TerminateSessionInput
	}{arg1})
	stub := fake.TerminateSessionStub
	fakeReturns := fake.terminateSessionReturns
	fake.recordInvocation("TerminateSession", []interface{}{arg1})
	fake.terminateSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) TerminateSessionCallCount() int {
	fake.terminateSessionMutex.RLock()
	defer fake.terminateSessionMutex.RUnlock()
	return len(fake.terminateSessionArgsForCall)
}

func (fake *FakeSSMClient) TerminateSessionCalls(stub func(*ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error)) {
	fake.terminateSessionMutex.Lock()
	defer fake.terminateSessionMutex.Unlock()
	fake.TerminateSessionStub = stub
}

func (fake *FakeSSMClient) TerminateSessionArgsForCall(i int) *ssm.TerminateSessionInput {
	fake.terminateSessionMutex.RLock()
	defer fake.terminateSessionMutex.RUnlock()
	argsForCall := fake.terminateSessionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) TerminateSessionReturns(result1 *ssm.TerminateSessionOutput, result2 error) {
	fake.terminateSessionMutex.Lock()
	defer fake.terminateSessionMutex.Unlock()
	fake.TerminateSessionStub = nil
	fake.terminateSessionReturns = struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) TerminateSessionReturnsOnCall(i int, result1 *ssm.TerminateSessionOutput, result2 error) {
	fake.terminateSessionMutex.Lock()
	defer fake.terminateSessionMutex.Unlock()
	fake.TerminateSessionStub = nil
	if fake.terminateSessionReturnsOnCall == nil {
		fake.terminateSessionReturnsOnCall = make(map[int]struct {
			result1 *ssm.TerminateSessionOutput
			result2 error
		})
	}
	fake.terminateSessionReturnsOnCall[i] = struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) TerminateSessionRequest(arg1 *ssm.TerminateSessionInput) (*request.Request, *ssm.TerminateSessionOutput) {
	fake.terminateSessionRequestMutex.Lock()
	ret, specificReturn := fake.terminateSessionRequestReturnsOnCall[len(fake.terminateSessionRequestArgsForCall)]
	fake.terminateSessionRequestArgsForCall = append(fake.terminateSessionRequestArgsForCall, struct {
		arg1 *ssm.TerminateSessionInput
	}{arg1})
	stub := fake.TerminateSessionRequestStub
	fakeReturns := fake.terminateSessionRequestReturns
	fake.recordInvocation("TerminateSessionRequest", []interface{}{arg1})
	fake.terminateSessionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) TerminateSessionRequestCallCount() int {
	fake.terminateSessionRequestMutex.RLock()
	defer fake.terminateSessionRequestMutex.RUnlock()
	return len(fake.terminateSessionRequestArgsForCall)
}

func (fake *FakeSSMClient) TerminateSessionRequestCalls(stub func(*ssm.TerminateSessionInput) (*request.Request, *ssm.TerminateSessionOutput)) {
	fake.terminateSessionRequestMutex.Lock()
	defer fake.terminateSessionRequestMutex.Unlock()
	fake.TerminateSessionRequestStub = stub
}

func (fake *FakeSSMClient) TerminateSessionRequestArgsForCall(i int) *ssm.TerminateSessionInput {
	fake.terminateSessionRequestMutex.RLock()
	defer fake.terminateSessionRequestMutex.RUnlock()
	argsForCall := fake.terminateSessionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) TerminateSessionRequestReturns(result1 *request.Request, result2 *ssm.TerminateSessionOutput) {
	fake.terminateSessionRequestMutex.Lock()
	defer fake.terminateSessionRequestMutex.Unlock()
	fake.TerminateSessionRequestStub = nil
	fake.terminateSessionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.TerminateSessionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) TerminateSessionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.TerminateSessionOutput) {
	fake.terminateSessionRequestMutex.Lock()
	defer fake.terminateSessionRequestMutex.Unlock()
	fake.TerminateSessionRequestStub = nil
	if fake.terminateSessionRequestReturnsOnCall == nil {
		fake.terminateSessionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.TerminateSessionOutput
		})
	}
	fake.terminateSessionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.TerminateSessionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) TerminateSessionWithContext(arg1 context.Context, arg2 *ssm.TerminateSessionInput, arg3 ...request.Option) (*ssm.TerminateSessionOutput, error) {
	fake.terminateSessionWithContextMutex.Lock()
	ret, specificReturn := fake.terminateSessionWithContextReturnsOnCall[len(fake.terminateSessionWithContextArgsForCall)]
	fake.terminateSessionWithContextArgsForCall = append(fake.terminateSessionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.TerminateSessionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TerminateSessionWithContextStub
	fakeReturns := fake.terminateSessionWithContextReturns
	fake.recordInvocation("TerminateSessionWithContext", []interface{}{arg1, arg2, arg3})
	fake.terminateSessionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) TerminateSessionWithContextCallCount() int {
	fake.terminateSessionWithContextMutex.RLock()
	defer fake.terminateSessionWithContextMutex.RUnlock()
	return len(fake.terminateSessionWithContextArgsForCall)
}

func (fake *FakeSSMClient) TerminateSessionWithContextCalls(stub func(context.Context, *ssm.TerminateSessionInput, ...request.Option) (*ssm.TerminateSessionOutput, error)) {
	fake.terminateSessionWithContextMutex.Lock()
	defer fake.terminateSessionWithContextMutex.Unlock()
	fake.TerminateSessionWithContextStub = stub
}

func (fake *FakeSSMClient) TerminateSessionWithContextArgsForCall(i int) (context.Context, *ssm.TerminateSessionInput, []request.Option) {
	fake.terminateSessionWithContextMutex.RLock()
	defer fake.terminateSessionWithContextMutex.RUnlock()
	argsForCall := fake.terminateSessionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) TerminateSessionWithContextReturns(result1 *ssm.TerminateSessionOutput, result2 error) {
	fake.terminateSessionWithContextMutex.Lock()
	defer fake.terminateSessionWithContextMutex.Unlock()
	fake.TerminateSessionWithContextStub = nil
	fake.terminateSessionWithContextReturns = struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) TerminateSessionWithContextReturnsOnCall(i int, result1 *ssm.TerminateSessionOutput, result2 error) {
	fake.terminateSessionWithContextMutex.Lock()
	defer fake.terminateSessionWithContextMutex.Unlock()
	fake.TerminateSessionWithContextStub = nil
	if fake.terminateSessionWithContextReturnsOnCall == nil {
		fake.terminateSessionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.TerminateSessionOutput
			result2 error
		})
	}
	fake.terminateSessionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.TerminateSessionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UnlabelParameterVersion(arg1 *ssm.UnlabelParameterVersionInput) (*ssm.UnlabelParameterVersionOutput, error) {
	fake.unlabelParameterVersionMutex.Lock()
	ret, specificReturn := fake.unlabelParameterVersionReturnsOnCall[len(fake.unlabelParameterVersionArgsForCall)]
	fake.unlabelParameterVersionArgsForCall = append(fake.unlabelParameterVersionArgsForCall, struct {
		arg1 *ssm.UnlabelParameterVersionInput
	}{arg1})
	stub := fake.UnlabelParameterVersionStub
	fakeReturns := fake.unlabelParameterVersionReturns
	fake.recordInvocation("UnlabelParameterVersion", []interface{}{arg1})
	fake.unlabelParameterVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UnlabelParameterVersionCallCount() int {
	fake.unlabelParameterVersionMutex.RLock()
	defer fake.unlabelParameterVersionMutex.RUnlock()
	return len(fake.unlabelParameterVersionArgsForCall)
}

func (fake *FakeSSMClient) UnlabelParameterVersionCalls(stub func(*ssm.UnlabelParameterVersionInput) (*ssm.UnlabelParameterVersionOutput, error)) {
	fake.unlabelParameterVersionMutex.Lock()
	defer fake.unlabelParameterVersionMutex.Unlock()
	fake.UnlabelParameterVersionStub = stub
}

func (fake *FakeSSMClient) UnlabelParameterVersionArgsForCall(i int) *ssm.UnlabelParameterVersionInput {
	fake.unlabelParameterVersionMutex.RLock()
	defer fake.unlabelParameterVersionMutex.RUnlock()
	argsForCall := fake.unlabelParameterVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UnlabelParameterVersionReturns(result1 *ssm.UnlabelParameterVersionOutput, result2 error) {
	fake.unlabelParameterVersionMutex.Lock()
	defer fake.unlabelParameterVersionMutex.Unlock()
	fake.UnlabelParameterVersionStub = nil
	fake.unlabelParameterVersionReturns = struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UnlabelParameterVersionReturnsOnCall(i int, result1 *ssm.UnlabelParameterVersionOutput, result2 error) {
	fake.unlabelParameterVersionMutex.Lock()
	defer fake.unlabelParameterVersionMutex.Unlock()
	fake.UnlabelParameterVersionStub = nil
	if fake.unlabelParameterVersionReturnsOnCall == nil {
		fake.unlabelParameterVersionReturnsOnCall = make(map[int]struct {
			result1 *ssm.UnlabelParameterVersionOutput
			result2 error
		})
	}
	fake.unlabelParameterVersionReturnsOnCall[i] = struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UnlabelParameterVersionRequest(arg1 *ssm.UnlabelParameterVersionInput) (*request.Request, *ssm.UnlabelParameterVersionOutput) {
	fake.unlabelParameterVersionRequestMutex.Lock()
	ret, specificReturn := fake.unlabelParameterVersionRequestReturnsOnCall[len(fake.unlabelParameterVersionRequestArgsForCall)]
	fake.unlabelParameterVersionRequestArgsForCall = append(fake.unlabelParameterVersionRequestArgsForCall, struct {
		arg1 *ssm.UnlabelParameterVersionInput
	}{arg1})
	stub := fake.UnlabelParameterVersionRequestStub
	fakeReturns := fake.unlabelParameterVersionRequestReturns
	fake.recordInvocation("UnlabelParameterVersionRequest", []interface{}{arg1})
	fake.unlabelParameterVersionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UnlabelParameterVersionRequestCallCount() int {
	fake.unlabelParameterVersionRequestMutex.RLock()
	defer fake.unlabelParameterVersionRequestMutex.RUnlock()
	return len(fake.unlabelParameterVersionRequestArgsForCall)
}

func (fake *FakeSSMClient) UnlabelParameterVersionRequestCalls(stub func(*ssm.UnlabelParameterVersionInput) (*request.Request, *ssm.UnlabelParameterVersionOutput)) {
	fake.unlabelParameterVersionRequestMutex.Lock()
	defer fake.unlabelParameterVersionRequestMutex.Unlock()
	fake.UnlabelParameterVersionRequestStub = stub
}

func (fake *FakeSSMClient) UnlabelParameterVersionRequestArgsForCall(i int) *ssm.UnlabelParameterVersionInput {
	fake.unlabelParameterVersionRequestMutex.RLock()
	defer fake.unlabelParameterVersionRequestMutex.RUnlock()
	argsForCall := fake.unlabelParameterVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UnlabelParameterVersionRequestReturns(result1 *request.Request, result2 *ssm.UnlabelParameterVersionOutput) {
	fake.unlabelParameterVersionRequestMutex.Lock()
	defer fake.unlabelParameterVersionRequestMutex.Unlock()
	fake.UnlabelParameterVersionRequestStub = nil
	fake.unlabelParameterVersionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UnlabelParameterVersionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UnlabelParameterVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UnlabelParameterVersionOutput) {
	fake.unlabelParameterVersionRequestMutex.Lock()
	defer fake.unlabelParameterVersionRequestMutex.Unlock()
	fake.UnlabelParameterVersionRequestStub = nil
	if fake.unlabelParameterVersionRequestReturnsOnCall == nil {
		fake.unlabelParameterVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UnlabelParameterVersionOutput
		})
	}
	fake.unlabelParameterVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UnlabelParameterVersionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UnlabelParameterVersionWithContext(arg1 context.Context, arg2 *ssm.UnlabelParameterVersionInput, arg3 ...request.Option) (*ssm.UnlabelParameterVersionOutput, error) {
	fake.unlabelParameterVersionWithContextMutex.Lock()
	ret, specificReturn := fake.unlabelParameterVersionWithContextReturnsOnCall[len(fake.unlabelParameterVersionWithContextArgsForCall)]
	fake.unlabelParameterVersionWithContextArgsForCall = append(fake.unlabelParameterVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UnlabelParameterVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UnlabelParameterVersionWithContextStub
	fakeReturns := fake.unlabelParameterVersionWithContextReturns
	fake.recordInvocation("UnlabelParameterVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.unlabelParameterVersionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UnlabelParameterVersionWithContextCallCount() int {
	fake.unlabelParameterVersionWithContextMutex.RLock()
	defer fake.unlabelParameterVersionWithContextMutex.RUnlock()
	return len(fake.unlabelParameterVersionWithContextArgsForCall)
}

func (fake *FakeSSMClient) UnlabelParameterVersionWithContextCalls(stub func(context.Context, *ssm.UnlabelParameterVersionInput, ...request.Option) (*ssm.UnlabelParameterVersionOutput, error)) {
	fake.unlabelParameterVersionWithContextMutex.Lock()
	defer fake.unlabelParameterVersionWithContextMutex.Unlock()
	fake.UnlabelParameterVersionWithContextStub = stub
}

func (fake *FakeSSMClient) UnlabelParameterVersionWithContextArgsForCall(i int) (context.Context, *ssm.UnlabelParameterVersionInput, []request.Option) {
	fake.unlabelParameterVersionWithContextMutex.RLock()
	defer fake.unlabelParameterVersionWithContextMutex.RUnlock()
	argsForCall := fake.unlabelParameterVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UnlabelParameterVersionWithContextReturns(result1 *ssm.UnlabelParameterVersionOutput, result2 error) {
	fake.unlabelParameterVersionWithContextMutex.Lock()
	defer fake.unlabelParameterVersionWithContextMutex.Unlock()
	fake.UnlabelParameterVersionWithContextStub = nil
	fake.unlabelParameterVersionWithContextReturns = struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UnlabelParameterVersionWithContextReturnsOnCall(i int, result1 *ssm.UnlabelParameterVersionOutput, result2 error) {
	fake.unlabelParameterVersionWithContextMutex.Lock()
	defer fake.unlabelParameterVersionWithContextMutex.Unlock()
	fake.UnlabelParameterVersionWithContextStub = nil
	if fake.unlabelParameterVersionWithContextReturnsOnCall == nil {
		fake.unlabelParameterVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UnlabelParameterVersionOutput
			result2 error
		})
	}
	fake.unlabelParameterVersionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UnlabelParameterVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociation(arg1 *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error) {
	fake.updateAssociationMutex.Lock()
	ret, specificReturn := fake.updateAssociationReturnsOnCall[len(fake.updateAssociationArgsForCall)]
	fake.updateAssociationArgsForCall = append(fake.updateAssociationArgsForCall, struct {
		arg1 *ssm.UpdateAssociationInput
	}{arg1})
	stub := fake.UpdateAssociationStub
	fakeReturns := fake.updateAssociationReturns
	fake.recordInvocation("UpdateAssociation", []interface{}{arg1})
	fake.updateAssociationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateAssociationCallCount() int {
	fake.updateAssociationMutex.RLock()
	defer fake.updateAssociationMutex.RUnlock()
	return len(fake.updateAssociationArgsForCall)
}

func (fake *FakeSSMClient) UpdateAssociationCalls(stub func(*ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error)) {
	fake.updateAssociationMutex.Lock()
	defer fake.updateAssociationMutex.Unlock()
	fake.UpdateAssociationStub = stub
}

func (fake *FakeSSMClient) UpdateAssociationArgsForCall(i int) *ssm.UpdateAssociationInput {
	fake.updateAssociationMutex.RLock()
	defer fake.updateAssociationMutex.RUnlock()
	argsForCall := fake.updateAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateAssociationReturns(result1 *ssm.UpdateAssociationOutput, result2 error) {
	fake.updateAssociationMutex.Lock()
	defer fake.updateAssociationMutex.Unlock()
	fake.UpdateAssociationStub = nil
	fake.updateAssociationReturns = struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationReturnsOnCall(i int, result1 *ssm.UpdateAssociationOutput, result2 error) {
	fake.updateAssociationMutex.Lock()
	defer fake.updateAssociationMutex.Unlock()
	fake.UpdateAssociationStub = nil
	if fake.updateAssociationReturnsOnCall == nil {
		fake.updateAssociationReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateAssociationOutput
			result2 error
		})
	}
	fake.updateAssociationReturnsOnCall[i] = struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationRequest(arg1 *ssm.UpdateAssociationInput) (*request.Request, *ssm.UpdateAssociationOutput) {
	fake.updateAssociationRequestMutex.Lock()
	ret, specificReturn := fake.updateAssociationRequestReturnsOnCall[len(fake.updateAssociationRequestArgsForCall)]
	fake.updateAssociationRequestArgsForCall = append(fake.updateAssociationRequestArgsForCall, struct {
		arg1 *ssm.UpdateAssociationInput
	}{arg1})
	stub := fake.UpdateAssociationRequestStub
	fakeReturns := fake.updateAssociationRequestReturns
	fake.recordInvocation("UpdateAssociationRequest", []interface{}{arg1})
	fake.updateAssociationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateAssociationRequestCallCount() int {
	fake.updateAssociationRequestMutex.RLock()
	defer fake.updateAssociationRequestMutex.RUnlock()
	return len(fake.updateAssociationRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateAssociationRequestCalls(stub func(*ssm.UpdateAssociationInput) (*request.Request, *ssm.UpdateAssociationOutput)) {
	fake.updateAssociationRequestMutex.Lock()
	defer fake.updateAssociationRequestMutex.Unlock()
	fake.UpdateAssociationRequestStub = stub
}

func (fake *FakeSSMClient) UpdateAssociationRequestArgsForCall(i int) *ssm.UpdateAssociationInput {
	fake.updateAssociationRequestMutex.RLock()
	defer fake.updateAssociationRequestMutex.RUnlock()
	argsForCall := fake.updateAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateAssociationRequestReturns(result1 *request.Request, result2 *ssm.UpdateAssociationOutput) {
	fake.updateAssociationRequestMutex.Lock()
	defer fake.updateAssociationRequestMutex.Unlock()
	fake.UpdateAssociationRequestStub = nil
	fake.updateAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateAssociationOutput) {
	fake.updateAssociationRequestMutex.Lock()
	defer fake.updateAssociationRequestMutex.Unlock()
	fake.UpdateAssociationRequestStub = nil
	if fake.updateAssociationRequestReturnsOnCall == nil {
		fake.updateAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateAssociationOutput
		})
	}
	fake.updateAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationStatus(arg1 *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error) {
	fake.updateAssociationStatusMutex.Lock()
	ret, specificReturn := fake.updateAssociationStatusReturnsOnCall[len(fake.updateAssociationStatusArgsForCall)]
	fake.updateAssociationStatusArgsForCall = append(fake.updateAssociationStatusArgsForCall, struct {
		arg1 *ssm.UpdateAssociationStatusInput
	}{arg1})
	stub := fake.UpdateAssociationStatusStub
	fakeReturns := fake.updateAssociationStatusReturns
	fake.recordInvocation("UpdateAssociationStatus", []interface{}{arg1})
	fake.updateAssociationStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateAssociationStatusCallCount() int {
	fake.updateAssociationStatusMutex.RLock()
	defer fake.updateAssociationStatusMutex.RUnlock()
	return len(fake.updateAssociationStatusArgsForCall)
}

func (fake *FakeSSMClient) UpdateAssociationStatusCalls(stub func(*ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error)) {
	fake.updateAssociationStatusMutex.Lock()
	defer fake.updateAssociationStatusMutex.Unlock()
	fake.UpdateAssociationStatusStub = stub
}

func (fake *FakeSSMClient) UpdateAssociationStatusArgsForCall(i int) *ssm.UpdateAssociationStatusInput {
	fake.updateAssociationStatusMutex.RLock()
	defer fake.updateAssociationStatusMutex.RUnlock()
	argsForCall := fake.updateAssociationStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateAssociationStatusReturns(result1 *ssm.UpdateAssociationStatusOutput, result2 error) {
	fake.updateAssociationStatusMutex.Lock()
	defer fake.updateAssociationStatusMutex.Unlock()
	fake.UpdateAssociationStatusStub = nil
	fake.updateAssociationStatusReturns = struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationStatusReturnsOnCall(i int, result1 *ssm.UpdateAssociationStatusOutput, result2 error) {
	fake.updateAssociationStatusMutex.Lock()
	defer fake.updateAssociationStatusMutex.Unlock()
	fake.UpdateAssociationStatusStub = nil
	if fake.updateAssociationStatusReturnsOnCall == nil {
		fake.updateAssociationStatusReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateAssociationStatusOutput
			result2 error
		})
	}
	fake.updateAssociationStatusReturnsOnCall[i] = struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationStatusRequest(arg1 *ssm.UpdateAssociationStatusInput) (*request.Request, *ssm.UpdateAssociationStatusOutput) {
	fake.updateAssociationStatusRequestMutex.Lock()
	ret, specificReturn := fake.updateAssociationStatusRequestReturnsOnCall[len(fake.updateAssociationStatusRequestArgsForCall)]
	fake.updateAssociationStatusRequestArgsForCall = append(fake.updateAssociationStatusRequestArgsForCall, struct {
		arg1 *ssm.UpdateAssociationStatusInput
	}{arg1})
	stub := fake.UpdateAssociationStatusRequestStub
	fakeReturns := fake.updateAssociationStatusRequestReturns
	fake.recordInvocation("UpdateAssociationStatusRequest", []interface{}{arg1})
	fake.updateAssociationStatusRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateAssociationStatusRequestCallCount() int {
	fake.updateAssociationStatusRequestMutex.RLock()
	defer fake.updateAssociationStatusRequestMutex.RUnlock()
	return len(fake.updateAssociationStatusRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateAssociationStatusRequestCalls(stub func(*ssm.UpdateAssociationStatusInput) (*request.Request, *ssm.UpdateAssociationStatusOutput)) {
	fake.updateAssociationStatusRequestMutex.Lock()
	defer fake.updateAssociationStatusRequestMutex.Unlock()
	fake.UpdateAssociationStatusRequestStub = stub
}

func (fake *FakeSSMClient) UpdateAssociationStatusRequestArgsForCall(i int) *ssm.UpdateAssociationStatusInput {
	fake.updateAssociationStatusRequestMutex.RLock()
	defer fake.updateAssociationStatusRequestMutex.RUnlock()
	argsForCall := fake.updateAssociationStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateAssociationStatusRequestReturns(result1 *request.Request, result2 *ssm.UpdateAssociationStatusOutput) {
	fake.updateAssociationStatusRequestMutex.Lock()
	defer fake.updateAssociationStatusRequestMutex.Unlock()
	fake.UpdateAssociationStatusRequestStub = nil
	fake.updateAssociationStatusRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationStatusOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateAssociationStatusOutput) {
	fake.updateAssociationStatusRequestMutex.Lock()
	defer fake.updateAssociationStatusRequestMutex.Unlock()
	fake.UpdateAssociationStatusRequestStub = nil
	if fake.updateAssociationStatusRequestReturnsOnCall == nil {
		fake.updateAssociationStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateAssociationStatusOutput
		})
	}
	fake.updateAssociationStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateAssociationStatusOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationStatusWithContext(arg1 context.Context, arg2 *ssm.UpdateAssociationStatusInput, arg3 ...request.Option) (*ssm.UpdateAssociationStatusOutput, error) {
	fake.updateAssociationStatusWithContextMutex.Lock()
	ret, specificReturn := fake.updateAssociationStatusWithContextReturnsOnCall[len(fake.updateAssociationStatusWithContextArgsForCall)]
	fake.updateAssociationStatusWithContextArgsForCall = append(fake.updateAssociationStatusWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateAssociationStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateAssociationStatusWithContextStub
	fakeReturns := fake.updateAssociationStatusWithContextReturns
	fake.recordInvocation("UpdateAssociationStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateAssociationStatusWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateAssociationStatusWithContextCallCount() int {
	fake.updateAssociationStatusWithContextMutex.RLock()
	defer fake.updateAssociationStatusWithContextMutex.RUnlock()
	return len(fake.updateAssociationStatusWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateAssociationStatusWithContextCalls(stub func(context.Context, *ssm.UpdateAssociationStatusInput, ...request.Option) (*ssm.UpdateAssociationStatusOutput, error)) {
	fake.updateAssociationStatusWithContextMutex.Lock()
	defer fake.updateAssociationStatusWithContextMutex.Unlock()
	fake.UpdateAssociationStatusWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateAssociationStatusWithContextArgsForCall(i int) (context.Context, *ssm.UpdateAssociationStatusInput, []request.Option) {
	fake.updateAssociationStatusWithContextMutex.RLock()
	defer fake.updateAssociationStatusWithContextMutex.RUnlock()
	argsForCall := fake.updateAssociationStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateAssociationStatusWithContextReturns(result1 *ssm.UpdateAssociationStatusOutput, result2 error) {
	fake.updateAssociationStatusWithContextMutex.Lock()
	defer fake.updateAssociationStatusWithContextMutex.Unlock()
	fake.UpdateAssociationStatusWithContextStub = nil
	fake.updateAssociationStatusWithContextReturns = struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationStatusWithContextReturnsOnCall(i int, result1 *ssm.UpdateAssociationStatusOutput, result2 error) {
	fake.updateAssociationStatusWithContextMutex.Lock()
	defer fake.updateAssociationStatusWithContextMutex.Unlock()
	fake.UpdateAssociationStatusWithContextStub = nil
	if fake.updateAssociationStatusWithContextReturnsOnCall == nil {
		fake.updateAssociationStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateAssociationStatusOutput
			result2 error
		})
	}
	fake.updateAssociationStatusWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateAssociationStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationWithContext(arg1 context.Context, arg2 *ssm.UpdateAssociationInput, arg3 ...request.Option) (*ssm.UpdateAssociationOutput, error) {
	fake.updateAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.updateAssociationWithContextReturnsOnCall[len(fake.updateAssociationWithContextArgsForCall)]
	fake.updateAssociationWithContextArgsForCall = append(fake.updateAssociationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateAssociationWithContextStub
	fakeReturns := fake.updateAssociationWithContextReturns
	fake.recordInvocation("UpdateAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateAssociationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateAssociationWithContextCallCount() int {
	fake.updateAssociationWithContextMutex.RLock()
	defer fake.updateAssociationWithContextMutex.RUnlock()
	return len(fake.updateAssociationWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateAssociationWithContextCalls(stub func(context.Context, *ssm.UpdateAssociationInput, ...request.Option) (*ssm.UpdateAssociationOutput, error)) {
	fake.updateAssociationWithContextMutex.Lock()
	defer fake.updateAssociationWithContextMutex.Unlock()
	fake.UpdateAssociationWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateAssociationWithContextArgsForCall(i int) (context.Context, *ssm.UpdateAssociationInput, []request.Option) {
	fake.updateAssociationWithContextMutex.RLock()
	defer fake.updateAssociationWithContextMutex.RUnlock()
	argsForCall := fake.updateAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateAssociationWithContextReturns(result1 *ssm.UpdateAssociationOutput, result2 error) {
	fake.updateAssociationWithContextMutex.Lock()
	defer fake.updateAssociationWithContextMutex.Unlock()
	fake.UpdateAssociationWithContextStub = nil
	fake.updateAssociationWithContextReturns = struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateAssociationWithContextReturnsOnCall(i int, result1 *ssm.UpdateAssociationOutput, result2 error) {
	fake.updateAssociationWithContextMutex.Lock()
	defer fake.updateAssociationWithContextMutex.Unlock()
	fake.UpdateAssociationWithContextStub = nil
	if fake.updateAssociationWithContextReturnsOnCall == nil {
		fake.updateAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateAssociationOutput
			result2 error
		})
	}
	fake.updateAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocument(arg1 *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error) {
	fake.updateDocumentMutex.Lock()
	ret, specificReturn := fake.updateDocumentReturnsOnCall[len(fake.updateDocumentArgsForCall)]
	fake.updateDocumentArgsForCall = append(fake.updateDocumentArgsForCall, struct {
		arg1 *ssm.UpdateDocumentInput
	}{arg1})
	stub := fake.UpdateDocumentStub
	fakeReturns := fake.updateDocumentReturns
	fake.recordInvocation("UpdateDocument", []interface{}{arg1})
	fake.updateDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentCallCount() int {
	fake.updateDocumentMutex.RLock()
	defer fake.updateDocumentMutex.RUnlock()
	return len(fake.updateDocumentArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentCalls(stub func(*ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error)) {
	fake.updateDocumentMutex.Lock()
	defer fake.updateDocumentMutex.Unlock()
	fake.UpdateDocumentStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentArgsForCall(i int) *ssm.UpdateDocumentInput {
	fake.updateDocumentMutex.RLock()
	defer fake.updateDocumentMutex.RUnlock()
	argsForCall := fake.updateDocumentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateDocumentReturns(result1 *ssm.UpdateDocumentOutput, result2 error) {
	fake.updateDocumentMutex.Lock()
	defer fake.updateDocumentMutex.Unlock()
	fake.UpdateDocumentStub = nil
	fake.updateDocumentReturns = struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentReturnsOnCall(i int, result1 *ssm.UpdateDocumentOutput, result2 error) {
	fake.updateDocumentMutex.Lock()
	defer fake.updateDocumentMutex.Unlock()
	fake.UpdateDocumentStub = nil
	if fake.updateDocumentReturnsOnCall == nil {
		fake.updateDocumentReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateDocumentOutput
			result2 error
		})
	}
	fake.updateDocumentReturnsOnCall[i] = struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersion(arg1 *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	fake.updateDocumentDefaultVersionMutex.Lock()
	ret, specificReturn := fake.updateDocumentDefaultVersionReturnsOnCall[len(fake.updateDocumentDefaultVersionArgsForCall)]
	fake.updateDocumentDefaultVersionArgsForCall = append(fake.updateDocumentDefaultVersionArgsForCall, struct {
		arg1 *ssm.UpdateDocumentDefaultVersionInput
	}{arg1})
	stub := fake.UpdateDocumentDefaultVersionStub
	fakeReturns := fake.updateDocumentDefaultVersionReturns
	fake.recordInvocation("UpdateDocumentDefaultVersion", []interface{}{arg1})
	fake.updateDocumentDefaultVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionCallCount() int {
	fake.updateDocumentDefaultVersionMutex.RLock()
	defer fake.updateDocumentDefaultVersionMutex.RUnlock()
	return len(fake.updateDocumentDefaultVersionArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionCalls(stub func(*ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error)) {
	fake.updateDocumentDefaultVersionMutex.Lock()
	defer fake.updateDocumentDefaultVersionMutex.Unlock()
	fake.UpdateDocumentDefaultVersionStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionArgsForCall(i int) *ssm.UpdateDocumentDefaultVersionInput {
	fake.updateDocumentDefaultVersionMutex.RLock()
	defer fake.updateDocumentDefaultVersionMutex.RUnlock()
	argsForCall := fake.updateDocumentDefaultVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionReturns(result1 *ssm.UpdateDocumentDefaultVersionOutput, result2 error) {
	fake.updateDocumentDefaultVersionMutex.Lock()
	defer fake.updateDocumentDefaultVersionMutex.Unlock()
	fake.UpdateDocumentDefaultVersionStub = nil
	fake.updateDocumentDefaultVersionReturns = struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionReturnsOnCall(i int, result1 *ssm.UpdateDocumentDefaultVersionOutput, result2 error) {
	fake.updateDocumentDefaultVersionMutex.Lock()
	defer fake.updateDocumentDefaultVersionMutex.Unlock()
	fake.UpdateDocumentDefaultVersionStub = nil
	if fake.updateDocumentDefaultVersionReturnsOnCall == nil {
		fake.updateDocumentDefaultVersionReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateDocumentDefaultVersionOutput
			result2 error
		})
	}
	fake.updateDocumentDefaultVersionReturnsOnCall[i] = struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionRequest(arg1 *ssm.UpdateDocumentDefaultVersionInput) (*request.Request, *ssm.UpdateDocumentDefaultVersionOutput) {
	fake.updateDocumentDefaultVersionRequestMutex.Lock()
	ret, specificReturn := fake.updateDocumentDefaultVersionRequestReturnsOnCall[len(fake.updateDocumentDefaultVersionRequestArgsForCall)]
	fake.updateDocumentDefaultVersionRequestArgsForCall = append(fake.updateDocumentDefaultVersionRequestArgsForCall, struct {
		arg1 *ssm.UpdateDocumentDefaultVersionInput
	}{arg1})
	stub := fake.UpdateDocumentDefaultVersionRequestStub
	fakeReturns := fake.updateDocumentDefaultVersionRequestReturns
	fake.recordInvocation("UpdateDocumentDefaultVersionRequest", []interface{}{arg1})
	fake.updateDocumentDefaultVersionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionRequestCallCount() int {
	fake.updateDocumentDefaultVersionRequestMutex.RLock()
	defer fake.updateDocumentDefaultVersionRequestMutex.RUnlock()
	return len(fake.updateDocumentDefaultVersionRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionRequestCalls(stub func(*ssm.UpdateDocumentDefaultVersionInput) (*request.Request, *ssm.UpdateDocumentDefaultVersionOutput)) {
	fake.updateDocumentDefaultVersionRequestMutex.Lock()
	defer fake.updateDocumentDefaultVersionRequestMutex.Unlock()
	fake.UpdateDocumentDefaultVersionRequestStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionRequestArgsForCall(i int) *ssm.UpdateDocumentDefaultVersionInput {
	fake.updateDocumentDefaultVersionRequestMutex.RLock()
	defer fake.updateDocumentDefaultVersionRequestMutex.RUnlock()
	argsForCall := fake.updateDocumentDefaultVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionRequestReturns(result1 *request.Request, result2 *ssm.UpdateDocumentDefaultVersionOutput) {
	fake.updateDocumentDefaultVersionRequestMutex.Lock()
	defer fake.updateDocumentDefaultVersionRequestMutex.Unlock()
	fake.UpdateDocumentDefaultVersionRequestStub = nil
	fake.updateDocumentDefaultVersionRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentDefaultVersionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateDocumentDefaultVersionOutput) {
	fake.updateDocumentDefaultVersionRequestMutex.Lock()
	defer fake.updateDocumentDefaultVersionRequestMutex.Unlock()
	fake.UpdateDocumentDefaultVersionRequestStub = nil
	if fake.updateDocumentDefaultVersionRequestReturnsOnCall == nil {
		fake.updateDocumentDefaultVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateDocumentDefaultVersionOutput
		})
	}
	fake.updateDocumentDefaultVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentDefaultVersionOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionWithContext(arg1 context.Context, arg2 *ssm.UpdateDocumentDefaultVersionInput, arg3 ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	fake.updateDocumentDefaultVersionWithContextMutex.Lock()
	ret, specificReturn := fake.updateDocumentDefaultVersionWithContextReturnsOnCall[len(fake.updateDocumentDefaultVersionWithContextArgsForCall)]
	fake.updateDocumentDefaultVersionWithContextArgsForCall = append(fake.updateDocumentDefaultVersionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateDocumentDefaultVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateDocumentDefaultVersionWithContextStub
	fakeReturns := fake.updateDocumentDefaultVersionWithContextReturns
	fake.recordInvocation("UpdateDocumentDefaultVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateDocumentDefaultVersionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionWithContextCallCount() int {
	fake.updateDocumentDefaultVersionWithContextMutex.RLock()
	defer fake.updateDocumentDefaultVersionWithContextMutex.RUnlock()
	return len(fake.updateDocumentDefaultVersionWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionWithContextCalls(stub func(context.Context, *ssm.UpdateDocumentDefaultVersionInput, ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error)) {
	fake.updateDocumentDefaultVersionWithContextMutex.Lock()
	defer fake.updateDocumentDefaultVersionWithContextMutex.Unlock()
	fake.UpdateDocumentDefaultVersionWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionWithContextArgsForCall(i int) (context.Context, *ssm.UpdateDocumentDefaultVersionInput, []request.Option) {
	fake.updateDocumentDefaultVersionWithContextMutex.RLock()
	defer fake.updateDocumentDefaultVersionWithContextMutex.RUnlock()
	argsForCall := fake.updateDocumentDefaultVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionWithContextReturns(result1 *ssm.UpdateDocumentDefaultVersionOutput, result2 error) {
	fake.updateDocumentDefaultVersionWithContextMutex.Lock()
	defer fake.updateDocumentDefaultVersionWithContextMutex.Unlock()
	fake.UpdateDocumentDefaultVersionWithContextStub = nil
	fake.updateDocumentDefaultVersionWithContextReturns = struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentDefaultVersionWithContextReturnsOnCall(i int, result1 *ssm.UpdateDocumentDefaultVersionOutput, result2 error) {
	fake.updateDocumentDefaultVersionWithContextMutex.Lock()
	defer fake.updateDocumentDefaultVersionWithContextMutex.Unlock()
	fake.UpdateDocumentDefaultVersionWithContextStub = nil
	if fake.updateDocumentDefaultVersionWithContextReturnsOnCall == nil {
		fake.updateDocumentDefaultVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateDocumentDefaultVersionOutput
			result2 error
		})
	}
	fake.updateDocumentDefaultVersionWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateDocumentDefaultVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentMetadata(arg1 *ssm.UpdateDocumentMetadataInput) (*ssm.UpdateDocumentMetadataOutput, error) {
	fake.updateDocumentMetadataMutex.Lock()
	ret, specificReturn := fake.updateDocumentMetadataReturnsOnCall[len(fake.updateDocumentMetadataArgsForCall)]
	fake.updateDocumentMetadataArgsForCall = append(fake.updateDocumentMetadataArgsForCall, struct {
		arg1 *ssm.UpdateDocumentMetadataInput
	}{arg1})
	stub := fake.UpdateDocumentMetadataStub
	fakeReturns := fake.updateDocumentMetadataReturns
	fake.recordInvocation("UpdateDocumentMetadata", []interface{}{arg1})
	fake.updateDocumentMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentMetadataCallCount() int {
	fake.updateDocumentMetadataMutex.RLock()
	defer fake.updateDocumentMetadataMutex.RUnlock()
	return len(fake.updateDocumentMetadataArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentMetadataCalls(stub func(*ssm.UpdateDocumentMetadataInput) (*ssm.UpdateDocumentMetadataOutput, error)) {
	fake.updateDocumentMetadataMutex.Lock()
	defer fake.updateDocumentMetadataMutex.Unlock()
	fake.UpdateDocumentMetadataStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentMetadataArgsForCall(i int) *ssm.UpdateDocumentMetadataInput {
	fake.updateDocumentMetadataMutex.RLock()
	defer fake.updateDocumentMetadataMutex.RUnlock()
	argsForCall := fake.updateDocumentMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateDocumentMetadataReturns(result1 *ssm.UpdateDocumentMetadataOutput, result2 error) {
	fake.updateDocumentMetadataMutex.Lock()
	defer fake.updateDocumentMetadataMutex.Unlock()
	fake.UpdateDocumentMetadataStub = nil
	fake.updateDocumentMetadataReturns = struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentMetadataReturnsOnCall(i int, result1 *ssm.UpdateDocumentMetadataOutput, result2 error) {
	fake.updateDocumentMetadataMutex.Lock()
	defer fake.updateDocumentMetadataMutex.Unlock()
	fake.UpdateDocumentMetadataStub = nil
	if fake.updateDocumentMetadataReturnsOnCall == nil {
		fake.updateDocumentMetadataReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateDocumentMetadataOutput
			result2 error
		})
	}
	fake.updateDocumentMetadataReturnsOnCall[i] = struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentMetadataRequest(arg1 *ssm.UpdateDocumentMetadataInput) (*request.Request, *ssm.UpdateDocumentMetadataOutput) {
	fake.updateDocumentMetadataRequestMutex.Lock()
	ret, specificReturn := fake.updateDocumentMetadataRequestReturnsOnCall[len(fake.updateDocumentMetadataRequestArgsForCall)]
	fake.updateDocumentMetadataRequestArgsForCall = append(fake.updateDocumentMetadataRequestArgsForCall, struct {
		arg1 *ssm.UpdateDocumentMetadataInput
	}{arg1})
	stub := fake.UpdateDocumentMetadataRequestStub
	fakeReturns := fake.updateDocumentMetadataRequestReturns
	fake.recordInvocation("UpdateDocumentMetadataRequest", []interface{}{arg1})
	fake.updateDocumentMetadataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentMetadataRequestCallCount() int {
	fake.updateDocumentMetadataRequestMutex.RLock()
	defer fake.updateDocumentMetadataRequestMutex.RUnlock()
	return len(fake.updateDocumentMetadataRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentMetadataRequestCalls(stub func(*ssm.UpdateDocumentMetadataInput) (*request.Request, *ssm.UpdateDocumentMetadataOutput)) {
	fake.updateDocumentMetadataRequestMutex.Lock()
	defer fake.updateDocumentMetadataRequestMutex.Unlock()
	fake.UpdateDocumentMetadataRequestStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentMetadataRequestArgsForCall(i int) *ssm.UpdateDocumentMetadataInput {
	fake.updateDocumentMetadataRequestMutex.RLock()
	defer fake.updateDocumentMetadataRequestMutex.RUnlock()
	argsForCall := fake.updateDocumentMetadataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateDocumentMetadataRequestReturns(result1 *request.Request, result2 *ssm.UpdateDocumentMetadataOutput) {
	fake.updateDocumentMetadataRequestMutex.Lock()
	defer fake.updateDocumentMetadataRequestMutex.Unlock()
	fake.UpdateDocumentMetadataRequestStub = nil
	fake.updateDocumentMetadataRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentMetadataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateDocumentMetadataOutput) {
	fake.updateDocumentMetadataRequestMutex.Lock()
	defer fake.updateDocumentMetadataRequestMutex.Unlock()
	fake.UpdateDocumentMetadataRequestStub = nil
	if fake.updateDocumentMetadataRequestReturnsOnCall == nil {
		fake.updateDocumentMetadataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateDocumentMetadataOutput
		})
	}
	fake.updateDocumentMetadataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentMetadataWithContext(arg1 context.Context, arg2 *ssm.UpdateDocumentMetadataInput, arg3 ...request.Option) (*ssm.UpdateDocumentMetadataOutput, error) {
	fake.updateDocumentMetadataWithContextMutex.Lock()
	ret, specificReturn := fake.updateDocumentMetadataWithContextReturnsOnCall[len(fake.updateDocumentMetadataWithContextArgsForCall)]
	fake.updateDocumentMetadataWithContextArgsForCall = append(fake.updateDocumentMetadataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateDocumentMetadataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateDocumentMetadataWithContextStub
	fakeReturns := fake.updateDocumentMetadataWithContextReturns
	fake.recordInvocation("UpdateDocumentMetadataWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateDocumentMetadataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentMetadataWithContextCallCount() int {
	fake.updateDocumentMetadataWithContextMutex.RLock()
	defer fake.updateDocumentMetadataWithContextMutex.RUnlock()
	return len(fake.updateDocumentMetadataWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentMetadataWithContextCalls(stub func(context.Context, *ssm.UpdateDocumentMetadataInput, ...request.Option) (*ssm.UpdateDocumentMetadataOutput, error)) {
	fake.updateDocumentMetadataWithContextMutex.Lock()
	defer fake.updateDocumentMetadataWithContextMutex.Unlock()
	fake.UpdateDocumentMetadataWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentMetadataWithContextArgsForCall(i int) (context.Context, *ssm.UpdateDocumentMetadataInput, []request.Option) {
	fake.updateDocumentMetadataWithContextMutex.RLock()
	defer fake.updateDocumentMetadataWithContextMutex.RUnlock()
	argsForCall := fake.updateDocumentMetadataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateDocumentMetadataWithContextReturns(result1 *ssm.UpdateDocumentMetadataOutput, result2 error) {
	fake.updateDocumentMetadataWithContextMutex.Lock()
	defer fake.updateDocumentMetadataWithContextMutex.Unlock()
	fake.UpdateDocumentMetadataWithContextStub = nil
	fake.updateDocumentMetadataWithContextReturns = struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentMetadataWithContextReturnsOnCall(i int, result1 *ssm.UpdateDocumentMetadataOutput, result2 error) {
	fake.updateDocumentMetadataWithContextMutex.Lock()
	defer fake.updateDocumentMetadataWithContextMutex.Unlock()
	fake.UpdateDocumentMetadataWithContextStub = nil
	if fake.updateDocumentMetadataWithContextReturnsOnCall == nil {
		fake.updateDocumentMetadataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateDocumentMetadataOutput
			result2 error
		})
	}
	fake.updateDocumentMetadataWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateDocumentMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentRequest(arg1 *ssm.UpdateDocumentInput) (*request.Request, *ssm.UpdateDocumentOutput) {
	fake.updateDocumentRequestMutex.Lock()
	ret, specificReturn := fake.updateDocumentRequestReturnsOnCall[len(fake.updateDocumentRequestArgsForCall)]
	fake.updateDocumentRequestArgsForCall = append(fake.updateDocumentRequestArgsForCall, struct {
		arg1 *ssm.UpdateDocumentInput
	}{arg1})
	stub := fake.UpdateDocumentRequestStub
	fakeReturns := fake.updateDocumentRequestReturns
	fake.recordInvocation("UpdateDocumentRequest", []interface{}{arg1})
	fake.updateDocumentRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentRequestCallCount() int {
	fake.updateDocumentRequestMutex.RLock()
	defer fake.updateDocumentRequestMutex.RUnlock()
	return len(fake.updateDocumentRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentRequestCalls(stub func(*ssm.UpdateDocumentInput) (*request.Request, *ssm.UpdateDocumentOutput)) {
	fake.updateDocumentRequestMutex.Lock()
	defer fake.updateDocumentRequestMutex.Unlock()
	fake.UpdateDocumentRequestStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentRequestArgsForCall(i int) *ssm.UpdateDocumentInput {
	fake.updateDocumentRequestMutex.RLock()
	defer fake.updateDocumentRequestMutex.RUnlock()
	argsForCall := fake.updateDocumentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateDocumentRequestReturns(result1 *request.Request, result2 *ssm.UpdateDocumentOutput) {
	fake.updateDocumentRequestMutex.Lock()
	defer fake.updateDocumentRequestMutex.Unlock()
	fake.UpdateDocumentRequestStub = nil
	fake.updateDocumentRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateDocumentOutput) {
	fake.updateDocumentRequestMutex.Lock()
	defer fake.updateDocumentRequestMutex.Unlock()
	fake.UpdateDocumentRequestStub = nil
	if fake.updateDocumentRequestReturnsOnCall == nil {
		fake.updateDocumentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateDocumentOutput
		})
	}
	fake.updateDocumentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateDocumentOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentWithContext(arg1 context.Context, arg2 *ssm.UpdateDocumentInput, arg3 ...request.Option) (*ssm.UpdateDocumentOutput, error) {
	fake.updateDocumentWithContextMutex.Lock()
	ret, specificReturn := fake.updateDocumentWithContextReturnsOnCall[len(fake.updateDocumentWithContextArgsForCall)]
	fake.updateDocumentWithContextArgsForCall = append(fake.updateDocumentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateDocumentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateDocumentWithContextStub
	fakeReturns := fake.updateDocumentWithContextReturns
	fake.recordInvocation("UpdateDocumentWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateDocumentWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateDocumentWithContextCallCount() int {
	fake.updateDocumentWithContextMutex.RLock()
	defer fake.updateDocumentWithContextMutex.RUnlock()
	return len(fake.updateDocumentWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateDocumentWithContextCalls(stub func(context.Context, *ssm.UpdateDocumentInput, ...request.Option) (*ssm.UpdateDocumentOutput, error)) {
	fake.updateDocumentWithContextMutex.Lock()
	defer fake.updateDocumentWithContextMutex.Unlock()
	fake.UpdateDocumentWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateDocumentWithContextArgsForCall(i int) (context.Context, *ssm.UpdateDocumentInput, []request.Option) {
	fake.updateDocumentWithContextMutex.RLock()
	defer fake.updateDocumentWithContextMutex.RUnlock()
	argsForCall := fake.updateDocumentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateDocumentWithContextReturns(result1 *ssm.UpdateDocumentOutput, result2 error) {
	fake.updateDocumentWithContextMutex.Lock()
	defer fake.updateDocumentWithContextMutex.Unlock()
	fake.UpdateDocumentWithContextStub = nil
	fake.updateDocumentWithContextReturns = struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateDocumentWithContextReturnsOnCall(i int, result1 *ssm.UpdateDocumentOutput, result2 error) {
	fake.updateDocumentWithContextMutex.Lock()
	defer fake.updateDocumentWithContextMutex.Unlock()
	fake.UpdateDocumentWithContextStub = nil
	if fake.updateDocumentWithContextReturnsOnCall == nil {
		fake.updateDocumentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateDocumentOutput
			result2 error
		})
	}
	fake.updateDocumentWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateDocumentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindow(arg1 *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error) {
	fake.updateMaintenanceWindowMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowReturnsOnCall[len(fake.updateMaintenanceWindowArgsForCall)]
	fake.updateMaintenanceWindowArgsForCall = append(fake.updateMaintenanceWindowArgsForCall, struct {
		arg1 *ssm.UpdateMaintenanceWindowInput
	}{arg1})
	stub := fake.UpdateMaintenanceWindowStub
	fakeReturns := fake.updateMaintenanceWindowReturns
	fake.recordInvocation("UpdateMaintenanceWindow", []interface{}{arg1})
	fake.updateMaintenanceWindowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowCallCount() int {
	fake.updateMaintenanceWindowMutex.RLock()
	defer fake.updateMaintenanceWindowMutex.RUnlock()
	return len(fake.updateMaintenanceWindowArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowCalls(stub func(*ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error)) {
	fake.updateMaintenanceWindowMutex.Lock()
	defer fake.updateMaintenanceWindowMutex.Unlock()
	fake.UpdateMaintenanceWindowStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowArgsForCall(i int) *ssm.UpdateMaintenanceWindowInput {
	fake.updateMaintenanceWindowMutex.RLock()
	defer fake.updateMaintenanceWindowMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowReturns(result1 *ssm.UpdateMaintenanceWindowOutput, result2 error) {
	fake.updateMaintenanceWindowMutex.Lock()
	defer fake.updateMaintenanceWindowMutex.Unlock()
	fake.UpdateMaintenanceWindowStub = nil
	fake.updateMaintenanceWindowReturns = struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowReturnsOnCall(i int, result1 *ssm.UpdateMaintenanceWindowOutput, result2 error) {
	fake.updateMaintenanceWindowMutex.Lock()
	defer fake.updateMaintenanceWindowMutex.Unlock()
	fake.UpdateMaintenanceWindowStub = nil
	if fake.updateMaintenanceWindowReturnsOnCall == nil {
		fake.updateMaintenanceWindowReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateMaintenanceWindowOutput
			result2 error
		})
	}
	fake.updateMaintenanceWindowReturnsOnCall[i] = struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowRequest(arg1 *ssm.UpdateMaintenanceWindowInput) (*request.Request, *ssm.UpdateMaintenanceWindowOutput) {
	fake.updateMaintenanceWindowRequestMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowRequestReturnsOnCall[len(fake.updateMaintenanceWindowRequestArgsForCall)]
	fake.updateMaintenanceWindowRequestArgsForCall = append(fake.updateMaintenanceWindowRequestArgsForCall, struct {
		arg1 *ssm.UpdateMaintenanceWindowInput
	}{arg1})
	stub := fake.UpdateMaintenanceWindowRequestStub
	fakeReturns := fake.updateMaintenanceWindowRequestReturns
	fake.recordInvocation("UpdateMaintenanceWindowRequest", []interface{}{arg1})
	fake.updateMaintenanceWindowRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowRequestCallCount() int {
	fake.updateMaintenanceWindowRequestMutex.RLock()
	defer fake.updateMaintenanceWindowRequestMutex.RUnlock()
	return len(fake.updateMaintenanceWindowRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowRequestCalls(stub func(*ssm.UpdateMaintenanceWindowInput) (*request.Request, *ssm.UpdateMaintenanceWindowOutput)) {
	fake.updateMaintenanceWindowRequestMutex.Lock()
	defer fake.updateMaintenanceWindowRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowRequestStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowRequestArgsForCall(i int) *ssm.UpdateMaintenanceWindowInput {
	fake.updateMaintenanceWindowRequestMutex.RLock()
	defer fake.updateMaintenanceWindowRequestMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowRequestReturns(result1 *request.Request, result2 *ssm.UpdateMaintenanceWindowOutput) {
	fake.updateMaintenanceWindowRequestMutex.Lock()
	defer fake.updateMaintenanceWindowRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowRequestStub = nil
	fake.updateMaintenanceWindowRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateMaintenanceWindowOutput) {
	fake.updateMaintenanceWindowRequestMutex.Lock()
	defer fake.updateMaintenanceWindowRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowRequestStub = nil
	if fake.updateMaintenanceWindowRequestReturnsOnCall == nil {
		fake.updateMaintenanceWindowRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateMaintenanceWindowOutput
		})
	}
	fake.updateMaintenanceWindowRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTarget(arg1 *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	fake.updateMaintenanceWindowTargetMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowTargetReturnsOnCall[len(fake.updateMaintenanceWindowTargetArgsForCall)]
	fake.updateMaintenanceWindowTargetArgsForCall = append(fake.updateMaintenanceWindowTargetArgsForCall, struct {
		arg1 *ssm.UpdateMaintenanceWindowTargetInput
	}{arg1})
	stub := fake.UpdateMaintenanceWindowTargetStub
	fakeReturns := fake.updateMaintenanceWindowTargetReturns
	fake.recordInvocation("UpdateMaintenanceWindowTarget", []interface{}{arg1})
	fake.updateMaintenanceWindowTargetMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetCallCount() int {
	fake.updateMaintenanceWindowTargetMutex.RLock()
	defer fake.updateMaintenanceWindowTargetMutex.RUnlock()
	return len(fake.updateMaintenanceWindowTargetArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetCalls(stub func(*ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error)) {
	fake.updateMaintenanceWindowTargetMutex.Lock()
	defer fake.updateMaintenanceWindowTargetMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetArgsForCall(i int) *ssm.UpdateMaintenanceWindowTargetInput {
	fake.updateMaintenanceWindowTargetMutex.RLock()
	defer fake.updateMaintenanceWindowTargetMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowTargetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetReturns(result1 *ssm.UpdateMaintenanceWindowTargetOutput, result2 error) {
	fake.updateMaintenanceWindowTargetMutex.Lock()
	defer fake.updateMaintenanceWindowTargetMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetStub = nil
	fake.updateMaintenanceWindowTargetReturns = struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetReturnsOnCall(i int, result1 *ssm.UpdateMaintenanceWindowTargetOutput, result2 error) {
	fake.updateMaintenanceWindowTargetMutex.Lock()
	defer fake.updateMaintenanceWindowTargetMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetStub = nil
	if fake.updateMaintenanceWindowTargetReturnsOnCall == nil {
		fake.updateMaintenanceWindowTargetReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateMaintenanceWindowTargetOutput
			result2 error
		})
	}
	fake.updateMaintenanceWindowTargetReturnsOnCall[i] = struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetRequest(arg1 *ssm.UpdateMaintenanceWindowTargetInput) (*request.Request, *ssm.UpdateMaintenanceWindowTargetOutput) {
	fake.updateMaintenanceWindowTargetRequestMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowTargetRequestReturnsOnCall[len(fake.updateMaintenanceWindowTargetRequestArgsForCall)]
	fake.updateMaintenanceWindowTargetRequestArgsForCall = append(fake.updateMaintenanceWindowTargetRequestArgsForCall, struct {
		arg1 *ssm.UpdateMaintenanceWindowTargetInput
	}{arg1})
	stub := fake.UpdateMaintenanceWindowTargetRequestStub
	fakeReturns := fake.updateMaintenanceWindowTargetRequestReturns
	fake.recordInvocation("UpdateMaintenanceWindowTargetRequest", []interface{}{arg1})
	fake.updateMaintenanceWindowTargetRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetRequestCallCount() int {
	fake.updateMaintenanceWindowTargetRequestMutex.RLock()
	defer fake.updateMaintenanceWindowTargetRequestMutex.RUnlock()
	return len(fake.updateMaintenanceWindowTargetRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetRequestCalls(stub func(*ssm.UpdateMaintenanceWindowTargetInput) (*request.Request, *ssm.UpdateMaintenanceWindowTargetOutput)) {
	fake.updateMaintenanceWindowTargetRequestMutex.Lock()
	defer fake.updateMaintenanceWindowTargetRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetRequestStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetRequestArgsForCall(i int) *ssm.UpdateMaintenanceWindowTargetInput {
	fake.updateMaintenanceWindowTargetRequestMutex.RLock()
	defer fake.updateMaintenanceWindowTargetRequestMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowTargetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetRequestReturns(result1 *request.Request, result2 *ssm.UpdateMaintenanceWindowTargetOutput) {
	fake.updateMaintenanceWindowTargetRequestMutex.Lock()
	defer fake.updateMaintenanceWindowTargetRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetRequestStub = nil
	fake.updateMaintenanceWindowTargetRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTargetOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateMaintenanceWindowTargetOutput) {
	fake.updateMaintenanceWindowTargetRequestMutex.Lock()
	defer fake.updateMaintenanceWindowTargetRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetRequestStub = nil
	if fake.updateMaintenanceWindowTargetRequestReturnsOnCall == nil {
		fake.updateMaintenanceWindowTargetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateMaintenanceWindowTargetOutput
		})
	}
	fake.updateMaintenanceWindowTargetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTargetOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetWithContext(arg1 context.Context, arg2 *ssm.UpdateMaintenanceWindowTargetInput, arg3 ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	fake.updateMaintenanceWindowTargetWithContextMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowTargetWithContextReturnsOnCall[len(fake.updateMaintenanceWindowTargetWithContextArgsForCall)]
	fake.updateMaintenanceWindowTargetWithContextArgsForCall = append(fake.updateMaintenanceWindowTargetWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateMaintenanceWindowTargetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateMaintenanceWindowTargetWithContextStub
	fakeReturns := fake.updateMaintenanceWindowTargetWithContextReturns
	fake.recordInvocation("UpdateMaintenanceWindowTargetWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateMaintenanceWindowTargetWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetWithContextCallCount() int {
	fake.updateMaintenanceWindowTargetWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowTargetWithContextMutex.RUnlock()
	return len(fake.updateMaintenanceWindowTargetWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetWithContextCalls(stub func(context.Context, *ssm.UpdateMaintenanceWindowTargetInput, ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error)) {
	fake.updateMaintenanceWindowTargetWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowTargetWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetWithContextArgsForCall(i int) (context.Context, *ssm.UpdateMaintenanceWindowTargetInput, []request.Option) {
	fake.updateMaintenanceWindowTargetWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowTargetWithContextMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowTargetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetWithContextReturns(result1 *ssm.UpdateMaintenanceWindowTargetOutput, result2 error) {
	fake.updateMaintenanceWindowTargetWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowTargetWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetWithContextStub = nil
	fake.updateMaintenanceWindowTargetWithContextReturns = struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTargetWithContextReturnsOnCall(i int, result1 *ssm.UpdateMaintenanceWindowTargetOutput, result2 error) {
	fake.updateMaintenanceWindowTargetWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowTargetWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowTargetWithContextStub = nil
	if fake.updateMaintenanceWindowTargetWithContextReturnsOnCall == nil {
		fake.updateMaintenanceWindowTargetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateMaintenanceWindowTargetOutput
			result2 error
		})
	}
	fake.updateMaintenanceWindowTargetWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateMaintenanceWindowTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTask(arg1 *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	fake.updateMaintenanceWindowTaskMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowTaskReturnsOnCall[len(fake.updateMaintenanceWindowTaskArgsForCall)]
	fake.updateMaintenanceWindowTaskArgsForCall = append(fake.updateMaintenanceWindowTaskArgsForCall, struct {
		arg1 *ssm.UpdateMaintenanceWindowTaskInput
	}{arg1})
	stub := fake.UpdateMaintenanceWindowTaskStub
	fakeReturns := fake.updateMaintenanceWindowTaskReturns
	fake.recordInvocation("UpdateMaintenanceWindowTask", []interface{}{arg1})
	fake.updateMaintenanceWindowTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskCallCount() int {
	fake.updateMaintenanceWindowTaskMutex.RLock()
	defer fake.updateMaintenanceWindowTaskMutex.RUnlock()
	return len(fake.updateMaintenanceWindowTaskArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskCalls(stub func(*ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error)) {
	fake.updateMaintenanceWindowTaskMutex.Lock()
	defer fake.updateMaintenanceWindowTaskMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskArgsForCall(i int) *ssm.UpdateMaintenanceWindowTaskInput {
	fake.updateMaintenanceWindowTaskMutex.RLock()
	defer fake.updateMaintenanceWindowTaskMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskReturns(result1 *ssm.UpdateMaintenanceWindowTaskOutput, result2 error) {
	fake.updateMaintenanceWindowTaskMutex.Lock()
	defer fake.updateMaintenanceWindowTaskMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskStub = nil
	fake.updateMaintenanceWindowTaskReturns = struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskReturnsOnCall(i int, result1 *ssm.UpdateMaintenanceWindowTaskOutput, result2 error) {
	fake.updateMaintenanceWindowTaskMutex.Lock()
	defer fake.updateMaintenanceWindowTaskMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskStub = nil
	if fake.updateMaintenanceWindowTaskReturnsOnCall == nil {
		fake.updateMaintenanceWindowTaskReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateMaintenanceWindowTaskOutput
			result2 error
		})
	}
	fake.updateMaintenanceWindowTaskReturnsOnCall[i] = struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskRequest(arg1 *ssm.UpdateMaintenanceWindowTaskInput) (*request.Request, *ssm.UpdateMaintenanceWindowTaskOutput) {
	fake.updateMaintenanceWindowTaskRequestMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowTaskRequestReturnsOnCall[len(fake.updateMaintenanceWindowTaskRequestArgsForCall)]
	fake.updateMaintenanceWindowTaskRequestArgsForCall = append(fake.updateMaintenanceWindowTaskRequestArgsForCall, struct {
		arg1 *ssm.UpdateMaintenanceWindowTaskInput
	}{arg1})
	stub := fake.UpdateMaintenanceWindowTaskRequestStub
	fakeReturns := fake.updateMaintenanceWindowTaskRequestReturns
	fake.recordInvocation("UpdateMaintenanceWindowTaskRequest", []interface{}{arg1})
	fake.updateMaintenanceWindowTaskRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskRequestCallCount() int {
	fake.updateMaintenanceWindowTaskRequestMutex.RLock()
	defer fake.updateMaintenanceWindowTaskRequestMutex.RUnlock()
	return len(fake.updateMaintenanceWindowTaskRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskRequestCalls(stub func(*ssm.UpdateMaintenanceWindowTaskInput) (*request.Request, *ssm.UpdateMaintenanceWindowTaskOutput)) {
	fake.updateMaintenanceWindowTaskRequestMutex.Lock()
	defer fake.updateMaintenanceWindowTaskRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskRequestStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskRequestArgsForCall(i int) *ssm.UpdateMaintenanceWindowTaskInput {
	fake.updateMaintenanceWindowTaskRequestMutex.RLock()
	defer fake.updateMaintenanceWindowTaskRequestMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskRequestReturns(result1 *request.Request, result2 *ssm.UpdateMaintenanceWindowTaskOutput) {
	fake.updateMaintenanceWindowTaskRequestMutex.Lock()
	defer fake.updateMaintenanceWindowTaskRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskRequestStub = nil
	fake.updateMaintenanceWindowTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTaskOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateMaintenanceWindowTaskOutput) {
	fake.updateMaintenanceWindowTaskRequestMutex.Lock()
	defer fake.updateMaintenanceWindowTaskRequestMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskRequestStub = nil
	if fake.updateMaintenanceWindowTaskRequestReturnsOnCall == nil {
		fake.updateMaintenanceWindowTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateMaintenanceWindowTaskOutput
		})
	}
	fake.updateMaintenanceWindowTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateMaintenanceWindowTaskOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskWithContext(arg1 context.Context, arg2 *ssm.UpdateMaintenanceWindowTaskInput, arg3 ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	fake.updateMaintenanceWindowTaskWithContextMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowTaskWithContextReturnsOnCall[len(fake.updateMaintenanceWindowTaskWithContextArgsForCall)]
	fake.updateMaintenanceWindowTaskWithContextArgsForCall = append(fake.updateMaintenanceWindowTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateMaintenanceWindowTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateMaintenanceWindowTaskWithContextStub
	fakeReturns := fake.updateMaintenanceWindowTaskWithContextReturns
	fake.recordInvocation("UpdateMaintenanceWindowTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateMaintenanceWindowTaskWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskWithContextCallCount() int {
	fake.updateMaintenanceWindowTaskWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowTaskWithContextMutex.RUnlock()
	return len(fake.updateMaintenanceWindowTaskWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskWithContextCalls(stub func(context.Context, *ssm.UpdateMaintenanceWindowTaskInput, ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error)) {
	fake.updateMaintenanceWindowTaskWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowTaskWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskWithContextArgsForCall(i int) (context.Context, *ssm.UpdateMaintenanceWindowTaskInput, []request.Option) {
	fake.updateMaintenanceWindowTaskWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowTaskWithContextMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskWithContextReturns(result1 *ssm.UpdateMaintenanceWindowTaskOutput, result2 error) {
	fake.updateMaintenanceWindowTaskWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowTaskWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskWithContextStub = nil
	fake.updateMaintenanceWindowTaskWithContextReturns = struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowTaskWithContextReturnsOnCall(i int, result1 *ssm.UpdateMaintenanceWindowTaskOutput, result2 error) {
	fake.updateMaintenanceWindowTaskWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowTaskWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowTaskWithContextStub = nil
	if fake.updateMaintenanceWindowTaskWithContextReturnsOnCall == nil {
		fake.updateMaintenanceWindowTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateMaintenanceWindowTaskOutput
			result2 error
		})
	}
	fake.updateMaintenanceWindowTaskWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateMaintenanceWindowTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowWithContext(arg1 context.Context, arg2 *ssm.UpdateMaintenanceWindowInput, arg3 ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error) {
	fake.updateMaintenanceWindowWithContextMutex.Lock()
	ret, specificReturn := fake.updateMaintenanceWindowWithContextReturnsOnCall[len(fake.updateMaintenanceWindowWithContextArgsForCall)]
	fake.updateMaintenanceWindowWithContextArgsForCall = append(fake.updateMaintenanceWindowWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateMaintenanceWindowInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateMaintenanceWindowWithContextStub
	fakeReturns := fake.updateMaintenanceWindowWithContextReturns
	fake.recordInvocation("UpdateMaintenanceWindowWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateMaintenanceWindowWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowWithContextCallCount() int {
	fake.updateMaintenanceWindowWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowWithContextMutex.RUnlock()
	return len(fake.updateMaintenanceWindowWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowWithContextCalls(stub func(context.Context, *ssm.UpdateMaintenanceWindowInput, ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error)) {
	fake.updateMaintenanceWindowWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowWithContextArgsForCall(i int) (context.Context, *ssm.UpdateMaintenanceWindowInput, []request.Option) {
	fake.updateMaintenanceWindowWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowWithContextMutex.RUnlock()
	argsForCall := fake.updateMaintenanceWindowWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowWithContextReturns(result1 *ssm.UpdateMaintenanceWindowOutput, result2 error) {
	fake.updateMaintenanceWindowWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowWithContextStub = nil
	fake.updateMaintenanceWindowWithContextReturns = struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateMaintenanceWindowWithContextReturnsOnCall(i int, result1 *ssm.UpdateMaintenanceWindowOutput, result2 error) {
	fake.updateMaintenanceWindowWithContextMutex.Lock()
	defer fake.updateMaintenanceWindowWithContextMutex.Unlock()
	fake.UpdateMaintenanceWindowWithContextStub = nil
	if fake.updateMaintenanceWindowWithContextReturnsOnCall == nil {
		fake.updateMaintenanceWindowWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateMaintenanceWindowOutput
			result2 error
		})
	}
	fake.updateMaintenanceWindowWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateMaintenanceWindowOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateManagedInstanceRole(arg1 *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	fake.updateManagedInstanceRoleMutex.Lock()
	ret, specificReturn := fake.updateManagedInstanceRoleReturnsOnCall[len(fake.updateManagedInstanceRoleArgsForCall)]
	fake.updateManagedInstanceRoleArgsForCall = append(fake.updateManagedInstanceRoleArgsForCall, struct {
		arg1 *ssm.UpdateManagedInstanceRoleInput
	}{arg1})
	stub := fake.UpdateManagedInstanceRoleStub
	fakeReturns := fake.updateManagedInstanceRoleReturns
	fake.recordInvocation("UpdateManagedInstanceRole", []interface{}{arg1})
	fake.updateManagedInstanceRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleCallCount() int {
	fake.updateManagedInstanceRoleMutex.RLock()
	defer fake.updateManagedInstanceRoleMutex.RUnlock()
	return len(fake.updateManagedInstanceRoleArgsForCall)
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleCalls(stub func(*ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error)) {
	fake.updateManagedInstanceRoleMutex.Lock()
	defer fake.updateManagedInstanceRoleMutex.Unlock()
	fake.UpdateManagedInstanceRoleStub = stub
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleArgsForCall(i int) *ssm.UpdateManagedInstanceRoleInput {
	fake.updateManagedInstanceRoleMutex.RLock()
	defer fake.updateManagedInstanceRoleMutex.RUnlock()
	argsForCall := fake.updateManagedInstanceRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleReturns(result1 *ssm.UpdateManagedInstanceRoleOutput, result2 error) {
	fake.updateManagedInstanceRoleMutex.Lock()
	defer fake.updateManagedInstanceRoleMutex.Unlock()
	fake.UpdateManagedInstanceRoleStub = nil
	fake.updateManagedInstanceRoleReturns = struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleReturnsOnCall(i int, result1 *ssm.UpdateManagedInstanceRoleOutput, result2 error) {
	fake.updateManagedInstanceRoleMutex.Lock()
	defer fake.updateManagedInstanceRoleMutex.Unlock()
	fake.UpdateManagedInstanceRoleStub = nil
	if fake.updateManagedInstanceRoleReturnsOnCall == nil {
		fake.updateManagedInstanceRoleReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateManagedInstanceRoleOutput
			result2 error
		})
	}
	fake.updateManagedInstanceRoleReturnsOnCall[i] = struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleRequest(arg1 *ssm.UpdateManagedInstanceRoleInput) (*request.Request, *ssm.UpdateManagedInstanceRoleOutput) {
	fake.updateManagedInstanceRoleRequestMutex.Lock()
	ret, specificReturn := fake.updateManagedInstanceRoleRequestReturnsOnCall[len(fake.updateManagedInstanceRoleRequestArgsForCall)]
	fake.updateManagedInstanceRoleRequestArgsForCall = append(fake.updateManagedInstanceRoleRequestArgsForCall, struct {
		arg1 *ssm.UpdateManagedInstanceRoleInput
	}{arg1})
	stub := fake.UpdateManagedInstanceRoleRequestStub
	fakeReturns := fake.updateManagedInstanceRoleRequestReturns
	fake.recordInvocation("UpdateManagedInstanceRoleRequest", []interface{}{arg1})
	fake.updateManagedInstanceRoleRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleRequestCallCount() int {
	fake.updateManagedInstanceRoleRequestMutex.RLock()
	defer fake.updateManagedInstanceRoleRequestMutex.RUnlock()
	return len(fake.updateManagedInstanceRoleRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleRequestCalls(stub func(*ssm.UpdateManagedInstanceRoleInput) (*request.Request, *ssm.UpdateManagedInstanceRoleOutput)) {
	fake.updateManagedInstanceRoleRequestMutex.Lock()
	defer fake.updateManagedInstanceRoleRequestMutex.Unlock()
	fake.UpdateManagedInstanceRoleRequestStub = stub
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleRequestArgsForCall(i int) *ssm.UpdateManagedInstanceRoleInput {
	fake.updateManagedInstanceRoleRequestMutex.RLock()
	defer fake.updateManagedInstanceRoleRequestMutex.RUnlock()
	argsForCall := fake.updateManagedInstanceRoleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleRequestReturns(result1 *request.Request, result2 *ssm.UpdateManagedInstanceRoleOutput) {
	fake.updateManagedInstanceRoleRequestMutex.Lock()
	defer fake.updateManagedInstanceRoleRequestMutex.Unlock()
	fake.UpdateManagedInstanceRoleRequestStub = nil
	fake.updateManagedInstanceRoleRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateManagedInstanceRoleOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateManagedInstanceRoleOutput) {
	fake.updateManagedInstanceRoleRequestMutex.Lock()
	defer fake.updateManagedInstanceRoleRequestMutex.Unlock()
	fake.UpdateManagedInstanceRoleRequestStub = nil
	if fake.updateManagedInstanceRoleRequestReturnsOnCall == nil {
		fake.updateManagedInstanceRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateManagedInstanceRoleOutput
		})
	}
	fake.updateManagedInstanceRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateManagedInstanceRoleOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleWithContext(arg1 context.Context, arg2 *ssm.UpdateManagedInstanceRoleInput, arg3 ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	fake.updateManagedInstanceRoleWithContextMutex.Lock()
	ret, specificReturn := fake.updateManagedInstanceRoleWithContextReturnsOnCall[len(fake.updateManagedInstanceRoleWithContextArgsForCall)]
	fake.updateManagedInstanceRoleWithContextArgsForCall = append(fake.updateManagedInstanceRoleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateManagedInstanceRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateManagedInstanceRoleWithContextStub
	fakeReturns := fake.updateManagedInstanceRoleWithContextReturns
	fake.recordInvocation("UpdateManagedInstanceRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateManagedInstanceRoleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleWithContextCallCount() int {
	fake.updateManagedInstanceRoleWithContextMutex.RLock()
	defer fake.updateManagedInstanceRoleWithContextMutex.RUnlock()
	return len(fake.updateManagedInstanceRoleWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleWithContextCalls(stub func(context.Context, *ssm.UpdateManagedInstanceRoleInput, ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error)) {
	fake.updateManagedInstanceRoleWithContextMutex.Lock()
	defer fake.updateManagedInstanceRoleWithContextMutex.Unlock()
	fake.UpdateManagedInstanceRoleWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleWithContextArgsForCall(i int) (context.Context, *ssm.UpdateManagedInstanceRoleInput, []request.Option) {
	fake.updateManagedInstanceRoleWithContextMutex.RLock()
	defer fake.updateManagedInstanceRoleWithContextMutex.RUnlock()
	argsForCall := fake.updateManagedInstanceRoleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleWithContextReturns(result1 *ssm.UpdateManagedInstanceRoleOutput, result2 error) {
	fake.updateManagedInstanceRoleWithContextMutex.Lock()
	defer fake.updateManagedInstanceRoleWithContextMutex.Unlock()
	fake.UpdateManagedInstanceRoleWithContextStub = nil
	fake.updateManagedInstanceRoleWithContextReturns = struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateManagedInstanceRoleWithContextReturnsOnCall(i int, result1 *ssm.UpdateManagedInstanceRoleOutput, result2 error) {
	fake.updateManagedInstanceRoleWithContextMutex.Lock()
	defer fake.updateManagedInstanceRoleWithContextMutex.Unlock()
	fake.UpdateManagedInstanceRoleWithContextStub = nil
	if fake.updateManagedInstanceRoleWithContextReturnsOnCall == nil {
		fake.updateManagedInstanceRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateManagedInstanceRoleOutput
			result2 error
		})
	}
	fake.updateManagedInstanceRoleWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateManagedInstanceRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsItem(arg1 *ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error) {
	fake.updateOpsItemMutex.Lock()
	ret, specificReturn := fake.updateOpsItemReturnsOnCall[len(fake.updateOpsItemArgsForCall)]
	fake.updateOpsItemArgsForCall = append(fake.updateOpsItemArgsForCall, struct {
		arg1 *ssm.UpdateOpsItemInput
	}{arg1})
	stub := fake.UpdateOpsItemStub
	fakeReturns := fake.updateOpsItemReturns
	fake.recordInvocation("UpdateOpsItem", []interface{}{arg1})
	fake.updateOpsItemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateOpsItemCallCount() int {
	fake.updateOpsItemMutex.RLock()
	defer fake.updateOpsItemMutex.RUnlock()
	return len(fake.updateOpsItemArgsForCall)
}

func (fake *FakeSSMClient) UpdateOpsItemCalls(stub func(*ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error)) {
	fake.updateOpsItemMutex.Lock()
	defer fake.updateOpsItemMutex.Unlock()
	fake.UpdateOpsItemStub = stub
}

func (fake *FakeSSMClient) UpdateOpsItemArgsForCall(i int) *ssm.UpdateOpsItemInput {
	fake.updateOpsItemMutex.RLock()
	defer fake.updateOpsItemMutex.RUnlock()
	argsForCall := fake.updateOpsItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateOpsItemReturns(result1 *ssm.UpdateOpsItemOutput, result2 error) {
	fake.updateOpsItemMutex.Lock()
	defer fake.updateOpsItemMutex.Unlock()
	fake.UpdateOpsItemStub = nil
	fake.updateOpsItemReturns = struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsItemReturnsOnCall(i int, result1 *ssm.UpdateOpsItemOutput, result2 error) {
	fake.updateOpsItemMutex.Lock()
	defer fake.updateOpsItemMutex.Unlock()
	fake.UpdateOpsItemStub = nil
	if fake.updateOpsItemReturnsOnCall == nil {
		fake.updateOpsItemReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateOpsItemOutput
			result2 error
		})
	}
	fake.updateOpsItemReturnsOnCall[i] = struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsItemRequest(arg1 *ssm.UpdateOpsItemInput) (*request.Request, *ssm.UpdateOpsItemOutput) {
	fake.updateOpsItemRequestMutex.Lock()
	ret, specificReturn := fake.updateOpsItemRequestReturnsOnCall[len(fake.updateOpsItemRequestArgsForCall)]
	fake.updateOpsItemRequestArgsForCall = append(fake.updateOpsItemRequestArgsForCall, struct {
		arg1 *ssm.UpdateOpsItemInput
	}{arg1})
	stub := fake.UpdateOpsItemRequestStub
	fakeReturns := fake.updateOpsItemRequestReturns
	fake.recordInvocation("UpdateOpsItemRequest", []interface{}{arg1})
	fake.updateOpsItemRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateOpsItemRequestCallCount() int {
	fake.updateOpsItemRequestMutex.RLock()
	defer fake.updateOpsItemRequestMutex.RUnlock()
	return len(fake.updateOpsItemRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateOpsItemRequestCalls(stub func(*ssm.UpdateOpsItemInput) (*request.Request, *ssm.UpdateOpsItemOutput)) {
	fake.updateOpsItemRequestMutex.Lock()
	defer fake.updateOpsItemRequestMutex.Unlock()
	fake.UpdateOpsItemRequestStub = stub
}

func (fake *FakeSSMClient) UpdateOpsItemRequestArgsForCall(i int) *ssm.UpdateOpsItemInput {
	fake.updateOpsItemRequestMutex.RLock()
	defer fake.updateOpsItemRequestMutex.RUnlock()
	argsForCall := fake.updateOpsItemRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateOpsItemRequestReturns(result1 *request.Request, result2 *ssm.UpdateOpsItemOutput) {
	fake.updateOpsItemRequestMutex.Lock()
	defer fake.updateOpsItemRequestMutex.Unlock()
	fake.UpdateOpsItemRequestStub = nil
	fake.updateOpsItemRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsItemRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateOpsItemOutput) {
	fake.updateOpsItemRequestMutex.Lock()
	defer fake.updateOpsItemRequestMutex.Unlock()
	fake.UpdateOpsItemRequestStub = nil
	if fake.updateOpsItemRequestReturnsOnCall == nil {
		fake.updateOpsItemRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateOpsItemOutput
		})
	}
	fake.updateOpsItemRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsItemOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsItemWithContext(arg1 context.Context, arg2 *ssm.UpdateOpsItemInput, arg3 ...request.Option) (*ssm.UpdateOpsItemOutput, error) {
	fake.updateOpsItemWithContextMutex.Lock()
	ret, specificReturn := fake.updateOpsItemWithContextReturnsOnCall[len(fake.updateOpsItemWithContextArgsForCall)]
	fake.updateOpsItemWithContextArgsForCall = append(fake.updateOpsItemWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateOpsItemInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateOpsItemWithContextStub
	fakeReturns := fake.updateOpsItemWithContextReturns
	fake.recordInvocation("UpdateOpsItemWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateOpsItemWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateOpsItemWithContextCallCount() int {
	fake.updateOpsItemWithContextMutex.RLock()
	defer fake.updateOpsItemWithContextMutex.RUnlock()
	return len(fake.updateOpsItemWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateOpsItemWithContextCalls(stub func(context.Context, *ssm.UpdateOpsItemInput, ...request.Option) (*ssm.UpdateOpsItemOutput, error)) {
	fake.updateOpsItemWithContextMutex.Lock()
	defer fake.updateOpsItemWithContextMutex.Unlock()
	fake.UpdateOpsItemWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateOpsItemWithContextArgsForCall(i int) (context.Context, *ssm.UpdateOpsItemInput, []request.Option) {
	fake.updateOpsItemWithContextMutex.RLock()
	defer fake.updateOpsItemWithContextMutex.RUnlock()
	argsForCall := fake.updateOpsItemWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateOpsItemWithContextReturns(result1 *ssm.UpdateOpsItemOutput, result2 error) {
	fake.updateOpsItemWithContextMutex.Lock()
	defer fake.updateOpsItemWithContextMutex.Unlock()
	fake.UpdateOpsItemWithContextStub = nil
	fake.updateOpsItemWithContextReturns = struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsItemWithContextReturnsOnCall(i int, result1 *ssm.UpdateOpsItemOutput, result2 error) {
	fake.updateOpsItemWithContextMutex.Lock()
	defer fake.updateOpsItemWithContextMutex.Unlock()
	fake.UpdateOpsItemWithContextStub = nil
	if fake.updateOpsItemWithContextReturnsOnCall == nil {
		fake.updateOpsItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateOpsItemOutput
			result2 error
		})
	}
	fake.updateOpsItemWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateOpsItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsMetadata(arg1 *ssm.UpdateOpsMetadataInput) (*ssm.UpdateOpsMetadataOutput, error) {
	fake.updateOpsMetadataMutex.Lock()
	ret, specificReturn := fake.updateOpsMetadataReturnsOnCall[len(fake.updateOpsMetadataArgsForCall)]
	fake.updateOpsMetadataArgsForCall = append(fake.updateOpsMetadataArgsForCall, struct {
		arg1 *ssm.UpdateOpsMetadataInput
	}{arg1})
	stub := fake.UpdateOpsMetadataStub
	fakeReturns := fake.updateOpsMetadataReturns
	fake.recordInvocation("UpdateOpsMetadata", []interface{}{arg1})
	fake.updateOpsMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateOpsMetadataCallCount() int {
	fake.updateOpsMetadataMutex.RLock()
	defer fake.updateOpsMetadataMutex.RUnlock()
	return len(fake.updateOpsMetadataArgsForCall)
}

func (fake *FakeSSMClient) UpdateOpsMetadataCalls(stub func(*ssm.UpdateOpsMetadataInput) (*ssm.UpdateOpsMetadataOutput, error)) {
	fake.updateOpsMetadataMutex.Lock()
	defer fake.updateOpsMetadataMutex.Unlock()
	fake.UpdateOpsMetadataStub = stub
}

func (fake *FakeSSMClient) UpdateOpsMetadataArgsForCall(i int) *ssm.UpdateOpsMetadataInput {
	fake.updateOpsMetadataMutex.RLock()
	defer fake.updateOpsMetadataMutex.RUnlock()
	argsForCall := fake.updateOpsMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateOpsMetadataReturns(result1 *ssm.UpdateOpsMetadataOutput, result2 error) {
	fake.updateOpsMetadataMutex.Lock()
	defer fake.updateOpsMetadataMutex.Unlock()
	fake.UpdateOpsMetadataStub = nil
	fake.updateOpsMetadataReturns = struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsMetadataReturnsOnCall(i int, result1 *ssm.UpdateOpsMetadataOutput, result2 error) {
	fake.updateOpsMetadataMutex.Lock()
	defer fake.updateOpsMetadataMutex.Unlock()
	fake.UpdateOpsMetadataStub = nil
	if fake.updateOpsMetadataReturnsOnCall == nil {
		fake.updateOpsMetadataReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateOpsMetadataOutput
			result2 error
		})
	}
	fake.updateOpsMetadataReturnsOnCall[i] = struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsMetadataRequest(arg1 *ssm.UpdateOpsMetadataInput) (*request.Request, *ssm.UpdateOpsMetadataOutput) {
	fake.updateOpsMetadataRequestMutex.Lock()
	ret, specificReturn := fake.updateOpsMetadataRequestReturnsOnCall[len(fake.updateOpsMetadataRequestArgsForCall)]
	fake.updateOpsMetadataRequestArgsForCall = append(fake.updateOpsMetadataRequestArgsForCall, struct {
		arg1 *ssm.UpdateOpsMetadataInput
	}{arg1})
	stub := fake.UpdateOpsMetadataRequestStub
	fakeReturns := fake.updateOpsMetadataRequestReturns
	fake.recordInvocation("UpdateOpsMetadataRequest", []interface{}{arg1})
	fake.updateOpsMetadataRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateOpsMetadataRequestCallCount() int {
	fake.updateOpsMetadataRequestMutex.RLock()
	defer fake.updateOpsMetadataRequestMutex.RUnlock()
	return len(fake.updateOpsMetadataRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateOpsMetadataRequestCalls(stub func(*ssm.UpdateOpsMetadataInput) (*request.Request, *ssm.UpdateOpsMetadataOutput)) {
	fake.updateOpsMetadataRequestMutex.Lock()
	defer fake.updateOpsMetadataRequestMutex.Unlock()
	fake.UpdateOpsMetadataRequestStub = stub
}

func (fake *FakeSSMClient) UpdateOpsMetadataRequestArgsForCall(i int) *ssm.UpdateOpsMetadataInput {
	fake.updateOpsMetadataRequestMutex.RLock()
	defer fake.updateOpsMetadataRequestMutex.RUnlock()
	argsForCall := fake.updateOpsMetadataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateOpsMetadataRequestReturns(result1 *request.Request, result2 *ssm.UpdateOpsMetadataOutput) {
	fake.updateOpsMetadataRequestMutex.Lock()
	defer fake.updateOpsMetadataRequestMutex.Unlock()
	fake.UpdateOpsMetadataRequestStub = nil
	fake.updateOpsMetadataRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsMetadataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateOpsMetadataOutput) {
	fake.updateOpsMetadataRequestMutex.Lock()
	defer fake.updateOpsMetadataRequestMutex.Unlock()
	fake.UpdateOpsMetadataRequestStub = nil
	if fake.updateOpsMetadataRequestReturnsOnCall == nil {
		fake.updateOpsMetadataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateOpsMetadataOutput
		})
	}
	fake.updateOpsMetadataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateOpsMetadataOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsMetadataWithContext(arg1 context.Context, arg2 *ssm.UpdateOpsMetadataInput, arg3 ...request.Option) (*ssm.UpdateOpsMetadataOutput, error) {
	fake.updateOpsMetadataWithContextMutex.Lock()
	ret, specificReturn := fake.updateOpsMetadataWithContextReturnsOnCall[len(fake.updateOpsMetadataWithContextArgsForCall)]
	fake.updateOpsMetadataWithContextArgsForCall = append(fake.updateOpsMetadataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateOpsMetadataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateOpsMetadataWithContextStub
	fakeReturns := fake.updateOpsMetadataWithContextReturns
	fake.recordInvocation("UpdateOpsMetadataWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateOpsMetadataWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateOpsMetadataWithContextCallCount() int {
	fake.updateOpsMetadataWithContextMutex.RLock()
	defer fake.updateOpsMetadataWithContextMutex.RUnlock()
	return len(fake.updateOpsMetadataWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateOpsMetadataWithContextCalls(stub func(context.Context, *ssm.UpdateOpsMetadataInput, ...request.Option) (*ssm.UpdateOpsMetadataOutput, error)) {
	fake.updateOpsMetadataWithContextMutex.Lock()
	defer fake.updateOpsMetadataWithContextMutex.Unlock()
	fake.UpdateOpsMetadataWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateOpsMetadataWithContextArgsForCall(i int) (context.Context, *ssm.UpdateOpsMetadataInput, []request.Option) {
	fake.updateOpsMetadataWithContextMutex.RLock()
	defer fake.updateOpsMetadataWithContextMutex.RUnlock()
	argsForCall := fake.updateOpsMetadataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateOpsMetadataWithContextReturns(result1 *ssm.UpdateOpsMetadataOutput, result2 error) {
	fake.updateOpsMetadataWithContextMutex.Lock()
	defer fake.updateOpsMetadataWithContextMutex.Unlock()
	fake.UpdateOpsMetadataWithContextStub = nil
	fake.updateOpsMetadataWithContextReturns = struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateOpsMetadataWithContextReturnsOnCall(i int, result1 *ssm.UpdateOpsMetadataOutput, result2 error) {
	fake.updateOpsMetadataWithContextMutex.Lock()
	defer fake.updateOpsMetadataWithContextMutex.Unlock()
	fake.UpdateOpsMetadataWithContextStub = nil
	if fake.updateOpsMetadataWithContextReturnsOnCall == nil {
		fake.updateOpsMetadataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateOpsMetadataOutput
			result2 error
		})
	}
	fake.updateOpsMetadataWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateOpsMetadataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdatePatchBaseline(arg1 *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error) {
	fake.updatePatchBaselineMutex.Lock()
	ret, specificReturn := fake.updatePatchBaselineReturnsOnCall[len(fake.updatePatchBaselineArgsForCall)]
	fake.updatePatchBaselineArgsForCall = append(fake.updatePatchBaselineArgsForCall, struct {
		arg1 *ssm.UpdatePatchBaselineInput
	}{arg1})
	stub := fake.UpdatePatchBaselineStub
	fakeReturns := fake.updatePatchBaselineReturns
	fake.recordInvocation("UpdatePatchBaseline", []interface{}{arg1})
	fake.updatePatchBaselineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdatePatchBaselineCallCount() int {
	fake.updatePatchBaselineMutex.RLock()
	defer fake.updatePatchBaselineMutex.RUnlock()
	return len(fake.updatePatchBaselineArgsForCall)
}

func (fake *FakeSSMClient) UpdatePatchBaselineCalls(stub func(*ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error)) {
	fake.updatePatchBaselineMutex.Lock()
	defer fake.updatePatchBaselineMutex.Unlock()
	fake.UpdatePatchBaselineStub = stub
}

func (fake *FakeSSMClient) UpdatePatchBaselineArgsForCall(i int) *ssm.UpdatePatchBaselineInput {
	fake.updatePatchBaselineMutex.RLock()
	defer fake.updatePatchBaselineMutex.RUnlock()
	argsForCall := fake.updatePatchBaselineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdatePatchBaselineReturns(result1 *ssm.UpdatePatchBaselineOutput, result2 error) {
	fake.updatePatchBaselineMutex.Lock()
	defer fake.updatePatchBaselineMutex.Unlock()
	fake.UpdatePatchBaselineStub = nil
	fake.updatePatchBaselineReturns = struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdatePatchBaselineReturnsOnCall(i int, result1 *ssm.UpdatePatchBaselineOutput, result2 error) {
	fake.updatePatchBaselineMutex.Lock()
	defer fake.updatePatchBaselineMutex.Unlock()
	fake.UpdatePatchBaselineStub = nil
	if fake.updatePatchBaselineReturnsOnCall == nil {
		fake.updatePatchBaselineReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdatePatchBaselineOutput
			result2 error
		})
	}
	fake.updatePatchBaselineReturnsOnCall[i] = struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdatePatchBaselineRequest(arg1 *ssm.UpdatePatchBaselineInput) (*request.Request, *ssm.UpdatePatchBaselineOutput) {
	fake.updatePatchBaselineRequestMutex.Lock()
	ret, specificReturn := fake.updatePatchBaselineRequestReturnsOnCall[len(fake.updatePatchBaselineRequestArgsForCall)]
	fake.updatePatchBaselineRequestArgsForCall = append(fake.updatePatchBaselineRequestArgsForCall, struct {
		arg1 *ssm.UpdatePatchBaselineInput
	}{arg1})
	stub := fake.UpdatePatchBaselineRequestStub
	fakeReturns := fake.updatePatchBaselineRequestReturns
	fake.recordInvocation("UpdatePatchBaselineRequest", []interface{}{arg1})
	fake.updatePatchBaselineRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdatePatchBaselineRequestCallCount() int {
	fake.updatePatchBaselineRequestMutex.RLock()
	defer fake.updatePatchBaselineRequestMutex.RUnlock()
	return len(fake.updatePatchBaselineRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdatePatchBaselineRequestCalls(stub func(*ssm.UpdatePatchBaselineInput) (*request.Request, *ssm.UpdatePatchBaselineOutput)) {
	fake.updatePatchBaselineRequestMutex.Lock()
	defer fake.updatePatchBaselineRequestMutex.Unlock()
	fake.UpdatePatchBaselineRequestStub = stub
}

func (fake *FakeSSMClient) UpdatePatchBaselineRequestArgsForCall(i int) *ssm.UpdatePatchBaselineInput {
	fake.updatePatchBaselineRequestMutex.RLock()
	defer fake.updatePatchBaselineRequestMutex.RUnlock()
	argsForCall := fake.updatePatchBaselineRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdatePatchBaselineRequestReturns(result1 *request.Request, result2 *ssm.UpdatePatchBaselineOutput) {
	fake.updatePatchBaselineRequestMutex.Lock()
	defer fake.updatePatchBaselineRequestMutex.Unlock()
	fake.UpdatePatchBaselineRequestStub = nil
	fake.updatePatchBaselineRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdatePatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdatePatchBaselineRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdatePatchBaselineOutput) {
	fake.updatePatchBaselineRequestMutex.Lock()
	defer fake.updatePatchBaselineRequestMutex.Unlock()
	fake.UpdatePatchBaselineRequestStub = nil
	if fake.updatePatchBaselineRequestReturnsOnCall == nil {
		fake.updatePatchBaselineRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdatePatchBaselineOutput
		})
	}
	fake.updatePatchBaselineRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdatePatchBaselineOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdatePatchBaselineWithContext(arg1 context.Context, arg2 *ssm.UpdatePatchBaselineInput, arg3 ...request.Option) (*ssm.UpdatePatchBaselineOutput, error) {
	fake.updatePatchBaselineWithContextMutex.Lock()
	ret, specificReturn := fake.updatePatchBaselineWithContextReturnsOnCall[len(fake.updatePatchBaselineWithContextArgsForCall)]
	fake.updatePatchBaselineWithContextArgsForCall = append(fake.updatePatchBaselineWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdatePatchBaselineInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdatePatchBaselineWithContextStub
	fakeReturns := fake.updatePatchBaselineWithContextReturns
	fake.recordInvocation("UpdatePatchBaselineWithContext", []interface{}{arg1, arg2, arg3})
	fake.updatePatchBaselineWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdatePatchBaselineWithContextCallCount() int {
	fake.updatePatchBaselineWithContextMutex.RLock()
	defer fake.updatePatchBaselineWithContextMutex.RUnlock()
	return len(fake.updatePatchBaselineWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdatePatchBaselineWithContextCalls(stub func(context.Context, *ssm.UpdatePatchBaselineInput, ...request.Option) (*ssm.UpdatePatchBaselineOutput, error)) {
	fake.updatePatchBaselineWithContextMutex.Lock()
	defer fake.updatePatchBaselineWithContextMutex.Unlock()
	fake.UpdatePatchBaselineWithContextStub = stub
}

func (fake *FakeSSMClient) UpdatePatchBaselineWithContextArgsForCall(i int) (context.Context, *ssm.UpdatePatchBaselineInput, []request.Option) {
	fake.updatePatchBaselineWithContextMutex.RLock()
	defer fake.updatePatchBaselineWithContextMutex.RUnlock()
	argsForCall := fake.updatePatchBaselineWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdatePatchBaselineWithContextReturns(result1 *ssm.UpdatePatchBaselineOutput, result2 error) {
	fake.updatePatchBaselineWithContextMutex.Lock()
	defer fake.updatePatchBaselineWithContextMutex.Unlock()
	fake.UpdatePatchBaselineWithContextStub = nil
	fake.updatePatchBaselineWithContextReturns = struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdatePatchBaselineWithContextReturnsOnCall(i int, result1 *ssm.UpdatePatchBaselineOutput, result2 error) {
	fake.updatePatchBaselineWithContextMutex.Lock()
	defer fake.updatePatchBaselineWithContextMutex.Unlock()
	fake.UpdatePatchBaselineWithContextStub = nil
	if fake.updatePatchBaselineWithContextReturnsOnCall == nil {
		fake.updatePatchBaselineWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdatePatchBaselineOutput
			result2 error
		})
	}
	fake.updatePatchBaselineWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdatePatchBaselineOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateResourceDataSync(arg1 *ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error) {
	fake.updateResourceDataSyncMutex.Lock()
	ret, specificReturn := fake.updateResourceDataSyncReturnsOnCall[len(fake.updateResourceDataSyncArgsForCall)]
	fake.updateResourceDataSyncArgsForCall = append(fake.updateResourceDataSyncArgsForCall, struct {
		arg1 *ssm.UpdateResourceDataSyncInput
	}{arg1})
	stub := fake.UpdateResourceDataSyncStub
	fakeReturns := fake.updateResourceDataSyncReturns
	fake.recordInvocation("UpdateResourceDataSync", []interface{}{arg1})
	fake.updateResourceDataSyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateResourceDataSyncCallCount() int {
	fake.updateResourceDataSyncMutex.RLock()
	defer fake.updateResourceDataSyncMutex.RUnlock()
	return len(fake.updateResourceDataSyncArgsForCall)
}

func (fake *FakeSSMClient) UpdateResourceDataSyncCalls(stub func(*ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error)) {
	fake.updateResourceDataSyncMutex.Lock()
	defer fake.updateResourceDataSyncMutex.Unlock()
	fake.UpdateResourceDataSyncStub = stub
}

func (fake *FakeSSMClient) UpdateResourceDataSyncArgsForCall(i int) *ssm.UpdateResourceDataSyncInput {
	fake.updateResourceDataSyncMutex.RLock()
	defer fake.updateResourceDataSyncMutex.RUnlock()
	argsForCall := fake.updateResourceDataSyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateResourceDataSyncReturns(result1 *ssm.UpdateResourceDataSyncOutput, result2 error) {
	fake.updateResourceDataSyncMutex.Lock()
	defer fake.updateResourceDataSyncMutex.Unlock()
	fake.UpdateResourceDataSyncStub = nil
	fake.updateResourceDataSyncReturns = struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateResourceDataSyncReturnsOnCall(i int, result1 *ssm.UpdateResourceDataSyncOutput, result2 error) {
	fake.updateResourceDataSyncMutex.Lock()
	defer fake.updateResourceDataSyncMutex.Unlock()
	fake.UpdateResourceDataSyncStub = nil
	if fake.updateResourceDataSyncReturnsOnCall == nil {
		fake.updateResourceDataSyncReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateResourceDataSyncOutput
			result2 error
		})
	}
	fake.updateResourceDataSyncReturnsOnCall[i] = struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateResourceDataSyncRequest(arg1 *ssm.UpdateResourceDataSyncInput) (*request.Request, *ssm.UpdateResourceDataSyncOutput) {
	fake.updateResourceDataSyncRequestMutex.Lock()
	ret, specificReturn := fake.updateResourceDataSyncRequestReturnsOnCall[len(fake.updateResourceDataSyncRequestArgsForCall)]
	fake.updateResourceDataSyncRequestArgsForCall = append(fake.updateResourceDataSyncRequestArgsForCall, struct {
		arg1 *ssm.UpdateResourceDataSyncInput
	}{arg1})
	stub := fake.UpdateResourceDataSyncRequestStub
	fakeReturns := fake.updateResourceDataSyncRequestReturns
	fake.recordInvocation("UpdateResourceDataSyncRequest", []interface{}{arg1})
	fake.updateResourceDataSyncRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateResourceDataSyncRequestCallCount() int {
	fake.updateResourceDataSyncRequestMutex.RLock()
	defer fake.updateResourceDataSyncRequestMutex.RUnlock()
	return len(fake.updateResourceDataSyncRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateResourceDataSyncRequestCalls(stub func(*ssm.UpdateResourceDataSyncInput) (*request.Request, *ssm.UpdateResourceDataSyncOutput)) {
	fake.updateResourceDataSyncRequestMutex.Lock()
	defer fake.updateResourceDataSyncRequestMutex.Unlock()
	fake.UpdateResourceDataSyncRequestStub = stub
}

func (fake *FakeSSMClient) UpdateResourceDataSyncRequestArgsForCall(i int) *ssm.UpdateResourceDataSyncInput {
	fake.updateResourceDataSyncRequestMutex.RLock()
	defer fake.updateResourceDataSyncRequestMutex.RUnlock()
	argsForCall := fake.updateResourceDataSyncRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateResourceDataSyncRequestReturns(result1 *request.Request, result2 *ssm.UpdateResourceDataSyncOutput) {
	fake.updateResourceDataSyncRequestMutex.Lock()
	defer fake.updateResourceDataSyncRequestMutex.Unlock()
	fake.UpdateResourceDataSyncRequestStub = nil
	fake.updateResourceDataSyncRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateResourceDataSyncRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateResourceDataSyncOutput) {
	fake.updateResourceDataSyncRequestMutex.Lock()
	defer fake.updateResourceDataSyncRequestMutex.Unlock()
	fake.UpdateResourceDataSyncRequestStub = nil
	if fake.updateResourceDataSyncRequestReturnsOnCall == nil {
		fake.updateResourceDataSyncRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateResourceDataSyncOutput
		})
	}
	fake.updateResourceDataSyncRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateResourceDataSyncOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateResourceDataSyncWithContext(arg1 context.Context, arg2 *ssm.UpdateResourceDataSyncInput, arg3 ...request.Option) (*ssm.UpdateResourceDataSyncOutput, error) {
	fake.updateResourceDataSyncWithContextMutex.Lock()
	ret, specificReturn := fake.updateResourceDataSyncWithContextReturnsOnCall[len(fake.updateResourceDataSyncWithContextArgsForCall)]
	fake.updateResourceDataSyncWithContextArgsForCall = append(fake.updateResourceDataSyncWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateResourceDataSyncInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateResourceDataSyncWithContextStub
	fakeReturns := fake.updateResourceDataSyncWithContextReturns
	fake.recordInvocation("UpdateResourceDataSyncWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateResourceDataSyncWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateResourceDataSyncWithContextCallCount() int {
	fake.updateResourceDataSyncWithContextMutex.RLock()
	defer fake.updateResourceDataSyncWithContextMutex.RUnlock()
	return len(fake.updateResourceDataSyncWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateResourceDataSyncWithContextCalls(stub func(context.Context, *ssm.UpdateResourceDataSyncInput, ...request.Option) (*ssm.UpdateResourceDataSyncOutput, error)) {
	fake.updateResourceDataSyncWithContextMutex.Lock()
	defer fake.updateResourceDataSyncWithContextMutex.Unlock()
	fake.UpdateResourceDataSyncWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateResourceDataSyncWithContextArgsForCall(i int) (context.Context, *ssm.UpdateResourceDataSyncInput, []request.Option) {
	fake.updateResourceDataSyncWithContextMutex.RLock()
	defer fake.updateResourceDataSyncWithContextMutex.RUnlock()
	argsForCall := fake.updateResourceDataSyncWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateResourceDataSyncWithContextReturns(result1 *ssm.UpdateResourceDataSyncOutput, result2 error) {
	fake.updateResourceDataSyncWithContextMutex.Lock()
	defer fake.updateResourceDataSyncWithContextMutex.Unlock()
	fake.UpdateResourceDataSyncWithContextStub = nil
	fake.updateResourceDataSyncWithContextReturns = struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateResourceDataSyncWithContextReturnsOnCall(i int, result1 *ssm.UpdateResourceDataSyncOutput, result2 error) {
	fake.updateResourceDataSyncWithContextMutex.Lock()
	defer fake.updateResourceDataSyncWithContextMutex.Unlock()
	fake.UpdateResourceDataSyncWithContextStub = nil
	if fake.updateResourceDataSyncWithContextReturnsOnCall == nil {
		fake.updateResourceDataSyncWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateResourceDataSyncOutput
			result2 error
		})
	}
	fake.updateResourceDataSyncWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateResourceDataSyncOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateServiceSetting(arg1 *ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error) {
	fake.updateServiceSettingMutex.Lock()
	ret, specificReturn := fake.updateServiceSettingReturnsOnCall[len(fake.updateServiceSettingArgsForCall)]
	fake.updateServiceSettingArgsForCall = append(fake.updateServiceSettingArgsForCall, struct {
		arg1 *ssm.UpdateServiceSettingInput
	}{arg1})
	stub := fake.UpdateServiceSettingStub
	fakeReturns := fake.updateServiceSettingReturns
	fake.recordInvocation("UpdateServiceSetting", []interface{}{arg1})
	fake.updateServiceSettingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateServiceSettingCallCount() int {
	fake.updateServiceSettingMutex.RLock()
	defer fake.updateServiceSettingMutex.RUnlock()
	return len(fake.updateServiceSettingArgsForCall)
}

func (fake *FakeSSMClient) UpdateServiceSettingCalls(stub func(*ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error)) {
	fake.updateServiceSettingMutex.Lock()
	defer fake.updateServiceSettingMutex.Unlock()
	fake.UpdateServiceSettingStub = stub
}

func (fake *FakeSSMClient) UpdateServiceSettingArgsForCall(i int) *ssm.UpdateServiceSettingInput {
	fake.updateServiceSettingMutex.RLock()
	defer fake.updateServiceSettingMutex.RUnlock()
	argsForCall := fake.updateServiceSettingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateServiceSettingReturns(result1 *ssm.UpdateServiceSettingOutput, result2 error) {
	fake.updateServiceSettingMutex.Lock()
	defer fake.updateServiceSettingMutex.Unlock()
	fake.UpdateServiceSettingStub = nil
	fake.updateServiceSettingReturns = struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateServiceSettingReturnsOnCall(i int, result1 *ssm.UpdateServiceSettingOutput, result2 error) {
	fake.updateServiceSettingMutex.Lock()
	defer fake.updateServiceSettingMutex.Unlock()
	fake.UpdateServiceSettingStub = nil
	if fake.updateServiceSettingReturnsOnCall == nil {
		fake.updateServiceSettingReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateServiceSettingOutput
			result2 error
		})
	}
	fake.updateServiceSettingReturnsOnCall[i] = struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateServiceSettingRequest(arg1 *ssm.UpdateServiceSettingInput) (*request.Request, *ssm.UpdateServiceSettingOutput) {
	fake.updateServiceSettingRequestMutex.Lock()
	ret, specificReturn := fake.updateServiceSettingRequestReturnsOnCall[len(fake.updateServiceSettingRequestArgsForCall)]
	fake.updateServiceSettingRequestArgsForCall = append(fake.updateServiceSettingRequestArgsForCall, struct {
		arg1 *ssm.UpdateServiceSettingInput
	}{arg1})
	stub := fake.UpdateServiceSettingRequestStub
	fakeReturns := fake.updateServiceSettingRequestReturns
	fake.recordInvocation("UpdateServiceSettingRequest", []interface{}{arg1})
	fake.updateServiceSettingRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateServiceSettingRequestCallCount() int {
	fake.updateServiceSettingRequestMutex.RLock()
	defer fake.updateServiceSettingRequestMutex.RUnlock()
	return len(fake.updateServiceSettingRequestArgsForCall)
}

func (fake *FakeSSMClient) UpdateServiceSettingRequestCalls(stub func(*ssm.UpdateServiceSettingInput) (*request.Request, *ssm.UpdateServiceSettingOutput)) {
	fake.updateServiceSettingRequestMutex.Lock()
	defer fake.updateServiceSettingRequestMutex.Unlock()
	fake.UpdateServiceSettingRequestStub = stub
}

func (fake *FakeSSMClient) UpdateServiceSettingRequestArgsForCall(i int) *ssm.UpdateServiceSettingInput {
	fake.updateServiceSettingRequestMutex.RLock()
	defer fake.updateServiceSettingRequestMutex.RUnlock()
	argsForCall := fake.updateServiceSettingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) UpdateServiceSettingRequestReturns(result1 *request.Request, result2 *ssm.UpdateServiceSettingOutput) {
	fake.updateServiceSettingRequestMutex.Lock()
	defer fake.updateServiceSettingRequestMutex.Unlock()
	fake.UpdateServiceSettingRequestStub = nil
	fake.updateServiceSettingRequestReturns = struct {
		result1 *request.Request
		result2 *ssm.UpdateServiceSettingOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateServiceSettingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ssm.UpdateServiceSettingOutput) {
	fake.updateServiceSettingRequestMutex.Lock()
	defer fake.updateServiceSettingRequestMutex.Unlock()
	fake.UpdateServiceSettingRequestStub = nil
	if fake.updateServiceSettingRequestReturnsOnCall == nil {
		fake.updateServiceSettingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ssm.UpdateServiceSettingOutput
		})
	}
	fake.updateServiceSettingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ssm.UpdateServiceSettingOutput
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateServiceSettingWithContext(arg1 context.Context, arg2 *ssm.UpdateServiceSettingInput, arg3 ...request.Option) (*ssm.UpdateServiceSettingOutput, error) {
	fake.updateServiceSettingWithContextMutex.Lock()
	ret, specificReturn := fake.updateServiceSettingWithContextReturnsOnCall[len(fake.updateServiceSettingWithContextArgsForCall)]
	fake.updateServiceSettingWithContextArgsForCall = append(fake.updateServiceSettingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.UpdateServiceSettingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateServiceSettingWithContextStub
	fakeReturns := fake.updateServiceSettingWithContextReturns
	fake.recordInvocation("UpdateServiceSettingWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateServiceSettingWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMClient) UpdateServiceSettingWithContextCallCount() int {
	fake.updateServiceSettingWithContextMutex.RLock()
	defer fake.updateServiceSettingWithContextMutex.RUnlock()
	return len(fake.updateServiceSettingWithContextArgsForCall)
}

func (fake *FakeSSMClient) UpdateServiceSettingWithContextCalls(stub func(context.Context, *ssm.UpdateServiceSettingInput, ...request.Option) (*ssm.UpdateServiceSettingOutput, error)) {
	fake.updateServiceSettingWithContextMutex.Lock()
	defer fake.updateServiceSettingWithContextMutex.Unlock()
	fake.UpdateServiceSettingWithContextStub = stub
}

func (fake *FakeSSMClient) UpdateServiceSettingWithContextArgsForCall(i int) (context.Context, *ssm.UpdateServiceSettingInput, []request.Option) {
	fake.updateServiceSettingWithContextMutex.RLock()
	defer fake.updateServiceSettingWithContextMutex.RUnlock()
	argsForCall := fake.updateServiceSettingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) UpdateServiceSettingWithContextReturns(result1 *ssm.UpdateServiceSettingOutput, result2 error) {
	fake.updateServiceSettingWithContextMutex.Lock()
	defer fake.updateServiceSettingWithContextMutex.Unlock()
	fake.UpdateServiceSettingWithContextStub = nil
	fake.updateServiceSettingWithContextReturns = struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) UpdateServiceSettingWithContextReturnsOnCall(i int, result1 *ssm.UpdateServiceSettingOutput, result2 error) {
	fake.updateServiceSettingWithContextMutex.Lock()
	defer fake.updateServiceSettingWithContextMutex.Unlock()
	fake.UpdateServiceSettingWithContextStub = nil
	if fake.updateServiceSettingWithContextReturnsOnCall == nil {
		fake.updateServiceSettingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.UpdateServiceSettingOutput
			result2 error
		})
	}
	fake.updateServiceSettingWithContextReturnsOnCall[i] = struct {
		result1 *ssm.UpdateServiceSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMClient) WaitUntilCommandExecuted(arg1 *ssm.GetCommandInvocationInput) error {
	fake.waitUntilCommandExecutedMutex.Lock()
	ret, specificReturn := fake.waitUntilCommandExecutedReturnsOnCall[len(fake.waitUntilCommandExecutedArgsForCall)]
	fake.waitUntilCommandExecutedArgsForCall = append(fake.waitUntilCommandExecutedArgsForCall, struct {
		arg1 *ssm.GetCommandInvocationInput
	}{arg1})
	stub := fake.WaitUntilCommandExecutedStub
	fakeReturns := fake.waitUntilCommandExecutedReturns
	fake.recordInvocation("WaitUntilCommandExecuted", []interface{}{arg1})
	fake.waitUntilCommandExecutedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedCallCount() int {
	fake.waitUntilCommandExecutedMutex.RLock()
	defer fake.waitUntilCommandExecutedMutex.RUnlock()
	return len(fake.waitUntilCommandExecutedArgsForCall)
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedCalls(stub func(*ssm.GetCommandInvocationInput) error) {
	fake.waitUntilCommandExecutedMutex.Lock()
	defer fake.waitUntilCommandExecutedMutex.Unlock()
	fake.WaitUntilCommandExecutedStub = stub
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedArgsForCall(i int) *ssm.GetCommandInvocationInput {
	fake.waitUntilCommandExecutedMutex.RLock()
	defer fake.waitUntilCommandExecutedMutex.RUnlock()
	argsForCall := fake.waitUntilCommandExecutedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedReturns(result1 error) {
	fake.waitUntilCommandExecutedMutex.Lock()
	defer fake.waitUntilCommandExecutedMutex.Unlock()
	fake.WaitUntilCommandExecutedStub = nil
	fake.waitUntilCommandExecutedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedReturnsOnCall(i int, result1 error) {
	fake.waitUntilCommandExecutedMutex.Lock()
	defer fake.waitUntilCommandExecutedMutex.Unlock()
	fake.WaitUntilCommandExecutedStub = nil
	if fake.waitUntilCommandExecutedReturnsOnCall == nil {
		fake.waitUntilCommandExecutedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCommandExecutedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedWithContext(arg1 context.Context, arg2 *ssm.GetCommandInvocationInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCommandExecutedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCommandExecutedWithContextReturnsOnCall[len(fake.waitUntilCommandExecutedWithContextArgsForCall)]
	fake.waitUntilCommandExecutedWithContextArgsForCall = append(fake.waitUntilCommandExecutedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetCommandInvocationInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilCommandExecutedWithContextStub
	fakeReturns := fake.waitUntilCommandExecutedWithContextReturns
	fake.recordInvocation("WaitUntilCommandExecutedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCommandExecutedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedWithContextCallCount() int {
	fake.waitUntilCommandExecutedWithContextMutex.RLock()
	defer fake.waitUntilCommandExecutedWithContextMutex.RUnlock()
	return len(fake.waitUntilCommandExecutedWithContextArgsForCall)
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedWithContextCalls(stub func(context.Context, *ssm.GetCommandInvocationInput, ...request.WaiterOption) error) {
	fake.waitUntilCommandExecutedWithContextMutex.Lock()
	defer fake.waitUntilCommandExecutedWithContextMutex.Unlock()
	fake.WaitUntilCommandExecutedWithContextStub = stub
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedWithContextArgsForCall(i int) (context.Context, *ssm.GetCommandInvocationInput, []request.WaiterOption) {
	fake.waitUntilCommandExecutedWithContextMutex.RLock()
	defer fake.waitUntilCommandExecutedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilCommandExecutedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedWithContextReturns(result1 error) {
	fake.waitUntilCommandExecutedWithContextMutex.Lock()
	defer fake.waitUntilCommandExecutedWithContextMutex.Unlock()
	fake.WaitUntilCommandExecutedWithContextStub = nil
	fake.waitUntilCommandExecutedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) WaitUntilCommandExecutedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilCommandExecutedWithContextMutex.Lock()
	defer fake.waitUntilCommandExecutedWithContextMutex.Unlock()
	fake.WaitUntilCommandExecutedWithContextStub = nil
	if fake.waitUntilCommandExecutedWithContextReturnsOnCall == nil {
		fake.waitUntilCommandExecutedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCommandExecutedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSMClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	fake.associateOpsItemRelatedItemMutex.RLock()
	defer fake.associateOpsItemRelatedItemMutex.RUnlock()
	fake.associateOpsItemRelatedItemRequestMutex.RLock()
	defer fake.associateOpsItemRelatedItemRequestMutex.RUnlock()
	fake.associateOpsItemRelatedItemWithContextMutex.RLock()
	defer fake.associateOpsItemRelatedItemWithContextMutex.RUnlock()
	fake.cancelCommandMutex.RLock()
	defer fake.cancelCommandMutex.RUnlock()
	fake.cancelCommandRequestMutex.RLock()
	defer fake.cancelCommandRequestMutex.RUnlock()
	fake.cancelCommandWithContextMutex.RLock()
	defer fake.cancelCommandWithContextMutex.RUnlock()
	fake.cancelMaintenanceWindowExecutionMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionMutex.RUnlock()
	fake.cancelMaintenanceWindowExecutionRequestMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionRequestMutex.RUnlock()
	fake.cancelMaintenanceWindowExecutionWithContextMutex.RLock()
	defer fake.cancelMaintenanceWindowExecutionWithContextMutex.RUnlock()
	fake.createActivationMutex.RLock()
	defer fake.createActivationMutex.RUnlock()
	fake.createActivationRequestMutex.RLock()
	defer fake.createActivationRequestMutex.RUnlock()
	fake.createActivationWithContextMutex.RLock()
	defer fake.createActivationWithContextMutex.RUnlock()
	fake.createAssociationMutex.RLock()
	defer fake.createAssociationMutex.RUnlock()
	fake.createAssociationBatchMutex.RLock()
	defer fake.createAssociationBatchMutex.RUnlock()
	fake.createAssociationBatchRequestMutex.RLock()
	defer fake.createAssociationBatchRequestMutex.RUnlock()
	fake.createAssociationBatchWithContextMutex.RLock()
	defer fake.createAssociationBatchWithContextMutex.RUnlock()
	fake.createAssociationRequestMutex.RLock()
	defer fake.createAssociationRequestMutex.RUnlock()
	fake.createAssociationWithContextMutex.RLock()
	defer fake.createAssociationWithContextMutex.RUnlock()
	fake.createDocumentMutex.RLock()
	defer fake.createDocumentMutex.RUnlock()
	fake.createDocumentRequestMutex.RLock()
	defer fake.createDocumentRequestMutex.RUnlock()
	fake.createDocumentWithContextMutex.RLock()
	defer fake.createDocumentWithContextMutex.RUnlock()
	fake.createMaintenanceWindowMutex.RLock()
	defer fake.createMaintenanceWindowMutex.RUnlock()
	fake.createMaintenanceWindowRequestMutex.RLock()
	defer fake.createMaintenanceWindowRequestMutex.RUnlock()
	fake.createMaintenanceWindowWithContextMutex.RLock()
	defer fake.createMaintenanceWindowWithContextMutex.RUnlock()
	fake.createOpsItemMutex.RLock()
	defer fake.createOpsItemMutex.RUnlock()
	fake.createOpsItemRequestMutex.RLock()
	defer fake.createOpsItemRequestMutex.RUnlock()
	fake.createOpsItemWithContextMutex.RLock()
	defer fake.createOpsItemWithContextMutex.RUnlock()
	fake.createOpsMetadataMutex.RLock()
	defer fake.createOpsMetadataMutex.RUnlock()
	fake.createOpsMetadataRequestMutex.RLock()
	defer fake.createOpsMetadataRequestMutex.RUnlock()
	fake.createOpsMetadataWithContextMutex.RLock()
	defer fake.createOpsMetadataWithContextMutex.RUnlock()
	fake.createPatchBaselineMutex.RLock()
	defer fake.createPatchBaselineMutex.RUnlock()
	fake.createPatchBaselineRequestMutex.RLock()
	defer fake.createPatchBaselineRequestMutex.RUnlock()
	fake.createPatchBaselineWithContextMutex.RLock()
	defer fake.createPatchBaselineWithContextMutex.RUnlock()
	fake.createResourceDataSyncMutex.RLock()
	defer fake.createResourceDataSyncMutex.RUnlock()
	fake.createResourceDataSyncRequestMutex.RLock()
	defer fake.createResourceDataSyncRequestMutex.RUnlock()
	fake.createResourceDataSyncWithContextMutex.RLock()
	defer fake.createResourceDataSyncWithContextMutex.RUnlock()
	fake.deleteActivationMutex.RLock()
	defer fake.deleteActivationMutex.RUnlock()
	fake.deleteActivationRequestMutex.RLock()
	defer fake.deleteActivationRequestMutex.RUnlock()
	fake.deleteActivationWithContextMutex.RLock()
	defer fake.deleteActivationWithContextMutex.RUnlock()
	fake.deleteAssociationMutex.RLock()
	defer fake.deleteAssociationMutex.RUnlock()
	fake.deleteAssociationRequestMutex.RLock()
	defer fake.deleteAssociationRequestMutex.RUnlock()
	fake.deleteAssociationWithContextMutex.RLock()
	defer fake.deleteAssociationWithContextMutex.RUnlock()
	fake.deleteDocumentMutex.RLock()
	defer fake.deleteDocumentMutex.RUnlock()
	fake.deleteDocumentRequestMutex.RLock()
	defer fake.deleteDocumentRequestMutex.RUnlock()
	fake.deleteDocumentWithContextMutex.RLock()
	defer fake.deleteDocumentWithContextMutex.RUnlock()
	fake.deleteInventoryMutex.RLock()
	defer fake.deleteInventoryMutex.RUnlock()
	fake.deleteInventoryRequestMutex.RLock()
	defer fake.deleteInventoryRequestMutex.RUnlock()
	fake.deleteInventoryWithContextMutex.RLock()
	defer fake.deleteInventoryWithContextMutex.RUnlock()
	fake.deleteMaintenanceWindowMutex.RLock()
	defer fake.deleteMaintenanceWindowMutex.RUnlock()
	fake.deleteMaintenanceWindowRequestMutex.RLock()
	defer fake.deleteMaintenanceWindowRequestMutex.RUnlock()
	fake.deleteMaintenanceWindowWithContextMutex.RLock()
	defer fake.deleteMaintenanceWindowWithContextMutex.RUnlock()
	fake.deleteOpsMetadataMutex.RLock()
	defer fake.deleteOpsMetadataMutex.RUnlock()
	fake.deleteOpsMetadataRequestMutex.RLock()
	defer fake.deleteOpsMetadataRequestMutex.RUnlock()
	fake.deleteOpsMetadataWithContextMutex.RLock()
	defer fake.deleteOpsMetadataWithContextMutex.RUnlock()
	fake.deleteParameterMutex.RLock()
	defer fake.deleteParameterMutex.RUnlock()
	fake.deleteParameterRequestMutex.RLock()
	defer fake.deleteParameterRequestMutex.RUnlock()
	fake.deleteParameterWithContextMutex.RLock()
	defer fake.deleteParameterWithContextMutex.RUnlock()
	fake.deleteParametersMutex.RLock()
	defer fake.deleteParametersMutex.RUnlock()
	fake.deleteParametersRequestMutex.RLock()
	defer fake.deleteParametersRequestMutex.RUnlock()
	fake.deleteParametersWithContextMutex.RLock()
	defer fake.deleteParametersWithContextMutex.RUnlock()
	fake.deletePatchBaselineMutex.RLock()
	defer fake.deletePatchBaselineMutex.RUnlock()
	fake.deletePatchBaselineRequestMutex.RLock()
	defer fake.deletePatchBaselineRequestMutex.RUnlock()
	fake.deletePatchBaselineWithContextMutex.RLock()
	defer fake.deletePatchBaselineWithContextMutex.RUnlock()
	fake.deleteResourceDataSyncMutex.RLock()
	defer fake.deleteResourceDataSyncMutex.RUnlock()
	fake.deleteResourceDataSyncRequestMutex.RLock()
	defer fake.deleteResourceDataSyncRequestMutex.RUnlock()
	fake.deleteResourceDataSyncWithContextMutex.RLock()
	defer fake.deleteResourceDataSyncWithContextMutex.RUnlock()
	fake.deregisterManagedInstanceMutex.RLock()
	defer fake.deregisterManagedInstanceMutex.RUnlock()
	fake.deregisterManagedInstanceRequestMutex.RLock()
	defer fake.deregisterManagedInstanceRequestMutex.RUnlock()
	fake.deregisterManagedInstanceWithContextMutex.RLock()
	defer fake.deregisterManagedInstanceWithContextMutex.RUnlock()
	fake.deregisterPatchBaselineForPatchGroupMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupMutex.RUnlock()
	fake.deregisterPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupRequestMutex.RUnlock()
	fake.deregisterPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.deregisterPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	fake.deregisterTargetFromMaintenanceWindowMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowMutex.RUnlock()
	fake.deregisterTargetFromMaintenanceWindowRequestMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowRequestMutex.RUnlock()
	fake.deregisterTargetFromMaintenanceWindowWithContextMutex.RLock()
	defer fake.deregisterTargetFromMaintenanceWindowWithContextMutex.RUnlock()
	fake.deregisterTaskFromMaintenanceWindowMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowMutex.RUnlock()
	fake.deregisterTaskFromMaintenanceWindowRequestMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowRequestMutex.RUnlock()
	fake.deregisterTaskFromMaintenanceWindowWithContextMutex.RLock()
	defer fake.deregisterTaskFromMaintenanceWindowWithContextMutex.RUnlock()
	fake.describeActivationsMutex.RLock()
	defer fake.describeActivationsMutex.RUnlock()
	fake.describeActivationsPagesMutex.RLock()
	defer fake.describeActivationsPagesMutex.RUnlock()
	fake.describeActivationsPagesWithContextMutex.RLock()
	defer fake.describeActivationsPagesWithContextMutex.RUnlock()
	fake.describeActivationsRequestMutex.RLock()
	defer fake.describeActivationsRequestMutex.RUnlock()
	fake.describeActivationsWithContextMutex.RLock()
	defer fake.describeActivationsWithContextMutex.RUnlock()
	fake.describeAssociationMutex.RLock()
	defer fake.describeAssociationMutex.RUnlock()
	fake.describeAssociationExecutionTargetsMutex.RLock()
	defer fake.describeAssociationExecutionTargetsMutex.RUnlock()
	fake.describeAssociationExecutionTargetsPagesMutex.RLock()
	defer fake.describeAssociationExecutionTargetsPagesMutex.RUnlock()
	fake.describeAssociationExecutionTargetsPagesWithContextMutex.RLock()
	defer fake.describeAssociationExecutionTargetsPagesWithContextMutex.RUnlock()
	fake.describeAssociationExecutionTargetsRequestMutex.RLock()
	defer fake.describeAssociationExecutionTargetsRequestMutex.RUnlock()
	fake.describeAssociationExecutionTargetsWithContextMutex.RLock()
	defer fake.describeAssociationExecutionTargetsWithContextMutex.RUnlock()
	fake.describeAssociationExecutionsMutex.RLock()
	defer fake.describeAssociationExecutionsMutex.RUnlock()
	fake.describeAssociationExecutionsPagesMutex.RLock()
	defer fake.describeAssociationExecutionsPagesMutex.RUnlock()
	fake.describeAssociationExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAssociationExecutionsPagesWithContextMutex.RUnlock()
	fake.describeAssociationExecutionsRequestMutex.RLock()
	defer fake.describeAssociationExecutionsRequestMutex.RUnlock()
	fake.describeAssociationExecutionsWithContextMutex.RLock()
	defer fake.describeAssociationExecutionsWithContextMutex.RUnlock()
	fake.describeAssociationRequestMutex.RLock()
	defer fake.describeAssociationRequestMutex.RUnlock()
	fake.describeAssociationWithContextMutex.RLock()
	defer fake.describeAssociationWithContextMutex.RUnlock()
	fake.describeAutomationExecutionsMutex.RLock()
	defer fake.describeAutomationExecutionsMutex.RUnlock()
	fake.describeAutomationExecutionsPagesMutex.RLock()
	defer fake.describeAutomationExecutionsPagesMutex.RUnlock()
	fake.describeAutomationExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAutomationExecutionsPagesWithContextMutex.RUnlock()
	fake.describeAutomationExecutionsRequestMutex.RLock()
	defer fake.describeAutomationExecutionsRequestMutex.RUnlock()
	fake.describeAutomationExecutionsWithContextMutex.RLock()
	defer fake.describeAutomationExecutionsWithContextMutex.RUnlock()
	fake.describeAutomationStepExecutionsMutex.RLock()
	defer fake.describeAutomationStepExecutionsMutex.RUnlock()
	fake.describeAutomationStepExecutionsPagesMutex.RLock()
	defer fake.describeAutomationStepExecutionsPagesMutex.RUnlock()
	fake.describeAutomationStepExecutionsPagesWithContextMutex.RLock()
	defer fake.describeAutomationStepExecutionsPagesWithContextMutex.RUnlock()
	fake.describeAutomationStepExecutionsRequestMutex.RLock()
	defer fake.describeAutomationStepExecutionsRequestMutex.RUnlock()
	fake.describeAutomationStepExecutionsWithContextMutex.RLock()
	defer fake.describeAutomationStepExecutionsWithContextMutex.RUnlock()
	fake.describeAvailablePatchesMutex.RLock()
	defer fake.describeAvailablePatchesMutex.RUnlock()
	fake.describeAvailablePatchesPagesMutex.RLock()
	defer fake.describeAvailablePatchesPagesMutex.RUnlock()
	fake.describeAvailablePatchesPagesWithContextMutex.RLock()
	defer fake.describeAvailablePatchesPagesWithContextMutex.RUnlock()
	fake.describeAvailablePatchesRequestMutex.RLock()
	defer fake.describeAvailablePatchesRequestMutex.RUnlock()
	fake.describeAvailablePatchesWithContextMutex.RLock()
	defer fake.describeAvailablePatchesWithContextMutex.RUnlock()
	fake.describeDocumentMutex.RLock()
	defer fake.describeDocumentMutex.RUnlock()
	fake.describeDocumentPermissionMutex.RLock()
	defer fake.describeDocumentPermissionMutex.RUnlock()
	fake.describeDocumentPermissionRequestMutex.RLock()
	defer fake.describeDocumentPermissionRequestMutex.RUnlock()
	fake.describeDocumentPermissionWithContextMutex.RLock()
	defer fake.describeDocumentPermissionWithContextMutex.RUnlock()
	fake.describeDocumentRequestMutex.RLock()
	defer fake.describeDocumentRequestMutex.RUnlock()
	fake.describeDocumentWithContextMutex.RLock()
	defer fake.describeDocumentWithContextMutex.RUnlock()
	fake.describeEffectiveInstanceAssociationsMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsMutex.RUnlock()
	fake.describeEffectiveInstanceAssociationsPagesMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsPagesMutex.RUnlock()
	fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsPagesWithContextMutex.RUnlock()
	fake.describeEffectiveInstanceAssociationsRequestMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsRequestMutex.RUnlock()
	fake.describeEffectiveInstanceAssociationsWithContextMutex.RLock()
	defer fake.describeEffectiveInstanceAssociationsWithContextMutex.RUnlock()
	fake.describeEffectivePatchesForPatchBaselineMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineMutex.RUnlock()
	fake.describeEffectivePatchesForPatchBaselinePagesMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesMutex.RUnlock()
	fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselinePagesWithContextMutex.RUnlock()
	fake.describeEffectivePatchesForPatchBaselineRequestMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineRequestMutex.RUnlock()
	fake.describeEffectivePatchesForPatchBaselineWithContextMutex.RLock()
	defer fake.describeEffectivePatchesForPatchBaselineWithContextMutex.RUnlock()
	fake.describeInstanceAssociationsStatusMutex.RLock()
	defer fake.describeInstanceAssociationsStatusMutex.RUnlock()
	fake.describeInstanceAssociationsStatusPagesMutex.RLock()
	defer fake.describeInstanceAssociationsStatusPagesMutex.RUnlock()
	fake.describeInstanceAssociationsStatusPagesWithContextMutex.RLock()
	defer fake.describeInstanceAssociationsStatusPagesWithContextMutex.RUnlock()
	fake.describeInstanceAssociationsStatusRequestMutex.RLock()
	defer fake.describeInstanceAssociationsStatusRequestMutex.RUnlock()
	fake.describeInstanceAssociationsStatusWithContextMutex.RLock()
	defer fake.describeInstanceAssociationsStatusWithContextMutex.RUnlock()
	fake.describeInstanceInformationMutex.RLock()
	defer fake.describeInstanceInformationMutex.RUnlock()
	fake.describeInstanceInformationPagesMutex.RLock()
	defer fake.describeInstanceInformationPagesMutex.RUnlock()
	fake.describeInstanceInformationPagesWithContextMutex.RLock()
	defer fake.describeInstanceInformationPagesWithContextMutex.RUnlock()
	fake.describeInstanceInformationRequestMutex.RLock()
	defer fake.describeInstanceInformationRequestMutex.RUnlock()
	fake.describeInstanceInformationWithContextMutex.RLock()
	defer fake.describeInstanceInformationWithContextMutex.RUnlock()
	fake.describeInstancePatchStatesMutex.RLock()
	defer fake.describeInstancePatchStatesMutex.RUnlock()
	fake.describeInstancePatchStatesForPatchGroupMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupMutex.RUnlock()
	fake.describeInstancePatchStatesForPatchGroupPagesMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesMutex.RUnlock()
	fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupPagesWithContextMutex.RUnlock()
	fake.describeInstancePatchStatesForPatchGroupRequestMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupRequestMutex.RUnlock()
	fake.describeInstancePatchStatesForPatchGroupWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesForPatchGroupWithContextMutex.RUnlock()
	fake.describeInstancePatchStatesPagesMutex.RLock()
	defer fake.describeInstancePatchStatesPagesMutex.RUnlock()
	fake.describeInstancePatchStatesPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesPagesWithContextMutex.RUnlock()
	fake.describeInstancePatchStatesRequestMutex.RLock()
	defer fake.describeInstancePatchStatesRequestMutex.RUnlock()
	fake.describeInstancePatchStatesWithContextMutex.RLock()
	defer fake.describeInstancePatchStatesWithContextMutex.RUnlock()
	fake.describeInstancePatchesMutex.RLock()
	defer fake.describeInstancePatchesMutex.RUnlock()
	fake.describeInstancePatchesPagesMutex.RLock()
	defer fake.describeInstancePatchesPagesMutex.RUnlock()
	fake.describeInstancePatchesPagesWithContextMutex.RLock()
	defer fake.describeInstancePatchesPagesWithContextMutex.RUnlock()
	fake.describeInstancePatchesRequestMutex.RLock()
	defer fake.describeInstancePatchesRequestMutex.RUnlock()
	fake.describeInstancePatchesWithContextMutex.RLock()
	defer fake.describeInstancePatchesWithContextMutex.RUnlock()
	fake.describeInventoryDeletionsMutex.RLock()
	defer fake.describeInventoryDeletionsMutex.RUnlock()
	fake.describeInventoryDeletionsPagesMutex.RLock()
	defer fake.describeInventoryDeletionsPagesMutex.RUnlock()
	fake.describeInventoryDeletionsPagesWithContextMutex.RLock()
	defer fake.describeInventoryDeletionsPagesWithContextMutex.RUnlock()
	fake.describeInventoryDeletionsRequestMutex.RLock()
	defer fake.describeInventoryDeletionsRequestMutex.RUnlock()
	fake.describeInventoryDeletionsWithContextMutex.RLock()
	defer fake.describeInventoryDeletionsWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsRequestMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTaskInvocationsWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTasksMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTasksPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTasksRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksRequestMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionTasksWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionTasksWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionsMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsPagesMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsRequestMutex.RUnlock()
	fake.describeMaintenanceWindowExecutionsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowExecutionsWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowScheduleMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleMutex.RUnlock()
	fake.describeMaintenanceWindowSchedulePagesMutex.RLock()
	defer fake.describeMaintenanceWindowSchedulePagesMutex.RUnlock()
	fake.describeMaintenanceWindowSchedulePagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowSchedulePagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowScheduleRequestMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleRequestMutex.RUnlock()
	fake.describeMaintenanceWindowScheduleWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowScheduleWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowTargetsMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsMutex.RUnlock()
	fake.describeMaintenanceWindowTargetsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsPagesMutex.RUnlock()
	fake.describeMaintenanceWindowTargetsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowTargetsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsRequestMutex.RUnlock()
	fake.describeMaintenanceWindowTargetsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTargetsWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowTasksMutex.RLock()
	defer fake.describeMaintenanceWindowTasksMutex.RUnlock()
	fake.describeMaintenanceWindowTasksPagesMutex.RLock()
	defer fake.describeMaintenanceWindowTasksPagesMutex.RUnlock()
	fake.describeMaintenanceWindowTasksPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTasksPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowTasksRequestMutex.RLock()
	defer fake.describeMaintenanceWindowTasksRequestMutex.RUnlock()
	fake.describeMaintenanceWindowTasksWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowTasksWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowsMutex.RLock()
	defer fake.describeMaintenanceWindowsMutex.RUnlock()
	fake.describeMaintenanceWindowsForTargetMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetMutex.RUnlock()
	fake.describeMaintenanceWindowsForTargetPagesMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetPagesMutex.RUnlock()
	fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowsForTargetRequestMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetRequestMutex.RUnlock()
	fake.describeMaintenanceWindowsForTargetWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsForTargetWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowsPagesMutex.RLock()
	defer fake.describeMaintenanceWindowsPagesMutex.RUnlock()
	fake.describeMaintenanceWindowsPagesWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsPagesWithContextMutex.RUnlock()
	fake.describeMaintenanceWindowsRequestMutex.RLock()
	defer fake.describeMaintenanceWindowsRequestMutex.RUnlock()
	fake.describeMaintenanceWindowsWithContextMutex.RLock()
	defer fake.describeMaintenanceWindowsWithContextMutex.RUnlock()
	fake.describeOpsItemsMutex.RLock()
	defer fake.describeOpsItemsMutex.RUnlock()
	fake.describeOpsItemsPagesMutex.RLock()
	defer fake.describeOpsItemsPagesMutex.RUnlock()
	fake.describeOpsItemsPagesWithContextMutex.RLock()
	defer fake.describeOpsItemsPagesWithContextMutex.RUnlock()
	fake.describeOpsItemsRequestMutex.RLock()
	defer fake.describeOpsItemsRequestMutex.RUnlock()
	fake.describeOpsItemsWithContextMutex.RLock()
	defer fake.describeOpsItemsWithContextMutex.RUnlock()
	fake.describeParametersMutex.RLock()
	defer fake.describeParametersMutex.RUnlock()
	fake.describeParametersPagesMutex.RLock()
	defer fake.describeParametersPagesMutex.RUnlock()
	fake.describeParametersPagesWithContextMutex.RLock()
	defer fake.describeParametersPagesWithContextMutex.RUnlock()
	fake.describeParametersRequestMutex.RLock()
	defer fake.describeParametersRequestMutex.RUnlock()
	fake.describeParametersWithContextMutex.RLock()
	defer fake.describeParametersWithContextMutex.RUnlock()
	fake.describePatchBaselinesMutex.RLock()
	defer fake.describePatchBaselinesMutex.RUnlock()
	fake.describePatchBaselinesPagesMutex.RLock()
	defer fake.describePatchBaselinesPagesMutex.RUnlock()
	fake.describePatchBaselinesPagesWithContextMutex.RLock()
	defer fake.describePatchBaselinesPagesWithContextMutex.RUnlock()
	fake.describePatchBaselinesRequestMutex.RLock()
	defer fake.describePatchBaselinesRequestMutex.RUnlock()
	fake.describePatchBaselinesWithContextMutex.RLock()
	defer fake.describePatchBaselinesWithContextMutex.RUnlock()
	fake.describePatchGroupStateMutex.RLock()
	defer fake.describePatchGroupStateMutex.RUnlock()
	fake.describePatchGroupStateRequestMutex.RLock()
	defer fake.describePatchGroupStateRequestMutex.RUnlock()
	fake.describePatchGroupStateWithContextMutex.RLock()
	defer fake.describePatchGroupStateWithContextMutex.RUnlock()
	fake.describePatchGroupsMutex.RLock()
	defer fake.describePatchGroupsMutex.RUnlock()
	fake.describePatchGroupsPagesMutex.RLock()
	defer fake.describePatchGroupsPagesMutex.RUnlock()
	fake.describePatchGroupsPagesWithContextMutex.RLock()
	defer fake.describePatchGroupsPagesWithContextMutex.RUnlock()
	fake.describePatchGroupsRequestMutex.RLock()
	defer fake.describePatchGroupsRequestMutex.RUnlock()
	fake.describePatchGroupsWithContextMutex.RLock()
	defer fake.describePatchGroupsWithContextMutex.RUnlock()
	fake.describePatchPropertiesMutex.RLock()
	defer fake.describePatchPropertiesMutex.RUnlock()
	fake.describePatchPropertiesPagesMutex.RLock()
	defer fake.describePatchPropertiesPagesMutex.RUnlock()
	fake.describePatchPropertiesPagesWithContextMutex.RLock()
	defer fake.describePatchPropertiesPagesWithContextMutex.RUnlock()
	fake.describePatchPropertiesRequestMutex.RLock()
	defer fake.describePatchPropertiesRequestMutex.RUnlock()
	fake.describePatchPropertiesWithContextMutex.RLock()
	defer fake.describePatchPropertiesWithContextMutex.RUnlock()
	fake.describeSessionsMutex.RLock()
	defer fake.describeSessionsMutex.RUnlock()
	fake.describeSessionsPagesMutex.RLock()
	defer fake.describeSessionsPagesMutex.RUnlock()
	fake.describeSessionsPagesWithContextMutex.RLock()
	defer fake.describeSessionsPagesWithContextMutex.RUnlock()
	fake.describeSessionsRequestMutex.RLock()
	defer fake.describeSessionsRequestMutex.RUnlock()
	fake.describeSessionsWithContextMutex.RLock()
	defer fake.describeSessionsWithContextMutex.RUnlock()
	fake.disassociateOpsItemRelatedItemMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemMutex.RUnlock()
	fake.disassociateOpsItemRelatedItemRequestMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemRequestMutex.RUnlock()
	fake.disassociateOpsItemRelatedItemWithContextMutex.RLock()
	defer fake.disassociateOpsItemRelatedItemWithContextMutex.RUnlock()
	fake.getAutomationExecutionMutex.RLock()
	defer fake.getAutomationExecutionMutex.RUnlock()
	fake.getAutomationExecutionRequestMutex.RLock()
	defer fake.getAutomationExecutionRequestMutex.RUnlock()
	fake.getAutomationExecutionWithContextMutex.RLock()
	defer fake.getAutomationExecutionWithContextMutex.RUnlock()
	fake.getCalendarStateMutex.RLock()
	defer fake.getCalendarStateMutex.RUnlock()
	fake.getCalendarStateRequestMutex.RLock()
	defer fake.getCalendarStateRequestMutex.RUnlock()
	fake.getCalendarStateWithContextMutex.RLock()
	defer fake.getCalendarStateWithContextMutex.RUnlock()
	fake.getCommandInvocationMutex.RLock()
	defer fake.getCommandInvocationMutex.RUnlock()
	fake.getCommandInvocationRequestMutex.RLock()
	defer fake.getCommandInvocationRequestMutex.RUnlock()
	fake.getCommandInvocationWithContextMutex.RLock()
	defer fake.getCommandInvocationWithContextMutex.RUnlock()
	fake.getConnectionStatusMutex.RLock()
	defer fake.getConnectionStatusMutex.RUnlock()
	fake.getConnectionStatusRequestMutex.RLock()
	defer fake.getConnectionStatusRequestMutex.RUnlock()
	fake.getConnectionStatusWithContextMutex.RLock()
	defer fake.getConnectionStatusWithContextMutex.RUnlock()
	fake.getDefaultPatchBaselineMutex.RLock()
	defer fake.getDefaultPatchBaselineMutex.RUnlock()
	fake.getDefaultPatchBaselineRequestMutex.RLock()
	defer fake.getDefaultPatchBaselineRequestMutex.RUnlock()
	fake.getDefaultPatchBaselineWithContextMutex.RLock()
	defer fake.getDefaultPatchBaselineWithContextMutex.RUnlock()
	fake.getDeployablePatchSnapshotForInstanceMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceMutex.RUnlock()
	fake.getDeployablePatchSnapshotForInstanceRequestMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceRequestMutex.RUnlock()
	fake.getDeployablePatchSnapshotForInstanceWithContextMutex.RLock()
	defer fake.getDeployablePatchSnapshotForInstanceWithContextMutex.RUnlock()
	fake.getDocumentMutex.RLock()
	defer fake.getDocumentMutex.RUnlock()
	fake.getDocumentRequestMutex.RLock()
	defer fake.getDocumentRequestMutex.RUnlock()
	fake.getDocumentWithContextMutex.RLock()
	defer fake.getDocumentWithContextMutex.RUnlock()
	fake.getInventoryMutex.RLock()
	defer fake.getInventoryMutex.RUnlock()
	fake.getInventoryPagesMutex.RLock()
	defer fake.getInventoryPagesMutex.RUnlock()
	fake.getInventoryPagesWithContextMutex.RLock()
	defer fake.getInventoryPagesWithContextMutex.RUnlock()
	fake.getInventoryRequestMutex.RLock()
	defer fake.getInventoryRequestMutex.RUnlock()
	fake.getInventorySchemaMutex.RLock()
	defer fake.getInventorySchemaMutex.RUnlock()
	fake.getInventorySchemaPagesMutex.RLock()
	defer fake.getInventorySchemaPagesMutex.RUnlock()
	fake.getInventorySchemaPagesWithContextMutex.RLock()
	defer fake.getInventorySchemaPagesWithContextMutex.RUnlock()
	fake.getInventorySchemaRequestMutex.RLock()
	defer fake.getInventorySchemaRequestMutex.RUnlock()
	fake.getInventorySchemaWithContextMutex.RLock()
	defer fake.getInventorySchemaWithContextMutex.RUnlock()
	fake.getInventoryWithContextMutex.RLock()
	defer fake.getInventoryWithContextMutex.RUnlock()
	fake.getMaintenanceWindowMutex.RLock()
	defer fake.getMaintenanceWindowMutex.RUnlock()
	fake.getMaintenanceWindowExecutionMutex.RLock()
	defer fake.getMaintenanceWindowExecutionMutex.RUnlock()
	fake.getMaintenanceWindowExecutionRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionRequestMutex.RUnlock()
	fake.getMaintenanceWindowExecutionTaskMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskMutex.RUnlock()
	fake.getMaintenanceWindowExecutionTaskInvocationMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationMutex.RUnlock()
	fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationRequestMutex.RUnlock()
	fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskInvocationWithContextMutex.RUnlock()
	fake.getMaintenanceWindowExecutionTaskRequestMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskRequestMutex.RUnlock()
	fake.getMaintenanceWindowExecutionTaskWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionTaskWithContextMutex.RUnlock()
	fake.getMaintenanceWindowExecutionWithContextMutex.RLock()
	defer fake.getMaintenanceWindowExecutionWithContextMutex.RUnlock()
	fake.getMaintenanceWindowRequestMutex.RLock()
	defer fake.getMaintenanceWindowRequestMutex.RUnlock()
	fake.getMaintenanceWindowTaskMutex.RLock()
	defer fake.getMaintenanceWindowTaskMutex.RUnlock()
	fake.getMaintenanceWindowTaskRequestMutex.RLock()
	defer fake.getMaintenanceWindowTaskRequestMutex.RUnlock()
	fake.getMaintenanceWindowTaskWithContextMutex.RLock()
	defer fake.getMaintenanceWindowTaskWithContextMutex.RUnlock()
	fake.getMaintenanceWindowWithContextMutex.RLock()
	defer fake.getMaintenanceWindowWithContextMutex.RUnlock()
	fake.getOpsItemMutex.RLock()
	defer fake.getOpsItemMutex.RUnlock()
	fake.getOpsItemRequestMutex.RLock()
	defer fake.getOpsItemRequestMutex.RUnlock()
	fake.getOpsItemWithContextMutex.RLock()
	defer fake.getOpsItemWithContextMutex.RUnlock()
	fake.getOpsMetadataMutex.RLock()
	defer fake.getOpsMetadataMutex.RUnlock()
	fake.getOpsMetadataRequestMutex.RLock()
	defer fake.getOpsMetadataRequestMutex.RUnlock()
	fake.getOpsMetadataWithContextMutex.RLock()
	defer fake.getOpsMetadataWithContextMutex.RUnlock()
	fake.getOpsSummaryMutex.RLock()
	defer fake.getOpsSummaryMutex.RUnlock()
	fake.getOpsSummaryPagesMutex.RLock()
	defer fake.getOpsSummaryPagesMutex.RUnlock()
	fake.getOpsSummaryPagesWithContextMutex.RLock()
	defer fake.getOpsSummaryPagesWithContextMutex.RUnlock()
	fake.getOpsSummaryRequestMutex.RLock()
	defer fake.getOpsSummaryRequestMutex.RUnlock()
	fake.getOpsSummaryWithContextMutex.RLock()
	defer fake.getOpsSummaryWithContextMutex.RUnlock()
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	fake.getParameterHistoryMutex.RLock()
	defer fake.getParameterHistoryMutex.RUnlock()
	fake.getParameterHistoryPagesMutex.RLock()
	defer fake.getParameterHistoryPagesMutex.RUnlock()
	fake.getParameterHistoryPagesWithContextMutex.RLock()
	defer fake.getParameterHistoryPagesWithContextMutex.RUnlock()
	fake.getParameterHistoryRequestMutex.RLock()
	defer fake.getParameterHistoryRequestMutex.RUnlock()
	fake.getParameterHistoryWithContextMutex.RLock()
	defer fake.getParameterHistoryWithContextMutex.RUnlock()
	fake.getParameterRequestMutex.RLock()
	defer fake.getParameterRequestMutex.RUnlock()
	fake.getParameterWithContextMutex.RLock()
	defer fake.getParameterWithContextMutex.RUnlock()
	fake.getParametersMutex.RLock()
	defer fake.getParametersMutex.RUnlock()
	fake.getParametersByPathMutex.RLock()
	defer fake.getParametersByPathMutex.RUnlock()
	fake.getParametersByPathPagesMutex.RLock()
	defer fake.getParametersByPathPagesMutex.RUnlock()
	fake.getParametersByPathPagesWithContextMutex.RLock()
	defer fake.getParametersByPathPagesWithContextMutex.RUnlock()
	fake.getParametersByPathRequestMutex.RLock()
	defer fake.getParametersByPathRequestMutex.RUnlock()
	fake.getParametersByPathWithContextMutex.RLock()
	defer fake.getParametersByPathWithContextMutex.RUnlock()
	fake.getParametersRequestMutex.RLock()
	defer fake.getParametersRequestMutex.RUnlock()
	fake.getParametersWithContextMutex.RLock()
	defer fake.getParametersWithContextMutex.RUnlock()
	fake.getPatchBaselineMutex.RLock()
	defer fake.getPatchBaselineMutex.RUnlock()
	fake.getPatchBaselineForPatchGroupMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupMutex.RUnlock()
	fake.getPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupRequestMutex.RUnlock()
	fake.getPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.getPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	fake.getPatchBaselineRequestMutex.RLock()
	defer fake.getPatchBaselineRequestMutex.RUnlock()
	fake.getPatchBaselineWithContextMutex.RLock()
	defer fake.getPatchBaselineWithContextMutex.RUnlock()
	fake.getServiceSettingMutex.RLock()
	defer fake.getServiceSettingMutex.RUnlock()
	fake.getServiceSettingRequestMutex.RLock()
	defer fake.getServiceSettingRequestMutex.RUnlock()
	fake.getServiceSettingWithContextMutex.RLock()
	defer fake.getServiceSettingWithContextMutex.RUnlock()
	fake.labelParameterVersionMutex.RLock()
	defer fake.labelParameterVersionMutex.RUnlock()
	fake.labelParameterVersionRequestMutex.RLock()
	defer fake.labelParameterVersionRequestMutex.RUnlock()
	fake.labelParameterVersionWithContextMutex.RLock()
	defer fake.labelParameterVersionWithContextMutex.RUnlock()
	fake.listAssociationVersionsMutex.RLock()
	defer fake.listAssociationVersionsMutex.RUnlock()
	fake.listAssociationVersionsPagesMutex.RLock()
	defer fake.listAssociationVersionsPagesMutex.RUnlock()
	fake.listAssociationVersionsPagesWithContextMutex.RLock()
	defer fake.listAssociationVersionsPagesWithContextMutex.RUnlock()
	fake.listAssociationVersionsRequestMutex.RLock()
	defer fake.listAssociationVersionsRequestMutex.RUnlock()
	fake.listAssociationVersionsWithContextMutex.RLock()
	defer fake.listAssociationVersionsWithContextMutex.RUnlock()
	fake.listAssociationsMutex.RLock()
	defer fake.listAssociationsMutex.RUnlock()
	fake.listAssociationsPagesMutex.RLock()
	defer fake.listAssociationsPagesMutex.RUnlock()
	fake.listAssociationsPagesWithContextMutex.RLock()
	defer fake.listAssociationsPagesWithContextMutex.RUnlock()
	fake.listAssociationsRequestMutex.RLock()
	defer fake.listAssociationsRequestMutex.RUnlock()
	fake.listAssociationsWithContextMutex.RLock()
	defer fake.listAssociationsWithContextMutex.RUnlock()
	fake.listCommandInvocationsMutex.RLock()
	defer fake.listCommandInvocationsMutex.RUnlock()
	fake.listCommandInvocationsPagesMutex.RLock()
	defer fake.listCommandInvocationsPagesMutex.RUnlock()
	fake.listCommandInvocationsPagesWithContextMutex.RLock()
	defer fake.listCommandInvocationsPagesWithContextMutex.RUnlock()
	fake.listCommandInvocationsRequestMutex.RLock()
	defer fake.listCommandInvocationsRequestMutex.RUnlock()
	fake.listCommandInvocationsWithContextMutex.RLock()
	defer fake.listCommandInvocationsWithContextMutex.RUnlock()
	fake.listCommandsMutex.RLock()
	defer fake.listCommandsMutex.RUnlock()
	fake.listCommandsPagesMutex.RLock()
	defer fake.listCommandsPagesMutex.RUnlock()
	fake.listCommandsPagesWithContextMutex.RLock()
	defer fake.listCommandsPagesWithContextMutex.RUnlock()
	fake.listCommandsRequestMutex.RLock()
	defer fake.listCommandsRequestMutex.RUnlock()
	fake.listCommandsWithContextMutex.RLock()
	defer fake.listCommandsWithContextMutex.RUnlock()
	fake.listComplianceItemsMutex.RLock()
	defer fake.listComplianceItemsMutex.RUnlock()
	fake.listComplianceItemsPagesMutex.RLock()
	defer fake.listComplianceItemsPagesMutex.RUnlock()
	fake.listComplianceItemsPagesWithContextMutex.RLock()
	defer fake.listComplianceItemsPagesWithContextMutex.RUnlock()
	fake.listComplianceItemsRequestMutex.RLock()
	defer fake.listComplianceItemsRequestMutex.RUnlock()
	fake.listComplianceItemsWithContextMutex.RLock()
	defer fake.listComplianceItemsWithContextMutex.RUnlock()
	fake.listComplianceSummariesMutex.RLock()
	defer fake.listComplianceSummariesMutex.RUnlock()
	fake.listComplianceSummariesPagesMutex.RLock()
	defer fake.listComplianceSummariesPagesMutex.RUnlock()
	fake.listComplianceSummariesPagesWithContextMutex.RLock()
	defer fake.listComplianceSummariesPagesWithContextMutex.RUnlock()
	fake.listComplianceSummariesRequestMutex.RLock()
	defer fake.listComplianceSummariesRequestMutex.RUnlock()
	fake.listComplianceSummariesWithContextMutex.RLock()
	defer fake.listComplianceSummariesWithContextMutex.RUnlock()
	fake.listDocumentMetadataHistoryMutex.RLock()
	defer fake.listDocumentMetadataHistoryMutex.RUnlock()
	fake.listDocumentMetadataHistoryRequestMutex.RLock()
	defer fake.listDocumentMetadataHistoryRequestMutex.RUnlock()
	fake.listDocumentMetadataHistoryWithContextMutex.RLock()
	defer fake.listDocumentMetadataHistoryWithContextMutex.RUnlock()
	fake.listDocumentVersionsMutex.RLock()
	defer fake.listDocumentVersionsMutex.RUnlock()
	fake.listDocumentVersionsPagesMutex.RLock()
	defer fake.listDocumentVersionsPagesMutex.RUnlock()
	fake.listDocumentVersionsPagesWithContextMutex.RLock()
	defer fake.listDocumentVersionsPagesWithContextMutex.RUnlock()
	fake.listDocumentVersionsRequestMutex.RLock()
	defer fake.listDocumentVersionsRequestMutex.RUnlock()
	fake.listDocumentVersionsWithContextMutex.RLock()
	defer fake.listDocumentVersionsWithContextMutex.RUnlock()
	fake.listDocumentsMutex.RLock()
	defer fake.listDocumentsMutex.RUnlock()
	fake.listDocumentsPagesMutex.RLock()
	defer fake.listDocumentsPagesMutex.RUnlock()
	fake.listDocumentsPagesWithContextMutex.RLock()
	defer fake.listDocumentsPagesWithContextMutex.RUnlock()
	fake.listDocumentsRequestMutex.RLock()
	defer fake.listDocumentsRequestMutex.RUnlock()
	fake.listDocumentsWithContextMutex.RLock()
	defer fake.listDocumentsWithContextMutex.RUnlock()
	fake.listInventoryEntriesMutex.RLock()
	defer fake.listInventoryEntriesMutex.RUnlock()
	fake.listInventoryEntriesRequestMutex.RLock()
	defer fake.listInventoryEntriesRequestMutex.RUnlock()
	fake.listInventoryEntriesWithContextMutex.RLock()
	defer fake.listInventoryEntriesWithContextMutex.RUnlock()
	fake.listOpsItemEventsMutex.RLock()
	defer fake.listOpsItemEventsMutex.RUnlock()
	fake.listOpsItemEventsPagesMutex.RLock()
	defer fake.listOpsItemEventsPagesMutex.RUnlock()
	fake.listOpsItemEventsPagesWithContextMutex.RLock()
	defer fake.listOpsItemEventsPagesWithContextMutex.RUnlock()
	fake.listOpsItemEventsRequestMutex.RLock()
	defer fake.listOpsItemEventsRequestMutex.RUnlock()
	fake.listOpsItemEventsWithContextMutex.RLock()
	defer fake.listOpsItemEventsWithContextMutex.RUnlock()
	fake.listOpsItemRelatedItemsMutex.RLock()
	defer fake.listOpsItemRelatedItemsMutex.RUnlock()
	fake.listOpsItemRelatedItemsPagesMutex.RLock()
	defer fake.listOpsItemRelatedItemsPagesMutex.RUnlock()
	fake.listOpsItemRelatedItemsPagesWithContextMutex.RLock()
	defer fake.listOpsItemRelatedItemsPagesWithContextMutex.RUnlock()
	fake.listOpsItemRelatedItemsRequestMutex.RLock()
	defer fake.listOpsItemRelatedItemsRequestMutex.RUnlock()
	fake.listOpsItemRelatedItemsWithContextMutex.RLock()
	defer fake.listOpsItemRelatedItemsWithContextMutex.RUnlock()
	fake.listOpsMetadataMutex.RLock()
	defer fake.listOpsMetadataMutex.RUnlock()
	fake.listOpsMetadataPagesMutex.RLock()
	defer fake.listOpsMetadataPagesMutex.RUnlock()
	fake.listOpsMetadataPagesWithContextMutex.RLock()
	defer fake.listOpsMetadataPagesWithContextMutex.RUnlock()
	fake.listOpsMetadataRequestMutex.RLock()
	defer fake.listOpsMetadataRequestMutex.RUnlock()
	fake.listOpsMetadataWithContextMutex.RLock()
	defer fake.listOpsMetadataWithContextMutex.RUnlock()
	fake.listResourceComplianceSummariesMutex.RLock()
	defer fake.listResourceComplianceSummariesMutex.RUnlock()
	fake.listResourceComplianceSummariesPagesMutex.RLock()
	defer fake.listResourceComplianceSummariesPagesMutex.RUnlock()
	fake.listResourceComplianceSummariesPagesWithContextMutex.RLock()
	defer fake.listResourceComplianceSummariesPagesWithContextMutex.RUnlock()
	fake.listResourceComplianceSummariesRequestMutex.RLock()
	defer fake.listResourceComplianceSummariesRequestMutex.RUnlock()
	fake.listResourceComplianceSummariesWithContextMutex.RLock()
	defer fake.listResourceComplianceSummariesWithContextMutex.RUnlock()
	fake.listResourceDataSyncMutex.RLock()
	defer fake.listResourceDataSyncMutex.RUnlock()
	fake.listResourceDataSyncPagesMutex.RLock()
	defer fake.listResourceDataSyncPagesMutex.RUnlock()
	fake.listResourceDataSyncPagesWithContextMutex.RLock()
	defer fake.listResourceDataSyncPagesWithContextMutex.RUnlock()
	fake.listResourceDataSyncRequestMutex.RLock()
	defer fake.listResourceDataSyncRequestMutex.RUnlock()
	fake.listResourceDataSyncWithContextMutex.RLock()
	defer fake.listResourceDataSyncWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.modifyDocumentPermissionMutex.RLock()
	defer fake.modifyDocumentPermissionMutex.RUnlock()
	fake.modifyDocumentPermissionRequestMutex.RLock()
	defer fake.modifyDocumentPermissionRequestMutex.RUnlock()
	fake.modifyDocumentPermissionWithContextMutex.RLock()
	defer fake.modifyDocumentPermissionWithContextMutex.RUnlock()
	fake.putComplianceItemsMutex.RLock()
	defer fake.putComplianceItemsMutex.RUnlock()
	fake.putComplianceItemsRequestMutex.RLock()
	defer fake.putComplianceItemsRequestMutex.RUnlock()
	fake.putComplianceItemsWithContextMutex.RLock()
	defer fake.putComplianceItemsWithContextMutex.RUnlock()
	fake.putInventoryMutex.RLock()
	defer fake.putInventoryMutex.RUnlock()
	fake.putInventoryRequestMutex.RLock()
	defer fake.putInventoryRequestMutex.RUnlock()
	fake.putInventoryWithContextMutex.RLock()
	defer fake.putInventoryWithContextMutex.RUnlock()
	fake.putParameterMutex.RLock()
	defer fake.putParameterMutex.RUnlock()
	fake.putParameterRequestMutex.RLock()
	defer fake.putParameterRequestMutex.RUnlock()
	fake.putParameterWithContextMutex.RLock()
	defer fake.putParameterWithContextMutex.RUnlock()
	fake.registerDefaultPatchBaselineMutex.RLock()
	defer fake.registerDefaultPatchBaselineMutex.RUnlock()
	fake.registerDefaultPatchBaselineRequestMutex.RLock()
	defer fake.registerDefaultPatchBaselineRequestMutex.RUnlock()
	fake.registerDefaultPatchBaselineWithContextMutex.RLock()
	defer fake.registerDefaultPatchBaselineWithContextMutex.RUnlock()
	fake.registerPatchBaselineForPatchGroupMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupMutex.RUnlock()
	fake.registerPatchBaselineForPatchGroupRequestMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupRequestMutex.RUnlock()
	fake.registerPatchBaselineForPatchGroupWithContextMutex.RLock()
	defer fake.registerPatchBaselineForPatchGroupWithContextMutex.RUnlock()
	fake.registerTargetWithMaintenanceWindowMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowMutex.RUnlock()
	fake.registerTargetWithMaintenanceWindowRequestMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowRequestMutex.RUnlock()
	fake.registerTargetWithMaintenanceWindowWithContextMutex.RLock()
	defer fake.registerTargetWithMaintenanceWindowWithContextMutex.RUnlock()
	fake.registerTaskWithMaintenanceWindowMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowMutex.RUnlock()
	fake.registerTaskWithMaintenanceWindowRequestMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowRequestMutex.RUnlock()
	fake.registerTaskWithMaintenanceWindowWithContextMutex.RLock()
	defer fake.registerTaskWithMaintenanceWindowWithContextMutex.RUnlock()
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	fake.resetServiceSettingMutex.RLock()
	defer fake.resetServiceSettingMutex.RUnlock()
	fake.resetServiceSettingRequestMutex.RLock()
	defer fake.resetServiceSettingRequestMutex.RUnlock()
	fake.resetServiceSettingWithContextMutex.RLock()
	defer fake.resetServiceSettingWithContextMutex.RUnlock()
	fake.resumeSessionMutex.RLock()
	defer fake.resumeSessionMutex.RUnlock()
	fake.resumeSessionRequestMutex.RLock()
	defer fake.resumeSessionRequestMutex.RUnlock()
	fake.resumeSessionWithContextMutex.RLock()
	defer fake.resumeSessionWithContextMutex.RUnlock()
	fake.sendAutomationSignalMutex.RLock()
	defer fake.sendAutomationSignalMutex.RUnlock()
	fake.sendAutomationSignalRequestMutex.RLock()
	defer fake.sendAutomationSignalRequestMutex.RUnlock()
	fake.sendAutomationSignalWithContextMutex.RLock()
	defer fake.sendAutomationSignalWithContextMutex.RUnlock()
	fake.sendCommandMutex.RLock()
	defer fake.sendCommandMutex.RUnlock()
	fake.sendCommandRequestMutex.RLock()
	defer fake.sendCommandRequestMutex.RUnlock()
	fake.sendCommandWithContextMutex.RLock()
	defer fake.sendCommandWithContextMutex.RUnlock()
	fake.startAssociationsOnceMutex.RLock()
	defer fake.startAssociationsOnceMutex.RUnlock()
	fake.startAssociationsOnceRequestMutex.RLock()
	defer fake.startAssociationsOnceRequestMutex.RUnlock()
	fake.startAssociationsOnceWithContextMutex.RLock()
	defer fake.startAssociationsOnceWithContextMutex.RUnlock()
	fake.startAutomationExecutionMutex.RLock()
	defer fake.startAutomationExecutionMutex.RUnlock()
	fake.startAutomationExecutionRequestMutex.RLock()
	defer fake.startAutomationExecutionRequestMutex.RUnlock()
	fake.startAutomationExecutionWithContextMutex.RLock()
	defer fake.startAutomationExecutionWithContextMutex.RUnlock()
	fake.startChangeRequestExecutionMutex.RLock()
	defer fake.startChangeRequestExecutionMutex.RUnlock()
	fake.startChangeRequestExecutionRequestMutex.RLock()
	defer fake.startChangeRequestExecutionRequestMutex.RUnlock()
	fake.startChangeRequestExecutionWithContextMutex.RLock()
	defer fake.startChangeRequestExecutionWithContextMutex.RUnlock()
	fake.startSessionMutex.RLock()
	defer fake.startSessionMutex.RUnlock()
	fake.startSessionRequestMutex.RLock()
	defer fake.startSessionRequestMutex.RUnlock()
	fake.startSessionWithContextMutex.RLock()
	defer fake.startSessionWithContextMutex.RUnlock()
	fake.stopAutomationExecutionMutex.RLock()
	defer fake.stopAutomationExecutionMutex.RUnlock()
	fake.stopAutomationExecutionRequestMutex.RLock()
	defer fake.stopAutomationExecutionRequestMutex.RUnlock()
	fake.stopAutomationExecutionWithContextMutex.RLock()
	defer fake.stopAutomationExecutionWithContextMutex.RUnlock()
	fake.terminateSessionMutex.RLock()
	defer fake.terminateSessionMutex.RUnlock()
	fake.terminateSessionRequestMutex.RLock()
	defer fake.terminateSessionRequestMutex.RUnlock()
	fake.terminateSessionWithContextMutex.RLock()
	defer fake.terminateSessionWithContextMutex.RUnlock()
	fake.unlabelParameterVersionMutex.RLock()
	defer fake.unlabelParameterVersionMutex.RUnlock()
	fake.unlabelParameterVersionRequestMutex.RLock()
	defer fake.unlabelParameterVersionRequestMutex.RUnlock()
	fake.unlabelParameterVersionWithContextMutex.RLock()
	defer fake.unlabelParameterVersionWithContextMutex.RUnlock()
	fake.updateAssociationMutex.RLock()
	defer fake.updateAssociationMutex.RUnlock()
	fake.updateAssociationRequestMutex.RLock()
	defer fake.updateAssociationRequestMutex.RUnlock()
	fake.updateAssociationStatusMutex.RLock()
	defer fake.updateAssociationStatusMutex.RUnlock()
	fake.updateAssociationStatusRequestMutex.RLock()
	defer fake.updateAssociationStatusRequestMutex.RUnlock()
	fake.updateAssociationStatusWithContextMutex.RLock()
	defer fake.updateAssociationStatusWithContextMutex.RUnlock()
	fake.updateAssociationWithContextMutex.RLock()
	defer fake.updateAssociationWithContextMutex.RUnlock()
	fake.updateDocumentMutex.RLock()
	defer fake.updateDocumentMutex.RUnlock()
	fake.updateDocumentDefaultVersionMutex.RLock()
	defer fake.updateDocumentDefaultVersionMutex.RUnlock()
	fake.updateDocumentDefaultVersionRequestMutex.RLock()
	defer fake.updateDocumentDefaultVersionRequestMutex.RUnlock()
	fake.updateDocumentDefaultVersionWithContextMutex.RLock()
	defer fake.updateDocumentDefaultVersionWithContextMutex.RUnlock()
	fake.updateDocumentMetadataMutex.RLock()
	defer fake.updateDocumentMetadataMutex.RUnlock()
	fake.updateDocumentMetadataRequestMutex.RLock()
	defer fake.updateDocumentMetadataRequestMutex.RUnlock()
	fake.updateDocumentMetadataWithContextMutex.RLock()
	defer fake.updateDocumentMetadataWithContextMutex.RUnlock()
	fake.updateDocumentRequestMutex.RLock()
	defer fake.updateDocumentRequestMutex.RUnlock()
	fake.updateDocumentWithContextMutex.RLock()
	defer fake.updateDocumentWithContextMutex.RUnlock()
	fake.updateMaintenanceWindowMutex.RLock()
	defer fake.updateMaintenanceWindowMutex.RUnlock()
	fake.updateMaintenanceWindowRequestMutex.RLock()
	defer fake.updateMaintenanceWindowRequestMutex.RUnlock()
	fake.updateMaintenanceWindowTargetMutex.RLock()
	defer fake.updateMaintenanceWindowTargetMutex.RUnlock()
	fake.updateMaintenanceWindowTargetRequestMutex.RLock()
	defer fake.updateMaintenanceWindowTargetRequestMutex.RUnlock()
	fake.updateMaintenanceWindowTargetWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowTargetWithContextMutex.RUnlock()
	fake.updateMaintenanceWindowTaskMutex.RLock()
	defer fake.updateMaintenanceWindowTaskMutex.RUnlock()
	fake.updateMaintenanceWindowTaskRequestMutex.RLock()
	defer fake.updateMaintenanceWindowTaskRequestMutex.RUnlock()
	fake.updateMaintenanceWindowTaskWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowTaskWithContextMutex.RUnlock()
	fake.updateMaintenanceWindowWithContextMutex.RLock()
	defer fake.updateMaintenanceWindowWithContextMutex.RUnlock()
	fake.updateManagedInstanceRoleMutex.RLock()
	defer fake.updateManagedInstanceRoleMutex.RUnlock()
	fake.updateManagedInstanceRoleRequestMutex.RLock()
	defer fake.updateManagedInstanceRoleRequestMutex.RUnlock()
	fake.updateManagedInstanceRoleWithContextMutex.RLock()
	defer fake.updateManagedInstanceRoleWithContextMutex.RUnlock()
	fake.updateOpsItemMutex.RLock()
	defer fake.updateOpsItemMutex.RUnlock()
	fake.updateOpsItemRequestMutex.RLock()
	defer fake.updateOpsItemRequestMutex.RUnlock()
	fake.updateOpsItemWithContextMutex.RLock()
	defer fake.updateOpsItemWithContextMutex.RUnlock()
	fake.updateOpsMetadataMutex.RLock()
	defer fake.updateOpsMetadataMutex.RUnlock()
	fake.updateOpsMetadataRequestMutex.RLock()
	defer fake.updateOpsMetadataRequestMutex.RUnlock()
	fake.updateOpsMetadataWithContextMutex.RLock()
	defer fake.updateOpsMetadataWithContextMutex.RUnlock()
	fake.updatePatchBaselineMutex.RLock()
	defer fake.updatePatchBaselineMutex.RUnlock()
	fake.updatePatchBaselineRequestMutex.RLock()
	defer fake.updatePatchBaselineRequestMutex.RUnlock()
	fake.updatePatchBaselineWithContextMutex.RLock()
	defer fake.updatePatchBaselineWithContextMutex.RUnlock()
	fake.updateResourceDataSyncMutex.RLock()
	defer fake.updateResourceDataSyncMutex.RUnlock()
	fake.updateResourceDataSyncRequestMutex.RLock()
	defer fake.updateResourceDataSyncRequestMutex.RUnlock()
	fake.updateResourceDataSyncWithContextMutex.RLock()
	defer fake.updateResourceDataSyncWithContextMutex.RUnlock()
	fake.updateServiceSettingMutex.RLock()
	defer fake.updateServiceSettingMutex.RUnlock()
	fake.updateServiceSettingRequestMutex.RLock()
	defer fake.updateServiceSettingRequestMutex.RUnlock()
	fake.updateServiceSettingWithContextMutex.RLock()
	defer fake.updateServiceSettingWithContextMutex.RUnlock()
	fake.waitUntilCommandExecutedMutex.RLock()
	defer fake.waitUntilCommandExecutedMutex.RUnlock()
	fake.waitUntilCommandExecutedWithContextMutex.RLock()
	defer fake.waitUntilCommandExecutedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSMClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ environment.SSMClient = new(FakeSSMClient)
