// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	environment "github.com/telia-oss/aws-env"
)

type FakeSMClient struct {
	CancelRotateSecretStub        func(*secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error)
	cancelRotateSecretMutex       sync.RWMutex
	cancelRotateSecretArgsForCall []struct {
		arg1 *secretsmanager.CancelRotateSecretInput
	}
	cancelRotateSecretReturns struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}
	cancelRotateSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}
	CancelRotateSecretRequestStub        func(*secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput)
	cancelRotateSecretRequestMutex       sync.RWMutex
	cancelRotateSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.CancelRotateSecretInput
	}
	cancelRotateSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.CancelRotateSecretOutput
	}
	cancelRotateSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.CancelRotateSecretOutput
	}
	CancelRotateSecretWithContextStub        func(context.Context, *secretsmanager.CancelRotateSecretInput, ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error)
	cancelRotateSecretWithContextMutex       sync.RWMutex
	cancelRotateSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.CancelRotateSecretInput
		arg3 []request.Option
	}
	cancelRotateSecretWithContextReturns struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}
	cancelRotateSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}
	CreateSecretStub        func(*secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		arg1 *secretsmanager.CreateSecretInput
	}
	createSecretReturns struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	CreateSecretRequestStub        func(*secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput)
	createSecretRequestMutex       sync.RWMutex
	createSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.CreateSecretInput
	}
	createSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.CreateSecretOutput
	}
	createSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.CreateSecretOutput
	}
	CreateSecretWithContextStub        func(context.Context, *secretsmanager.CreateSecretInput, ...request.Option) (*secretsmanager.CreateSecretOutput, error)
	createSecretWithContextMutex       sync.RWMutex
	createSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.CreateSecretInput
		arg3 []request.Option
	}
	createSecretWithContextReturns struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	createSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	DeleteResourcePolicyStub        func(*secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error)
	deleteResourcePolicyMutex       sync.RWMutex
	deleteResourcePolicyArgsForCall []struct {
		arg1 *secretsmanager.DeleteResourcePolicyInput
	}
	deleteResourcePolicyReturns struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}
	deleteResourcePolicyReturnsOnCall map[int]struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}
	DeleteResourcePolicyRequestStub        func(*secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput)
	deleteResourcePolicyRequestMutex       sync.RWMutex
	deleteResourcePolicyRequestArgsForCall []struct {
		arg1 *secretsmanager.DeleteResourcePolicyInput
	}
	deleteResourcePolicyRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteResourcePolicyOutput
	}
	deleteResourcePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteResourcePolicyOutput
	}
	DeleteResourcePolicyWithContextStub        func(context.Context, *secretsmanager.DeleteResourcePolicyInput, ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error)
	deleteResourcePolicyWithContextMutex       sync.RWMutex
	deleteResourcePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.DeleteResourcePolicyInput
		arg3 []request.Option
	}
	deleteResourcePolicyWithContextReturns struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}
	deleteResourcePolicyWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}
	DeleteSecretStub        func(*secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error)
	deleteSecretMutex       sync.RWMutex
	deleteSecretArgsForCall []struct {
		arg1 *secretsmanager.DeleteSecretInput
	}
	deleteSecretReturns struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	deleteSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	DeleteSecretRequestStub        func(*secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput)
	deleteSecretRequestMutex       sync.RWMutex
	deleteSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.DeleteSecretInput
	}
	deleteSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteSecretOutput
	}
	deleteSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteSecretOutput
	}
	DeleteSecretWithContextStub        func(context.Context, *secretsmanager.DeleteSecretInput, ...request.Option) (*secretsmanager.DeleteSecretOutput, error)
	deleteSecretWithContextMutex       sync.RWMutex
	deleteSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.DeleteSecretInput
		arg3 []request.Option
	}
	deleteSecretWithContextReturns struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	deleteSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	DescribeSecretStub        func(*secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error)
	describeSecretMutex       sync.RWMutex
	describeSecretArgsForCall []struct {
		arg1 *secretsmanager.DescribeSecretInput
	}
	describeSecretReturns struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}
	describeSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}
	DescribeSecretRequestStub        func(*secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput)
	describeSecretRequestMutex       sync.RWMutex
	describeSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.DescribeSecretInput
	}
	describeSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.DescribeSecretOutput
	}
	describeSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.DescribeSecretOutput
	}
	DescribeSecretWithContextStub        func(context.Context, *secretsmanager.DescribeSecretInput, ...request.Option) (*secretsmanager.DescribeSecretOutput, error)
	describeSecretWithContextMutex       sync.RWMutex
	describeSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.DescribeSecretInput
		arg3 []request.Option
	}
	describeSecretWithContextReturns struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}
	describeSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}
	GetRandomPasswordStub        func(*secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error)
	getRandomPasswordMutex       sync.RWMutex
	getRandomPasswordArgsForCall []struct {
		arg1 *secretsmanager.GetRandomPasswordInput
	}
	getRandomPasswordReturns struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}
	getRandomPasswordReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}
	GetRandomPasswordRequestStub        func(*secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput)
	getRandomPasswordRequestMutex       sync.RWMutex
	getRandomPasswordRequestArgsForCall []struct {
		arg1 *secretsmanager.GetRandomPasswordInput
	}
	getRandomPasswordRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.GetRandomPasswordOutput
	}
	getRandomPasswordRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.GetRandomPasswordOutput
	}
	GetRandomPasswordWithContextStub        func(context.Context, *secretsmanager.GetRandomPasswordInput, ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error)
	getRandomPasswordWithContextMutex       sync.RWMutex
	getRandomPasswordWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.GetRandomPasswordInput
		arg3 []request.Option
	}
	getRandomPasswordWithContextReturns struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}
	getRandomPasswordWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}
	GetResourcePolicyStub        func(*secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error)
	getResourcePolicyMutex       sync.RWMutex
	getResourcePolicyArgsForCall []struct {
		arg1 *secretsmanager.GetResourcePolicyInput
	}
	getResourcePolicyReturns struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}
	getResourcePolicyReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}
	GetResourcePolicyRequestStub        func(*secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput)
	getResourcePolicyRequestMutex       sync.RWMutex
	getResourcePolicyRequestArgsForCall []struct {
		arg1 *secretsmanager.GetResourcePolicyInput
	}
	getResourcePolicyRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.GetResourcePolicyOutput
	}
	getResourcePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.GetResourcePolicyOutput
	}
	GetResourcePolicyWithContextStub        func(context.Context, *secretsmanager.GetResourcePolicyInput, ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error)
	getResourcePolicyWithContextMutex       sync.RWMutex
	getResourcePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.GetResourcePolicyInput
		arg3 []request.Option
	}
	getResourcePolicyWithContextReturns struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}
	getResourcePolicyWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}
	GetSecretValueStub        func(*secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error)
	getSecretValueMutex       sync.RWMutex
	getSecretValueArgsForCall []struct {
		arg1 *secretsmanager.GetSecretValueInput
	}
	getSecretValueReturns struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	getSecretValueReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	GetSecretValueRequestStub        func(*secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput)
	getSecretValueRequestMutex       sync.RWMutex
	getSecretValueRequestArgsForCall []struct {
		arg1 *secretsmanager.GetSecretValueInput
	}
	getSecretValueRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.GetSecretValueOutput
	}
	getSecretValueRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.GetSecretValueOutput
	}
	GetSecretValueWithContextStub        func(context.Context, *secretsmanager.GetSecretValueInput, ...request.Option) (*secretsmanager.GetSecretValueOutput, error)
	getSecretValueWithContextMutex       sync.RWMutex
	getSecretValueWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.GetSecretValueInput
		arg3 []request.Option
	}
	getSecretValueWithContextReturns struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	getSecretValueWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	ListSecretVersionIdsStub        func(*secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error)
	listSecretVersionIdsMutex       sync.RWMutex
	listSecretVersionIdsArgsForCall []struct {
		arg1 *secretsmanager.ListSecretVersionIdsInput
	}
	listSecretVersionIdsReturns struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}
	listSecretVersionIdsReturnsOnCall map[int]struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}
	ListSecretVersionIdsPagesStub        func(*secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error
	listSecretVersionIdsPagesMutex       sync.RWMutex
	listSecretVersionIdsPagesArgsForCall []struct {
		arg1 *secretsmanager.ListSecretVersionIdsInput
		arg2 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
	}
	listSecretVersionIdsPagesReturns struct {
		result1 error
	}
	listSecretVersionIdsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListSecretVersionIdsPagesWithContextStub        func(context.Context, *secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, ...request.Option) error
	listSecretVersionIdsPagesWithContextMutex       sync.RWMutex
	listSecretVersionIdsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretVersionIdsInput
		arg3 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
		arg4 []request.Option
	}
	listSecretVersionIdsPagesWithContextReturns struct {
		result1 error
	}
	listSecretVersionIdsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListSecretVersionIdsRequestStub        func(*secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput)
	listSecretVersionIdsRequestMutex       sync.RWMutex
	listSecretVersionIdsRequestArgsForCall []struct {
		arg1 *secretsmanager.ListSecretVersionIdsInput
	}
	listSecretVersionIdsRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretVersionIdsOutput
	}
	listSecretVersionIdsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretVersionIdsOutput
	}
	ListSecretVersionIdsWithContextStub        func(context.Context, *secretsmanager.ListSecretVersionIdsInput, ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error)
	listSecretVersionIdsWithContextMutex       sync.RWMutex
	listSecretVersionIdsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretVersionIdsInput
		arg3 []request.Option
	}
	listSecretVersionIdsWithContextReturns struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}
	listSecretVersionIdsWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}
	ListSecretsStub        func(*secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error)
	listSecretsMutex       sync.RWMutex
	listSecretsArgsForCall []struct {
		arg1 *secretsmanager.ListSecretsInput
	}
	listSecretsReturns struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}
	listSecretsReturnsOnCall map[int]struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}
	ListSecretsPagesStub        func(*secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool) error
	listSecretsPagesMutex       sync.RWMutex
	listSecretsPagesArgsForCall []struct {
		arg1 *secretsmanager.ListSecretsInput
		arg2 func(*secretsmanager.ListSecretsOutput, bool) bool
	}
	listSecretsPagesReturns struct {
		result1 error
	}
	listSecretsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListSecretsPagesWithContextStub        func(context.Context, *secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool, ...request.Option) error
	listSecretsPagesWithContextMutex       sync.RWMutex
	listSecretsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretsInput
		arg3 func(*secretsmanager.ListSecretsOutput, bool) bool
		arg4 []request.Option
	}
	listSecretsPagesWithContextReturns struct {
		result1 error
	}
	listSecretsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListSecretsRequestStub        func(*secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput)
	listSecretsRequestMutex       sync.RWMutex
	listSecretsRequestArgsForCall []struct {
		arg1 *secretsmanager.ListSecretsInput
	}
	listSecretsRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretsOutput
	}
	listSecretsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretsOutput
	}
	ListSecretsWithContextStub        func(context.Context, *secretsmanager.ListSecretsInput, ...request.Option) (*secretsmanager.ListSecretsOutput, error)
	listSecretsWithContextMutex       sync.RWMutex
	listSecretsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretsInput
		arg3 []request.Option
	}
	listSecretsWithContextReturns struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}
	listSecretsWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}
	PutResourcePolicyStub        func(*secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error)
	putResourcePolicyMutex       sync.RWMutex
	putResourcePolicyArgsForCall []struct {
		arg1 *secretsmanager.PutResourcePolicyInput
	}
	putResourcePolicyReturns struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}
	putResourcePolicyReturnsOnCall map[int]struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}
	PutResourcePolicyRequestStub        func(*secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput)
	putResourcePolicyRequestMutex       sync.RWMutex
	putResourcePolicyRequestArgsForCall []struct {
		arg1 *secretsmanager.PutResourcePolicyInput
	}
	putResourcePolicyRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.PutResourcePolicyOutput
	}
	putResourcePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.PutResourcePolicyOutput
	}
	PutResourcePolicyWithContextStub        func(context.Context, *secretsmanager.PutResourcePolicyInput, ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error)
	putResourcePolicyWithContextMutex       sync.RWMutex
	putResourcePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.PutResourcePolicyInput
		arg3 []request.Option
	}
	putResourcePolicyWithContextReturns struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}
	putResourcePolicyWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}
	PutSecretValueStub        func(*secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error)
	putSecretValueMutex       sync.RWMutex
	putSecretValueArgsForCall []struct {
		arg1 *secretsmanager.PutSecretValueInput
	}
	putSecretValueReturns struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}
	putSecretValueReturnsOnCall map[int]struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}
	PutSecretValueRequestStub        func(*secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput)
	putSecretValueRequestMutex       sync.RWMutex
	putSecretValueRequestArgsForCall []struct {
		arg1 *secretsmanager.PutSecretValueInput
	}
	putSecretValueRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.PutSecretValueOutput
	}
	putSecretValueRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.PutSecretValueOutput
	}
	PutSecretValueWithContextStub        func(context.Context, *secretsmanager.PutSecretValueInput, ...request.Option) (*secretsmanager.PutSecretValueOutput, error)
	putSecretValueWithContextMutex       sync.RWMutex
	putSecretValueWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.PutSecretValueInput
		arg3 []request.Option
	}
	putSecretValueWithContextReturns struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}
	putSecretValueWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}
	RemoveRegionsFromReplicationStub        func(*secretsmanager.RemoveRegionsFromReplicationInput) (*secretsmanager.RemoveRegionsFromReplicationOutput, error)
	removeRegionsFromReplicationMutex       sync.RWMutex
	removeRegionsFromReplicationArgsForCall []struct {
		arg1 *secretsmanager.RemoveRegionsFromReplicationInput
	}
	removeRegionsFromReplicationReturns struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}
	removeRegionsFromReplicationReturnsOnCall map[int]struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}
	RemoveRegionsFromReplicationRequestStub        func(*secretsmanager.RemoveRegionsFromReplicationInput) (*request.Request, *secretsmanager.RemoveRegionsFromReplicationOutput)
	removeRegionsFromReplicationRequestMutex       sync.RWMutex
	removeRegionsFromReplicationRequestArgsForCall []struct {
		arg1 *secretsmanager.RemoveRegionsFromReplicationInput
	}
	removeRegionsFromReplicationRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.RemoveRegionsFromReplicationOutput
	}
	removeRegionsFromReplicationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.RemoveRegionsFromReplicationOutput
	}
	RemoveRegionsFromReplicationWithContextStub        func(context.Context, *secretsmanager.RemoveRegionsFromReplicationInput, ...request.Option) (*secretsmanager.RemoveRegionsFromReplicationOutput, error)
	removeRegionsFromReplicationWithContextMutex       sync.RWMutex
	removeRegionsFromReplicationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.RemoveRegionsFromReplicationInput
		arg3 []request.Option
	}
	removeRegionsFromReplicationWithContextReturns struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}
	removeRegionsFromReplicationWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}
	ReplicateSecretToRegionsStub        func(*secretsmanager.ReplicateSecretToRegionsInput) (*secretsmanager.ReplicateSecretToRegionsOutput, error)
	replicateSecretToRegionsMutex       sync.RWMutex
	replicateSecretToRegionsArgsForCall []struct {
		arg1 *secretsmanager.ReplicateSecretToRegionsInput
	}
	replicateSecretToRegionsReturns struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}
	replicateSecretToRegionsReturnsOnCall map[int]struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}
	ReplicateSecretToRegionsRequestStub        func(*secretsmanager.ReplicateSecretToRegionsInput) (*request.Request, *secretsmanager.ReplicateSecretToRegionsOutput)
	replicateSecretToRegionsRequestMutex       sync.RWMutex
	replicateSecretToRegionsRequestArgsForCall []struct {
		arg1 *secretsmanager.ReplicateSecretToRegionsInput
	}
	replicateSecretToRegionsRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.ReplicateSecretToRegionsOutput
	}
	replicateSecretToRegionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.ReplicateSecretToRegionsOutput
	}
	ReplicateSecretToRegionsWithContextStub        func(context.Context, *secretsmanager.ReplicateSecretToRegionsInput, ...request.Option) (*secretsmanager.ReplicateSecretToRegionsOutput, error)
	replicateSecretToRegionsWithContextMutex       sync.RWMutex
	replicateSecretToRegionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.ReplicateSecretToRegionsInput
		arg3 []request.Option
	}
	replicateSecretToRegionsWithContextReturns struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}
	replicateSecretToRegionsWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}
	RestoreSecretStub        func(*secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error)
	restoreSecretMutex       sync.RWMutex
	restoreSecretArgsForCall []struct {
		arg1 *secretsmanager.RestoreSecretInput
	}
	restoreSecretReturns struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}
	restoreSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}
	RestoreSecretRequestStub        func(*secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput)
	restoreSecretRequestMutex       sync.RWMutex
	restoreSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.RestoreSecretInput
	}
	restoreSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.RestoreSecretOutput
	}
	restoreSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.RestoreSecretOutput
	}
	RestoreSecretWithContextStub        func(context.Context, *secretsmanager.RestoreSecretInput, ...request.Option) (*secretsmanager.RestoreSecretOutput, error)
	restoreSecretWithContextMutex       sync.RWMutex
	restoreSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.RestoreSecretInput
		arg3 []request.Option
	}
	restoreSecretWithContextReturns struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}
	restoreSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}
	RotateSecretStub        func(*secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error)
	rotateSecretMutex       sync.RWMutex
	rotateSecretArgsForCall []struct {
		arg1 *secretsmanager.RotateSecretInput
	}
	rotateSecretReturns struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}
	rotateSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}
	RotateSecretRequestStub        func(*secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput)
	rotateSecretRequestMutex       sync.RWMutex
	rotateSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.RotateSecretInput
	}
	rotateSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.RotateSecretOutput
	}
	rotateSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.RotateSecretOutput
	}
	RotateSecretWithContextStub        func(context.Context, *secretsmanager.RotateSecretInput, ...request.Option) (*secretsmanager.RotateSecretOutput, error)
	rotateSecretWithContextMutex       sync.RWMutex
	rotateSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.RotateSecretInput
		arg3 []request.Option
	}
	rotateSecretWithContextReturns struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}
	rotateSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}
	StopReplicationToReplicaStub        func(*secretsmanager.StopReplicationToReplicaInput) (*secretsmanager.StopReplicationToReplicaOutput, error)
	stopReplicationToReplicaMutex       sync.RWMutex
	stopReplicationToReplicaArgsForCall []struct {
		arg1 *secretsmanager.StopReplicationToReplicaInput
	}
	stopReplicationToReplicaReturns struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}
	stopReplicationToReplicaReturnsOnCall map[int]struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}
	StopReplicationToReplicaRequestStub        func(*secretsmanager.StopReplicationToReplicaInput) (*request.Request, *secretsmanager.StopReplicationToReplicaOutput)
	stopReplicationToReplicaRequestMutex       sync.RWMutex
	stopReplicationToReplicaRequestArgsForCall []struct {
		arg1 *secretsmanager.StopReplicationToReplicaInput
	}
	stopReplicationToReplicaRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.StopReplicationToReplicaOutput
	}
	stopReplicationToReplicaRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.StopReplicationToReplicaOutput
	}
	StopReplicationToReplicaWithContextStub        func(context.Context, *secretsmanager.StopReplicationToReplicaInput, ...request.Option) (*secretsmanager.StopReplicationToReplicaOutput, error)
	stopReplicationToReplicaWithContextMutex       sync.RWMutex
	stopReplicationToReplicaWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.StopReplicationToReplicaInput
		arg3 []request.Option
	}
	stopReplicationToReplicaWithContextReturns struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}
	stopReplicationToReplicaWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}
	TagResourceStub        func(*secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error)
	tagResourceMutex       sync.RWMutex
	tagResourceArgsForCall []struct {
		arg1 *secretsmanager.TagResourceInput
	}
	tagResourceReturns struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}
	tagResourceReturnsOnCall map[int]struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}
	TagResourceRequestStub        func(*secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput)
	tagResourceRequestMutex       sync.RWMutex
	tagResourceRequestArgsForCall []struct {
		arg1 *secretsmanager.TagResourceInput
	}
	tagResourceRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.TagResourceOutput
	}
	tagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.TagResourceOutput
	}
	TagResourceWithContextStub        func(context.Context, *secretsmanager.TagResourceInput, ...request.Option) (*secretsmanager.TagResourceOutput, error)
	tagResourceWithContextMutex       sync.RWMutex
	tagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.TagResourceInput
		arg3 []request.Option
	}
	tagResourceWithContextReturns struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}
	tagResourceWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}
	UntagResourceStub        func(*secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error)
	untagResourceMutex       sync.RWMutex
	untagResourceArgsForCall []struct {
		arg1 *secretsmanager.UntagResourceInput
	}
	untagResourceReturns struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}
	untagResourceReturnsOnCall map[int]struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}
	UntagResourceRequestStub        func(*secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput)
	untagResourceRequestMutex       sync.RWMutex
	untagResourceRequestArgsForCall []struct {
		arg1 *secretsmanager.UntagResourceInput
	}
	untagResourceRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.UntagResourceOutput
	}
	untagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.UntagResourceOutput
	}
	UntagResourceWithContextStub        func(context.Context, *secretsmanager.UntagResourceInput, ...request.Option) (*secretsmanager.UntagResourceOutput, error)
	untagResourceWithContextMutex       sync.RWMutex
	untagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.UntagResourceInput
		arg3 []request.Option
	}
	untagResourceWithContextReturns struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}
	untagResourceWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}
	UpdateSecretStub        func(*secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error)
	updateSecretMutex       sync.RWMutex
	updateSecretArgsForCall []struct {
		arg1 *secretsmanager.UpdateSecretInput
	}
	updateSecretReturns struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}
	updateSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}
	UpdateSecretRequestStub        func(*secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput)
	updateSecretRequestMutex       sync.RWMutex
	updateSecretRequestArgsForCall []struct {
		arg1 *secretsmanager.UpdateSecretInput
	}
	updateSecretRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretOutput
	}
	updateSecretRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretOutput
	}
	UpdateSecretVersionStageStub        func(*secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error)
	updateSecretVersionStageMutex       sync.RWMutex
	updateSecretVersionStageArgsForCall []struct {
		arg1 *secretsmanager.UpdateSecretVersionStageInput
	}
	updateSecretVersionStageReturns struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}
	updateSecretVersionStageReturnsOnCall map[int]struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}
	UpdateSecretVersionStageRequestStub        func(*secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput)
	updateSecretVersionStageRequestMutex       sync.RWMutex
	updateSecretVersionStageRequestArgsForCall []struct {
		arg1 *secretsmanager.UpdateSecretVersionStageInput
	}
	updateSecretVersionStageRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretVersionStageOutput
	}
	updateSecretVersionStageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretVersionStageOutput
	}
	UpdateSecretVersionStageWithContextStub        func(context.Context, *secretsmanager.UpdateSecretVersionStageInput, ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error)
	updateSecretVersionStageWithContextMutex       sync.RWMutex
	updateSecretVersionStageWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.UpdateSecretVersionStageInput
		arg3 []request.Option
	}
	updateSecretVersionStageWithContextReturns struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}
	updateSecretVersionStageWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}
	UpdateSecretWithContextStub        func(context.Context, *secretsmanager.UpdateSecretInput, ...request.Option) (*secretsmanager.UpdateSecretOutput, error)
	updateSecretWithContextMutex       sync.RWMutex
	updateSecretWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.UpdateSecretInput
		arg3 []request.Option
	}
	updateSecretWithContextReturns struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}
	updateSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}
	ValidateResourcePolicyStub        func(*secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error)
	validateResourcePolicyMutex       sync.RWMutex
	validateResourcePolicyArgsForCall []struct {
		arg1 *secretsmanager.ValidateResourcePolicyInput
	}
	validateResourcePolicyReturns struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}
	validateResourcePolicyReturnsOnCall map[int]struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}
	ValidateResourcePolicyRequestStub        func(*secretsmanager.ValidateResourcePolicyInput) (*request.Request, *secretsmanager.ValidateResourcePolicyOutput)
	validateResourcePolicyRequestMutex       sync.RWMutex
	validateResourcePolicyRequestArgsForCall []struct {
		arg1 *secretsmanager.ValidateResourcePolicyInput
	}
	validateResourcePolicyRequestReturns struct {
		result1 *request.Request
		result2 *secretsmanager.ValidateResourcePolicyOutput
	}
	validateResourcePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *secretsmanager.ValidateResourcePolicyOutput
	}
	ValidateResourcePolicyWithContextStub        func(context.Context, *secretsmanager.ValidateResourcePolicyInput, ...request.Option) (*secretsmanager.ValidateResourcePolicyOutput, error)
	validateResourcePolicyWithContextMutex       sync.RWMutex
	validateResourcePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *secretsmanager.ValidateResourcePolicyInput
		arg3 []request.Option
	}
	validateResourcePolicyWithContextReturns struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}
	validateResourcePolicyWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSMClient) CancelRotateSecret(arg1 *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	fake.cancelRotateSecretMutex.Lock()
	ret, specificReturn := fake.cancelRotateSecretReturnsOnCall[len(fake.cancelRotateSecretArgsForCall)]
	fake.cancelRotateSecretArgsForCall = append(fake.cancelRotateSecretArgsForCall, struct {
		arg1 *secretsmanager.CancelRotateSecretInput
	}{arg1})
	stub := fake.CancelRotateSecretStub
	fakeReturns := fake.cancelRotateSecretReturns
	fake.recordInvocation("CancelRotateSecret", []interface{}{arg1})
	fake.cancelRotateSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) CancelRotateSecretCallCount() int {
	fake.cancelRotateSecretMutex.RLock()
	defer fake.cancelRotateSecretMutex.RUnlock()
	return len(fake.cancelRotateSecretArgsForCall)
}

func (fake *FakeSMClient) CancelRotateSecretCalls(stub func(*secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error)) {
	fake.cancelRotateSecretMutex.Lock()
	defer fake.cancelRotateSecretMutex.Unlock()
	fake.CancelRotateSecretStub = stub
}

func (fake *FakeSMClient) CancelRotateSecretArgsForCall(i int) *secretsmanager.CancelRotateSecretInput {
	fake.cancelRotateSecretMutex.RLock()
	defer fake.cancelRotateSecretMutex.RUnlock()
	argsForCall := fake.cancelRotateSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) CancelRotateSecretReturns(result1 *secretsmanager.CancelRotateSecretOutput, result2 error) {
	fake.cancelRotateSecretMutex.Lock()
	defer fake.cancelRotateSecretMutex.Unlock()
	fake.CancelRotateSecretStub = nil
	fake.cancelRotateSecretReturns = struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CancelRotateSecretReturnsOnCall(i int, result1 *secretsmanager.CancelRotateSecretOutput, result2 error) {
	fake.cancelRotateSecretMutex.Lock()
	defer fake.cancelRotateSecretMutex.Unlock()
	fake.CancelRotateSecretStub = nil
	if fake.cancelRotateSecretReturnsOnCall == nil {
		fake.cancelRotateSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.CancelRotateSecretOutput
			result2 error
		})
	}
	fake.cancelRotateSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CancelRotateSecretRequest(arg1 *secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput) {
	fake.cancelRotateSecretRequestMutex.Lock()
	ret, specificReturn := fake.cancelRotateSecretRequestReturnsOnCall[len(fake.cancelRotateSecretRequestArgsForCall)]
	fake.cancelRotateSecretRequestArgsForCall = append(fake.cancelRotateSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.CancelRotateSecretInput
	}{arg1})
	stub := fake.CancelRotateSecretRequestStub
	fakeReturns := fake.cancelRotateSecretRequestReturns
	fake.recordInvocation("CancelRotateSecretRequest", []interface{}{arg1})
	fake.cancelRotateSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) CancelRotateSecretRequestCallCount() int {
	fake.cancelRotateSecretRequestMutex.RLock()
	defer fake.cancelRotateSecretRequestMutex.RUnlock()
	return len(fake.cancelRotateSecretRequestArgsForCall)
}

func (fake *FakeSMClient) CancelRotateSecretRequestCalls(stub func(*secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput)) {
	fake.cancelRotateSecretRequestMutex.Lock()
	defer fake.cancelRotateSecretRequestMutex.Unlock()
	fake.CancelRotateSecretRequestStub = stub
}

func (fake *FakeSMClient) CancelRotateSecretRequestArgsForCall(i int) *secretsmanager.CancelRotateSecretInput {
	fake.cancelRotateSecretRequestMutex.RLock()
	defer fake.cancelRotateSecretRequestMutex.RUnlock()
	argsForCall := fake.cancelRotateSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) CancelRotateSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.CancelRotateSecretOutput) {
	fake.cancelRotateSecretRequestMutex.Lock()
	defer fake.cancelRotateSecretRequestMutex.Unlock()
	fake.CancelRotateSecretRequestStub = nil
	fake.cancelRotateSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.CancelRotateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) CancelRotateSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.CancelRotateSecretOutput) {
	fake.cancelRotateSecretRequestMutex.Lock()
	defer fake.cancelRotateSecretRequestMutex.Unlock()
	fake.CancelRotateSecretRequestStub = nil
	if fake.cancelRotateSecretRequestReturnsOnCall == nil {
		fake.cancelRotateSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.CancelRotateSecretOutput
		})
	}
	fake.cancelRotateSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.CancelRotateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) CancelRotateSecretWithContext(arg1 context.Context, arg2 *secretsmanager.CancelRotateSecretInput, arg3 ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error) {
	fake.cancelRotateSecretWithContextMutex.Lock()
	ret, specificReturn := fake.cancelRotateSecretWithContextReturnsOnCall[len(fake.cancelRotateSecretWithContextArgsForCall)]
	fake.cancelRotateSecretWithContextArgsForCall = append(fake.cancelRotateSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.CancelRotateSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CancelRotateSecretWithContextStub
	fakeReturns := fake.cancelRotateSecretWithContextReturns
	fake.recordInvocation("CancelRotateSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelRotateSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) CancelRotateSecretWithContextCallCount() int {
	fake.cancelRotateSecretWithContextMutex.RLock()
	defer fake.cancelRotateSecretWithContextMutex.RUnlock()
	return len(fake.cancelRotateSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) CancelRotateSecretWithContextCalls(stub func(context.Context, *secretsmanager.CancelRotateSecretInput, ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error)) {
	fake.cancelRotateSecretWithContextMutex.Lock()
	defer fake.cancelRotateSecretWithContextMutex.Unlock()
	fake.CancelRotateSecretWithContextStub = stub
}

func (fake *FakeSMClient) CancelRotateSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.CancelRotateSecretInput, []request.Option) {
	fake.cancelRotateSecretWithContextMutex.RLock()
	defer fake.cancelRotateSecretWithContextMutex.RUnlock()
	argsForCall := fake.cancelRotateSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) CancelRotateSecretWithContextReturns(result1 *secretsmanager.CancelRotateSecretOutput, result2 error) {
	fake.cancelRotateSecretWithContextMutex.Lock()
	defer fake.cancelRotateSecretWithContextMutex.Unlock()
	fake.CancelRotateSecretWithContextStub = nil
	fake.cancelRotateSecretWithContextReturns = struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CancelRotateSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.CancelRotateSecretOutput, result2 error) {
	fake.cancelRotateSecretWithContextMutex.Lock()
	defer fake.cancelRotateSecretWithContextMutex.Unlock()
	fake.CancelRotateSecretWithContextStub = nil
	if fake.cancelRotateSecretWithContextReturnsOnCall == nil {
		fake.cancelRotateSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.CancelRotateSecretOutput
			result2 error
		})
	}
	fake.cancelRotateSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.CancelRotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CreateSecret(arg1 *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		arg1 *secretsmanager.CreateSecretInput
	}{arg1})
	stub := fake.CreateSecretStub
	fakeReturns := fake.createSecretReturns
	fake.recordInvocation("CreateSecret", []interface{}{arg1})
	fake.createSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *FakeSMClient) CreateSecretCalls(stub func(*secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error)) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = stub
}

func (fake *FakeSMClient) CreateSecretArgsForCall(i int) *secretsmanager.CreateSecretInput {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	argsForCall := fake.createSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) CreateSecretReturns(result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CreateSecretReturnsOnCall(i int, result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.CreateSecretOutput
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CreateSecretRequest(arg1 *secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput) {
	fake.createSecretRequestMutex.Lock()
	ret, specificReturn := fake.createSecretRequestReturnsOnCall[len(fake.createSecretRequestArgsForCall)]
	fake.createSecretRequestArgsForCall = append(fake.createSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.CreateSecretInput
	}{arg1})
	stub := fake.CreateSecretRequestStub
	fakeReturns := fake.createSecretRequestReturns
	fake.recordInvocation("CreateSecretRequest", []interface{}{arg1})
	fake.createSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) CreateSecretRequestCallCount() int {
	fake.createSecretRequestMutex.RLock()
	defer fake.createSecretRequestMutex.RUnlock()
	return len(fake.createSecretRequestArgsForCall)
}

func (fake *FakeSMClient) CreateSecretRequestCalls(stub func(*secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput)) {
	fake.createSecretRequestMutex.Lock()
	defer fake.createSecretRequestMutex.Unlock()
	fake.CreateSecretRequestStub = stub
}

func (fake *FakeSMClient) CreateSecretRequestArgsForCall(i int) *secretsmanager.CreateSecretInput {
	fake.createSecretRequestMutex.RLock()
	defer fake.createSecretRequestMutex.RUnlock()
	argsForCall := fake.createSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) CreateSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.CreateSecretOutput) {
	fake.createSecretRequestMutex.Lock()
	defer fake.createSecretRequestMutex.Unlock()
	fake.CreateSecretRequestStub = nil
	fake.createSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.CreateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) CreateSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.CreateSecretOutput) {
	fake.createSecretRequestMutex.Lock()
	defer fake.createSecretRequestMutex.Unlock()
	fake.CreateSecretRequestStub = nil
	if fake.createSecretRequestReturnsOnCall == nil {
		fake.createSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.CreateSecretOutput
		})
	}
	fake.createSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.CreateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) CreateSecretWithContext(arg1 context.Context, arg2 *secretsmanager.CreateSecretInput, arg3 ...request.Option) (*secretsmanager.CreateSecretOutput, error) {
	fake.createSecretWithContextMutex.Lock()
	ret, specificReturn := fake.createSecretWithContextReturnsOnCall[len(fake.createSecretWithContextArgsForCall)]
	fake.createSecretWithContextArgsForCall = append(fake.createSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.CreateSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateSecretWithContextStub
	fakeReturns := fake.createSecretWithContextReturns
	fake.recordInvocation("CreateSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) CreateSecretWithContextCallCount() int {
	fake.createSecretWithContextMutex.RLock()
	defer fake.createSecretWithContextMutex.RUnlock()
	return len(fake.createSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) CreateSecretWithContextCalls(stub func(context.Context, *secretsmanager.CreateSecretInput, ...request.Option) (*secretsmanager.CreateSecretOutput, error)) {
	fake.createSecretWithContextMutex.Lock()
	defer fake.createSecretWithContextMutex.Unlock()
	fake.CreateSecretWithContextStub = stub
}

func (fake *FakeSMClient) CreateSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.CreateSecretInput, []request.Option) {
	fake.createSecretWithContextMutex.RLock()
	defer fake.createSecretWithContextMutex.RUnlock()
	argsForCall := fake.createSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) CreateSecretWithContextReturns(result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.createSecretWithContextMutex.Lock()
	defer fake.createSecretWithContextMutex.Unlock()
	fake.CreateSecretWithContextStub = nil
	fake.createSecretWithContextReturns = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) CreateSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.createSecretWithContextMutex.Lock()
	defer fake.createSecretWithContextMutex.Unlock()
	fake.CreateSecretWithContextStub = nil
	if fake.createSecretWithContextReturnsOnCall == nil {
		fake.createSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.CreateSecretOutput
			result2 error
		})
	}
	fake.createSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteResourcePolicy(arg1 *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	fake.deleteResourcePolicyMutex.Lock()
	ret, specificReturn := fake.deleteResourcePolicyReturnsOnCall[len(fake.deleteResourcePolicyArgsForCall)]
	fake.deleteResourcePolicyArgsForCall = append(fake.deleteResourcePolicyArgsForCall, struct {
		arg1 *secretsmanager.DeleteResourcePolicyInput
	}{arg1})
	stub := fake.DeleteResourcePolicyStub
	fakeReturns := fake.deleteResourcePolicyReturns
	fake.recordInvocation("DeleteResourcePolicy", []interface{}{arg1})
	fake.deleteResourcePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DeleteResourcePolicyCallCount() int {
	fake.deleteResourcePolicyMutex.RLock()
	defer fake.deleteResourcePolicyMutex.RUnlock()
	return len(fake.deleteResourcePolicyArgsForCall)
}

func (fake *FakeSMClient) DeleteResourcePolicyCalls(stub func(*secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error)) {
	fake.deleteResourcePolicyMutex.Lock()
	defer fake.deleteResourcePolicyMutex.Unlock()
	fake.DeleteResourcePolicyStub = stub
}

func (fake *FakeSMClient) DeleteResourcePolicyArgsForCall(i int) *secretsmanager.DeleteResourcePolicyInput {
	fake.deleteResourcePolicyMutex.RLock()
	defer fake.deleteResourcePolicyMutex.RUnlock()
	argsForCall := fake.deleteResourcePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) DeleteResourcePolicyReturns(result1 *secretsmanager.DeleteResourcePolicyOutput, result2 error) {
	fake.deleteResourcePolicyMutex.Lock()
	defer fake.deleteResourcePolicyMutex.Unlock()
	fake.DeleteResourcePolicyStub = nil
	fake.deleteResourcePolicyReturns = struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteResourcePolicyReturnsOnCall(i int, result1 *secretsmanager.DeleteResourcePolicyOutput, result2 error) {
	fake.deleteResourcePolicyMutex.Lock()
	defer fake.deleteResourcePolicyMutex.Unlock()
	fake.DeleteResourcePolicyStub = nil
	if fake.deleteResourcePolicyReturnsOnCall == nil {
		fake.deleteResourcePolicyReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DeleteResourcePolicyOutput
			result2 error
		})
	}
	fake.deleteResourcePolicyReturnsOnCall[i] = struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteResourcePolicyRequest(arg1 *secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput) {
	fake.deleteResourcePolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteResourcePolicyRequestReturnsOnCall[len(fake.deleteResourcePolicyRequestArgsForCall)]
	fake.deleteResourcePolicyRequestArgsForCall = append(fake.deleteResourcePolicyRequestArgsForCall, struct {
		arg1 *secretsmanager.DeleteResourcePolicyInput
	}{arg1})
	stub := fake.DeleteResourcePolicyRequestStub
	fakeReturns := fake.deleteResourcePolicyRequestReturns
	fake.recordInvocation("DeleteResourcePolicyRequest", []interface{}{arg1})
	fake.deleteResourcePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DeleteResourcePolicyRequestCallCount() int {
	fake.deleteResourcePolicyRequestMutex.RLock()
	defer fake.deleteResourcePolicyRequestMutex.RUnlock()
	return len(fake.deleteResourcePolicyRequestArgsForCall)
}

func (fake *FakeSMClient) DeleteResourcePolicyRequestCalls(stub func(*secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput)) {
	fake.deleteResourcePolicyRequestMutex.Lock()
	defer fake.deleteResourcePolicyRequestMutex.Unlock()
	fake.DeleteResourcePolicyRequestStub = stub
}

func (fake *FakeSMClient) DeleteResourcePolicyRequestArgsForCall(i int) *secretsmanager.DeleteResourcePolicyInput {
	fake.deleteResourcePolicyRequestMutex.RLock()
	defer fake.deleteResourcePolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteResourcePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) DeleteResourcePolicyRequestReturns(result1 *request.Request, result2 *secretsmanager.DeleteResourcePolicyOutput) {
	fake.deleteResourcePolicyRequestMutex.Lock()
	defer fake.deleteResourcePolicyRequestMutex.Unlock()
	fake.DeleteResourcePolicyRequestStub = nil
	fake.deleteResourcePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteResourcePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.DeleteResourcePolicyOutput) {
	fake.deleteResourcePolicyRequestMutex.Lock()
	defer fake.deleteResourcePolicyRequestMutex.Unlock()
	fake.DeleteResourcePolicyRequestStub = nil
	if fake.deleteResourcePolicyRequestReturnsOnCall == nil {
		fake.deleteResourcePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.DeleteResourcePolicyOutput
		})
	}
	fake.deleteResourcePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteResourcePolicyWithContext(arg1 context.Context, arg2 *secretsmanager.DeleteResourcePolicyInput, arg3 ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	fake.deleteResourcePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteResourcePolicyWithContextReturnsOnCall[len(fake.deleteResourcePolicyWithContextArgsForCall)]
	fake.deleteResourcePolicyWithContextArgsForCall = append(fake.deleteResourcePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.DeleteResourcePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteResourcePolicyWithContextStub
	fakeReturns := fake.deleteResourcePolicyWithContextReturns
	fake.recordInvocation("DeleteResourcePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteResourcePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DeleteResourcePolicyWithContextCallCount() int {
	fake.deleteResourcePolicyWithContextMutex.RLock()
	defer fake.deleteResourcePolicyWithContextMutex.RUnlock()
	return len(fake.deleteResourcePolicyWithContextArgsForCall)
}

func (fake *FakeSMClient) DeleteResourcePolicyWithContextCalls(stub func(context.Context, *secretsmanager.DeleteResourcePolicyInput, ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error)) {
	fake.deleteResourcePolicyWithContextMutex.Lock()
	defer fake.deleteResourcePolicyWithContextMutex.Unlock()
	fake.DeleteResourcePolicyWithContextStub = stub
}

func (fake *FakeSMClient) DeleteResourcePolicyWithContextArgsForCall(i int) (context.Context, *secretsmanager.DeleteResourcePolicyInput, []request.Option) {
	fake.deleteResourcePolicyWithContextMutex.RLock()
	defer fake.deleteResourcePolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteResourcePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) DeleteResourcePolicyWithContextReturns(result1 *secretsmanager.DeleteResourcePolicyOutput, result2 error) {
	fake.deleteResourcePolicyWithContextMutex.Lock()
	defer fake.deleteResourcePolicyWithContextMutex.Unlock()
	fake.DeleteResourcePolicyWithContextStub = nil
	fake.deleteResourcePolicyWithContextReturns = struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteResourcePolicyWithContextReturnsOnCall(i int, result1 *secretsmanager.DeleteResourcePolicyOutput, result2 error) {
	fake.deleteResourcePolicyWithContextMutex.Lock()
	defer fake.deleteResourcePolicyWithContextMutex.Unlock()
	fake.DeleteResourcePolicyWithContextStub = nil
	if fake.deleteResourcePolicyWithContextReturnsOnCall == nil {
		fake.deleteResourcePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DeleteResourcePolicyOutput
			result2 error
		})
	}
	fake.deleteResourcePolicyWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.DeleteResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteSecret(arg1 *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	fake.deleteSecretMutex.Lock()
	ret, specificReturn := fake.deleteSecretReturnsOnCall[len(fake.deleteSecretArgsForCall)]
	fake.deleteSecretArgsForCall = append(fake.deleteSecretArgsForCall, struct {
		arg1 *secretsmanager.DeleteSecretInput
	}{arg1})
	stub := fake.DeleteSecretStub
	fakeReturns := fake.deleteSecretReturns
	fake.recordInvocation("DeleteSecret", []interface{}{arg1})
	fake.deleteSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DeleteSecretCallCount() int {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	return len(fake.deleteSecretArgsForCall)
}

func (fake *FakeSMClient) DeleteSecretCalls(stub func(*secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error)) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = stub
}

func (fake *FakeSMClient) DeleteSecretArgsForCall(i int) *secretsmanager.DeleteSecretInput {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	argsForCall := fake.deleteSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) DeleteSecretReturns(result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	fake.deleteSecretReturns = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteSecretReturnsOnCall(i int, result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	if fake.deleteSecretReturnsOnCall == nil {
		fake.deleteSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DeleteSecretOutput
			result2 error
		})
	}
	fake.deleteSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteSecretRequest(arg1 *secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput) {
	fake.deleteSecretRequestMutex.Lock()
	ret, specificReturn := fake.deleteSecretRequestReturnsOnCall[len(fake.deleteSecretRequestArgsForCall)]
	fake.deleteSecretRequestArgsForCall = append(fake.deleteSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.DeleteSecretInput
	}{arg1})
	stub := fake.DeleteSecretRequestStub
	fakeReturns := fake.deleteSecretRequestReturns
	fake.recordInvocation("DeleteSecretRequest", []interface{}{arg1})
	fake.deleteSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DeleteSecretRequestCallCount() int {
	fake.deleteSecretRequestMutex.RLock()
	defer fake.deleteSecretRequestMutex.RUnlock()
	return len(fake.deleteSecretRequestArgsForCall)
}

func (fake *FakeSMClient) DeleteSecretRequestCalls(stub func(*secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput)) {
	fake.deleteSecretRequestMutex.Lock()
	defer fake.deleteSecretRequestMutex.Unlock()
	fake.DeleteSecretRequestStub = stub
}

func (fake *FakeSMClient) DeleteSecretRequestArgsForCall(i int) *secretsmanager.DeleteSecretInput {
	fake.deleteSecretRequestMutex.RLock()
	defer fake.deleteSecretRequestMutex.RUnlock()
	argsForCall := fake.deleteSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) DeleteSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.DeleteSecretOutput) {
	fake.deleteSecretRequestMutex.Lock()
	defer fake.deleteSecretRequestMutex.Unlock()
	fake.DeleteSecretRequestStub = nil
	fake.deleteSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.DeleteSecretOutput) {
	fake.deleteSecretRequestMutex.Lock()
	defer fake.deleteSecretRequestMutex.Unlock()
	fake.DeleteSecretRequestStub = nil
	if fake.deleteSecretRequestReturnsOnCall == nil {
		fake.deleteSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.DeleteSecretOutput
		})
	}
	fake.deleteSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.DeleteSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteSecretWithContext(arg1 context.Context, arg2 *secretsmanager.DeleteSecretInput, arg3 ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {
	fake.deleteSecretWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSecretWithContextReturnsOnCall[len(fake.deleteSecretWithContextArgsForCall)]
	fake.deleteSecretWithContextArgsForCall = append(fake.deleteSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.DeleteSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteSecretWithContextStub
	fakeReturns := fake.deleteSecretWithContextReturns
	fake.recordInvocation("DeleteSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DeleteSecretWithContextCallCount() int {
	fake.deleteSecretWithContextMutex.RLock()
	defer fake.deleteSecretWithContextMutex.RUnlock()
	return len(fake.deleteSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) DeleteSecretWithContextCalls(stub func(context.Context, *secretsmanager.DeleteSecretInput, ...request.Option) (*secretsmanager.DeleteSecretOutput, error)) {
	fake.deleteSecretWithContextMutex.Lock()
	defer fake.deleteSecretWithContextMutex.Unlock()
	fake.DeleteSecretWithContextStub = stub
}

func (fake *FakeSMClient) DeleteSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.DeleteSecretInput, []request.Option) {
	fake.deleteSecretWithContextMutex.RLock()
	defer fake.deleteSecretWithContextMutex.RUnlock()
	argsForCall := fake.deleteSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) DeleteSecretWithContextReturns(result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.deleteSecretWithContextMutex.Lock()
	defer fake.deleteSecretWithContextMutex.Unlock()
	fake.DeleteSecretWithContextStub = nil
	fake.deleteSecretWithContextReturns = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DeleteSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.deleteSecretWithContextMutex.Lock()
	defer fake.deleteSecretWithContextMutex.Unlock()
	fake.DeleteSecretWithContextStub = nil
	if fake.deleteSecretWithContextReturnsOnCall == nil {
		fake.deleteSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DeleteSecretOutput
			result2 error
		})
	}
	fake.deleteSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DescribeSecret(arg1 *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	fake.describeSecretMutex.Lock()
	ret, specificReturn := fake.describeSecretReturnsOnCall[len(fake.describeSecretArgsForCall)]
	fake.describeSecretArgsForCall = append(fake.describeSecretArgsForCall, struct {
		arg1 *secretsmanager.DescribeSecretInput
	}{arg1})
	stub := fake.DescribeSecretStub
	fakeReturns := fake.describeSecretReturns
	fake.recordInvocation("DescribeSecret", []interface{}{arg1})
	fake.describeSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DescribeSecretCallCount() int {
	fake.describeSecretMutex.RLock()
	defer fake.describeSecretMutex.RUnlock()
	return len(fake.describeSecretArgsForCall)
}

func (fake *FakeSMClient) DescribeSecretCalls(stub func(*secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error)) {
	fake.describeSecretMutex.Lock()
	defer fake.describeSecretMutex.Unlock()
	fake.DescribeSecretStub = stub
}

func (fake *FakeSMClient) DescribeSecretArgsForCall(i int) *secretsmanager.DescribeSecretInput {
	fake.describeSecretMutex.RLock()
	defer fake.describeSecretMutex.RUnlock()
	argsForCall := fake.describeSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) DescribeSecretReturns(result1 *secretsmanager.DescribeSecretOutput, result2 error) {
	fake.describeSecretMutex.Lock()
	defer fake.describeSecretMutex.Unlock()
	fake.DescribeSecretStub = nil
	fake.describeSecretReturns = struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DescribeSecretReturnsOnCall(i int, result1 *secretsmanager.DescribeSecretOutput, result2 error) {
	fake.describeSecretMutex.Lock()
	defer fake.describeSecretMutex.Unlock()
	fake.DescribeSecretStub = nil
	if fake.describeSecretReturnsOnCall == nil {
		fake.describeSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DescribeSecretOutput
			result2 error
		})
	}
	fake.describeSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DescribeSecretRequest(arg1 *secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput) {
	fake.describeSecretRequestMutex.Lock()
	ret, specificReturn := fake.describeSecretRequestReturnsOnCall[len(fake.describeSecretRequestArgsForCall)]
	fake.describeSecretRequestArgsForCall = append(fake.describeSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.DescribeSecretInput
	}{arg1})
	stub := fake.DescribeSecretRequestStub
	fakeReturns := fake.describeSecretRequestReturns
	fake.recordInvocation("DescribeSecretRequest", []interface{}{arg1})
	fake.describeSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DescribeSecretRequestCallCount() int {
	fake.describeSecretRequestMutex.RLock()
	defer fake.describeSecretRequestMutex.RUnlock()
	return len(fake.describeSecretRequestArgsForCall)
}

func (fake *FakeSMClient) DescribeSecretRequestCalls(stub func(*secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput)) {
	fake.describeSecretRequestMutex.Lock()
	defer fake.describeSecretRequestMutex.Unlock()
	fake.DescribeSecretRequestStub = stub
}

func (fake *FakeSMClient) DescribeSecretRequestArgsForCall(i int) *secretsmanager.DescribeSecretInput {
	fake.describeSecretRequestMutex.RLock()
	defer fake.describeSecretRequestMutex.RUnlock()
	argsForCall := fake.describeSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) DescribeSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.DescribeSecretOutput) {
	fake.describeSecretRequestMutex.Lock()
	defer fake.describeSecretRequestMutex.Unlock()
	fake.DescribeSecretRequestStub = nil
	fake.describeSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.DescribeSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) DescribeSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.DescribeSecretOutput) {
	fake.describeSecretRequestMutex.Lock()
	defer fake.describeSecretRequestMutex.Unlock()
	fake.DescribeSecretRequestStub = nil
	if fake.describeSecretRequestReturnsOnCall == nil {
		fake.describeSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.DescribeSecretOutput
		})
	}
	fake.describeSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.DescribeSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) DescribeSecretWithContext(arg1 context.Context, arg2 *secretsmanager.DescribeSecretInput, arg3 ...request.Option) (*secretsmanager.DescribeSecretOutput, error) {
	fake.describeSecretWithContextMutex.Lock()
	ret, specificReturn := fake.describeSecretWithContextReturnsOnCall[len(fake.describeSecretWithContextArgsForCall)]
	fake.describeSecretWithContextArgsForCall = append(fake.describeSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.DescribeSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeSecretWithContextStub
	fakeReturns := fake.describeSecretWithContextReturns
	fake.recordInvocation("DescribeSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) DescribeSecretWithContextCallCount() int {
	fake.describeSecretWithContextMutex.RLock()
	defer fake.describeSecretWithContextMutex.RUnlock()
	return len(fake.describeSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) DescribeSecretWithContextCalls(stub func(context.Context, *secretsmanager.DescribeSecretInput, ...request.Option) (*secretsmanager.DescribeSecretOutput, error)) {
	fake.describeSecretWithContextMutex.Lock()
	defer fake.describeSecretWithContextMutex.Unlock()
	fake.DescribeSecretWithContextStub = stub
}

func (fake *FakeSMClient) DescribeSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.DescribeSecretInput, []request.Option) {
	fake.describeSecretWithContextMutex.RLock()
	defer fake.describeSecretWithContextMutex.RUnlock()
	argsForCall := fake.describeSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) DescribeSecretWithContextReturns(result1 *secretsmanager.DescribeSecretOutput, result2 error) {
	fake.describeSecretWithContextMutex.Lock()
	defer fake.describeSecretWithContextMutex.Unlock()
	fake.DescribeSecretWithContextStub = nil
	fake.describeSecretWithContextReturns = struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) DescribeSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.DescribeSecretOutput, result2 error) {
	fake.describeSecretWithContextMutex.Lock()
	defer fake.describeSecretWithContextMutex.Unlock()
	fake.DescribeSecretWithContextStub = nil
	if fake.describeSecretWithContextReturnsOnCall == nil {
		fake.describeSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DescribeSecretOutput
			result2 error
		})
	}
	fake.describeSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.DescribeSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetRandomPassword(arg1 *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	fake.getRandomPasswordMutex.Lock()
	ret, specificReturn := fake.getRandomPasswordReturnsOnCall[len(fake.getRandomPasswordArgsForCall)]
	fake.getRandomPasswordArgsForCall = append(fake.getRandomPasswordArgsForCall, struct {
		arg1 *secretsmanager.GetRandomPasswordInput
	}{arg1})
	stub := fake.GetRandomPasswordStub
	fakeReturns := fake.getRandomPasswordReturns
	fake.recordInvocation("GetRandomPassword", []interface{}{arg1})
	fake.getRandomPasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetRandomPasswordCallCount() int {
	fake.getRandomPasswordMutex.RLock()
	defer fake.getRandomPasswordMutex.RUnlock()
	return len(fake.getRandomPasswordArgsForCall)
}

func (fake *FakeSMClient) GetRandomPasswordCalls(stub func(*secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error)) {
	fake.getRandomPasswordMutex.Lock()
	defer fake.getRandomPasswordMutex.Unlock()
	fake.GetRandomPasswordStub = stub
}

func (fake *FakeSMClient) GetRandomPasswordArgsForCall(i int) *secretsmanager.GetRandomPasswordInput {
	fake.getRandomPasswordMutex.RLock()
	defer fake.getRandomPasswordMutex.RUnlock()
	argsForCall := fake.getRandomPasswordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) GetRandomPasswordReturns(result1 *secretsmanager.GetRandomPasswordOutput, result2 error) {
	fake.getRandomPasswordMutex.Lock()
	defer fake.getRandomPasswordMutex.Unlock()
	fake.GetRandomPasswordStub = nil
	fake.getRandomPasswordReturns = struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetRandomPasswordReturnsOnCall(i int, result1 *secretsmanager.GetRandomPasswordOutput, result2 error) {
	fake.getRandomPasswordMutex.Lock()
	defer fake.getRandomPasswordMutex.Unlock()
	fake.GetRandomPasswordStub = nil
	if fake.getRandomPasswordReturnsOnCall == nil {
		fake.getRandomPasswordReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetRandomPasswordOutput
			result2 error
		})
	}
	fake.getRandomPasswordReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetRandomPasswordRequest(arg1 *secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput) {
	fake.getRandomPasswordRequestMutex.Lock()
	ret, specificReturn := fake.getRandomPasswordRequestReturnsOnCall[len(fake.getRandomPasswordRequestArgsForCall)]
	fake.getRandomPasswordRequestArgsForCall = append(fake.getRandomPasswordRequestArgsForCall, struct {
		arg1 *secretsmanager.GetRandomPasswordInput
	}{arg1})
	stub := fake.GetRandomPasswordRequestStub
	fakeReturns := fake.getRandomPasswordRequestReturns
	fake.recordInvocation("GetRandomPasswordRequest", []interface{}{arg1})
	fake.getRandomPasswordRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetRandomPasswordRequestCallCount() int {
	fake.getRandomPasswordRequestMutex.RLock()
	defer fake.getRandomPasswordRequestMutex.RUnlock()
	return len(fake.getRandomPasswordRequestArgsForCall)
}

func (fake *FakeSMClient) GetRandomPasswordRequestCalls(stub func(*secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput)) {
	fake.getRandomPasswordRequestMutex.Lock()
	defer fake.getRandomPasswordRequestMutex.Unlock()
	fake.GetRandomPasswordRequestStub = stub
}

func (fake *FakeSMClient) GetRandomPasswordRequestArgsForCall(i int) *secretsmanager.GetRandomPasswordInput {
	fake.getRandomPasswordRequestMutex.RLock()
	defer fake.getRandomPasswordRequestMutex.RUnlock()
	argsForCall := fake.getRandomPasswordRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) GetRandomPasswordRequestReturns(result1 *request.Request, result2 *secretsmanager.GetRandomPasswordOutput) {
	fake.getRandomPasswordRequestMutex.Lock()
	defer fake.getRandomPasswordRequestMutex.Unlock()
	fake.GetRandomPasswordRequestStub = nil
	fake.getRandomPasswordRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.GetRandomPasswordOutput
	}{result1, result2}
}

func (fake *FakeSMClient) GetRandomPasswordRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.GetRandomPasswordOutput) {
	fake.getRandomPasswordRequestMutex.Lock()
	defer fake.getRandomPasswordRequestMutex.Unlock()
	fake.GetRandomPasswordRequestStub = nil
	if fake.getRandomPasswordRequestReturnsOnCall == nil {
		fake.getRandomPasswordRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.GetRandomPasswordOutput
		})
	}
	fake.getRandomPasswordRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.GetRandomPasswordOutput
	}{result1, result2}
}

func (fake *FakeSMClient) GetRandomPasswordWithContext(arg1 context.Context, arg2 *secretsmanager.GetRandomPasswordInput, arg3 ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error) {
	fake.getRandomPasswordWithContextMutex.Lock()
	ret, specificReturn := fake.getRandomPasswordWithContextReturnsOnCall[len(fake.getRandomPasswordWithContextArgsForCall)]
	fake.getRandomPasswordWithContextArgsForCall = append(fake.getRandomPasswordWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.GetRandomPasswordInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetRandomPasswordWithContextStub
	fakeReturns := fake.getRandomPasswordWithContextReturns
	fake.recordInvocation("GetRandomPasswordWithContext", []interface{}{arg1, arg2, arg3})
	fake.getRandomPasswordWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetRandomPasswordWithContextCallCount() int {
	fake.getRandomPasswordWithContextMutex.RLock()
	defer fake.getRandomPasswordWithContextMutex.RUnlock()
	return len(fake.getRandomPasswordWithContextArgsForCall)
}

func (fake *FakeSMClient) GetRandomPasswordWithContextCalls(stub func(context.Context, *secretsmanager.GetRandomPasswordInput, ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error)) {
	fake.getRandomPasswordWithContextMutex.Lock()
	defer fake.getRandomPasswordWithContextMutex.Unlock()
	fake.GetRandomPasswordWithContextStub = stub
}

func (fake *FakeSMClient) GetRandomPasswordWithContextArgsForCall(i int) (context.Context, *secretsmanager.GetRandomPasswordInput, []request.Option) {
	fake.getRandomPasswordWithContextMutex.RLock()
	defer fake.getRandomPasswordWithContextMutex.RUnlock()
	argsForCall := fake.getRandomPasswordWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) GetRandomPasswordWithContextReturns(result1 *secretsmanager.GetRandomPasswordOutput, result2 error) {
	fake.getRandomPasswordWithContextMutex.Lock()
	defer fake.getRandomPasswordWithContextMutex.Unlock()
	fake.GetRandomPasswordWithContextStub = nil
	fake.getRandomPasswordWithContextReturns = struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetRandomPasswordWithContextReturnsOnCall(i int, result1 *secretsmanager.GetRandomPasswordOutput, result2 error) {
	fake.getRandomPasswordWithContextMutex.Lock()
	defer fake.getRandomPasswordWithContextMutex.Unlock()
	fake.GetRandomPasswordWithContextStub = nil
	if fake.getRandomPasswordWithContextReturnsOnCall == nil {
		fake.getRandomPasswordWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetRandomPasswordOutput
			result2 error
		})
	}
	fake.getRandomPasswordWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetRandomPasswordOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetResourcePolicy(arg1 *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	fake.getResourcePolicyMutex.Lock()
	ret, specificReturn := fake.getResourcePolicyReturnsOnCall[len(fake.getResourcePolicyArgsForCall)]
	fake.getResourcePolicyArgsForCall = append(fake.getResourcePolicyArgsForCall, struct {
		arg1 *secretsmanager.GetResourcePolicyInput
	}{arg1})
	stub := fake.GetResourcePolicyStub
	fakeReturns := fake.getResourcePolicyReturns
	fake.recordInvocation("GetResourcePolicy", []interface{}{arg1})
	fake.getResourcePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetResourcePolicyCallCount() int {
	fake.getResourcePolicyMutex.RLock()
	defer fake.getResourcePolicyMutex.RUnlock()
	return len(fake.getResourcePolicyArgsForCall)
}

func (fake *FakeSMClient) GetResourcePolicyCalls(stub func(*secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error)) {
	fake.getResourcePolicyMutex.Lock()
	defer fake.getResourcePolicyMutex.Unlock()
	fake.GetResourcePolicyStub = stub
}

func (fake *FakeSMClient) GetResourcePolicyArgsForCall(i int) *secretsmanager.GetResourcePolicyInput {
	fake.getResourcePolicyMutex.RLock()
	defer fake.getResourcePolicyMutex.RUnlock()
	argsForCall := fake.getResourcePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) GetResourcePolicyReturns(result1 *secretsmanager.GetResourcePolicyOutput, result2 error) {
	fake.getResourcePolicyMutex.Lock()
	defer fake.getResourcePolicyMutex.Unlock()
	fake.GetResourcePolicyStub = nil
	fake.getResourcePolicyReturns = struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetResourcePolicyReturnsOnCall(i int, result1 *secretsmanager.GetResourcePolicyOutput, result2 error) {
	fake.getResourcePolicyMutex.Lock()
	defer fake.getResourcePolicyMutex.Unlock()
	fake.GetResourcePolicyStub = nil
	if fake.getResourcePolicyReturnsOnCall == nil {
		fake.getResourcePolicyReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetResourcePolicyOutput
			result2 error
		})
	}
	fake.getResourcePolicyReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetResourcePolicyRequest(arg1 *secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput) {
	fake.getResourcePolicyRequestMutex.Lock()
	ret, specificReturn := fake.getResourcePolicyRequestReturnsOnCall[len(fake.getResourcePolicyRequestArgsForCall)]
	fake.getResourcePolicyRequestArgsForCall = append(fake.getResourcePolicyRequestArgsForCall, struct {
		arg1 *secretsmanager.GetResourcePolicyInput
	}{arg1})
	stub := fake.GetResourcePolicyRequestStub
	fakeReturns := fake.getResourcePolicyRequestReturns
	fake.recordInvocation("GetResourcePolicyRequest", []interface{}{arg1})
	fake.getResourcePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetResourcePolicyRequestCallCount() int {
	fake.getResourcePolicyRequestMutex.RLock()
	defer fake.getResourcePolicyRequestMutex.RUnlock()
	return len(fake.getResourcePolicyRequestArgsForCall)
}

func (fake *FakeSMClient) GetResourcePolicyRequestCalls(stub func(*secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput)) {
	fake.getResourcePolicyRequestMutex.Lock()
	defer fake.getResourcePolicyRequestMutex.Unlock()
	fake.GetResourcePolicyRequestStub = stub
}

func (fake *FakeSMClient) GetResourcePolicyRequestArgsForCall(i int) *secretsmanager.GetResourcePolicyInput {
	fake.getResourcePolicyRequestMutex.RLock()
	defer fake.getResourcePolicyRequestMutex.RUnlock()
	argsForCall := fake.getResourcePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) GetResourcePolicyRequestReturns(result1 *request.Request, result2 *secretsmanager.GetResourcePolicyOutput) {
	fake.getResourcePolicyRequestMutex.Lock()
	defer fake.getResourcePolicyRequestMutex.Unlock()
	fake.GetResourcePolicyRequestStub = nil
	fake.getResourcePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.GetResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) GetResourcePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.GetResourcePolicyOutput) {
	fake.getResourcePolicyRequestMutex.Lock()
	defer fake.getResourcePolicyRequestMutex.Unlock()
	fake.GetResourcePolicyRequestStub = nil
	if fake.getResourcePolicyRequestReturnsOnCall == nil {
		fake.getResourcePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.GetResourcePolicyOutput
		})
	}
	fake.getResourcePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.GetResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) GetResourcePolicyWithContext(arg1 context.Context, arg2 *secretsmanager.GetResourcePolicyInput, arg3 ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error) {
	fake.getResourcePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getResourcePolicyWithContextReturnsOnCall[len(fake.getResourcePolicyWithContextArgsForCall)]
	fake.getResourcePolicyWithContextArgsForCall = append(fake.getResourcePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.GetResourcePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetResourcePolicyWithContextStub
	fakeReturns := fake.getResourcePolicyWithContextReturns
	fake.recordInvocation("GetResourcePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getResourcePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetResourcePolicyWithContextCallCount() int {
	fake.getResourcePolicyWithContextMutex.RLock()
	defer fake.getResourcePolicyWithContextMutex.RUnlock()
	return len(fake.getResourcePolicyWithContextArgsForCall)
}

func (fake *FakeSMClient) GetResourcePolicyWithContextCalls(stub func(context.Context, *secretsmanager.GetResourcePolicyInput, ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error)) {
	fake.getResourcePolicyWithContextMutex.Lock()
	defer fake.getResourcePolicyWithContextMutex.Unlock()
	fake.GetResourcePolicyWithContextStub = stub
}

func (fake *FakeSMClient) GetResourcePolicyWithContextArgsForCall(i int) (context.Context, *secretsmanager.GetResourcePolicyInput, []request.Option) {
	fake.getResourcePolicyWithContextMutex.RLock()
	defer fake.getResourcePolicyWithContextMutex.RUnlock()
	argsForCall := fake.getResourcePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) GetResourcePolicyWithContextReturns(result1 *secretsmanager.GetResourcePolicyOutput, result2 error) {
	fake.getResourcePolicyWithContextMutex.Lock()
	defer fake.getResourcePolicyWithContextMutex.Unlock()
	fake.GetResourcePolicyWithContextStub = nil
	fake.getResourcePolicyWithContextReturns = struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetResourcePolicyWithContextReturnsOnCall(i int, result1 *secretsmanager.GetResourcePolicyOutput, result2 error) {
	fake.getResourcePolicyWithContextMutex.Lock()
	defer fake.getResourcePolicyWithContextMutex.Unlock()
	fake.GetResourcePolicyWithContextStub = nil
	if fake.getResourcePolicyWithContextReturnsOnCall == nil {
		fake.getResourcePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetResourcePolicyOutput
			result2 error
		})
	}
	fake.getResourcePolicyWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetSecretValue(arg1 *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	fake.getSecretValueMutex.Lock()
	ret, specificReturn := fake.getSecretValueReturnsOnCall[len(fake.getSecretValueArgsForCall)]
	fake.getSecretValueArgsForCall = append(fake.getSecretValueArgsForCall, struct {
		arg1 *secretsmanager.GetSecretValueInput
	}{arg1})
	stub := fake.GetSecretValueStub
	fakeReturns := fake.getSecretValueReturns
	fake.recordInvocation("GetSecretValue", []interface{}{arg1})
	fake.getSecretValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetSecretValueCallCount() int {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	return len(fake.getSecretValueArgsForCall)
}

func (fake *FakeSMClient) GetSecretValueCalls(stub func(*secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error)) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = stub
}

func (fake *FakeSMClient) GetSecretValueArgsForCall(i int) *secretsmanager.GetSecretValueInput {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	argsForCall := fake.getSecretValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) GetSecretValueReturns(result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	fake.getSecretValueReturns = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetSecretValueReturnsOnCall(i int, result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	if fake.getSecretValueReturnsOnCall == nil {
		fake.getSecretValueReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetSecretValueOutput
			result2 error
		})
	}
	fake.getSecretValueReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetSecretValueRequest(arg1 *secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput) {
	fake.getSecretValueRequestMutex.Lock()
	ret, specificReturn := fake.getSecretValueRequestReturnsOnCall[len(fake.getSecretValueRequestArgsForCall)]
	fake.getSecretValueRequestArgsForCall = append(fake.getSecretValueRequestArgsForCall, struct {
		arg1 *secretsmanager.GetSecretValueInput
	}{arg1})
	stub := fake.GetSecretValueRequestStub
	fakeReturns := fake.getSecretValueRequestReturns
	fake.recordInvocation("GetSecretValueRequest", []interface{}{arg1})
	fake.getSecretValueRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetSecretValueRequestCallCount() int {
	fake.getSecretValueRequestMutex.RLock()
	defer fake.getSecretValueRequestMutex.RUnlock()
	return len(fake.getSecretValueRequestArgsForCall)
}

func (fake *FakeSMClient) GetSecretValueRequestCalls(stub func(*secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput)) {
	fake.getSecretValueRequestMutex.Lock()
	defer fake.getSecretValueRequestMutex.Unlock()
	fake.GetSecretValueRequestStub = stub
}

func (fake *FakeSMClient) GetSecretValueRequestArgsForCall(i int) *secretsmanager.GetSecretValueInput {
	fake.getSecretValueRequestMutex.RLock()
	defer fake.getSecretValueRequestMutex.RUnlock()
	argsForCall := fake.getSecretValueRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) GetSecretValueRequestReturns(result1 *request.Request, result2 *secretsmanager.GetSecretValueOutput) {
	fake.getSecretValueRequestMutex.Lock()
	defer fake.getSecretValueRequestMutex.Unlock()
	fake.GetSecretValueRequestStub = nil
	fake.getSecretValueRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.GetSecretValueOutput
	}{result1, result2}
}

func (fake *FakeSMClient) GetSecretValueRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.GetSecretValueOutput) {
	fake.getSecretValueRequestMutex.Lock()
	defer fake.getSecretValueRequestMutex.Unlock()
	fake.GetSecretValueRequestStub = nil
	if fake.getSecretValueRequestReturnsOnCall == nil {
		fake.getSecretValueRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.GetSecretValueOutput
		})
	}
	fake.getSecretValueRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.GetSecretValueOutput
	}{result1, result2}
}

func (fake *FakeSMClient) GetSecretValueWithContext(arg1 context.Context, arg2 *secretsmanager.GetSecretValueInput, arg3 ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {
	fake.getSecretValueWithContextMutex.Lock()
	ret, specificReturn := fake.getSecretValueWithContextReturnsOnCall[len(fake.getSecretValueWithContextArgsForCall)]
	fake.getSecretValueWithContextArgsForCall = append(fake.getSecretValueWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.GetSecretValueInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetSecretValueWithContextStub
	fakeReturns := fake.getSecretValueWithContextReturns
	fake.recordInvocation("GetSecretValueWithContext", []interface{}{arg1, arg2, arg3})
	fake.getSecretValueWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) GetSecretValueWithContextCallCount() int {
	fake.getSecretValueWithContextMutex.RLock()
	defer fake.getSecretValueWithContextMutex.RUnlock()
	return len(fake.getSecretValueWithContextArgsForCall)
}

func (fake *FakeSMClient) GetSecretValueWithContextCalls(stub func(context.Context, *secretsmanager.GetSecretValueInput, ...request.Option) (*secretsmanager.GetSecretValueOutput, error)) {
	fake.getSecretValueWithContextMutex.Lock()
	defer fake.getSecretValueWithContextMutex.Unlock()
	fake.GetSecretValueWithContextStub = stub
}

func (fake *FakeSMClient) GetSecretValueWithContextArgsForCall(i int) (context.Context, *secretsmanager.GetSecretValueInput, []request.Option) {
	fake.getSecretValueWithContextMutex.RLock()
	defer fake.getSecretValueWithContextMutex.RUnlock()
	argsForCall := fake.getSecretValueWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) GetSecretValueWithContextReturns(result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.getSecretValueWithContextMutex.Lock()
	defer fake.getSecretValueWithContextMutex.Unlock()
	fake.GetSecretValueWithContextStub = nil
	fake.getSecretValueWithContextReturns = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) GetSecretValueWithContextReturnsOnCall(i int, result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.getSecretValueWithContextMutex.Lock()
	defer fake.getSecretValueWithContextMutex.Unlock()
	fake.GetSecretValueWithContextStub = nil
	if fake.getSecretValueWithContextReturnsOnCall == nil {
		fake.getSecretValueWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetSecretValueOutput
			result2 error
		})
	}
	fake.getSecretValueWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretVersionIds(arg1 *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	fake.listSecretVersionIdsMutex.Lock()
	ret, specificReturn := fake.listSecretVersionIdsReturnsOnCall[len(fake.listSecretVersionIdsArgsForCall)]
	fake.listSecretVersionIdsArgsForCall = append(fake.listSecretVersionIdsArgsForCall, struct {
		arg1 *secretsmanager.ListSecretVersionIdsInput
	}{arg1})
	stub := fake.ListSecretVersionIdsStub
	fakeReturns := fake.listSecretVersionIdsReturns
	fake.recordInvocation("ListSecretVersionIds", []interface{}{arg1})
	fake.listSecretVersionIdsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ListSecretVersionIdsCallCount() int {
	fake.listSecretVersionIdsMutex.RLock()
	defer fake.listSecretVersionIdsMutex.RUnlock()
	return len(fake.listSecretVersionIdsArgsForCall)
}

func (fake *FakeSMClient) ListSecretVersionIdsCalls(stub func(*secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error)) {
	fake.listSecretVersionIdsMutex.Lock()
	defer fake.listSecretVersionIdsMutex.Unlock()
	fake.ListSecretVersionIdsStub = stub
}

func (fake *FakeSMClient) ListSecretVersionIdsArgsForCall(i int) *secretsmanager.ListSecretVersionIdsInput {
	fake.listSecretVersionIdsMutex.RLock()
	defer fake.listSecretVersionIdsMutex.RUnlock()
	argsForCall := fake.listSecretVersionIdsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ListSecretVersionIdsReturns(result1 *secretsmanager.ListSecretVersionIdsOutput, result2 error) {
	fake.listSecretVersionIdsMutex.Lock()
	defer fake.listSecretVersionIdsMutex.Unlock()
	fake.ListSecretVersionIdsStub = nil
	fake.listSecretVersionIdsReturns = struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretVersionIdsReturnsOnCall(i int, result1 *secretsmanager.ListSecretVersionIdsOutput, result2 error) {
	fake.listSecretVersionIdsMutex.Lock()
	defer fake.listSecretVersionIdsMutex.Unlock()
	fake.ListSecretVersionIdsStub = nil
	if fake.listSecretVersionIdsReturnsOnCall == nil {
		fake.listSecretVersionIdsReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ListSecretVersionIdsOutput
			result2 error
		})
	}
	fake.listSecretVersionIdsReturnsOnCall[i] = struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretVersionIdsPages(arg1 *secretsmanager.ListSecretVersionIdsInput, arg2 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error {
	fake.listSecretVersionIdsPagesMutex.Lock()
	ret, specificReturn := fake.listSecretVersionIdsPagesReturnsOnCall[len(fake.listSecretVersionIdsPagesArgsForCall)]
	fake.listSecretVersionIdsPagesArgsForCall = append(fake.listSecretVersionIdsPagesArgsForCall, struct {
		arg1 *secretsmanager.ListSecretVersionIdsInput
		arg2 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListSecretVersionIdsPagesStub
	fakeReturns := fake.listSecretVersionIdsPagesReturns
	fake.recordInvocation("ListSecretVersionIdsPages", []interface{}{arg1, arg2})
	fake.listSecretVersionIdsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesCallCount() int {
	fake.listSecretVersionIdsPagesMutex.RLock()
	defer fake.listSecretVersionIdsPagesMutex.RUnlock()
	return len(fake.listSecretVersionIdsPagesArgsForCall)
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesCalls(stub func(*secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error) {
	fake.listSecretVersionIdsPagesMutex.Lock()
	defer fake.listSecretVersionIdsPagesMutex.Unlock()
	fake.ListSecretVersionIdsPagesStub = stub
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesArgsForCall(i int) (*secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) {
	fake.listSecretVersionIdsPagesMutex.RLock()
	defer fake.listSecretVersionIdsPagesMutex.RUnlock()
	argsForCall := fake.listSecretVersionIdsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesReturns(result1 error) {
	fake.listSecretVersionIdsPagesMutex.Lock()
	defer fake.listSecretVersionIdsPagesMutex.Unlock()
	fake.ListSecretVersionIdsPagesStub = nil
	fake.listSecretVersionIdsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesReturnsOnCall(i int, result1 error) {
	fake.listSecretVersionIdsPagesMutex.Lock()
	defer fake.listSecretVersionIdsPagesMutex.Unlock()
	fake.ListSecretVersionIdsPagesStub = nil
	if fake.listSecretVersionIdsPagesReturnsOnCall == nil {
		fake.listSecretVersionIdsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSecretVersionIdsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesWithContext(arg1 context.Context, arg2 *secretsmanager.ListSecretVersionIdsInput, arg3 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listSecretVersionIdsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listSecretVersionIdsPagesWithContextReturnsOnCall[len(fake.listSecretVersionIdsPagesWithContextArgsForCall)]
	fake.listSecretVersionIdsPagesWithContextArgsForCall = append(fake.listSecretVersionIdsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretVersionIdsInput
		arg3 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListSecretVersionIdsPagesWithContextStub
	fakeReturns := fake.listSecretVersionIdsPagesWithContextReturns
	fake.recordInvocation("ListSecretVersionIdsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listSecretVersionIdsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesWithContextCallCount() int {
	fake.listSecretVersionIdsPagesWithContextMutex.RLock()
	defer fake.listSecretVersionIdsPagesWithContextMutex.RUnlock()
	return len(fake.listSecretVersionIdsPagesWithContextArgsForCall)
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesWithContextCalls(stub func(context.Context, *secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, ...request.Option) error) {
	fake.listSecretVersionIdsPagesWithContextMutex.Lock()
	defer fake.listSecretVersionIdsPagesWithContextMutex.Unlock()
	fake.ListSecretVersionIdsPagesWithContextStub = stub
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesWithContextArgsForCall(i int) (context.Context, *secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, []request.Option) {
	fake.listSecretVersionIdsPagesWithContextMutex.RLock()
	defer fake.listSecretVersionIdsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listSecretVersionIdsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesWithContextReturns(result1 error) {
	fake.listSecretVersionIdsPagesWithContextMutex.Lock()
	defer fake.listSecretVersionIdsPagesWithContextMutex.Unlock()
	fake.ListSecretVersionIdsPagesWithContextStub = nil
	fake.listSecretVersionIdsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretVersionIdsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listSecretVersionIdsPagesWithContextMutex.Lock()
	defer fake.listSecretVersionIdsPagesWithContextMutex.Unlock()
	fake.ListSecretVersionIdsPagesWithContextStub = nil
	if fake.listSecretVersionIdsPagesWithContextReturnsOnCall == nil {
		fake.listSecretVersionIdsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSecretVersionIdsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretVersionIdsRequest(arg1 *secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput) {
	fake.listSecretVersionIdsRequestMutex.Lock()
	ret, specificReturn := fake.listSecretVersionIdsRequestReturnsOnCall[len(fake.listSecretVersionIdsRequestArgsForCall)]
	fake.listSecretVersionIdsRequestArgsForCall = append(fake.listSecretVersionIdsRequestArgsForCall, struct {
		arg1 *secretsmanager.ListSecretVersionIdsInput
	}{arg1})
	stub := fake.ListSecretVersionIdsRequestStub
	fakeReturns := fake.listSecretVersionIdsRequestReturns
	fake.recordInvocation("ListSecretVersionIdsRequest", []interface{}{arg1})
	fake.listSecretVersionIdsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ListSecretVersionIdsRequestCallCount() int {
	fake.listSecretVersionIdsRequestMutex.RLock()
	defer fake.listSecretVersionIdsRequestMutex.RUnlock()
	return len(fake.listSecretVersionIdsRequestArgsForCall)
}

func (fake *FakeSMClient) ListSecretVersionIdsRequestCalls(stub func(*secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput)) {
	fake.listSecretVersionIdsRequestMutex.Lock()
	defer fake.listSecretVersionIdsRequestMutex.Unlock()
	fake.ListSecretVersionIdsRequestStub = stub
}

func (fake *FakeSMClient) ListSecretVersionIdsRequestArgsForCall(i int) *secretsmanager.ListSecretVersionIdsInput {
	fake.listSecretVersionIdsRequestMutex.RLock()
	defer fake.listSecretVersionIdsRequestMutex.RUnlock()
	argsForCall := fake.listSecretVersionIdsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ListSecretVersionIdsRequestReturns(result1 *request.Request, result2 *secretsmanager.ListSecretVersionIdsOutput) {
	fake.listSecretVersionIdsRequestMutex.Lock()
	defer fake.listSecretVersionIdsRequestMutex.Unlock()
	fake.ListSecretVersionIdsRequestStub = nil
	fake.listSecretVersionIdsRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretVersionIdsOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretVersionIdsRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.ListSecretVersionIdsOutput) {
	fake.listSecretVersionIdsRequestMutex.Lock()
	defer fake.listSecretVersionIdsRequestMutex.Unlock()
	fake.ListSecretVersionIdsRequestStub = nil
	if fake.listSecretVersionIdsRequestReturnsOnCall == nil {
		fake.listSecretVersionIdsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.ListSecretVersionIdsOutput
		})
	}
	fake.listSecretVersionIdsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretVersionIdsOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretVersionIdsWithContext(arg1 context.Context, arg2 *secretsmanager.ListSecretVersionIdsInput, arg3 ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	fake.listSecretVersionIdsWithContextMutex.Lock()
	ret, specificReturn := fake.listSecretVersionIdsWithContextReturnsOnCall[len(fake.listSecretVersionIdsWithContextArgsForCall)]
	fake.listSecretVersionIdsWithContextArgsForCall = append(fake.listSecretVersionIdsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretVersionIdsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListSecretVersionIdsWithContextStub
	fakeReturns := fake.listSecretVersionIdsWithContextReturns
	fake.recordInvocation("ListSecretVersionIdsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSecretVersionIdsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ListSecretVersionIdsWithContextCallCount() int {
	fake.listSecretVersionIdsWithContextMutex.RLock()
	defer fake.listSecretVersionIdsWithContextMutex.RUnlock()
	return len(fake.listSecretVersionIdsWithContextArgsForCall)
}

func (fake *FakeSMClient) ListSecretVersionIdsWithContextCalls(stub func(context.Context, *secretsmanager.ListSecretVersionIdsInput, ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error)) {
	fake.listSecretVersionIdsWithContextMutex.Lock()
	defer fake.listSecretVersionIdsWithContextMutex.Unlock()
	fake.ListSecretVersionIdsWithContextStub = stub
}

func (fake *FakeSMClient) ListSecretVersionIdsWithContextArgsForCall(i int) (context.Context, *secretsmanager.ListSecretVersionIdsInput, []request.Option) {
	fake.listSecretVersionIdsWithContextMutex.RLock()
	defer fake.listSecretVersionIdsWithContextMutex.RUnlock()
	argsForCall := fake.listSecretVersionIdsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) ListSecretVersionIdsWithContextReturns(result1 *secretsmanager.ListSecretVersionIdsOutput, result2 error) {
	fake.listSecretVersionIdsWithContextMutex.Lock()
	defer fake.listSecretVersionIdsWithContextMutex.Unlock()
	fake.ListSecretVersionIdsWithContextStub = nil
	fake.listSecretVersionIdsWithContextReturns = struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretVersionIdsWithContextReturnsOnCall(i int, result1 *secretsmanager.ListSecretVersionIdsOutput, result2 error) {
	fake.listSecretVersionIdsWithContextMutex.Lock()
	defer fake.listSecretVersionIdsWithContextMutex.Unlock()
	fake.ListSecretVersionIdsWithContextStub = nil
	if fake.listSecretVersionIdsWithContextReturnsOnCall == nil {
		fake.listSecretVersionIdsWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ListSecretVersionIdsOutput
			result2 error
		})
	}
	fake.listSecretVersionIdsWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.ListSecretVersionIdsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecrets(arg1 *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	fake.listSecretsMutex.Lock()
	ret, specificReturn := fake.listSecretsReturnsOnCall[len(fake.listSecretsArgsForCall)]
	fake.listSecretsArgsForCall = append(fake.listSecretsArgsForCall, struct {
		arg1 *secretsmanager.ListSecretsInput
	}{arg1})
	stub := fake.ListSecretsStub
	fakeReturns := fake.listSecretsReturns
	fake.recordInvocation("ListSecrets", []interface{}{arg1})
	fake.listSecretsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ListSecretsCallCount() int {
	fake.listSecretsMutex.RLock()
	defer fake.listSecretsMutex.RUnlock()
	return len(fake.listSecretsArgsForCall)
}

func (fake *FakeSMClient) ListSecretsCalls(stub func(*secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error)) {
	fake.listSecretsMutex.Lock()
	defer fake.listSecretsMutex.Unlock()
	fake.ListSecretsStub = stub
}

func (fake *FakeSMClient) ListSecretsArgsForCall(i int) *secretsmanager.ListSecretsInput {
	fake.listSecretsMutex.RLock()
	defer fake.listSecretsMutex.RUnlock()
	argsForCall := fake.listSecretsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ListSecretsReturns(result1 *secretsmanager.ListSecretsOutput, result2 error) {
	fake.listSecretsMutex.Lock()
	defer fake.listSecretsMutex.Unlock()
	fake.ListSecretsStub = nil
	fake.listSecretsReturns = struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretsReturnsOnCall(i int, result1 *secretsmanager.ListSecretsOutput, result2 error) {
	fake.listSecretsMutex.Lock()
	defer fake.listSecretsMutex.Unlock()
	fake.ListSecretsStub = nil
	if fake.listSecretsReturnsOnCall == nil {
		fake.listSecretsReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ListSecretsOutput
			result2 error
		})
	}
	fake.listSecretsReturnsOnCall[i] = struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretsPages(arg1 *secretsmanager.ListSecretsInput, arg2 func(*secretsmanager.ListSecretsOutput, bool) bool) error {
	fake.listSecretsPagesMutex.Lock()
	ret, specificReturn := fake.listSecretsPagesReturnsOnCall[len(fake.listSecretsPagesArgsForCall)]
	fake.listSecretsPagesArgsForCall = append(fake.listSecretsPagesArgsForCall, struct {
		arg1 *secretsmanager.ListSecretsInput
		arg2 func(*secretsmanager.ListSecretsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListSecretsPagesStub
	fakeReturns := fake.listSecretsPagesReturns
	fake.recordInvocation("ListSecretsPages", []interface{}{arg1, arg2})
	fake.listSecretsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSMClient) ListSecretsPagesCallCount() int {
	fake.listSecretsPagesMutex.RLock()
	defer fake.listSecretsPagesMutex.RUnlock()
	return len(fake.listSecretsPagesArgsForCall)
}

func (fake *FakeSMClient) ListSecretsPagesCalls(stub func(*secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool) error) {
	fake.listSecretsPagesMutex.Lock()
	defer fake.listSecretsPagesMutex.Unlock()
	fake.ListSecretsPagesStub = stub
}

func (fake *FakeSMClient) ListSecretsPagesArgsForCall(i int) (*secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool) {
	fake.listSecretsPagesMutex.RLock()
	defer fake.listSecretsPagesMutex.RUnlock()
	argsForCall := fake.listSecretsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSMClient) ListSecretsPagesReturns(result1 error) {
	fake.listSecretsPagesMutex.Lock()
	defer fake.listSecretsPagesMutex.Unlock()
	fake.ListSecretsPagesStub = nil
	fake.listSecretsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretsPagesReturnsOnCall(i int, result1 error) {
	fake.listSecretsPagesMutex.Lock()
	defer fake.listSecretsPagesMutex.Unlock()
	fake.ListSecretsPagesStub = nil
	if fake.listSecretsPagesReturnsOnCall == nil {
		fake.listSecretsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSecretsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretsPagesWithContext(arg1 context.Context, arg2 *secretsmanager.ListSecretsInput, arg3 func(*secretsmanager.ListSecretsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listSecretsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listSecretsPagesWithContextReturnsOnCall[len(fake.listSecretsPagesWithContextArgsForCall)]
	fake.listSecretsPagesWithContextArgsForCall = append(fake.listSecretsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretsInput
		arg3 func(*secretsmanager.ListSecretsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListSecretsPagesWithContextStub
	fakeReturns := fake.listSecretsPagesWithContextReturns
	fake.recordInvocation("ListSecretsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listSecretsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSMClient) ListSecretsPagesWithContextCallCount() int {
	fake.listSecretsPagesWithContextMutex.RLock()
	defer fake.listSecretsPagesWithContextMutex.RUnlock()
	return len(fake.listSecretsPagesWithContextArgsForCall)
}

func (fake *FakeSMClient) ListSecretsPagesWithContextCalls(stub func(context.Context, *secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool, ...request.Option) error) {
	fake.listSecretsPagesWithContextMutex.Lock()
	defer fake.listSecretsPagesWithContextMutex.Unlock()
	fake.ListSecretsPagesWithContextStub = stub
}

func (fake *FakeSMClient) ListSecretsPagesWithContextArgsForCall(i int) (context.Context, *secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool, []request.Option) {
	fake.listSecretsPagesWithContextMutex.RLock()
	defer fake.listSecretsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listSecretsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSMClient) ListSecretsPagesWithContextReturns(result1 error) {
	fake.listSecretsPagesWithContextMutex.Lock()
	defer fake.listSecretsPagesWithContextMutex.Unlock()
	fake.ListSecretsPagesWithContextStub = nil
	fake.listSecretsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listSecretsPagesWithContextMutex.Lock()
	defer fake.listSecretsPagesWithContextMutex.Unlock()
	fake.ListSecretsPagesWithContextStub = nil
	if fake.listSecretsPagesWithContextReturnsOnCall == nil {
		fake.listSecretsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listSecretsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSMClient) ListSecretsRequest(arg1 *secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput) {
	fake.listSecretsRequestMutex.Lock()
	ret, specificReturn := fake.listSecretsRequestReturnsOnCall[len(fake.listSecretsRequestArgsForCall)]
	fake.listSecretsRequestArgsForCall = append(fake.listSecretsRequestArgsForCall, struct {
		arg1 *secretsmanager.ListSecretsInput
	}{arg1})
	stub := fake.ListSecretsRequestStub
	fakeReturns := fake.listSecretsRequestReturns
	fake.recordInvocation("ListSecretsRequest", []interface{}{arg1})
	fake.listSecretsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ListSecretsRequestCallCount() int {
	fake.listSecretsRequestMutex.RLock()
	defer fake.listSecretsRequestMutex.RUnlock()
	return len(fake.listSecretsRequestArgsForCall)
}

func (fake *FakeSMClient) ListSecretsRequestCalls(stub func(*secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput)) {
	fake.listSecretsRequestMutex.Lock()
	defer fake.listSecretsRequestMutex.Unlock()
	fake.ListSecretsRequestStub = stub
}

func (fake *FakeSMClient) ListSecretsRequestArgsForCall(i int) *secretsmanager.ListSecretsInput {
	fake.listSecretsRequestMutex.RLock()
	defer fake.listSecretsRequestMutex.RUnlock()
	argsForCall := fake.listSecretsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ListSecretsRequestReturns(result1 *request.Request, result2 *secretsmanager.ListSecretsOutput) {
	fake.listSecretsRequestMutex.Lock()
	defer fake.listSecretsRequestMutex.Unlock()
	fake.ListSecretsRequestStub = nil
	fake.listSecretsRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretsOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretsRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.ListSecretsOutput) {
	fake.listSecretsRequestMutex.Lock()
	defer fake.listSecretsRequestMutex.Unlock()
	fake.ListSecretsRequestStub = nil
	if fake.listSecretsRequestReturnsOnCall == nil {
		fake.listSecretsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.ListSecretsOutput
		})
	}
	fake.listSecretsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.ListSecretsOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretsWithContext(arg1 context.Context, arg2 *secretsmanager.ListSecretsInput, arg3 ...request.Option) (*secretsmanager.ListSecretsOutput, error) {
	fake.listSecretsWithContextMutex.Lock()
	ret, specificReturn := fake.listSecretsWithContextReturnsOnCall[len(fake.listSecretsWithContextArgsForCall)]
	fake.listSecretsWithContextArgsForCall = append(fake.listSecretsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.ListSecretsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListSecretsWithContextStub
	fakeReturns := fake.listSecretsWithContextReturns
	fake.recordInvocation("ListSecretsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listSecretsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ListSecretsWithContextCallCount() int {
	fake.listSecretsWithContextMutex.RLock()
	defer fake.listSecretsWithContextMutex.RUnlock()
	return len(fake.listSecretsWithContextArgsForCall)
}

func (fake *FakeSMClient) ListSecretsWithContextCalls(stub func(context.Context, *secretsmanager.ListSecretsInput, ...request.Option) (*secretsmanager.ListSecretsOutput, error)) {
	fake.listSecretsWithContextMutex.Lock()
	defer fake.listSecretsWithContextMutex.Unlock()
	fake.ListSecretsWithContextStub = stub
}

func (fake *FakeSMClient) ListSecretsWithContextArgsForCall(i int) (context.Context, *secretsmanager.ListSecretsInput, []request.Option) {
	fake.listSecretsWithContextMutex.RLock()
	defer fake.listSecretsWithContextMutex.RUnlock()
	argsForCall := fake.listSecretsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) ListSecretsWithContextReturns(result1 *secretsmanager.ListSecretsOutput, result2 error) {
	fake.listSecretsWithContextMutex.Lock()
	defer fake.listSecretsWithContextMutex.Unlock()
	fake.ListSecretsWithContextStub = nil
	fake.listSecretsWithContextReturns = struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ListSecretsWithContextReturnsOnCall(i int, result1 *secretsmanager.ListSecretsOutput, result2 error) {
	fake.listSecretsWithContextMutex.Lock()
	defer fake.listSecretsWithContextMutex.Unlock()
	fake.ListSecretsWithContextStub = nil
	if fake.listSecretsWithContextReturnsOnCall == nil {
		fake.listSecretsWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ListSecretsOutput
			result2 error
		})
	}
	fake.listSecretsWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.ListSecretsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutResourcePolicy(arg1 *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	fake.putResourcePolicyMutex.Lock()
	ret, specificReturn := fake.putResourcePolicyReturnsOnCall[len(fake.putResourcePolicyArgsForCall)]
	fake.putResourcePolicyArgsForCall = append(fake.putResourcePolicyArgsForCall, struct {
		arg1 *secretsmanager.PutResourcePolicyInput
	}{arg1})
	stub := fake.PutResourcePolicyStub
	fakeReturns := fake.putResourcePolicyReturns
	fake.recordInvocation("PutResourcePolicy", []interface{}{arg1})
	fake.putResourcePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) PutResourcePolicyCallCount() int {
	fake.putResourcePolicyMutex.RLock()
	defer fake.putResourcePolicyMutex.RUnlock()
	return len(fake.putResourcePolicyArgsForCall)
}

func (fake *FakeSMClient) PutResourcePolicyCalls(stub func(*secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error)) {
	fake.putResourcePolicyMutex.Lock()
	defer fake.putResourcePolicyMutex.Unlock()
	fake.PutResourcePolicyStub = stub
}

func (fake *FakeSMClient) PutResourcePolicyArgsForCall(i int) *secretsmanager.PutResourcePolicyInput {
	fake.putResourcePolicyMutex.RLock()
	defer fake.putResourcePolicyMutex.RUnlock()
	argsForCall := fake.putResourcePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) PutResourcePolicyReturns(result1 *secretsmanager.PutResourcePolicyOutput, result2 error) {
	fake.putResourcePolicyMutex.Lock()
	defer fake.putResourcePolicyMutex.Unlock()
	fake.PutResourcePolicyStub = nil
	fake.putResourcePolicyReturns = struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutResourcePolicyReturnsOnCall(i int, result1 *secretsmanager.PutResourcePolicyOutput, result2 error) {
	fake.putResourcePolicyMutex.Lock()
	defer fake.putResourcePolicyMutex.Unlock()
	fake.PutResourcePolicyStub = nil
	if fake.putResourcePolicyReturnsOnCall == nil {
		fake.putResourcePolicyReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.PutResourcePolicyOutput
			result2 error
		})
	}
	fake.putResourcePolicyReturnsOnCall[i] = struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutResourcePolicyRequest(arg1 *secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput) {
	fake.putResourcePolicyRequestMutex.Lock()
	ret, specificReturn := fake.putResourcePolicyRequestReturnsOnCall[len(fake.putResourcePolicyRequestArgsForCall)]
	fake.putResourcePolicyRequestArgsForCall = append(fake.putResourcePolicyRequestArgsForCall, struct {
		arg1 *secretsmanager.PutResourcePolicyInput
	}{arg1})
	stub := fake.PutResourcePolicyRequestStub
	fakeReturns := fake.putResourcePolicyRequestReturns
	fake.recordInvocation("PutResourcePolicyRequest", []interface{}{arg1})
	fake.putResourcePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) PutResourcePolicyRequestCallCount() int {
	fake.putResourcePolicyRequestMutex.RLock()
	defer fake.putResourcePolicyRequestMutex.RUnlock()
	return len(fake.putResourcePolicyRequestArgsForCall)
}

func (fake *FakeSMClient) PutResourcePolicyRequestCalls(stub func(*secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput)) {
	fake.putResourcePolicyRequestMutex.Lock()
	defer fake.putResourcePolicyRequestMutex.Unlock()
	fake.PutResourcePolicyRequestStub = stub
}

func (fake *FakeSMClient) PutResourcePolicyRequestArgsForCall(i int) *secretsmanager.PutResourcePolicyInput {
	fake.putResourcePolicyRequestMutex.RLock()
	defer fake.putResourcePolicyRequestMutex.RUnlock()
	argsForCall := fake.putResourcePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) PutResourcePolicyRequestReturns(result1 *request.Request, result2 *secretsmanager.PutResourcePolicyOutput) {
	fake.putResourcePolicyRequestMutex.Lock()
	defer fake.putResourcePolicyRequestMutex.Unlock()
	fake.PutResourcePolicyRequestStub = nil
	fake.putResourcePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.PutResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) PutResourcePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.PutResourcePolicyOutput) {
	fake.putResourcePolicyRequestMutex.Lock()
	defer fake.putResourcePolicyRequestMutex.Unlock()
	fake.PutResourcePolicyRequestStub = nil
	if fake.putResourcePolicyRequestReturnsOnCall == nil {
		fake.putResourcePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.PutResourcePolicyOutput
		})
	}
	fake.putResourcePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.PutResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) PutResourcePolicyWithContext(arg1 context.Context, arg2 *secretsmanager.PutResourcePolicyInput, arg3 ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error) {
	fake.putResourcePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.putResourcePolicyWithContextReturnsOnCall[len(fake.putResourcePolicyWithContextArgsForCall)]
	fake.putResourcePolicyWithContextArgsForCall = append(fake.putResourcePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.PutResourcePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutResourcePolicyWithContextStub
	fakeReturns := fake.putResourcePolicyWithContextReturns
	fake.recordInvocation("PutResourcePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.putResourcePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) PutResourcePolicyWithContextCallCount() int {
	fake.putResourcePolicyWithContextMutex.RLock()
	defer fake.putResourcePolicyWithContextMutex.RUnlock()
	return len(fake.putResourcePolicyWithContextArgsForCall)
}

func (fake *FakeSMClient) PutResourcePolicyWithContextCalls(stub func(context.Context, *secretsmanager.PutResourcePolicyInput, ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error)) {
	fake.putResourcePolicyWithContextMutex.Lock()
	defer fake.putResourcePolicyWithContextMutex.Unlock()
	fake.PutResourcePolicyWithContextStub = stub
}

func (fake *FakeSMClient) PutResourcePolicyWithContextArgsForCall(i int) (context.Context, *secretsmanager.PutResourcePolicyInput, []request.Option) {
	fake.putResourcePolicyWithContextMutex.RLock()
	defer fake.putResourcePolicyWithContextMutex.RUnlock()
	argsForCall := fake.putResourcePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) PutResourcePolicyWithContextReturns(result1 *secretsmanager.PutResourcePolicyOutput, result2 error) {
	fake.putResourcePolicyWithContextMutex.Lock()
	defer fake.putResourcePolicyWithContextMutex.Unlock()
	fake.PutResourcePolicyWithContextStub = nil
	fake.putResourcePolicyWithContextReturns = struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutResourcePolicyWithContextReturnsOnCall(i int, result1 *secretsmanager.PutResourcePolicyOutput, result2 error) {
	fake.putResourcePolicyWithContextMutex.Lock()
	defer fake.putResourcePolicyWithContextMutex.Unlock()
	fake.PutResourcePolicyWithContextStub = nil
	if fake.putResourcePolicyWithContextReturnsOnCall == nil {
		fake.putResourcePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.PutResourcePolicyOutput
			result2 error
		})
	}
	fake.putResourcePolicyWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.PutResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutSecretValue(arg1 *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	fake.putSecretValueMutex.Lock()
	ret, specificReturn := fake.putSecretValueReturnsOnCall[len(fake.putSecretValueArgsForCall)]
	fake.putSecretValueArgsForCall = append(fake.putSecretValueArgsForCall, struct {
		arg1 *secretsmanager.PutSecretValueInput
	}{arg1})
	stub := fake.PutSecretValueStub
	fakeReturns := fake.putSecretValueReturns
	fake.recordInvocation("PutSecretValue", []interface{}{arg1})
	fake.putSecretValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) PutSecretValueCallCount() int {
	fake.putSecretValueMutex.RLock()
	defer fake.putSecretValueMutex.RUnlock()
	return len(fake.putSecretValueArgsForCall)
}

func (fake *FakeSMClient) PutSecretValueCalls(stub func(*secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error)) {
	fake.putSecretValueMutex.Lock()
	defer fake.putSecretValueMutex.Unlock()
	fake.PutSecretValueStub = stub
}

func (fake *FakeSMClient) PutSecretValueArgsForCall(i int) *secretsmanager.PutSecretValueInput {
	fake.putSecretValueMutex.RLock()
	defer fake.putSecretValueMutex.RUnlock()
	argsForCall := fake.putSecretValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) PutSecretValueReturns(result1 *secretsmanager.PutSecretValueOutput, result2 error) {
	fake.putSecretValueMutex.Lock()
	defer fake.putSecretValueMutex.Unlock()
	fake.PutSecretValueStub = nil
	fake.putSecretValueReturns = struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutSecretValueReturnsOnCall(i int, result1 *secretsmanager.PutSecretValueOutput, result2 error) {
	fake.putSecretValueMutex.Lock()
	defer fake.putSecretValueMutex.Unlock()
	fake.PutSecretValueStub = nil
	if fake.putSecretValueReturnsOnCall == nil {
		fake.putSecretValueReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.PutSecretValueOutput
			result2 error
		})
	}
	fake.putSecretValueReturnsOnCall[i] = struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutSecretValueRequest(arg1 *secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput) {
	fake.putSecretValueRequestMutex.Lock()
	ret, specificReturn := fake.putSecretValueRequestReturnsOnCall[len(fake.putSecretValueRequestArgsForCall)]
	fake.putSecretValueRequestArgsForCall = append(fake.putSecretValueRequestArgsForCall, struct {
		arg1 *secretsmanager.PutSecretValueInput
	}{arg1})
	stub := fake.PutSecretValueRequestStub
	fakeReturns := fake.putSecretValueRequestReturns
	fake.recordInvocation("PutSecretValueRequest", []interface{}{arg1})
	fake.putSecretValueRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) PutSecretValueRequestCallCount() int {
	fake.putSecretValueRequestMutex.RLock()
	defer fake.putSecretValueRequestMutex.RUnlock()
	return len(fake.putSecretValueRequestArgsForCall)
}

func (fake *FakeSMClient) PutSecretValueRequestCalls(stub func(*secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput)) {
	fake.putSecretValueRequestMutex.Lock()
	defer fake.putSecretValueRequestMutex.Unlock()
	fake.PutSecretValueRequestStub = stub
}

func (fake *FakeSMClient) PutSecretValueRequestArgsForCall(i int) *secretsmanager.PutSecretValueInput {
	fake.putSecretValueRequestMutex.RLock()
	defer fake.putSecretValueRequestMutex.RUnlock()
	argsForCall := fake.putSecretValueRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) PutSecretValueRequestReturns(result1 *request.Request, result2 *secretsmanager.PutSecretValueOutput) {
	fake.putSecretValueRequestMutex.Lock()
	defer fake.putSecretValueRequestMutex.Unlock()
	fake.PutSecretValueRequestStub = nil
	fake.putSecretValueRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.PutSecretValueOutput
	}{result1, result2}
}

func (fake *FakeSMClient) PutSecretValueRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.PutSecretValueOutput) {
	fake.putSecretValueRequestMutex.Lock()
	defer fake.putSecretValueRequestMutex.Unlock()
	fake.PutSecretValueRequestStub = nil
	if fake.putSecretValueRequestReturnsOnCall == nil {
		fake.putSecretValueRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.PutSecretValueOutput
		})
	}
	fake.putSecretValueRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.PutSecretValueOutput
	}{result1, result2}
}

func (fake *FakeSMClient) PutSecretValueWithContext(arg1 context.Context, arg2 *secretsmanager.PutSecretValueInput, arg3 ...request.Option) (*secretsmanager.PutSecretValueOutput, error) {
	fake.putSecretValueWithContextMutex.Lock()
	ret, specificReturn := fake.putSecretValueWithContextReturnsOnCall[len(fake.putSecretValueWithContextArgsForCall)]
	fake.putSecretValueWithContextArgsForCall = append(fake.putSecretValueWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.PutSecretValueInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PutSecretValueWithContextStub
	fakeReturns := fake.putSecretValueWithContextReturns
	fake.recordInvocation("PutSecretValueWithContext", []interface{}{arg1, arg2, arg3})
	fake.putSecretValueWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) PutSecretValueWithContextCallCount() int {
	fake.putSecretValueWithContextMutex.RLock()
	defer fake.putSecretValueWithContextMutex.RUnlock()
	return len(fake.putSecretValueWithContextArgsForCall)
}

func (fake *FakeSMClient) PutSecretValueWithContextCalls(stub func(context.Context, *secretsmanager.PutSecretValueInput, ...request.Option) (*secretsmanager.PutSecretValueOutput, error)) {
	fake.putSecretValueWithContextMutex.Lock()
	defer fake.putSecretValueWithContextMutex.Unlock()
	fake.PutSecretValueWithContextStub = stub
}

func (fake *FakeSMClient) PutSecretValueWithContextArgsForCall(i int) (context.Context, *secretsmanager.PutSecretValueInput, []request.Option) {
	fake.putSecretValueWithContextMutex.RLock()
	defer fake.putSecretValueWithContextMutex.RUnlock()
	argsForCall := fake.putSecretValueWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) PutSecretValueWithContextReturns(result1 *secretsmanager.PutSecretValueOutput, result2 error) {
	fake.putSecretValueWithContextMutex.Lock()
	defer fake.putSecretValueWithContextMutex.Unlock()
	fake.PutSecretValueWithContextStub = nil
	fake.putSecretValueWithContextReturns = struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) PutSecretValueWithContextReturnsOnCall(i int, result1 *secretsmanager.PutSecretValueOutput, result2 error) {
	fake.putSecretValueWithContextMutex.Lock()
	defer fake.putSecretValueWithContextMutex.Unlock()
	fake.PutSecretValueWithContextStub = nil
	if fake.putSecretValueWithContextReturnsOnCall == nil {
		fake.putSecretValueWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.PutSecretValueOutput
			result2 error
		})
	}
	fake.putSecretValueWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.PutSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RemoveRegionsFromReplication(arg1 *secretsmanager.RemoveRegionsFromReplicationInput) (*secretsmanager.RemoveRegionsFromReplicationOutput, error) {
	fake.removeRegionsFromReplicationMutex.Lock()
	ret, specificReturn := fake.removeRegionsFromReplicationReturnsOnCall[len(fake.removeRegionsFromReplicationArgsForCall)]
	fake.removeRegionsFromReplicationArgsForCall = append(fake.removeRegionsFromReplicationArgsForCall, struct {
		arg1 *secretsmanager.RemoveRegionsFromReplicationInput
	}{arg1})
	stub := fake.RemoveRegionsFromReplicationStub
	fakeReturns := fake.removeRegionsFromReplicationReturns
	fake.recordInvocation("RemoveRegionsFromReplication", []interface{}{arg1})
	fake.removeRegionsFromReplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationCallCount() int {
	fake.removeRegionsFromReplicationMutex.RLock()
	defer fake.removeRegionsFromReplicationMutex.RUnlock()
	return len(fake.removeRegionsFromReplicationArgsForCall)
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationCalls(stub func(*secretsmanager.RemoveRegionsFromReplicationInput) (*secretsmanager.RemoveRegionsFromReplicationOutput, error)) {
	fake.removeRegionsFromReplicationMutex.Lock()
	defer fake.removeRegionsFromReplicationMutex.Unlock()
	fake.RemoveRegionsFromReplicationStub = stub
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationArgsForCall(i int) *secretsmanager.RemoveRegionsFromReplicationInput {
	fake.removeRegionsFromReplicationMutex.RLock()
	defer fake.removeRegionsFromReplicationMutex.RUnlock()
	argsForCall := fake.removeRegionsFromReplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationReturns(result1 *secretsmanager.RemoveRegionsFromReplicationOutput, result2 error) {
	fake.removeRegionsFromReplicationMutex.Lock()
	defer fake.removeRegionsFromReplicationMutex.Unlock()
	fake.RemoveRegionsFromReplicationStub = nil
	fake.removeRegionsFromReplicationReturns = struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationReturnsOnCall(i int, result1 *secretsmanager.RemoveRegionsFromReplicationOutput, result2 error) {
	fake.removeRegionsFromReplicationMutex.Lock()
	defer fake.removeRegionsFromReplicationMutex.Unlock()
	fake.RemoveRegionsFromReplicationStub = nil
	if fake.removeRegionsFromReplicationReturnsOnCall == nil {
		fake.removeRegionsFromReplicationReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.RemoveRegionsFromReplicationOutput
			result2 error
		})
	}
	fake.removeRegionsFromReplicationReturnsOnCall[i] = struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationRequest(arg1 *secretsmanager.RemoveRegionsFromReplicationInput) (*request.Request, *secretsmanager.RemoveRegionsFromReplicationOutput) {
	fake.removeRegionsFromReplicationRequestMutex.Lock()
	ret, specificReturn := fake.removeRegionsFromReplicationRequestReturnsOnCall[len(fake.removeRegionsFromReplicationRequestArgsForCall)]
	fake.removeRegionsFromReplicationRequestArgsForCall = append(fake.removeRegionsFromReplicationRequestArgsForCall, struct {
		arg1 *secretsmanager.RemoveRegionsFromReplicationInput
	}{arg1})
	stub := fake.RemoveRegionsFromReplicationRequestStub
	fakeReturns := fake.removeRegionsFromReplicationRequestReturns
	fake.recordInvocation("RemoveRegionsFromReplicationRequest", []interface{}{arg1})
	fake.removeRegionsFromReplicationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationRequestCallCount() int {
	fake.removeRegionsFromReplicationRequestMutex.RLock()
	defer fake.removeRegionsFromReplicationRequestMutex.RUnlock()
	return len(fake.removeRegionsFromReplicationRequestArgsForCall)
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationRequestCalls(stub func(*secretsmanager.RemoveRegionsFromReplicationInput) (*request.Request, *secretsmanager.RemoveRegionsFromReplicationOutput)) {
	fake.removeRegionsFromReplicationRequestMutex.Lock()
	defer fake.removeRegionsFromReplicationRequestMutex.Unlock()
	fake.RemoveRegionsFromReplicationRequestStub = stub
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationRequestArgsForCall(i int) *secretsmanager.RemoveRegionsFromReplicationInput {
	fake.removeRegionsFromReplicationRequestMutex.RLock()
	defer fake.removeRegionsFromReplicationRequestMutex.RUnlock()
	argsForCall := fake.removeRegionsFromReplicationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationRequestReturns(result1 *request.Request, result2 *secretsmanager.RemoveRegionsFromReplicationOutput) {
	fake.removeRegionsFromReplicationRequestMutex.Lock()
	defer fake.removeRegionsFromReplicationRequestMutex.Unlock()
	fake.RemoveRegionsFromReplicationRequestStub = nil
	fake.removeRegionsFromReplicationRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.RemoveRegionsFromReplicationOutput
	}{result1, result2}
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.RemoveRegionsFromReplicationOutput) {
	fake.removeRegionsFromReplicationRequestMutex.Lock()
	defer fake.removeRegionsFromReplicationRequestMutex.Unlock()
	fake.RemoveRegionsFromReplicationRequestStub = nil
	if fake.removeRegionsFromReplicationRequestReturnsOnCall == nil {
		fake.removeRegionsFromReplicationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.RemoveRegionsFromReplicationOutput
		})
	}
	fake.removeRegionsFromReplicationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.RemoveRegionsFromReplicationOutput
	}{result1, result2}
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationWithContext(arg1 context.Context, arg2 *secretsmanager.RemoveRegionsFromReplicationInput, arg3 ...request.Option) (*secretsmanager.RemoveRegionsFromReplicationOutput, error) {
	fake.removeRegionsFromReplicationWithContextMutex.Lock()
	ret, specificReturn := fake.removeRegionsFromReplicationWithContextReturnsOnCall[len(fake.removeRegionsFromReplicationWithContextArgsForCall)]
	fake.removeRegionsFromReplicationWithContextArgsForCall = append(fake.removeRegionsFromReplicationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.RemoveRegionsFromReplicationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveRegionsFromReplicationWithContextStub
	fakeReturns := fake.removeRegionsFromReplicationWithContextReturns
	fake.recordInvocation("RemoveRegionsFromReplicationWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeRegionsFromReplicationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationWithContextCallCount() int {
	fake.removeRegionsFromReplicationWithContextMutex.RLock()
	defer fake.removeRegionsFromReplicationWithContextMutex.RUnlock()
	return len(fake.removeRegionsFromReplicationWithContextArgsForCall)
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationWithContextCalls(stub func(context.Context, *secretsmanager.RemoveRegionsFromReplicationInput, ...request.Option) (*secretsmanager.RemoveRegionsFromReplicationOutput, error)) {
	fake.removeRegionsFromReplicationWithContextMutex.Lock()
	defer fake.removeRegionsFromReplicationWithContextMutex.Unlock()
	fake.RemoveRegionsFromReplicationWithContextStub = stub
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationWithContextArgsForCall(i int) (context.Context, *secretsmanager.RemoveRegionsFromReplicationInput, []request.Option) {
	fake.removeRegionsFromReplicationWithContextMutex.RLock()
	defer fake.removeRegionsFromReplicationWithContextMutex.RUnlock()
	argsForCall := fake.removeRegionsFromReplicationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationWithContextReturns(result1 *secretsmanager.RemoveRegionsFromReplicationOutput, result2 error) {
	fake.removeRegionsFromReplicationWithContextMutex.Lock()
	defer fake.removeRegionsFromReplicationWithContextMutex.Unlock()
	fake.RemoveRegionsFromReplicationWithContextStub = nil
	fake.removeRegionsFromReplicationWithContextReturns = struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RemoveRegionsFromReplicationWithContextReturnsOnCall(i int, result1 *secretsmanager.RemoveRegionsFromReplicationOutput, result2 error) {
	fake.removeRegionsFromReplicationWithContextMutex.Lock()
	defer fake.removeRegionsFromReplicationWithContextMutex.Unlock()
	fake.RemoveRegionsFromReplicationWithContextStub = nil
	if fake.removeRegionsFromReplicationWithContextReturnsOnCall == nil {
		fake.removeRegionsFromReplicationWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.RemoveRegionsFromReplicationOutput
			result2 error
		})
	}
	fake.removeRegionsFromReplicationWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.RemoveRegionsFromReplicationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ReplicateSecretToRegions(arg1 *secretsmanager.ReplicateSecretToRegionsInput) (*secretsmanager.ReplicateSecretToRegionsOutput, error) {
	fake.replicateSecretToRegionsMutex.Lock()
	ret, specificReturn := fake.replicateSecretToRegionsReturnsOnCall[len(fake.replicateSecretToRegionsArgsForCall)]
	fake.replicateSecretToRegionsArgsForCall = append(fake.replicateSecretToRegionsArgsForCall, struct {
		arg1 *secretsmanager.ReplicateSecretToRegionsInput
	}{arg1})
	stub := fake.ReplicateSecretToRegionsStub
	fakeReturns := fake.replicateSecretToRegionsReturns
	fake.recordInvocation("ReplicateSecretToRegions", []interface{}{arg1})
	fake.replicateSecretToRegionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ReplicateSecretToRegionsCallCount() int {
	fake.replicateSecretToRegionsMutex.RLock()
	defer fake.replicateSecretToRegionsMutex.RUnlock()
	return len(fake.replicateSecretToRegionsArgsForCall)
}

func (fake *FakeSMClient) ReplicateSecretToRegionsCalls(stub func(*secretsmanager.ReplicateSecretToRegionsInput) (*secretsmanager.ReplicateSecretToRegionsOutput, error)) {
	fake.replicateSecretToRegionsMutex.Lock()
	defer fake.replicateSecretToRegionsMutex.Unlock()
	fake.ReplicateSecretToRegionsStub = stub
}

func (fake *FakeSMClient) ReplicateSecretToRegionsArgsForCall(i int) *secretsmanager.ReplicateSecretToRegionsInput {
	fake.replicateSecretToRegionsMutex.RLock()
	defer fake.replicateSecretToRegionsMutex.RUnlock()
	argsForCall := fake.replicateSecretToRegionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ReplicateSecretToRegionsReturns(result1 *secretsmanager.ReplicateSecretToRegionsOutput, result2 error) {
	fake.replicateSecretToRegionsMutex.Lock()
	defer fake.replicateSecretToRegionsMutex.Unlock()
	fake.ReplicateSecretToRegionsStub = nil
	fake.replicateSecretToRegionsReturns = struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ReplicateSecretToRegionsReturnsOnCall(i int, result1 *secretsmanager.ReplicateSecretToRegionsOutput, result2 error) {
	fake.replicateSecretToRegionsMutex.Lock()
	defer fake.replicateSecretToRegionsMutex.Unlock()
	fake.ReplicateSecretToRegionsStub = nil
	if fake.replicateSecretToRegionsReturnsOnCall == nil {
		fake.replicateSecretToRegionsReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ReplicateSecretToRegionsOutput
			result2 error
		})
	}
	fake.replicateSecretToRegionsReturnsOnCall[i] = struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ReplicateSecretToRegionsRequest(arg1 *secretsmanager.ReplicateSecretToRegionsInput) (*request.Request, *secretsmanager.ReplicateSecretToRegionsOutput) {
	fake.replicateSecretToRegionsRequestMutex.Lock()
	ret, specificReturn := fake.replicateSecretToRegionsRequestReturnsOnCall[len(fake.replicateSecretToRegionsRequestArgsForCall)]
	fake.replicateSecretToRegionsRequestArgsForCall = append(fake.replicateSecretToRegionsRequestArgsForCall, struct {
		arg1 *secretsmanager.ReplicateSecretToRegionsInput
	}{arg1})
	stub := fake.ReplicateSecretToRegionsRequestStub
	fakeReturns := fake.replicateSecretToRegionsRequestReturns
	fake.recordInvocation("ReplicateSecretToRegionsRequest", []interface{}{arg1})
	fake.replicateSecretToRegionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ReplicateSecretToRegionsRequestCallCount() int {
	fake.replicateSecretToRegionsRequestMutex.RLock()
	defer fake.replicateSecretToRegionsRequestMutex.RUnlock()
	return len(fake.replicateSecretToRegionsRequestArgsForCall)
}

func (fake *FakeSMClient) ReplicateSecretToRegionsRequestCalls(stub func(*secretsmanager.ReplicateSecretToRegionsInput) (*request.Request, *secretsmanager.ReplicateSecretToRegionsOutput)) {
	fake.replicateSecretToRegionsRequestMutex.Lock()
	defer fake.replicateSecretToRegionsRequestMutex.Unlock()
	fake.ReplicateSecretToRegionsRequestStub = stub
}

func (fake *FakeSMClient) ReplicateSecretToRegionsRequestArgsForCall(i int) *secretsmanager.ReplicateSecretToRegionsInput {
	fake.replicateSecretToRegionsRequestMutex.RLock()
	defer fake.replicateSecretToRegionsRequestMutex.RUnlock()
	argsForCall := fake.replicateSecretToRegionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ReplicateSecretToRegionsRequestReturns(result1 *request.Request, result2 *secretsmanager.ReplicateSecretToRegionsOutput) {
	fake.replicateSecretToRegionsRequestMutex.Lock()
	defer fake.replicateSecretToRegionsRequestMutex.Unlock()
	fake.ReplicateSecretToRegionsRequestStub = nil
	fake.replicateSecretToRegionsRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.ReplicateSecretToRegionsOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ReplicateSecretToRegionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.ReplicateSecretToRegionsOutput) {
	fake.replicateSecretToRegionsRequestMutex.Lock()
	defer fake.replicateSecretToRegionsRequestMutex.Unlock()
	fake.ReplicateSecretToRegionsRequestStub = nil
	if fake.replicateSecretToRegionsRequestReturnsOnCall == nil {
		fake.replicateSecretToRegionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.ReplicateSecretToRegionsOutput
		})
	}
	fake.replicateSecretToRegionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.ReplicateSecretToRegionsOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ReplicateSecretToRegionsWithContext(arg1 context.Context, arg2 *secretsmanager.ReplicateSecretToRegionsInput, arg3 ...request.Option) (*secretsmanager.ReplicateSecretToRegionsOutput, error) {
	fake.replicateSecretToRegionsWithContextMutex.Lock()
	ret, specificReturn := fake.replicateSecretToRegionsWithContextReturnsOnCall[len(fake.replicateSecretToRegionsWithContextArgsForCall)]
	fake.replicateSecretToRegionsWithContextArgsForCall = append(fake.replicateSecretToRegionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.ReplicateSecretToRegionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ReplicateSecretToRegionsWithContextStub
	fakeReturns := fake.replicateSecretToRegionsWithContextReturns
	fake.recordInvocation("ReplicateSecretToRegionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.replicateSecretToRegionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ReplicateSecretToRegionsWithContextCallCount() int {
	fake.replicateSecretToRegionsWithContextMutex.RLock()
	defer fake.replicateSecretToRegionsWithContextMutex.RUnlock()
	return len(fake.replicateSecretToRegionsWithContextArgsForCall)
}

func (fake *FakeSMClient) ReplicateSecretToRegionsWithContextCalls(stub func(context.Context, *secretsmanager.ReplicateSecretToRegionsInput, ...request.Option) (*secretsmanager.ReplicateSecretToRegionsOutput, error)) {
	fake.replicateSecretToRegionsWithContextMutex.Lock()
	defer fake.replicateSecretToRegionsWithContextMutex.Unlock()
	fake.ReplicateSecretToRegionsWithContextStub = stub
}

func (fake *FakeSMClient) ReplicateSecretToRegionsWithContextArgsForCall(i int) (context.Context, *secretsmanager.ReplicateSecretToRegionsInput, []request.Option) {
	fake.replicateSecretToRegionsWithContextMutex.RLock()
	defer fake.replicateSecretToRegionsWithContextMutex.RUnlock()
	argsForCall := fake.replicateSecretToRegionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) ReplicateSecretToRegionsWithContextReturns(result1 *secretsmanager.ReplicateSecretToRegionsOutput, result2 error) {
	fake.replicateSecretToRegionsWithContextMutex.Lock()
	defer fake.replicateSecretToRegionsWithContextMutex.Unlock()
	fake.ReplicateSecretToRegionsWithContextStub = nil
	fake.replicateSecretToRegionsWithContextReturns = struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ReplicateSecretToRegionsWithContextReturnsOnCall(i int, result1 *secretsmanager.ReplicateSecretToRegionsOutput, result2 error) {
	fake.replicateSecretToRegionsWithContextMutex.Lock()
	defer fake.replicateSecretToRegionsWithContextMutex.Unlock()
	fake.ReplicateSecretToRegionsWithContextStub = nil
	if fake.replicateSecretToRegionsWithContextReturnsOnCall == nil {
		fake.replicateSecretToRegionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ReplicateSecretToRegionsOutput
			result2 error
		})
	}
	fake.replicateSecretToRegionsWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.ReplicateSecretToRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RestoreSecret(arg1 *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	fake.restoreSecretMutex.Lock()
	ret, specificReturn := fake.restoreSecretReturnsOnCall[len(fake.restoreSecretArgsForCall)]
	fake.restoreSecretArgsForCall = append(fake.restoreSecretArgsForCall, struct {
		arg1 *secretsmanager.RestoreSecretInput
	}{arg1})
	stub := fake.RestoreSecretStub
	fakeReturns := fake.restoreSecretReturns
	fake.recordInvocation("RestoreSecret", []interface{}{arg1})
	fake.restoreSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RestoreSecretCallCount() int {
	fake.restoreSecretMutex.RLock()
	defer fake.restoreSecretMutex.RUnlock()
	return len(fake.restoreSecretArgsForCall)
}

func (fake *FakeSMClient) RestoreSecretCalls(stub func(*secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error)) {
	fake.restoreSecretMutex.Lock()
	defer fake.restoreSecretMutex.Unlock()
	fake.RestoreSecretStub = stub
}

func (fake *FakeSMClient) RestoreSecretArgsForCall(i int) *secretsmanager.RestoreSecretInput {
	fake.restoreSecretMutex.RLock()
	defer fake.restoreSecretMutex.RUnlock()
	argsForCall := fake.restoreSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) RestoreSecretReturns(result1 *secretsmanager.RestoreSecretOutput, result2 error) {
	fake.restoreSecretMutex.Lock()
	defer fake.restoreSecretMutex.Unlock()
	fake.RestoreSecretStub = nil
	fake.restoreSecretReturns = struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RestoreSecretReturnsOnCall(i int, result1 *secretsmanager.RestoreSecretOutput, result2 error) {
	fake.restoreSecretMutex.Lock()
	defer fake.restoreSecretMutex.Unlock()
	fake.RestoreSecretStub = nil
	if fake.restoreSecretReturnsOnCall == nil {
		fake.restoreSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.RestoreSecretOutput
			result2 error
		})
	}
	fake.restoreSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RestoreSecretRequest(arg1 *secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput) {
	fake.restoreSecretRequestMutex.Lock()
	ret, specificReturn := fake.restoreSecretRequestReturnsOnCall[len(fake.restoreSecretRequestArgsForCall)]
	fake.restoreSecretRequestArgsForCall = append(fake.restoreSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.RestoreSecretInput
	}{arg1})
	stub := fake.RestoreSecretRequestStub
	fakeReturns := fake.restoreSecretRequestReturns
	fake.recordInvocation("RestoreSecretRequest", []interface{}{arg1})
	fake.restoreSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RestoreSecretRequestCallCount() int {
	fake.restoreSecretRequestMutex.RLock()
	defer fake.restoreSecretRequestMutex.RUnlock()
	return len(fake.restoreSecretRequestArgsForCall)
}

func (fake *FakeSMClient) RestoreSecretRequestCalls(stub func(*secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput)) {
	fake.restoreSecretRequestMutex.Lock()
	defer fake.restoreSecretRequestMutex.Unlock()
	fake.RestoreSecretRequestStub = stub
}

func (fake *FakeSMClient) RestoreSecretRequestArgsForCall(i int) *secretsmanager.RestoreSecretInput {
	fake.restoreSecretRequestMutex.RLock()
	defer fake.restoreSecretRequestMutex.RUnlock()
	argsForCall := fake.restoreSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) RestoreSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.RestoreSecretOutput) {
	fake.restoreSecretRequestMutex.Lock()
	defer fake.restoreSecretRequestMutex.Unlock()
	fake.RestoreSecretRequestStub = nil
	fake.restoreSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.RestoreSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) RestoreSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.RestoreSecretOutput) {
	fake.restoreSecretRequestMutex.Lock()
	defer fake.restoreSecretRequestMutex.Unlock()
	fake.RestoreSecretRequestStub = nil
	if fake.restoreSecretRequestReturnsOnCall == nil {
		fake.restoreSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.RestoreSecretOutput
		})
	}
	fake.restoreSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.RestoreSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) RestoreSecretWithContext(arg1 context.Context, arg2 *secretsmanager.RestoreSecretInput, arg3 ...request.Option) (*secretsmanager.RestoreSecretOutput, error) {
	fake.restoreSecretWithContextMutex.Lock()
	ret, specificReturn := fake.restoreSecretWithContextReturnsOnCall[len(fake.restoreSecretWithContextArgsForCall)]
	fake.restoreSecretWithContextArgsForCall = append(fake.restoreSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.RestoreSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RestoreSecretWithContextStub
	fakeReturns := fake.restoreSecretWithContextReturns
	fake.recordInvocation("RestoreSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RestoreSecretWithContextCallCount() int {
	fake.restoreSecretWithContextMutex.RLock()
	defer fake.restoreSecretWithContextMutex.RUnlock()
	return len(fake.restoreSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) RestoreSecretWithContextCalls(stub func(context.Context, *secretsmanager.RestoreSecretInput, ...request.Option) (*secretsmanager.RestoreSecretOutput, error)) {
	fake.restoreSecretWithContextMutex.Lock()
	defer fake.restoreSecretWithContextMutex.Unlock()
	fake.RestoreSecretWithContextStub = stub
}

func (fake *FakeSMClient) RestoreSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.RestoreSecretInput, []request.Option) {
	fake.restoreSecretWithContextMutex.RLock()
	defer fake.restoreSecretWithContextMutex.RUnlock()
	argsForCall := fake.restoreSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) RestoreSecretWithContextReturns(result1 *secretsmanager.RestoreSecretOutput, result2 error) {
	fake.restoreSecretWithContextMutex.Lock()
	defer fake.restoreSecretWithContextMutex.Unlock()
	fake.RestoreSecretWithContextStub = nil
	fake.restoreSecretWithContextReturns = struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RestoreSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.RestoreSecretOutput, result2 error) {
	fake.restoreSecretWithContextMutex.Lock()
	defer fake.restoreSecretWithContextMutex.Unlock()
	fake.RestoreSecretWithContextStub = nil
	if fake.restoreSecretWithContextReturnsOnCall == nil {
		fake.restoreSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.RestoreSecretOutput
			result2 error
		})
	}
	fake.restoreSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.RestoreSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RotateSecret(arg1 *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	fake.rotateSecretMutex.Lock()
	ret, specificReturn := fake.rotateSecretReturnsOnCall[len(fake.rotateSecretArgsForCall)]
	fake.rotateSecretArgsForCall = append(fake.rotateSecretArgsForCall, struct {
		arg1 *secretsmanager.RotateSecretInput
	}{arg1})
	stub := fake.RotateSecretStub
	fakeReturns := fake.rotateSecretReturns
	fake.recordInvocation("RotateSecret", []interface{}{arg1})
	fake.rotateSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RotateSecretCallCount() int {
	fake.rotateSecretMutex.RLock()
	defer fake.rotateSecretMutex.RUnlock()
	return len(fake.rotateSecretArgsForCall)
}

func (fake *FakeSMClient) RotateSecretCalls(stub func(*secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error)) {
	fake.rotateSecretMutex.Lock()
	defer fake.rotateSecretMutex.Unlock()
	fake.RotateSecretStub = stub
}

func (fake *FakeSMClient) RotateSecretArgsForCall(i int) *secretsmanager.RotateSecretInput {
	fake.rotateSecretMutex.RLock()
	defer fake.rotateSecretMutex.RUnlock()
	argsForCall := fake.rotateSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) RotateSecretReturns(result1 *secretsmanager.RotateSecretOutput, result2 error) {
	fake.rotateSecretMutex.Lock()
	defer fake.rotateSecretMutex.Unlock()
	fake.RotateSecretStub = nil
	fake.rotateSecretReturns = struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RotateSecretReturnsOnCall(i int, result1 *secretsmanager.RotateSecretOutput, result2 error) {
	fake.rotateSecretMutex.Lock()
	defer fake.rotateSecretMutex.Unlock()
	fake.RotateSecretStub = nil
	if fake.rotateSecretReturnsOnCall == nil {
		fake.rotateSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.RotateSecretOutput
			result2 error
		})
	}
	fake.rotateSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RotateSecretRequest(arg1 *secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput) {
	fake.rotateSecretRequestMutex.Lock()
	ret, specificReturn := fake.rotateSecretRequestReturnsOnCall[len(fake.rotateSecretRequestArgsForCall)]
	fake.rotateSecretRequestArgsForCall = append(fake.rotateSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.RotateSecretInput
	}{arg1})
	stub := fake.RotateSecretRequestStub
	fakeReturns := fake.rotateSecretRequestReturns
	fake.recordInvocation("RotateSecretRequest", []interface{}{arg1})
	fake.rotateSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RotateSecretRequestCallCount() int {
	fake.rotateSecretRequestMutex.RLock()
	defer fake.rotateSecretRequestMutex.RUnlock()
	return len(fake.rotateSecretRequestArgsForCall)
}

func (fake *FakeSMClient) RotateSecretRequestCalls(stub func(*secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput)) {
	fake.rotateSecretRequestMutex.Lock()
	defer fake.rotateSecretRequestMutex.Unlock()
	fake.RotateSecretRequestStub = stub
}

func (fake *FakeSMClient) RotateSecretRequestArgsForCall(i int) *secretsmanager.RotateSecretInput {
	fake.rotateSecretRequestMutex.RLock()
	defer fake.rotateSecretRequestMutex.RUnlock()
	argsForCall := fake.rotateSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) RotateSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.RotateSecretOutput) {
	fake.rotateSecretRequestMutex.Lock()
	defer fake.rotateSecretRequestMutex.Unlock()
	fake.RotateSecretRequestStub = nil
	fake.rotateSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.RotateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) RotateSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.RotateSecretOutput) {
	fake.rotateSecretRequestMutex.Lock()
	defer fake.rotateSecretRequestMutex.Unlock()
	fake.RotateSecretRequestStub = nil
	if fake.rotateSecretRequestReturnsOnCall == nil {
		fake.rotateSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.RotateSecretOutput
		})
	}
	fake.rotateSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.RotateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) RotateSecretWithContext(arg1 context.Context, arg2 *secretsmanager.RotateSecretInput, arg3 ...request.Option) (*secretsmanager.RotateSecretOutput, error) {
	fake.rotateSecretWithContextMutex.Lock()
	ret, specificReturn := fake.rotateSecretWithContextReturnsOnCall[len(fake.rotateSecretWithContextArgsForCall)]
	fake.rotateSecretWithContextArgsForCall = append(fake.rotateSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.RotateSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RotateSecretWithContextStub
	fakeReturns := fake.rotateSecretWithContextReturns
	fake.recordInvocation("RotateSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.rotateSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) RotateSecretWithContextCallCount() int {
	fake.rotateSecretWithContextMutex.RLock()
	defer fake.rotateSecretWithContextMutex.RUnlock()
	return len(fake.rotateSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) RotateSecretWithContextCalls(stub func(context.Context, *secretsmanager.RotateSecretInput, ...request.Option) (*secretsmanager.RotateSecretOutput, error)) {
	fake.rotateSecretWithContextMutex.Lock()
	defer fake.rotateSecretWithContextMutex.Unlock()
	fake.RotateSecretWithContextStub = stub
}

func (fake *FakeSMClient) RotateSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.RotateSecretInput, []request.Option) {
	fake.rotateSecretWithContextMutex.RLock()
	defer fake.rotateSecretWithContextMutex.RUnlock()
	argsForCall := fake.rotateSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) RotateSecretWithContextReturns(result1 *secretsmanager.RotateSecretOutput, result2 error) {
	fake.rotateSecretWithContextMutex.Lock()
	defer fake.rotateSecretWithContextMutex.Unlock()
	fake.RotateSecretWithContextStub = nil
	fake.rotateSecretWithContextReturns = struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) RotateSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.RotateSecretOutput, result2 error) {
	fake.rotateSecretWithContextMutex.Lock()
	defer fake.rotateSecretWithContextMutex.Unlock()
	fake.RotateSecretWithContextStub = nil
	if fake.rotateSecretWithContextReturnsOnCall == nil {
		fake.rotateSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.RotateSecretOutput
			result2 error
		})
	}
	fake.rotateSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.RotateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) StopReplicationToReplica(arg1 *secretsmanager.StopReplicationToReplicaInput) (*secretsmanager.StopReplicationToReplicaOutput, error) {
	fake.stopReplicationToReplicaMutex.Lock()
	ret, specificReturn := fake.stopReplicationToReplicaReturnsOnCall[len(fake.stopReplicationToReplicaArgsForCall)]
	fake.stopReplicationToReplicaArgsForCall = append(fake.stopReplicationToReplicaArgsForCall, struct {
		arg1 *secretsmanager.StopReplicationToReplicaInput
	}{arg1})
	stub := fake.StopReplicationToReplicaStub
	fakeReturns := fake.stopReplicationToReplicaReturns
	fake.recordInvocation("StopReplicationToReplica", []interface{}{arg1})
	fake.stopReplicationToReplicaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) StopReplicationToReplicaCallCount() int {
	fake.stopReplicationToReplicaMutex.RLock()
	defer fake.stopReplicationToReplicaMutex.RUnlock()
	return len(fake.stopReplicationToReplicaArgsForCall)
}

func (fake *FakeSMClient) StopReplicationToReplicaCalls(stub func(*secretsmanager.StopReplicationToReplicaInput) (*secretsmanager.StopReplicationToReplicaOutput, error)) {
	fake.stopReplicationToReplicaMutex.Lock()
	defer fake.stopReplicationToReplicaMutex.Unlock()
	fake.StopReplicationToReplicaStub = stub
}

func (fake *FakeSMClient) StopReplicationToReplicaArgsForCall(i int) *secretsmanager.StopReplicationToReplicaInput {
	fake.stopReplicationToReplicaMutex.RLock()
	defer fake.stopReplicationToReplicaMutex.RUnlock()
	argsForCall := fake.stopReplicationToReplicaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) StopReplicationToReplicaReturns(result1 *secretsmanager.StopReplicationToReplicaOutput, result2 error) {
	fake.stopReplicationToReplicaMutex.Lock()
	defer fake.stopReplicationToReplicaMutex.Unlock()
	fake.StopReplicationToReplicaStub = nil
	fake.stopReplicationToReplicaReturns = struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) StopReplicationToReplicaReturnsOnCall(i int, result1 *secretsmanager.StopReplicationToReplicaOutput, result2 error) {
	fake.stopReplicationToReplicaMutex.Lock()
	defer fake.stopReplicationToReplicaMutex.Unlock()
	fake.StopReplicationToReplicaStub = nil
	if fake.stopReplicationToReplicaReturnsOnCall == nil {
		fake.stopReplicationToReplicaReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.StopReplicationToReplicaOutput
			result2 error
		})
	}
	fake.stopReplicationToReplicaReturnsOnCall[i] = struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) StopReplicationToReplicaRequest(arg1 *secretsmanager.StopReplicationToReplicaInput) (*request.Request, *secretsmanager.StopReplicationToReplicaOutput) {
	fake.stopReplicationToReplicaRequestMutex.Lock()
	ret, specificReturn := fake.stopReplicationToReplicaRequestReturnsOnCall[len(fake.stopReplicationToReplicaRequestArgsForCall)]
	fake.stopReplicationToReplicaRequestArgsForCall = append(fake.stopReplicationToReplicaRequestArgsForCall, struct {
		arg1 *secretsmanager.StopReplicationToReplicaInput
	}{arg1})
	stub := fake.StopReplicationToReplicaRequestStub
	fakeReturns := fake.stopReplicationToReplicaRequestReturns
	fake.recordInvocation("StopReplicationToReplicaRequest", []interface{}{arg1})
	fake.stopReplicationToReplicaRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) StopReplicationToReplicaRequestCallCount() int {
	fake.stopReplicationToReplicaRequestMutex.RLock()
	defer fake.stopReplicationToReplicaRequestMutex.RUnlock()
	return len(fake.stopReplicationToReplicaRequestArgsForCall)
}

func (fake *FakeSMClient) StopReplicationToReplicaRequestCalls(stub func(*secretsmanager.StopReplicationToReplicaInput) (*request.Request, *secretsmanager.StopReplicationToReplicaOutput)) {
	fake.stopReplicationToReplicaRequestMutex.Lock()
	defer fake.stopReplicationToReplicaRequestMutex.Unlock()
	fake.StopReplicationToReplicaRequestStub = stub
}

func (fake *FakeSMClient) StopReplicationToReplicaRequestArgsForCall(i int) *secretsmanager.StopReplicationToReplicaInput {
	fake.stopReplicationToReplicaRequestMutex.RLock()
	defer fake.stopReplicationToReplicaRequestMutex.RUnlock()
	argsForCall := fake.stopReplicationToReplicaRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) StopReplicationToReplicaRequestReturns(result1 *request.Request, result2 *secretsmanager.StopReplicationToReplicaOutput) {
	fake.stopReplicationToReplicaRequestMutex.Lock()
	defer fake.stopReplicationToReplicaRequestMutex.Unlock()
	fake.StopReplicationToReplicaRequestStub = nil
	fake.stopReplicationToReplicaRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.StopReplicationToReplicaOutput
	}{result1, result2}
}

func (fake *FakeSMClient) StopReplicationToReplicaRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.StopReplicationToReplicaOutput) {
	fake.stopReplicationToReplicaRequestMutex.Lock()
	defer fake.stopReplicationToReplicaRequestMutex.Unlock()
	fake.StopReplicationToReplicaRequestStub = nil
	if fake.stopReplicationToReplicaRequestReturnsOnCall == nil {
		fake.stopReplicationToReplicaRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.StopReplicationToReplicaOutput
		})
	}
	fake.stopReplicationToReplicaRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.StopReplicationToReplicaOutput
	}{result1, result2}
}

func (fake *FakeSMClient) StopReplicationToReplicaWithContext(arg1 context.Context, arg2 *secretsmanager.StopReplicationToReplicaInput, arg3 ...request.Option) (*secretsmanager.StopReplicationToReplicaOutput, error) {
	fake.stopReplicationToReplicaWithContextMutex.Lock()
	ret, specificReturn := fake.stopReplicationToReplicaWithContextReturnsOnCall[len(fake.stopReplicationToReplicaWithContextArgsForCall)]
	fake.stopReplicationToReplicaWithContextArgsForCall = append(fake.stopReplicationToReplicaWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.StopReplicationToReplicaInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.StopReplicationToReplicaWithContextStub
	fakeReturns := fake.stopReplicationToReplicaWithContextReturns
	fake.recordInvocation("StopReplicationToReplicaWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopReplicationToReplicaWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) StopReplicationToReplicaWithContextCallCount() int {
	fake.stopReplicationToReplicaWithContextMutex.RLock()
	defer fake.stopReplicationToReplicaWithContextMutex.RUnlock()
	return len(fake.stopReplicationToReplicaWithContextArgsForCall)
}

func (fake *FakeSMClient) StopReplicationToReplicaWithContextCalls(stub func(context.Context, *secretsmanager.StopReplicationToReplicaInput, ...request.Option) (*secretsmanager.StopReplicationToReplicaOutput, error)) {
	fake.stopReplicationToReplicaWithContextMutex.Lock()
	defer fake.stopReplicationToReplicaWithContextMutex.Unlock()
	fake.StopReplicationToReplicaWithContextStub = stub
}

func (fake *FakeSMClient) StopReplicationToReplicaWithContextArgsForCall(i int) (context.Context, *secretsmanager.StopReplicationToReplicaInput, []request.Option) {
	fake.stopReplicationToReplicaWithContextMutex.RLock()
	defer fake.stopReplicationToReplicaWithContextMutex.RUnlock()
	argsForCall := fake.stopReplicationToReplicaWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) StopReplicationToReplicaWithContextReturns(result1 *secretsmanager.StopReplicationToReplicaOutput, result2 error) {
	fake.stopReplicationToReplicaWithContextMutex.Lock()
	defer fake.stopReplicationToReplicaWithContextMutex.Unlock()
	fake.StopReplicationToReplicaWithContextStub = nil
	fake.stopReplicationToReplicaWithContextReturns = struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) StopReplicationToReplicaWithContextReturnsOnCall(i int, result1 *secretsmanager.StopReplicationToReplicaOutput, result2 error) {
	fake.stopReplicationToReplicaWithContextMutex.Lock()
	defer fake.stopReplicationToReplicaWithContextMutex.Unlock()
	fake.StopReplicationToReplicaWithContextStub = nil
	if fake.stopReplicationToReplicaWithContextReturnsOnCall == nil {
		fake.stopReplicationToReplicaWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.StopReplicationToReplicaOutput
			result2 error
		})
	}
	fake.stopReplicationToReplicaWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.StopReplicationToReplicaOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) TagResource(arg1 *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	fake.tagResourceMutex.Lock()
	ret, specificReturn := fake.tagResourceReturnsOnCall[len(fake.tagResourceArgsForCall)]
	fake.tagResourceArgsForCall = append(fake.tagResourceArgsForCall, struct {
		arg1 *secretsmanager.TagResourceInput
	}{arg1})
	stub := fake.TagResourceStub
	fakeReturns := fake.tagResourceReturns
	fake.recordInvocation("TagResource", []interface{}{arg1})
	fake.tagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) TagResourceCallCount() int {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return len(fake.tagResourceArgsForCall)
}

func (fake *FakeSMClient) TagResourceCalls(stub func(*secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error)) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = stub
}

func (fake *FakeSMClient) TagResourceArgsForCall(i int) *secretsmanager.TagResourceInput {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	argsForCall := fake.tagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) TagResourceReturns(result1 *secretsmanager.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	fake.tagResourceReturns = struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) TagResourceReturnsOnCall(i int, result1 *secretsmanager.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	if fake.tagResourceReturnsOnCall == nil {
		fake.tagResourceReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceReturnsOnCall[i] = struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) TagResourceRequest(arg1 *secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	ret, specificReturn := fake.tagResourceRequestReturnsOnCall[len(fake.tagResourceRequestArgsForCall)]
	fake.tagResourceRequestArgsForCall = append(fake.tagResourceRequestArgsForCall, struct {
		arg1 *secretsmanager.TagResourceInput
	}{arg1})
	stub := fake.TagResourceRequestStub
	fakeReturns := fake.tagResourceRequestReturns
	fake.recordInvocation("TagResourceRequest", []interface{}{arg1})
	fake.tagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) TagResourceRequestCallCount() int {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return len(fake.tagResourceRequestArgsForCall)
}

func (fake *FakeSMClient) TagResourceRequestCalls(stub func(*secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput)) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = stub
}

func (fake *FakeSMClient) TagResourceRequestArgsForCall(i int) *secretsmanager.TagResourceInput {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	argsForCall := fake.tagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) TagResourceRequestReturns(result1 *request.Request, result2 *secretsmanager.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	fake.tagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeSMClient) TagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	if fake.tagResourceRequestReturnsOnCall == nil {
		fake.tagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.TagResourceOutput
		})
	}
	fake.tagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeSMClient) TagResourceWithContext(arg1 context.Context, arg2 *secretsmanager.TagResourceInput, arg3 ...request.Option) (*secretsmanager.TagResourceOutput, error) {
	fake.tagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.tagResourceWithContextReturnsOnCall[len(fake.tagResourceWithContextArgsForCall)]
	fake.tagResourceWithContextArgsForCall = append(fake.tagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.TagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TagResourceWithContextStub
	fakeReturns := fake.tagResourceWithContextReturns
	fake.recordInvocation("TagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) TagResourceWithContextCallCount() int {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return len(fake.tagResourceWithContextArgsForCall)
}

func (fake *FakeSMClient) TagResourceWithContextCalls(stub func(context.Context, *secretsmanager.TagResourceInput, ...request.Option) (*secretsmanager.TagResourceOutput, error)) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = stub
}

func (fake *FakeSMClient) TagResourceWithContextArgsForCall(i int) (context.Context, *secretsmanager.TagResourceInput, []request.Option) {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	argsForCall := fake.tagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) TagResourceWithContextReturns(result1 *secretsmanager.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	fake.tagResourceWithContextReturns = struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) TagResourceWithContextReturnsOnCall(i int, result1 *secretsmanager.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	if fake.tagResourceWithContextReturnsOnCall == nil {
		fake.tagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UntagResource(arg1 *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	fake.untagResourceMutex.Lock()
	ret, specificReturn := fake.untagResourceReturnsOnCall[len(fake.untagResourceArgsForCall)]
	fake.untagResourceArgsForCall = append(fake.untagResourceArgsForCall, struct {
		arg1 *secretsmanager.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceStub
	fakeReturns := fake.untagResourceReturns
	fake.recordInvocation("UntagResource", []interface{}{arg1})
	fake.untagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UntagResourceCallCount() int {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return len(fake.untagResourceArgsForCall)
}

func (fake *FakeSMClient) UntagResourceCalls(stub func(*secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error)) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = stub
}

func (fake *FakeSMClient) UntagResourceArgsForCall(i int) *secretsmanager.UntagResourceInput {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	argsForCall := fake.untagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) UntagResourceReturns(result1 *secretsmanager.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	fake.untagResourceReturns = struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UntagResourceReturnsOnCall(i int, result1 *secretsmanager.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	if fake.untagResourceReturnsOnCall == nil {
		fake.untagResourceReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceReturnsOnCall[i] = struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UntagResourceRequest(arg1 *secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	ret, specificReturn := fake.untagResourceRequestReturnsOnCall[len(fake.untagResourceRequestArgsForCall)]
	fake.untagResourceRequestArgsForCall = append(fake.untagResourceRequestArgsForCall, struct {
		arg1 *secretsmanager.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceRequestStub
	fakeReturns := fake.untagResourceRequestReturns
	fake.recordInvocation("UntagResourceRequest", []interface{}{arg1})
	fake.untagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UntagResourceRequestCallCount() int {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return len(fake.untagResourceRequestArgsForCall)
}

func (fake *FakeSMClient) UntagResourceRequestCalls(stub func(*secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput)) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = stub
}

func (fake *FakeSMClient) UntagResourceRequestArgsForCall(i int) *secretsmanager.UntagResourceInput {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	argsForCall := fake.untagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) UntagResourceRequestReturns(result1 *request.Request, result2 *secretsmanager.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	fake.untagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeSMClient) UntagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	if fake.untagResourceRequestReturnsOnCall == nil {
		fake.untagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.UntagResourceOutput
		})
	}
	fake.untagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeSMClient) UntagResourceWithContext(arg1 context.Context, arg2 *secretsmanager.UntagResourceInput, arg3 ...request.Option) (*secretsmanager.UntagResourceOutput, error) {
	fake.untagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.untagResourceWithContextReturnsOnCall[len(fake.untagResourceWithContextArgsForCall)]
	fake.untagResourceWithContextArgsForCall = append(fake.untagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.UntagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UntagResourceWithContextStub
	fakeReturns := fake.untagResourceWithContextReturns
	fake.recordInvocation("UntagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UntagResourceWithContextCallCount() int {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return len(fake.untagResourceWithContextArgsForCall)
}

func (fake *FakeSMClient) UntagResourceWithContextCalls(stub func(context.Context, *secretsmanager.UntagResourceInput, ...request.Option) (*secretsmanager.UntagResourceOutput, error)) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = stub
}

func (fake *FakeSMClient) UntagResourceWithContextArgsForCall(i int) (context.Context, *secretsmanager.UntagResourceInput, []request.Option) {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	argsForCall := fake.untagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) UntagResourceWithContextReturns(result1 *secretsmanager.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	fake.untagResourceWithContextReturns = struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UntagResourceWithContextReturnsOnCall(i int, result1 *secretsmanager.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	if fake.untagResourceWithContextReturnsOnCall == nil {
		fake.untagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecret(arg1 *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	fake.updateSecretMutex.Lock()
	ret, specificReturn := fake.updateSecretReturnsOnCall[len(fake.updateSecretArgsForCall)]
	fake.updateSecretArgsForCall = append(fake.updateSecretArgsForCall, struct {
		arg1 *secretsmanager.UpdateSecretInput
	}{arg1})
	stub := fake.UpdateSecretStub
	fakeReturns := fake.updateSecretReturns
	fake.recordInvocation("UpdateSecret", []interface{}{arg1})
	fake.updateSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UpdateSecretCallCount() int {
	fake.updateSecretMutex.RLock()
	defer fake.updateSecretMutex.RUnlock()
	return len(fake.updateSecretArgsForCall)
}

func (fake *FakeSMClient) UpdateSecretCalls(stub func(*secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error)) {
	fake.updateSecretMutex.Lock()
	defer fake.updateSecretMutex.Unlock()
	fake.UpdateSecretStub = stub
}

func (fake *FakeSMClient) UpdateSecretArgsForCall(i int) *secretsmanager.UpdateSecretInput {
	fake.updateSecretMutex.RLock()
	defer fake.updateSecretMutex.RUnlock()
	argsForCall := fake.updateSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) UpdateSecretReturns(result1 *secretsmanager.UpdateSecretOutput, result2 error) {
	fake.updateSecretMutex.Lock()
	defer fake.updateSecretMutex.Unlock()
	fake.UpdateSecretStub = nil
	fake.updateSecretReturns = struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretReturnsOnCall(i int, result1 *secretsmanager.UpdateSecretOutput, result2 error) {
	fake.updateSecretMutex.Lock()
	defer fake.updateSecretMutex.Unlock()
	fake.UpdateSecretStub = nil
	if fake.updateSecretReturnsOnCall == nil {
		fake.updateSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.UpdateSecretOutput
			result2 error
		})
	}
	fake.updateSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretRequest(arg1 *secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput) {
	fake.updateSecretRequestMutex.Lock()
	ret, specificReturn := fake.updateSecretRequestReturnsOnCall[len(fake.updateSecretRequestArgsForCall)]
	fake.updateSecretRequestArgsForCall = append(fake.updateSecretRequestArgsForCall, struct {
		arg1 *secretsmanager.UpdateSecretInput
	}{arg1})
	stub := fake.UpdateSecretRequestStub
	fakeReturns := fake.updateSecretRequestReturns
	fake.recordInvocation("UpdateSecretRequest", []interface{}{arg1})
	fake.updateSecretRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UpdateSecretRequestCallCount() int {
	fake.updateSecretRequestMutex.RLock()
	defer fake.updateSecretRequestMutex.RUnlock()
	return len(fake.updateSecretRequestArgsForCall)
}

func (fake *FakeSMClient) UpdateSecretRequestCalls(stub func(*secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput)) {
	fake.updateSecretRequestMutex.Lock()
	defer fake.updateSecretRequestMutex.Unlock()
	fake.UpdateSecretRequestStub = stub
}

func (fake *FakeSMClient) UpdateSecretRequestArgsForCall(i int) *secretsmanager.UpdateSecretInput {
	fake.updateSecretRequestMutex.RLock()
	defer fake.updateSecretRequestMutex.RUnlock()
	argsForCall := fake.updateSecretRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) UpdateSecretRequestReturns(result1 *request.Request, result2 *secretsmanager.UpdateSecretOutput) {
	fake.updateSecretRequestMutex.Lock()
	defer fake.updateSecretRequestMutex.Unlock()
	fake.UpdateSecretRequestStub = nil
	fake.updateSecretRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.UpdateSecretOutput) {
	fake.updateSecretRequestMutex.Lock()
	defer fake.updateSecretRequestMutex.Unlock()
	fake.UpdateSecretRequestStub = nil
	if fake.updateSecretRequestReturnsOnCall == nil {
		fake.updateSecretRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.UpdateSecretOutput
		})
	}
	fake.updateSecretRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretOutput
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretVersionStage(arg1 *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	fake.updateSecretVersionStageMutex.Lock()
	ret, specificReturn := fake.updateSecretVersionStageReturnsOnCall[len(fake.updateSecretVersionStageArgsForCall)]
	fake.updateSecretVersionStageArgsForCall = append(fake.updateSecretVersionStageArgsForCall, struct {
		arg1 *secretsmanager.UpdateSecretVersionStageInput
	}{arg1})
	stub := fake.UpdateSecretVersionStageStub
	fakeReturns := fake.updateSecretVersionStageReturns
	fake.recordInvocation("UpdateSecretVersionStage", []interface{}{arg1})
	fake.updateSecretVersionStageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UpdateSecretVersionStageCallCount() int {
	fake.updateSecretVersionStageMutex.RLock()
	defer fake.updateSecretVersionStageMutex.RUnlock()
	return len(fake.updateSecretVersionStageArgsForCall)
}

func (fake *FakeSMClient) UpdateSecretVersionStageCalls(stub func(*secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error)) {
	fake.updateSecretVersionStageMutex.Lock()
	defer fake.updateSecretVersionStageMutex.Unlock()
	fake.UpdateSecretVersionStageStub = stub
}

func (fake *FakeSMClient) UpdateSecretVersionStageArgsForCall(i int) *secretsmanager.UpdateSecretVersionStageInput {
	fake.updateSecretVersionStageMutex.RLock()
	defer fake.updateSecretVersionStageMutex.RUnlock()
	argsForCall := fake.updateSecretVersionStageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) UpdateSecretVersionStageReturns(result1 *secretsmanager.UpdateSecretVersionStageOutput, result2 error) {
	fake.updateSecretVersionStageMutex.Lock()
	defer fake.updateSecretVersionStageMutex.Unlock()
	fake.UpdateSecretVersionStageStub = nil
	fake.updateSecretVersionStageReturns = struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretVersionStageReturnsOnCall(i int, result1 *secretsmanager.UpdateSecretVersionStageOutput, result2 error) {
	fake.updateSecretVersionStageMutex.Lock()
	defer fake.updateSecretVersionStageMutex.Unlock()
	fake.UpdateSecretVersionStageStub = nil
	if fake.updateSecretVersionStageReturnsOnCall == nil {
		fake.updateSecretVersionStageReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.UpdateSecretVersionStageOutput
			result2 error
		})
	}
	fake.updateSecretVersionStageReturnsOnCall[i] = struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretVersionStageRequest(arg1 *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput) {
	fake.updateSecretVersionStageRequestMutex.Lock()
	ret, specificReturn := fake.updateSecretVersionStageRequestReturnsOnCall[len(fake.updateSecretVersionStageRequestArgsForCall)]
	fake.updateSecretVersionStageRequestArgsForCall = append(fake.updateSecretVersionStageRequestArgsForCall, struct {
		arg1 *secretsmanager.UpdateSecretVersionStageInput
	}{arg1})
	stub := fake.UpdateSecretVersionStageRequestStub
	fakeReturns := fake.updateSecretVersionStageRequestReturns
	fake.recordInvocation("UpdateSecretVersionStageRequest", []interface{}{arg1})
	fake.updateSecretVersionStageRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UpdateSecretVersionStageRequestCallCount() int {
	fake.updateSecretVersionStageRequestMutex.RLock()
	defer fake.updateSecretVersionStageRequestMutex.RUnlock()
	return len(fake.updateSecretVersionStageRequestArgsForCall)
}

func (fake *FakeSMClient) UpdateSecretVersionStageRequestCalls(stub func(*secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput)) {
	fake.updateSecretVersionStageRequestMutex.Lock()
	defer fake.updateSecretVersionStageRequestMutex.Unlock()
	fake.UpdateSecretVersionStageRequestStub = stub
}

func (fake *FakeSMClient) UpdateSecretVersionStageRequestArgsForCall(i int) *secretsmanager.UpdateSecretVersionStageInput {
	fake.updateSecretVersionStageRequestMutex.RLock()
	defer fake.updateSecretVersionStageRequestMutex.RUnlock()
	argsForCall := fake.updateSecretVersionStageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) UpdateSecretVersionStageRequestReturns(result1 *request.Request, result2 *secretsmanager.UpdateSecretVersionStageOutput) {
	fake.updateSecretVersionStageRequestMutex.Lock()
	defer fake.updateSecretVersionStageRequestMutex.Unlock()
	fake.UpdateSecretVersionStageRequestStub = nil
	fake.updateSecretVersionStageRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretVersionStageOutput
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretVersionStageRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.UpdateSecretVersionStageOutput) {
	fake.updateSecretVersionStageRequestMutex.Lock()
	defer fake.updateSecretVersionStageRequestMutex.Unlock()
	fake.UpdateSecretVersionStageRequestStub = nil
	if fake.updateSecretVersionStageRequestReturnsOnCall == nil {
		fake.updateSecretVersionStageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.UpdateSecretVersionStageOutput
		})
	}
	fake.updateSecretVersionStageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.UpdateSecretVersionStageOutput
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretVersionStageWithContext(arg1 context.Context, arg2 *secretsmanager.UpdateSecretVersionStageInput, arg3 ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	fake.updateSecretVersionStageWithContextMutex.Lock()
	ret, specificReturn := fake.updateSecretVersionStageWithContextReturnsOnCall[len(fake.updateSecretVersionStageWithContextArgsForCall)]
	fake.updateSecretVersionStageWithContextArgsForCall = append(fake.updateSecretVersionStageWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.UpdateSecretVersionStageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateSecretVersionStageWithContextStub
	fakeReturns := fake.updateSecretVersionStageWithContextReturns
	fake.recordInvocation("UpdateSecretVersionStageWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSecretVersionStageWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UpdateSecretVersionStageWithContextCallCount() int {
	fake.updateSecretVersionStageWithContextMutex.RLock()
	defer fake.updateSecretVersionStageWithContextMutex.RUnlock()
	return len(fake.updateSecretVersionStageWithContextArgsForCall)
}

func (fake *FakeSMClient) UpdateSecretVersionStageWithContextCalls(stub func(context.Context, *secretsmanager.UpdateSecretVersionStageInput, ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error)) {
	fake.updateSecretVersionStageWithContextMutex.Lock()
	defer fake.updateSecretVersionStageWithContextMutex.Unlock()
	fake.UpdateSecretVersionStageWithContextStub = stub
}

func (fake *FakeSMClient) UpdateSecretVersionStageWithContextArgsForCall(i int) (context.Context, *secretsmanager.UpdateSecretVersionStageInput, []request.Option) {
	fake.updateSecretVersionStageWithContextMutex.RLock()
	defer fake.updateSecretVersionStageWithContextMutex.RUnlock()
	argsForCall := fake.updateSecretVersionStageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) UpdateSecretVersionStageWithContextReturns(result1 *secretsmanager.UpdateSecretVersionStageOutput, result2 error) {
	fake.updateSecretVersionStageWithContextMutex.Lock()
	defer fake.updateSecretVersionStageWithContextMutex.Unlock()
	fake.UpdateSecretVersionStageWithContextStub = nil
	fake.updateSecretVersionStageWithContextReturns = struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretVersionStageWithContextReturnsOnCall(i int, result1 *secretsmanager.UpdateSecretVersionStageOutput, result2 error) {
	fake.updateSecretVersionStageWithContextMutex.Lock()
	defer fake.updateSecretVersionStageWithContextMutex.Unlock()
	fake.UpdateSecretVersionStageWithContextStub = nil
	if fake.updateSecretVersionStageWithContextReturnsOnCall == nil {
		fake.updateSecretVersionStageWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.UpdateSecretVersionStageOutput
			result2 error
		})
	}
	fake.updateSecretVersionStageWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.UpdateSecretVersionStageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretWithContext(arg1 context.Context, arg2 *secretsmanager.UpdateSecretInput, arg3 ...request.Option) (*secretsmanager.UpdateSecretOutput, error) {
	fake.updateSecretWithContextMutex.Lock()
	ret, specificReturn := fake.updateSecretWithContextReturnsOnCall[len(fake.updateSecretWithContextArgsForCall)]
	fake.updateSecretWithContextArgsForCall = append(fake.updateSecretWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.UpdateSecretInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateSecretWithContextStub
	fakeReturns := fake.updateSecretWithContextReturns
	fake.recordInvocation("UpdateSecretWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSecretWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) UpdateSecretWithContextCallCount() int {
	fake.updateSecretWithContextMutex.RLock()
	defer fake.updateSecretWithContextMutex.RUnlock()
	return len(fake.updateSecretWithContextArgsForCall)
}

func (fake *FakeSMClient) UpdateSecretWithContextCalls(stub func(context.Context, *secretsmanager.UpdateSecretInput, ...request.Option) (*secretsmanager.UpdateSecretOutput, error)) {
	fake.updateSecretWithContextMutex.Lock()
	defer fake.updateSecretWithContextMutex.Unlock()
	fake.UpdateSecretWithContextStub = stub
}

func (fake *FakeSMClient) UpdateSecretWithContextArgsForCall(i int) (context.Context, *secretsmanager.UpdateSecretInput, []request.Option) {
	fake.updateSecretWithContextMutex.RLock()
	defer fake.updateSecretWithContextMutex.RUnlock()
	argsForCall := fake.updateSecretWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) UpdateSecretWithContextReturns(result1 *secretsmanager.UpdateSecretOutput, result2 error) {
	fake.updateSecretWithContextMutex.Lock()
	defer fake.updateSecretWithContextMutex.Unlock()
	fake.UpdateSecretWithContextStub = nil
	fake.updateSecretWithContextReturns = struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) UpdateSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.UpdateSecretOutput, result2 error) {
	fake.updateSecretWithContextMutex.Lock()
	defer fake.updateSecretWithContextMutex.Unlock()
	fake.UpdateSecretWithContextStub = nil
	if fake.updateSecretWithContextReturnsOnCall == nil {
		fake.updateSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.UpdateSecretOutput
			result2 error
		})
	}
	fake.updateSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.UpdateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ValidateResourcePolicy(arg1 *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	fake.validateResourcePolicyMutex.Lock()
	ret, specificReturn := fake.validateResourcePolicyReturnsOnCall[len(fake.validateResourcePolicyArgsForCall)]
	fake.validateResourcePolicyArgsForCall = append(fake.validateResourcePolicyArgsForCall, struct {
		arg1 *secretsmanager.ValidateResourcePolicyInput
	}{arg1})
	stub := fake.ValidateResourcePolicyStub
	fakeReturns := fake.validateResourcePolicyReturns
	fake.recordInvocation("ValidateResourcePolicy", []interface{}{arg1})
	fake.validateResourcePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ValidateResourcePolicyCallCount() int {
	fake.validateResourcePolicyMutex.RLock()
	defer fake.validateResourcePolicyMutex.RUnlock()
	return len(fake.validateResourcePolicyArgsForCall)
}

func (fake *FakeSMClient) ValidateResourcePolicyCalls(stub func(*secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error)) {
	fake.validateResourcePolicyMutex.Lock()
	defer fake.validateResourcePolicyMutex.Unlock()
	fake.ValidateResourcePolicyStub = stub
}

func (fake *FakeSMClient) ValidateResourcePolicyArgsForCall(i int) *secretsmanager.ValidateResourcePolicyInput {
	fake.validateResourcePolicyMutex.RLock()
	defer fake.validateResourcePolicyMutex.RUnlock()
	argsForCall := fake.validateResourcePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ValidateResourcePolicyReturns(result1 *secretsmanager.ValidateResourcePolicyOutput, result2 error) {
	fake.validateResourcePolicyMutex.Lock()
	defer fake.validateResourcePolicyMutex.Unlock()
	fake.ValidateResourcePolicyStub = nil
	fake.validateResourcePolicyReturns = struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ValidateResourcePolicyReturnsOnCall(i int, result1 *secretsmanager.ValidateResourcePolicyOutput, result2 error) {
	fake.validateResourcePolicyMutex.Lock()
	defer fake.validateResourcePolicyMutex.Unlock()
	fake.ValidateResourcePolicyStub = nil
	if fake.validateResourcePolicyReturnsOnCall == nil {
		fake.validateResourcePolicyReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ValidateResourcePolicyOutput
			result2 error
		})
	}
	fake.validateResourcePolicyReturnsOnCall[i] = struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ValidateResourcePolicyRequest(arg1 *secretsmanager.ValidateResourcePolicyInput) (*request.Request, *secretsmanager.ValidateResourcePolicyOutput) {
	fake.validateResourcePolicyRequestMutex.Lock()
	ret, specificReturn := fake.validateResourcePolicyRequestReturnsOnCall[len(fake.validateResourcePolicyRequestArgsForCall)]
	fake.validateResourcePolicyRequestArgsForCall = append(fake.validateResourcePolicyRequestArgsForCall, struct {
		arg1 *secretsmanager.ValidateResourcePolicyInput
	}{arg1})
	stub := fake.ValidateResourcePolicyRequestStub
	fakeReturns := fake.validateResourcePolicyRequestReturns
	fake.recordInvocation("ValidateResourcePolicyRequest", []interface{}{arg1})
	fake.validateResourcePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ValidateResourcePolicyRequestCallCount() int {
	fake.validateResourcePolicyRequestMutex.RLock()
	defer fake.validateResourcePolicyRequestMutex.RUnlock()
	return len(fake.validateResourcePolicyRequestArgsForCall)
}

func (fake *FakeSMClient) ValidateResourcePolicyRequestCalls(stub func(*secretsmanager.ValidateResourcePolicyInput) (*request.Request, *secretsmanager.ValidateResourcePolicyOutput)) {
	fake.validateResourcePolicyRequestMutex.Lock()
	defer fake.validateResourcePolicyRequestMutex.Unlock()
	fake.ValidateResourcePolicyRequestStub = stub
}

func (fake *FakeSMClient) ValidateResourcePolicyRequestArgsForCall(i int) *secretsmanager.ValidateResourcePolicyInput {
	fake.validateResourcePolicyRequestMutex.RLock()
	defer fake.validateResourcePolicyRequestMutex.RUnlock()
	argsForCall := fake.validateResourcePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSMClient) ValidateResourcePolicyRequestReturns(result1 *request.Request, result2 *secretsmanager.ValidateResourcePolicyOutput) {
	fake.validateResourcePolicyRequestMutex.Lock()
	defer fake.validateResourcePolicyRequestMutex.Unlock()
	fake.ValidateResourcePolicyRequestStub = nil
	fake.validateResourcePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *secretsmanager.ValidateResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ValidateResourcePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *secretsmanager.ValidateResourcePolicyOutput) {
	fake.validateResourcePolicyRequestMutex.Lock()
	defer fake.validateResourcePolicyRequestMutex.Unlock()
	fake.ValidateResourcePolicyRequestStub = nil
	if fake.validateResourcePolicyRequestReturnsOnCall == nil {
		fake.validateResourcePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *secretsmanager.ValidateResourcePolicyOutput
		})
	}
	fake.validateResourcePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *secretsmanager.ValidateResourcePolicyOutput
	}{result1, result2}
}

func (fake *FakeSMClient) ValidateResourcePolicyWithContext(arg1 context.Context, arg2 *secretsmanager.ValidateResourcePolicyInput, arg3 ...request.Option) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	fake.validateResourcePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.validateResourcePolicyWithContextReturnsOnCall[len(fake.validateResourcePolicyWithContextArgsForCall)]
	fake.validateResourcePolicyWithContextArgsForCall = append(fake.validateResourcePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *secretsmanager.ValidateResourcePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ValidateResourcePolicyWithContextStub
	fakeReturns := fake.validateResourcePolicyWithContextReturns
	fake.recordInvocation("ValidateResourcePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.validateResourcePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSMClient) ValidateResourcePolicyWithContextCallCount() int {
	fake.validateResourcePolicyWithContextMutex.RLock()
	defer fake.validateResourcePolicyWithContextMutex.RUnlock()
	return len(fake.validateResourcePolicyWithContextArgsForCall)
}

func (fake *FakeSMClient) ValidateResourcePolicyWithContextCalls(stub func(context.Context, *secretsmanager.ValidateResourcePolicyInput, ...request.Option) (*secretsmanager.ValidateResourcePolicyOutput, error)) {
	fake.validateResourcePolicyWithContextMutex.Lock()
	defer fake.validateResourcePolicyWithContextMutex.Unlock()
	fake.ValidateResourcePolicyWithContextStub = stub
}

func (fake *FakeSMClient) ValidateResourcePolicyWithContextArgsForCall(i int) (context.Context, *secretsmanager.ValidateResourcePolicyInput, []request.Option) {
	fake.validateResourcePolicyWithContextMutex.RLock()
	defer fake.validateResourcePolicyWithContextMutex.RUnlock()
	argsForCall := fake.validateResourcePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSMClient) ValidateResourcePolicyWithContextReturns(result1 *secretsmanager.ValidateResourcePolicyOutput, result2 error) {
	fake.validateResourcePolicyWithContextMutex.Lock()
	defer fake.validateResourcePolicyWithContextMutex.Unlock()
	fake.ValidateResourcePolicyWithContextStub = nil
	fake.validateResourcePolicyWithContextReturns = struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) ValidateResourcePolicyWithContextReturnsOnCall(i int, result1 *secretsmanager.ValidateResourcePolicyOutput, result2 error) {
	fake.validateResourcePolicyWithContextMutex.Lock()
	defer fake.validateResourcePolicyWithContextMutex.Unlock()
	fake.ValidateResourcePolicyWithContextStub = nil
	if fake.validateResourcePolicyWithContextReturnsOnCall == nil {
		fake.validateResourcePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.ValidateResourcePolicyOutput
			result2 error
		})
	}
	fake.validateResourcePolicyWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.ValidateResourcePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSMClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelRotateSecretMutex.RLock()
	defer fake.cancelRotateSecretMutex.RUnlock()
	fake.cancelRotateSecretRequestMutex.RLock()
	defer fake.cancelRotateSecretRequestMutex.RUnlock()
	fake.cancelRotateSecretWithContextMutex.RLock()
	defer fake.cancelRotateSecretWithContextMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.createSecretRequestMutex.RLock()
	defer fake.createSecretRequestMutex.RUnlock()
	fake.createSecretWithContextMutex.RLock()
	defer fake.createSecretWithContextMutex.RUnlock()
	fake.deleteResourcePolicyMutex.RLock()
	defer fake.deleteResourcePolicyMutex.RUnlock()
	fake.deleteResourcePolicyRequestMutex.RLock()
	defer fake.deleteResourcePolicyRequestMutex.RUnlock()
	fake.deleteResourcePolicyWithContextMutex.RLock()
	defer fake.deleteResourcePolicyWithContextMutex.RUnlock()
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	fake.deleteSecretRequestMutex.RLock()
	defer fake.deleteSecretRequestMutex.RUnlock()
	fake.deleteSecretWithContextMutex.RLock()
	defer fake.deleteSecretWithContextMutex.RUnlock()
	fake.describeSecretMutex.RLock()
	defer fake.describeSecretMutex.RUnlock()
	fake.describeSecretRequestMutex.RLock()
	defer fake.describeSecretRequestMutex.RUnlock()
	fake.describeSecretWithContextMutex.RLock()
	defer fake.describeSecretWithContextMutex.RUnlock()
	fake.getRandomPasswordMutex.RLock()
	defer fake.getRandomPasswordMutex.RUnlock()
	fake.getRandomPasswordRequestMutex.RLock()
	defer fake.getRandomPasswordRequestMutex.RUnlock()
	fake.getRandomPasswordWithContextMutex.RLock()
	defer fake.getRandomPasswordWithContextMutex.RUnlock()
	fake.getResourcePolicyMutex.RLock()
	defer fake.getResourcePolicyMutex.RUnlock()
	fake.getResourcePolicyRequestMutex.RLock()
	defer fake.getResourcePolicyRequestMutex.RUnlock()
	fake.getResourcePolicyWithContextMutex.RLock()
	defer fake.getResourcePolicyWithContextMutex.RUnlock()
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	fake.getSecretValueRequestMutex.RLock()
	defer fake.getSecretValueRequestMutex.RUnlock()
	fake.getSecretValueWithContextMutex.RLock()
	defer fake.getSecretValueWithContextMutex.RUnlock()
	fake.listSecretVersionIdsMutex.RLock()
	defer fake.listSecretVersionIdsMutex.RUnlock()
	fake.listSecretVersionIdsPagesMutex.RLock()
	defer fake.listSecretVersionIdsPagesMutex.RUnlock()
	fake.listSecretVersionIdsPagesWithContextMutex.RLock()
	defer fake.listSecretVersionIdsPagesWithContextMutex.RUnlock()
	fake.listSecretVersionIdsRequestMutex.RLock()
	defer fake.listSecretVersionIdsRequestMutex.RUnlock()
	fake.listSecretVersionIdsWithContextMutex.RLock()
	defer fake.listSecretVersionIdsWithContextMutex.RUnlock()
	fake.listSecretsMutex.RLock()
	defer fake.listSecretsMutex.RUnlock()
	fake.listSecretsPagesMutex.RLock()
	defer fake.listSecretsPagesMutex.RUnlock()
	fake.listSecretsPagesWithContextMutex.RLock()
	defer fake.listSecretsPagesWithContextMutex.RUnlock()
	fake.listSecretsRequestMutex.RLock()
	defer fake.listSecretsRequestMutex.RUnlock()
	fake.listSecretsWithContextMutex.RLock()
	defer fake.listSecretsWithContextMutex.RUnlock()
	fake.putResourcePolicyMutex.RLock()
	defer fake.putResourcePolicyMutex.RUnlock()
	fake.putResourcePolicyRequestMutex.RLock()
	defer fake.putResourcePolicyRequestMutex.RUnlock()
	fake.putResourcePolicyWithContextMutex.RLock()
	defer fake.putResourcePolicyWithContextMutex.RUnlock()
	fake.putSecretValueMutex.RLock()
	defer fake.putSecretValueMutex.RUnlock()
	fake.putSecretValueRequestMutex.RLock()
	defer fake.putSecretValueRequestMutex.RUnlock()
	fake.putSecretValueWithContextMutex.RLock()
	defer fake.putSecretValueWithContextMutex.RUnlock()
	fake.removeRegionsFromReplicationMutex.RLock()
	defer fake.removeRegionsFromReplicationMutex.RUnlock()
	fake.removeRegionsFromReplicationRequestMutex.RLock()
	defer fake.removeRegionsFromReplicationRequestMutex.RUnlock()
	fake.removeRegionsFromReplicationWithContextMutex.RLock()
	defer fake.removeRegionsFromReplicationWithContextMutex.RUnlock()
	fake.replicateSecretToRegionsMutex.RLock()
	defer fake.replicateSecretToRegionsMutex.RUnlock()
	fake.replicateSecretToRegionsRequestMutex.RLock()
	defer fake.replicateSecretToRegionsRequestMutex.RUnlock()
	fake.replicateSecretToRegionsWithContextMutex.RLock()
	defer fake.replicateSecretToRegionsWithContextMutex.RUnlock()
	fake.restoreSecretMutex.RLock()
	defer fake.restoreSecretMutex.RUnlock()
	fake.restoreSecretRequestMutex.RLock()
	defer fake.restoreSecretRequestMutex.RUnlock()
	fake.restoreSecretWithContextMutex.RLock()
	defer fake.restoreSecretWithContextMutex.RUnlock()
	fake.rotateSecretMutex.RLock()
	defer fake.rotateSecretMutex.RUnlock()
	fake.rotateSecretRequestMutex.RLock()
	defer fake.rotateSecretRequestMutex.RUnlock()
	fake.rotateSecretWithContextMutex.RLock()
	defer fake.rotateSecretWithContextMutex.RUnlock()
	fake.stopReplicationToReplicaMutex.RLock()
	defer fake.stopReplicationToReplicaMutex.RUnlock()
	fake.stopReplicationToReplicaRequestMutex.RLock()
	defer fake.stopReplicationToReplicaRequestMutex.RUnlock()
	fake.stopReplicationToReplicaWithContextMutex.RLock()
	defer fake.stopReplicationToReplicaWithContextMutex.RUnlock()
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	fake.updateSecretMutex.RLock()
	defer fake.updateSecretMutex.RUnlock()
	fake.updateSecretRequestMutex.RLock()
	defer fake.updateSecretRequestMutex.RUnlock()
	fake.updateSecretVersionStageMutex.RLock()
	defer fake.updateSecretVersionStageMutex.RUnlock()
	fake.updateSecretVersionStageRequestMutex.RLock()
	defer fake.updateSecretVersionStageRequestMutex.RUnlock()
	fake.updateSecretVersionStageWithContextMutex.RLock()
	defer fake.updateSecretVersionStageWithContextMutex.RUnlock()
	fake.updateSecretWithContextMutex.RLock()
	defer fake.updateSecretWithContextMutex.RUnlock()
	fake.validateResourcePolicyMutex.RLock()
	defer fake.validateResourcePolicyMutex.RUnlock()
	fake.validateResourcePolicyRequestMutex.RLock()
	defer fake.validateResourcePolicyRequestMutex.RUnlock()
	fake.validateResourcePolicyWithContextMutex.RLock()
	defer fake.validateResourcePolicyWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSMClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ environment.SMClient = new(FakeSMClient)
